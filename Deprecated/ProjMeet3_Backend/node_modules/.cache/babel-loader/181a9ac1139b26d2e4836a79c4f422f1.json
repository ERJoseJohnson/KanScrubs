{"ast":null,"code":"\"use strict\";\n\nconst DataStoreType = require(\"./lib/config/config\").DataStoreType;\n\nconst Core = require(\"./lib/Core\").Core;\n\nconst ErrorManager = require(\"./lib/common/ErrorManager\").ErrorManager;\n\nconst utils = require(\"./lib/common/Utils\");\n/**\r\n * @enum { String }\r\n *\r\n*/\n\n\nlet Type = {\n  home: \"home\",\n  work: \"work\",\n  other: \"other\"\n};\n/**\r\n * @enum { String }\r\n *\r\n*/\n\nlet DeviceType = {\n  landline: \"landline\",\n  mobile: \"mobile\",\n  fax: \"fax\",\n  other: \"other\"\n};\n\nfunction uncaughtException(err) {\n  console.error('Possibly uncaughtException err : ', err);\n}\n\nfunction warning(err) {\n  console.error('Possibly unhandledRejection err : ', err);\n}\n\nfunction unhandledRejection(reason, p) {\n  console.error('Possibly Unhandled Rejection at: Promise ', p, \" reason: \", reason);\n}\n/**\r\n * @typedef {Object} Email\r\n * @property {String} email User email address\r\n * @property {Type} type Email type, one of home, work, other\r\n *\r\n\r\n /*\r\n * Phone number objects can\r\n * be created by user (information filled by user),\r\n * come from association with a system (pbx) device (association is done by admin).\r\n * @typedef {Object} PhoneNumber\r\n * @property {String} phoneNumberId Phone number unique id in directory collection.\r\n * @property {String} number User phone number (as entered by user)\r\n * @property {String} numberE164 User E.164 phone number, computed by server from number and country fields\r\n * @property {String} country Phone number country (ISO 3166-1 alpha3 format). Used to compute numberE164 field from number field.\r\n * @property {Boolean} isFromSystem Boolean indicating if phone is linked to a system (pbx).\r\n * @property {String} shortNumber [Only for phone numbers linked to a system (pbx)]\r\n * If phone is linked to a system (pbx), short phone number (corresponds to the number monitored by PCG).\r\n * Only usable within the same PBX.\r\n * Only PCG can set this field.\r\n * @property {String} internalNumber [Only for phone numbers linked to a system (pbx)]\r\n * If phone is linked to a system (pbx), internal phone number.\r\n * Usable within a PBX group.\r\n * Admins and users can modify this internalNumber field.\r\n * @property {String} systemId [Only for phone numbers linked to a system (pbx)]\r\n * If phone is linked to a system (pbx), unique identifier of that system in Rainbow database.\r\n * pbxId String [Only for phone numbers linked to a system (pbx)]\r\n * If phone is linked to a system (pbx), unique identifier of that pbx.\r\n * @property {Type} type Phone number type, one of home, work, other.\r\n * @property {DeviceType} deviceType Phone number device type, one of landline, mobile, fax, other.\r\n *\r\n\r\n/*\r\n * @typedef {Object} ConnectedUser User corresponding to the logged in user\r\n * @property {String} id\r\n * @property {String} id User unique identifier\r\n * @property {String} loginEmail User email address (used for login)\r\n * @property {String} firstName User first name\r\n * @property {String} lastName User last name\r\n * @property {String} displayName User display name (firstName + lastName concatenated on server side)\r\n * @property {String} nickName User nickName\r\n * @property {String} title User title (honorifics title, like Mr, Mrs, Sir, Lord, Lady, Dr, Prof,...)\r\n * @property {String} jobTitle User job title\r\n * @property {Email[]} emails Array of user emails addresses objects\r\n * @property {PhoneNumber[]} phoneNumbers Array of user phone numbers objects.\r\n * Phone number objects can\r\n * be created by user (information filled by user),\r\n * come from association with a system (pbx) device (association is done by admin).\r\n * @property {String} country User country (ISO 3166-1 alpha3 format)\r\n * @property {String} language User language (ISO 639-1 code format, with possibility of regional variation. Ex: both 'en' and 'en-US' are supported)\r\n * @property {String} timezone User timezone name\r\n * @property {String} jid_im User Jabber IM identifier\r\n * @property {String} jid_tel User Jabber TEL identifier\r\n * @property {String} jid_password User Jabber TEL identifier\r\n * @property {String[]} roles List of user roles (Array of String)\r\n * @property {String} adminType In case of user's is 'admin', define the subtype (organisation_admin, company_admin, site_admin (default undefined)\r\n * @property {String} companyId User company unique identifier\r\n * @property {String} organisationId In addition to User companyId, optional identifier to indicate the user belongs also to an organization\r\n * @property {String} siteId In addition to User companyId, optional identifier to indicate the user belongs also to a site\r\n * @property {String} companyName User company name\r\n * @property {Boolean} isInDefaultCompany Is user in default company\r\n * Only returned if retrieved user data corresponds to logged in user or if logged in user is admin of the retrieved user\r\n * @property {Boolean} isActive Is user active\r\n * @property {Boolean} isInitialized Is user initialized\r\n * @property {DateTime} initializationDate User initialization date\r\n * @property {DateTime} activationDate User activation date\r\n * @property {DateTime} creationDate User creation date\r\n * @property {DateTime} lastUpdateDate Date of last user update (whatever the field updated)\r\n * @property {DateTime} lastAvatarUpdateDate Date of last user avatar create/update, null if no avatar\r\n */\n\n/**\r\n * @class\r\n * @name NodeSDK\r\n * @description\r\n *      This module is the core module of the Rainbow SDK for Node.JS <br>.\r\n *      It gives access to the other modules and allow to start/stop the SDK\r\n *      <br><br>\r\n *      The main methods proposed in that module allow to: <br>\r\n *      - Access to each module like Bubbles, Contacts...<br>\r\n *      - Access to Event module <br>\r\n *      - Start and stop the SDK <br>\r\n *      - Get the version number <br>\r\n *      - Get the SDK internal state\r\n *\r\n *      Warning: Before deploying in production a bot that can generate heavy traffic, please contact ALE.\r\n */\n\n\nclass NodeSDK {\n  /**\r\n   * @method constructor\r\n   * @public\r\n   * @description\r\n   *      The entry point of the Rainbow Node SDK\r\n   * @param {{rainbow: {host: string}, application: {appID: string, appSecret: string}, im: {sendReadReceipt: boolean, sendMessageToConnectedUser: boolean, conversationsRetrievedFormat: string, copyMessage: boolean, storeMessages: boolean, messageMaxLength: number}, credentials: {password: string, login: string}, logs: {file: {zippedArchive: boolean, path: string, customFileName: string}, color: boolean, level: string, \"system-dev\": {http: boolean, internals: boolean}, enableFileLogs: boolean, customLabel: string, enableConsoleLogs: boolean}, servicesToStart: {favorites: {start_up: boolean}, fileStorage: {start_up: boolean}, webrtc: {start_up: boolean, optional: boolean}, channels: {start_up: boolean}, calllog: {start_up: boolean}, telephony: {start_up: boolean}, admin: {start_up: boolean}, bubbles: {start_up: boolean}, fileServer: {start_up: boolean}}}} options : The options provided to manage the SDK behavior <br>\r\n   *   \"rainbow\": {<br>\r\n   *       \"host\": \"official\", // Can be \"sandbox\" (developer platform), \"official\" or any other hostname when using dedicated AIO<br>\r\n   *       \"mode\": \"xmpp\" // The event mode used to receive the events. Can be `xmpp` or `s2s` (default : `xmpp`)\r\n   *    },<br>\r\n   *   \"s2s\": {\r\n   *      \"hostCallback\": \"http://3d260881.ngrok.io\", // S2S Callback URL used to receive events on internet\r\n   *      \"locallistenningport\": \"4000\" // Local port where the events must be forwarded from S2S Callback Web server.\r\n  *    },\r\n   *   \"credentials\": {<br>\r\n   *       \"login\": \"user@xxxx.xxx\",  // The Rainbow email account to use<br>\r\n   *       \"password\": \"XXXXX\",<br>\r\n   *   },<br>\r\n   *   // Application identifier<br>\r\n   *   \"application\": {<br>\r\n   *       \"appID\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXX\", // The Rainbow Application Identifier<br>\r\n   *       \"appSecret\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", // The Rainbow Application Secret<br>\r\n   *   },<br>\r\n   *   // Proxy configuration<br>\r\n   *   \"proxy\": {<br>\r\n   *       \"host\": \"xxx.xxx.xxx.xxx\",<br>\r\n   *       \"port\": xxxx,<br>\r\n   *       \"protocol\": \"http\",<br>\r\n   *       \"user\": \"proxyuser\",<br>\r\n   *       \"password\": \"XXXXX\",<br>\r\n   *   },<br>\r\n   *   // Logs options<br>\r\n   *   \"logs\": {<br>\r\n   *       \"enableConsoleLogs\": false, Activate logs on the console<br>\r\n   *       \"enableFileLogs\": false, Activate the logs in a file<br>\r\n   *       \"color\": true, Activate the ansii color in the log (more humain readable, but need a term console or reader compatible (ex : vim + AnsiEsc module)) <br>\r\n   *       \"level\": \"info\", The level of logs. The value can be \"info\", \"debug\", \"warn\", \"error\"<br>\r\n   *       \"customLabel\": \"MyRBProject\", A label inserted in every lines of the logs. It is usefull if you use multiple SDK instances at a same time. It allows to separate logs in console.<br>\r\n   *       \"file\": {<br>\r\n   *           \"path\": \"c:/temp/\", Path to the log file<br>\r\n   *           \"customFileName\": \"R-SDK-Node-MyRBProject\", A label inserted in the name of the log file<br>\r\n   *           \"zippedArchive\": false Can activate a zip of file. It needs CPU process, so avoid it.<br>\r\n   *       }<br>\r\n   *   },<br>\r\n   *   \"testOutdatedVersion\": true, Parameter to verify at startup if the current SDK Version is the lastest published on npmjs.com.<br>\r\n   *   // IM options<br>\r\n   *   \"im\": {<br>\r\n   *       \"sendReadReceipt\": true, Allow to automatically send back a 'read' status of the received message. Usefull for Bots.<br>\r\n   *       \"messageMaxLength\": 1024, Maximum size of messages send by rainbow. Note that this value should not be modified without ALE Agreement.<br>\r\n   *       \"sendMessageToConnectedUser\": false, Forbid the SDK to send a message to the connected user it self. This is to avoid bot loopback.<br>\r\n   *       \"conversationsRetrievedFormat\": \"small\", Set the size of the conversation's content retrieved from server. Can be `small`, `medium`, `full`<br>\r\n   *       @deprecated \"storeMessages\": false, Tell the server to store the message for delay distribution and also for history. Please avoid to set it to true for a bot which will not read anymore the messages. It is a better way to store it in your own CPaaS application<br>\r\n   *       \"nbMaxConversations\": 15, Parameter to set the maximum number of conversations to keep (defaut value to 15). Old ones are remove from XMPP server with the new method `ConversationsService::removeOlderConversations`.<br>\r\n   *       \"rateLimitPerHour\": 1000, Parameter to set the maximum of \"message\" stanza sent to server by hour. Default value is 1000.<br>\r\n   *       \"messagesDataStore\": Parameter to override the storeMessages parameter of the SDK to define the behaviour of the storage of the messages (Enum DataStoreType in lib/config/config , default value \"DataStoreType.UsestoreMessagesField\" so it follows the storeMessages behaviour)<br>\r\n   *                          DataStoreType.NoStore Tell the server to NOT store the messages for delay distribution or for history of the bot and the contact.<br>\r\n   *                          DataStoreType.NoPermanentStore Tell the server to NOT store the messages for history of the bot and the contact. But being stored temporarily as a normal part of delivery (e.g. if the recipient is offline at the time of sending).<br>\r\n   *                          DataStoreType.StoreTwinSide The messages are fully stored.<br>\r\n   *                          DataStoreType.UsestoreMessagesField to follow the storeMessages SDK's parameter behaviour.<br>\r\n   *   },<br>\r\n   *   // Services to start. This allows to start the SDK with restricted number of services, so there are less call to API.<br>\r\n   *   // Take care, severals services are linked, so disabling a service can disturb an other one.<br>\r\n   *   // By default all the services are started. Events received from server are not yet filtered.<br>\r\n   *   // So this feature is realy risky, and should be used with much more cautions.<br>\r\n   *   \"servicesToStart\": {<br>\r\n   *       \"bubbles\": {<br>\r\n   *           \"start_up\": true,<br>\r\n   *       },<br>\r\n   *       \"telephony\": {<br>\r\n   *           \"start_up\": true,<br>\r\n   *       },<br>\r\n   *       \"channels\": {<br>\r\n   *           \"start_up\": true,<br>\r\n   *       },<br>\r\n   *       \"admin\": {<br>\r\n   *           \"start_up\": true,<br>\r\n   *       },<br>\r\n   *       \"fileServer\": {<br>\r\n   *           \"start_up\": true,<br>\r\n   *       },<br>\r\n   *       \"fileStorage\": {<br>\r\n   *           start_up: true,<br>\r\n   *       },<br>\r\n   *       \"calllog\": {<br>\r\n   *           \"start_up\": true,<br>\r\n   *       },<br>\r\n   *       \"favorites\": {<br>\r\n   *           \"start_up\": true,<br>\r\n   *       }<br>\r\n   *   }<br>\r\n   * }<br>\r\n   */\n  constructor(options) {\n    /*\r\n         *       @ deprecated \"storeMessages\": false, Tell the server to store the message for delay distribution and also for history. Please avoid to set it to true for a bot which will not read anymore the messages. It is a better way to store it in your own CPaaS application<br>\r\n    *       \"nbMaxConversations\": 15, Parameter to set the maximum number of conversations to keep (defaut value to 15). Old ones are remove from XMPP server with the new method `ConversationsService::removeOlderConversations`.\r\n    *       \"rateLimitPerHour\": 1000, Parameter to set the maximum of \"message\" stanza sent to server by hour. Default value is 1000.\r\n    *       \"messagesDataStore\": DataStoreType.NoStoreBotSide, Parameter to define the behaviour of the storage of the messages (Enum DataStoreType in lib/config/config , default value \"DataStoreType.NoStoreBotSide\")\r\n    *                          DataStoreType.NoStore Same behaviour as previously `storeMessages=false` Tell the server to NOT store the messages for delay distribution or for history of the bot and the contact.\r\n    *                          DataStoreType.NoStoreBotSide The messages are not stored on  loggued-in Bot's history, but are stored on the other side. So the contact kept the messages exchanged with bot in his history.\r\n    *                          DataStoreType.StoreTwinSide The messages are fully stored.\r\n       */\n\n    /* process.on(\"uncaughtException\", (err) => {\r\n        console.error(err);\r\n    });\r\n      process.on(\"warning\", (err) => {\r\n        console.error(err);\r\n    });\r\n      process.on(\"unhandledRejection\", (err, p) => {\r\n        console.error(err);\r\n    }); // */\n    process.removeListener(\"unhandledRejection\", unhandledRejection);\n    process.removeListener(\"warning\", warning);\n    process.removeListener(\"uncaughtException\", uncaughtException);\n    process.on(\"unhandledRejection\", unhandledRejection);\n    process.on(\"warning\", warning);\n    process.on(\"uncaughtException\", uncaughtException); // Stop the SDK if the node exe receiv a signal to stop, except for sigkill.\n\n    process.removeListener(\"SIGINT\", this.stopProcess());\n    process.removeListener(\"SIGQUIT\", this.stopProcess());\n    process.removeListener(\"SIGTERM\", this.stopProcess());\n    process.on(\"SIGINT\", this.stopProcess());\n    process.on(\"SIGQUIT\", this.stopProcess());\n    process.on(\"SIGTERM\", this.stopProcess()); //process.on(\"SIGUSR2\", that.stopProcess());\n\n    this._core = new Core(options);\n  }\n  /**\r\n   * @public\r\n   * @method start\r\n   * @instance\r\n   * @param {String} token a valid token to login without login/password.\r\n   * @description\r\n   *    Start the SDK\r\n   *    Note :\r\n   *    The token must be empty to signin with credentials.\r\n   *    The SDK is disconnected when the renew of the token had expired (No initial signin possible with out credentials.)\r\n   * @memberof NodeSDK\r\n   */\n\n\n  start(token) {\n    let that = this;\n    that.startTime = new Date();\n    return new Promise(function (resolve, reject) {\n      return that._core.start(token).then(function () {\n        return that._core.signin(false, token);\n      }).then(function (result) {\n        let startDuration = Math.round(new Date() - that.startTime);\n\n        if (!result) {\n          result = {};\n        }\n\n        result.startDuration = startDuration;\n        resolve(result);\n      }).catch(function (err) {\n        if (err) {\n          console.log(\"[index ] : rainbow_onconnectionerror : \", JSON.stringify(err));\n          that.events.publish(\"connectionerror\", err);\n          reject(err);\n        } else {\n          let error = ErrorManager.getErrorManager().UNAUTHORIZED;\n          error.details = err;\n          console.log(\"[index ] : rainbow_onconnectionerror : \", JSON.stringify(error));\n          that.events.publish(\"connectionerror\", error);\n          reject(error);\n        }\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @method startCLI\r\n   * @instance\r\n   * @description\r\n   *      Start the SDK in CLI mode\r\n   * @memberof NodeSDK\r\n   */\n\n\n  startCLI() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      return that._core.start(true).then(function () {\n        resolve();\n      }).catch(function (err) {\n        let error = ErrorManager.getErrorManager().UNAUTHORIZED;\n        error.details = err;\n        that.events.publish(\"connectionerror\", error);\n        reject(error);\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @method siginCLI\r\n   * @instance\r\n   * @description\r\n   *      Sign-in in CLI\r\n   * @memberof NodeSDK\r\n   */\n\n\n  signinCLI() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      return that._core.signin(false).then(function (json) {\n        resolve(json);\n      }).catch(function (err) {\n        let error = ErrorManager.getErrorManager().UNAUTHORIZED;\n        error.details = err;\n        that.events.publish(\"connectionerror\", error);\n        reject(error);\n      });\n    });\n  }\n  /**\r\n   * @public\r\n   * @method stop\r\n   * @instance\r\n   * @description\r\n   *    Stop the SDK\r\n   * @memberof NodeSDK\r\n   */\n\n\n  stop() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      return that._core.stop().then(function (result) {\n        //let success = ErrorManager.getErrorManager().OK;\n        utils.setTimeoutPromised(1500).then(() => {\n          //that._core._stateManager.stop();\n          //that.events.publish(\"stopped\", success);\n          resolve(result);\n        });\n      }).catch(function (err) {\n        let error = ErrorManager.getErrorManager().ERROR;\n        error.details = err;\n        that.events.publish(\"stopped\", error);\n        reject(error);\n      });\n    });\n  }\n\n  stopProcess() {\n    let self = this;\n    return async () => {\n      try {\n        // console.log(\"stopProcess\");\n        await self.stop().catch(ee => {\n          console.log(\"stopProcess, stop failed : \", ee);\n        });\n        await utils.setTimeoutPromised(1000); // eslint-disable-next-line no-process-exit\n      } catch (e) {\n        console.log(\"stopProcess, CATCH Error !!! stop failed : \", e);\n      }\n\n      process.exit(0);\n    };\n  }\n  /**\r\n   * @public\r\n   * @property {Object} im\r\n   * @instance\r\n   * @description\r\n   *    Get access to the IM module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get im() {\n    return this._core.im;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} channels\r\n   * @instance\r\n   * @description\r\n   *    Get access to the Channels module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get channels() {\n    return this._core.channels;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} contacts\r\n   * @instance\r\n   * @description\r\n   *    Get access to the Contacts module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get contacts() {\n    return this._core.contacts;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} conversations\r\n   * @instance\r\n   * @description\r\n   *    Get access to the Conversations module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get conversations() {\n    return this._core.conversations;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} presence\r\n   * @instance\r\n   * @description\r\n   *    Get access to the Presence module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get presence() {\n    return this._core.presence;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} bubbles\r\n   * @instance\r\n   * @description\r\n   *    Get access to the Bubbles module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get bubbles() {\n    return this._core.bubbles;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} groups\r\n   * @instance\r\n   * @description\r\n   *    Get access to the Groups module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get groups() {\n    return this._core.groups;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} events\r\n   * @instance\r\n   * @description\r\n   *    Get access to the Events module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get events() {\n    return this._core.events;\n  }\n  /**\r\n   * @private\r\n   * @property {Object} fileServer\r\n   * @instance\r\n   * @description\r\n   *    Get access to the File Server module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get fileServer() {\n    return this._core.fileServer;\n  }\n  /**\r\n   * @private\r\n   * @property {Object} fileStorage\r\n   * @instance\r\n   * @description\r\n   *    Get access to the File Storage module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get fileStorage() {\n    return this._core.fileStorage;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} admin\r\n   * @instance\r\n   * @description\r\n   *    Get access to the Admin module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get admin() {\n    return this._core.admin;\n  }\n  /**\r\n   * @private\r\n   * @property {Object} rest\r\n   * @instance\r\n   * @description\r\n   *    Get access to the REST module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get rest() {\n    return this._core.rest;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} settings\r\n   * @instance\r\n   * @description\r\n   *    Get access to the Settings module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get settings() {\n    return this._core.settings;\n  }\n  /**\r\n   * @public\r\n   * @property {String} state\r\n   * @instance\r\n   * @description\r\n   *    Return the state of the SDK (eg: STOPPED, STARTED, CONNECTED, READY, DISCONNECTED, RECONNECTING, FAILED, ERROR)\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get state() {\n    return this._core.state;\n  }\n  /**\r\n   * @public\r\n   * @property {String} version\r\n   * @instance\r\n   * @description\r\n   *      Return the version of the SDK\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get version() {\n    return this._core.version;\n  }\n  /**\r\n   * @public\r\n   * @property {ConnectedUser} connectedUser\r\n   * @instance\r\n   * @description\r\n   *      Return the connected user information\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get connectedUser() {\n    return this._core.rest.account;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} telephony\r\n   * @instance\r\n   * @description\r\n   *    Get access to the telephony module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get telephony() {\n    return this._core.telephony;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} calllog\r\n   * @instance\r\n   * @description\r\n   *    Get access to the calllog module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get calllog() {\n    return this._core.calllog;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} favorites\r\n   * @instance\r\n   * @description\r\n   *    Get access to the favorite module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get favorites() {\n    return this._core._favorites;\n  }\n  /**\r\n   * @public\r\n   * @property {Object} invitations\r\n   * @instance\r\n   * @description\r\n   *    Get access to the invitation module\r\n   * @memberof NodeSDK\r\n   */\n\n\n  get invitations() {\n    return this._core._invitations;\n  }\n\n  get DataStoreType() {\n    return DataStoreType;\n  }\n\n}\n\nmodule.exports = NodeSDK;","map":{"version":3,"sources":["C:/Users/HP/Desktop/KanScrubs/random/node_modules/rainbow-node-sdk/index.js"],"names":["DataStoreType","require","Core","ErrorManager","utils","Type","home","work","other","DeviceType","landline","mobile","fax","uncaughtException","err","console","error","warning","unhandledRejection","reason","p","NodeSDK","constructor","options","process","removeListener","on","stopProcess","_core","start","token","that","startTime","Date","Promise","resolve","reject","then","signin","result","startDuration","Math","round","catch","log","JSON","stringify","events","publish","getErrorManager","UNAUTHORIZED","details","startCLI","signinCLI","json","stop","setTimeoutPromised","ERROR","self","ee","e","exit","im","channels","contacts","conversations","presence","bubbles","groups","fileServer","fileStorage","admin","rest","settings","state","version","connectedUser","account","telephony","calllog","favorites","_favorites","invitations","_invitations","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nconst DataStoreType = require(\"./lib/config/config\").DataStoreType;\r\n\r\nconst Core = require(\"./lib/Core\").Core;\r\nconst ErrorManager = require(\"./lib/common/ErrorManager\").ErrorManager;\r\nconst utils = require( \"./lib/common/Utils\");\r\n\r\n/**\r\n * @enum { String }\r\n *\r\n*/\r\nlet Type = {\r\n    home: \"home\",\r\n    work: \"work\",\r\n    other: \"other\"\r\n};\r\n\r\n/**\r\n * @enum { String }\r\n *\r\n*/\r\nlet DeviceType = {\r\n    landline: \"landline\",\r\n    mobile: \"mobile\",\r\n    fax: \"fax\",\r\n    other: \"other\"\r\n};\r\n\r\nfunction uncaughtException(err) {\r\n    console.error('Possibly uncaughtException err : ', err);\r\n}\r\nfunction warning(err) {\r\n    console.error('Possibly unhandledRejection err : ', err);\r\n}\r\nfunction unhandledRejection(reason, p) {\r\n    console.error('Possibly Unhandled Rejection at: Promise ', p, \" reason: \", reason);\r\n}\r\n\r\n/**\r\n * @typedef {Object} Email\r\n * @property {String} email User email address\r\n * @property {Type} type Email type, one of home, work, other\r\n *\r\n\r\n /*\r\n * Phone number objects can\r\n * be created by user (information filled by user),\r\n * come from association with a system (pbx) device (association is done by admin).\r\n * @typedef {Object} PhoneNumber\r\n * @property {String} phoneNumberId Phone number unique id in directory collection.\r\n * @property {String} number User phone number (as entered by user)\r\n * @property {String} numberE164 User E.164 phone number, computed by server from number and country fields\r\n * @property {String} country Phone number country (ISO 3166-1 alpha3 format). Used to compute numberE164 field from number field.\r\n * @property {Boolean} isFromSystem Boolean indicating if phone is linked to a system (pbx).\r\n * @property {String} shortNumber [Only for phone numbers linked to a system (pbx)]\r\n * If phone is linked to a system (pbx), short phone number (corresponds to the number monitored by PCG).\r\n * Only usable within the same PBX.\r\n * Only PCG can set this field.\r\n * @property {String} internalNumber [Only for phone numbers linked to a system (pbx)]\r\n * If phone is linked to a system (pbx), internal phone number.\r\n * Usable within a PBX group.\r\n * Admins and users can modify this internalNumber field.\r\n * @property {String} systemId [Only for phone numbers linked to a system (pbx)]\r\n * If phone is linked to a system (pbx), unique identifier of that system in Rainbow database.\r\n * pbxId String [Only for phone numbers linked to a system (pbx)]\r\n * If phone is linked to a system (pbx), unique identifier of that pbx.\r\n * @property {Type} type Phone number type, one of home, work, other.\r\n * @property {DeviceType} deviceType Phone number device type, one of landline, mobile, fax, other.\r\n *\r\n\r\n/*\r\n * @typedef {Object} ConnectedUser User corresponding to the logged in user\r\n * @property {String} id\r\n * @property {String} id User unique identifier\r\n * @property {String} loginEmail User email address (used for login)\r\n * @property {String} firstName User first name\r\n * @property {String} lastName User last name\r\n * @property {String} displayName User display name (firstName + lastName concatenated on server side)\r\n * @property {String} nickName User nickName\r\n * @property {String} title User title (honorifics title, like Mr, Mrs, Sir, Lord, Lady, Dr, Prof,...)\r\n * @property {String} jobTitle User job title\r\n * @property {Email[]} emails Array of user emails addresses objects\r\n * @property {PhoneNumber[]} phoneNumbers Array of user phone numbers objects.\r\n * Phone number objects can\r\n * be created by user (information filled by user),\r\n * come from association with a system (pbx) device (association is done by admin).\r\n * @property {String} country User country (ISO 3166-1 alpha3 format)\r\n * @property {String} language User language (ISO 639-1 code format, with possibility of regional variation. Ex: both 'en' and 'en-US' are supported)\r\n * @property {String} timezone User timezone name\r\n * @property {String} jid_im User Jabber IM identifier\r\n * @property {String} jid_tel User Jabber TEL identifier\r\n * @property {String} jid_password User Jabber TEL identifier\r\n * @property {String[]} roles List of user roles (Array of String)\r\n * @property {String} adminType In case of user's is 'admin', define the subtype (organisation_admin, company_admin, site_admin (default undefined)\r\n * @property {String} companyId User company unique identifier\r\n * @property {String} organisationId In addition to User companyId, optional identifier to indicate the user belongs also to an organization\r\n * @property {String} siteId In addition to User companyId, optional identifier to indicate the user belongs also to a site\r\n * @property {String} companyName User company name\r\n * @property {Boolean} isInDefaultCompany Is user in default company\r\n * Only returned if retrieved user data corresponds to logged in user or if logged in user is admin of the retrieved user\r\n * @property {Boolean} isActive Is user active\r\n * @property {Boolean} isInitialized Is user initialized\r\n * @property {DateTime} initializationDate User initialization date\r\n * @property {DateTime} activationDate User activation date\r\n * @property {DateTime} creationDate User creation date\r\n * @property {DateTime} lastUpdateDate Date of last user update (whatever the field updated)\r\n * @property {DateTime} lastAvatarUpdateDate Date of last user avatar create/update, null if no avatar\r\n */\r\n\r\n/**\r\n * @class\r\n * @name NodeSDK\r\n * @description\r\n *      This module is the core module of the Rainbow SDK for Node.JS <br>.\r\n *      It gives access to the other modules and allow to start/stop the SDK\r\n *      <br><br>\r\n *      The main methods proposed in that module allow to: <br>\r\n *      - Access to each module like Bubbles, Contacts...<br>\r\n *      - Access to Event module <br>\r\n *      - Start and stop the SDK <br>\r\n *      - Get the version number <br>\r\n *      - Get the SDK internal state\r\n *\r\n *      Warning: Before deploying in production a bot that can generate heavy traffic, please contact ALE.\r\n */\r\nclass NodeSDK {\r\n\r\n    /**\r\n     * @method constructor\r\n     * @public\r\n     * @description\r\n     *      The entry point of the Rainbow Node SDK\r\n     * @param {{rainbow: {host: string}, application: {appID: string, appSecret: string}, im: {sendReadReceipt: boolean, sendMessageToConnectedUser: boolean, conversationsRetrievedFormat: string, copyMessage: boolean, storeMessages: boolean, messageMaxLength: number}, credentials: {password: string, login: string}, logs: {file: {zippedArchive: boolean, path: string, customFileName: string}, color: boolean, level: string, \"system-dev\": {http: boolean, internals: boolean}, enableFileLogs: boolean, customLabel: string, enableConsoleLogs: boolean}, servicesToStart: {favorites: {start_up: boolean}, fileStorage: {start_up: boolean}, webrtc: {start_up: boolean, optional: boolean}, channels: {start_up: boolean}, calllog: {start_up: boolean}, telephony: {start_up: boolean}, admin: {start_up: boolean}, bubbles: {start_up: boolean}, fileServer: {start_up: boolean}}}} options : The options provided to manage the SDK behavior <br>\r\n     *   \"rainbow\": {<br>\r\n     *       \"host\": \"official\", // Can be \"sandbox\" (developer platform), \"official\" or any other hostname when using dedicated AIO<br>\r\n     *       \"mode\": \"xmpp\" // The event mode used to receive the events. Can be `xmpp` or `s2s` (default : `xmpp`)\r\n     *    },<br>\r\n     *   \"s2s\": {\r\n     *      \"hostCallback\": \"http://3d260881.ngrok.io\", // S2S Callback URL used to receive events on internet\r\n     *      \"locallistenningport\": \"4000\" // Local port where the events must be forwarded from S2S Callback Web server.\r\n    *    },\r\n     *   \"credentials\": {<br>\r\n     *       \"login\": \"user@xxxx.xxx\",  // The Rainbow email account to use<br>\r\n     *       \"password\": \"XXXXX\",<br>\r\n     *   },<br>\r\n     *   // Application identifier<br>\r\n     *   \"application\": {<br>\r\n     *       \"appID\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXX\", // The Rainbow Application Identifier<br>\r\n     *       \"appSecret\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", // The Rainbow Application Secret<br>\r\n     *   },<br>\r\n     *   // Proxy configuration<br>\r\n     *   \"proxy\": {<br>\r\n     *       \"host\": \"xxx.xxx.xxx.xxx\",<br>\r\n     *       \"port\": xxxx,<br>\r\n     *       \"protocol\": \"http\",<br>\r\n     *       \"user\": \"proxyuser\",<br>\r\n     *       \"password\": \"XXXXX\",<br>\r\n     *   },<br>\r\n     *   // Logs options<br>\r\n     *   \"logs\": {<br>\r\n     *       \"enableConsoleLogs\": false, Activate logs on the console<br>\r\n     *       \"enableFileLogs\": false, Activate the logs in a file<br>\r\n     *       \"color\": true, Activate the ansii color in the log (more humain readable, but need a term console or reader compatible (ex : vim + AnsiEsc module)) <br>\r\n     *       \"level\": \"info\", The level of logs. The value can be \"info\", \"debug\", \"warn\", \"error\"<br>\r\n     *       \"customLabel\": \"MyRBProject\", A label inserted in every lines of the logs. It is usefull if you use multiple SDK instances at a same time. It allows to separate logs in console.<br>\r\n     *       \"file\": {<br>\r\n     *           \"path\": \"c:/temp/\", Path to the log file<br>\r\n     *           \"customFileName\": \"R-SDK-Node-MyRBProject\", A label inserted in the name of the log file<br>\r\n     *           \"zippedArchive\": false Can activate a zip of file. It needs CPU process, so avoid it.<br>\r\n     *       }<br>\r\n     *   },<br>\r\n     *   \"testOutdatedVersion\": true, Parameter to verify at startup if the current SDK Version is the lastest published on npmjs.com.<br>\r\n     *   // IM options<br>\r\n     *   \"im\": {<br>\r\n     *       \"sendReadReceipt\": true, Allow to automatically send back a 'read' status of the received message. Usefull for Bots.<br>\r\n     *       \"messageMaxLength\": 1024, Maximum size of messages send by rainbow. Note that this value should not be modified without ALE Agreement.<br>\r\n     *       \"sendMessageToConnectedUser\": false, Forbid the SDK to send a message to the connected user it self. This is to avoid bot loopback.<br>\r\n     *       \"conversationsRetrievedFormat\": \"small\", Set the size of the conversation's content retrieved from server. Can be `small`, `medium`, `full`<br>\r\n     *       @deprecated \"storeMessages\": false, Tell the server to store the message for delay distribution and also for history. Please avoid to set it to true for a bot which will not read anymore the messages. It is a better way to store it in your own CPaaS application<br>\r\n     *       \"nbMaxConversations\": 15, Parameter to set the maximum number of conversations to keep (defaut value to 15). Old ones are remove from XMPP server with the new method `ConversationsService::removeOlderConversations`.<br>\r\n     *       \"rateLimitPerHour\": 1000, Parameter to set the maximum of \"message\" stanza sent to server by hour. Default value is 1000.<br>\r\n     *       \"messagesDataStore\": Parameter to override the storeMessages parameter of the SDK to define the behaviour of the storage of the messages (Enum DataStoreType in lib/config/config , default value \"DataStoreType.UsestoreMessagesField\" so it follows the storeMessages behaviour)<br>\r\n     *                          DataStoreType.NoStore Tell the server to NOT store the messages for delay distribution or for history of the bot and the contact.<br>\r\n     *                          DataStoreType.NoPermanentStore Tell the server to NOT store the messages for history of the bot and the contact. But being stored temporarily as a normal part of delivery (e.g. if the recipient is offline at the time of sending).<br>\r\n     *                          DataStoreType.StoreTwinSide The messages are fully stored.<br>\r\n     *                          DataStoreType.UsestoreMessagesField to follow the storeMessages SDK's parameter behaviour.<br>\r\n     *   },<br>\r\n     *   // Services to start. This allows to start the SDK with restricted number of services, so there are less call to API.<br>\r\n     *   // Take care, severals services are linked, so disabling a service can disturb an other one.<br>\r\n     *   // By default all the services are started. Events received from server are not yet filtered.<br>\r\n     *   // So this feature is realy risky, and should be used with much more cautions.<br>\r\n     *   \"servicesToStart\": {<br>\r\n     *       \"bubbles\": {<br>\r\n     *           \"start_up\": true,<br>\r\n     *       },<br>\r\n     *       \"telephony\": {<br>\r\n     *           \"start_up\": true,<br>\r\n     *       },<br>\r\n     *       \"channels\": {<br>\r\n     *           \"start_up\": true,<br>\r\n     *       },<br>\r\n     *       \"admin\": {<br>\r\n     *           \"start_up\": true,<br>\r\n     *       },<br>\r\n     *       \"fileServer\": {<br>\r\n     *           \"start_up\": true,<br>\r\n     *       },<br>\r\n     *       \"fileStorage\": {<br>\r\n     *           start_up: true,<br>\r\n     *       },<br>\r\n     *       \"calllog\": {<br>\r\n     *           \"start_up\": true,<br>\r\n     *       },<br>\r\n     *       \"favorites\": {<br>\r\n     *           \"start_up\": true,<br>\r\n     *       }<br>\r\n     *   }<br>\r\n     * }<br>\r\n     */\r\n    constructor(options) {\r\n        /*\r\n             *       @ deprecated \"storeMessages\": false, Tell the server to store the message for delay distribution and also for history. Please avoid to set it to true for a bot which will not read anymore the messages. It is a better way to store it in your own CPaaS application<br>\r\n     *       \"nbMaxConversations\": 15, Parameter to set the maximum number of conversations to keep (defaut value to 15). Old ones are remove from XMPP server with the new method `ConversationsService::removeOlderConversations`.\r\n     *       \"rateLimitPerHour\": 1000, Parameter to set the maximum of \"message\" stanza sent to server by hour. Default value is 1000.\r\n     *       \"messagesDataStore\": DataStoreType.NoStoreBotSide, Parameter to define the behaviour of the storage of the messages (Enum DataStoreType in lib/config/config , default value \"DataStoreType.NoStoreBotSide\")\r\n     *                          DataStoreType.NoStore Same behaviour as previously `storeMessages=false` Tell the server to NOT store the messages for delay distribution or for history of the bot and the contact.\r\n     *                          DataStoreType.NoStoreBotSide The messages are not stored on  loggued-in Bot's history, but are stored on the other side. So the contact kept the messages exchanged with bot in his history.\r\n     *                          DataStoreType.StoreTwinSide The messages are fully stored.\r\n\r\n         */\r\n        /* process.on(\"uncaughtException\", (err) => {\r\n            console.error(err);\r\n        });\r\n\r\n        process.on(\"warning\", (err) => {\r\n            console.error(err);\r\n        });\r\n\r\n        process.on(\"unhandledRejection\", (err, p) => {\r\n            console.error(err);\r\n        }); // */\r\n        process.removeListener(\"unhandledRejection\", unhandledRejection);\r\n        process.removeListener(\"warning\", warning);\r\n        process.removeListener(\"uncaughtException\", uncaughtException);\r\n\r\n        process.on(\"unhandledRejection\", unhandledRejection);\r\n        process.on(\"warning\", warning);\r\n        process.on(\"uncaughtException\", uncaughtException);\r\n\r\n        // Stop the SDK if the node exe receiv a signal to stop, except for sigkill.\r\n        process.removeListener(\"SIGINT\", this.stopProcess());\r\n        process.removeListener(\"SIGQUIT\", this.stopProcess());\r\n        process.removeListener(\"SIGTERM\", this.stopProcess());\r\n        process.on(\"SIGINT\", this.stopProcess());\r\n        process.on(\"SIGQUIT\", this.stopProcess());\r\n        process.on(\"SIGTERM\", this.stopProcess());\r\n        //process.on(\"SIGUSR2\", that.stopProcess());\r\n\r\n        this._core = new Core(options);\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @method start\r\n     * @instance\r\n     * @param {String} token a valid token to login without login/password.\r\n     * @description\r\n     *    Start the SDK\r\n     *    Note :\r\n     *    The token must be empty to signin with credentials.\r\n     *    The SDK is disconnected when the renew of the token had expired (No initial signin possible with out credentials.)\r\n     * @memberof NodeSDK\r\n     */\r\n    start(token) {\r\n        let that = this;\r\n        that.startTime = new Date();\r\n        return new Promise(function(resolve, reject) {\r\n            return that._core.start( token).then(function() {\r\n                return that._core.signin(false, token);\r\n            }).then(function(result) {\r\n                let startDuration = Math.round(new Date() - that.startTime);\r\n                if (!result) {result = {};}\r\n                result.startDuration = startDuration;\r\n                resolve(result);\r\n            }).catch(function(err) {\r\n                if (err) {\r\n                    console.log(\"[index ] : rainbow_onconnectionerror : \", JSON.stringify(err));\r\n                    that.events.publish(\"connectionerror\", err);\r\n                    reject(err);\r\n                } else {\r\n                    let error = ErrorManager.getErrorManager().UNAUTHORIZED;\r\n                    error.details = err;\r\n                    console.log(\"[index ] : rainbow_onconnectionerror : \", JSON.stringify(error));\r\n                    that.events.publish(\"connectionerror\", error);\r\n                    reject(error);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @method startCLI\r\n     * @instance\r\n     * @description\r\n     *      Start the SDK in CLI mode\r\n     * @memberof NodeSDK\r\n     */\r\n    startCLI() {\r\n        let that = this;\r\n        return new Promise(function(resolve, reject) {\r\n            return that._core.start(true).then(function() {\r\n                resolve();\r\n            }).catch(function(err) {\r\n                let error = ErrorManager.getErrorManager().UNAUTHORIZED;\r\n                error.details = err;\r\n                that.events.publish(\"connectionerror\", error);\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @method siginCLI\r\n     * @instance\r\n     * @description\r\n     *      Sign-in in CLI\r\n     * @memberof NodeSDK\r\n     */\r\n    signinCLI() {\r\n        let that = this;\r\n        return new Promise(function(resolve, reject) {\r\n            return that._core.signin(false).then(function(json) {\r\n                resolve(json);\r\n            }).catch(function(err) {\r\n                let error = ErrorManager.getErrorManager().UNAUTHORIZED;\r\n                error.details = err;\r\n                that.events.publish(\"connectionerror\", error);\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @method stop\r\n     * @instance\r\n     * @description\r\n     *    Stop the SDK\r\n     * @memberof NodeSDK\r\n     */\r\n    stop() {\r\n        let that = this;\r\n        return new Promise(function(resolve, reject) {\r\n            return that._core.stop().then(function(result) {\r\n                //let success = ErrorManager.getErrorManager().OK;\r\n                utils.setTimeoutPromised(1500).then( () => {\r\n                    //that._core._stateManager.stop();\r\n                    //that.events.publish(\"stopped\", success);\r\n                    resolve(result);\r\n                });\r\n            }).catch(function(err) {\r\n                let error = ErrorManager.getErrorManager().ERROR;\r\n                error.details = err;\r\n                that.events.publish(\"stopped\", error);\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    stopProcess() {\r\n        let self = this;\r\n        return async () => {\r\n            try {\r\n                // console.log(\"stopProcess\");\r\n                await self.stop().catch((ee)=>{\r\n                    console.log(\"stopProcess, stop failed : \", ee);\r\n                });\r\n                await utils.setTimeoutPromised(1000);\r\n                // eslint-disable-next-line no-process-exit\r\n            }\r\n            catch (e) {\r\n                console.log(\"stopProcess, CATCH Error !!! stop failed : \", e);\r\n            }\r\n            process.exit(0);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} im\r\n     * @instance\r\n     * @description\r\n     *    Get access to the IM module\r\n     * @memberof NodeSDK\r\n     */\r\n    get im() {\r\n        return this._core.im;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} channels\r\n     * @instance\r\n     * @description\r\n     *    Get access to the Channels module\r\n     * @memberof NodeSDK\r\n     */\r\n    get channels() {\r\n        return this._core.channels;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} contacts\r\n     * @instance\r\n     * @description\r\n     *    Get access to the Contacts module\r\n     * @memberof NodeSDK\r\n     */\r\n    get contacts() {\r\n        return this._core.contacts;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} conversations\r\n     * @instance\r\n     * @description\r\n     *    Get access to the Conversations module\r\n     * @memberof NodeSDK\r\n     */\r\n    get conversations() {\r\n        return this._core.conversations;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} presence\r\n     * @instance\r\n     * @description\r\n     *    Get access to the Presence module\r\n     * @memberof NodeSDK\r\n     */\r\n    get presence() {\r\n        return this._core.presence;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} bubbles\r\n     * @instance\r\n     * @description\r\n     *    Get access to the Bubbles module\r\n     * @memberof NodeSDK\r\n     */\r\n    get bubbles() {\r\n        return this._core.bubbles;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} groups\r\n     * @instance\r\n     * @description\r\n     *    Get access to the Groups module\r\n     * @memberof NodeSDK\r\n     */\r\n    get groups() {\r\n        return this._core.groups;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} events\r\n     * @instance\r\n     * @description\r\n     *    Get access to the Events module\r\n     * @memberof NodeSDK\r\n     */\r\n    get events() {\r\n        return this._core.events;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @property {Object} fileServer\r\n     * @instance\r\n     * @description\r\n     *    Get access to the File Server module\r\n     * @memberof NodeSDK\r\n     */\r\n    get fileServer() {\r\n        return this._core.fileServer;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @property {Object} fileStorage\r\n     * @instance\r\n     * @description\r\n     *    Get access to the File Storage module\r\n     * @memberof NodeSDK\r\n     */\r\n    get fileStorage() {\r\n        return this._core.fileStorage;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} admin\r\n     * @instance\r\n     * @description\r\n     *    Get access to the Admin module\r\n     * @memberof NodeSDK\r\n     */\r\n    get admin() {\r\n        return this._core.admin;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @property {Object} rest\r\n     * @instance\r\n     * @description\r\n     *    Get access to the REST module\r\n     * @memberof NodeSDK\r\n     */\r\n    get rest() {\r\n        return this._core.rest;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} settings\r\n     * @instance\r\n     * @description\r\n     *    Get access to the Settings module\r\n     * @memberof NodeSDK\r\n     */\r\n    get settings() {\r\n        return this._core.settings;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {String} state\r\n     * @instance\r\n     * @description\r\n     *    Return the state of the SDK (eg: STOPPED, STARTED, CONNECTED, READY, DISCONNECTED, RECONNECTING, FAILED, ERROR)\r\n     * @memberof NodeSDK\r\n     */\r\n    get state() {\r\n        return this._core.state;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {String} version\r\n     * @instance\r\n     * @description\r\n     *      Return the version of the SDK\r\n     * @memberof NodeSDK\r\n     */\r\n    get version() {\r\n        return this._core.version;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {ConnectedUser} connectedUser\r\n     * @instance\r\n     * @description\r\n     *      Return the connected user information\r\n     * @memberof NodeSDK\r\n     */\r\n    get connectedUser() {\r\n        return this._core.rest.account;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} telephony\r\n     * @instance\r\n     * @description\r\n     *    Get access to the telephony module\r\n     * @memberof NodeSDK\r\n     */\r\n    get telephony() {\r\n        return this._core.telephony;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} calllog\r\n     * @instance\r\n     * @description\r\n     *    Get access to the calllog module\r\n     * @memberof NodeSDK\r\n     */\r\n    get calllog() {\r\n        return this._core.calllog;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} favorites\r\n     * @instance\r\n     * @description\r\n     *    Get access to the favorite module\r\n     * @memberof NodeSDK\r\n     */\r\n    get favorites() {\r\n        return this._core._favorites;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @property {Object} invitations\r\n     * @instance\r\n     * @description\r\n     *    Get access to the invitation module\r\n     * @memberof NodeSDK\r\n     */\r\n    get invitations() {\r\n        return this._core._invitations;\r\n    }\r\n\r\n    get DataStoreType() {\r\n        return DataStoreType;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = NodeSDK;\r\n"]},"metadata":{},"sourceType":"script"}