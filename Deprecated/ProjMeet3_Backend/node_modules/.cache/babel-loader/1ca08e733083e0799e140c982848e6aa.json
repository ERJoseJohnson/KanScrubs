{"ast":null,"code":"'use strict';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Utils_1 = require(\"../../common/Utils\");\n\nconst ErrorCase = require('../../common/ErrorManager');\n\nconst util = require('util');\n\nconst LOG_ID = \"REST/TEL - \";\nlet RESTTelephony = class RESTTelephony {\n  constructor(evtEmitter, logger) {\n    let that = this;\n    that.evtEmitter = evtEmitter;\n    that.logger = logger;\n  }\n\n  start(http) {\n    return new Promise(resolve => {\n      let that = this;\n      that.http = http;\n      resolve();\n    });\n  }\n\n  makeCall(requestHeader, contact, phoneInfo) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      let data = {\n        //data: {\n        \"calleeExtNumber\": phoneInfo.longNumber,\n        \"calleeIntNumber\": phoneInfo.internalNumber,\n        \"calleeShortNumber\": phoneInfo.shortNumber,\n        \"calleePbxId\": phoneInfo.pbxId,\n        \"calleeDisplayName\": contact.displayName,\n        \"correlatorData\": phoneInfo.correlatorData ? phoneInfo.correlatorData : \" \" //}\n\n      };\n      that.http.post(\"/api/rainbow/telephony/v1.0/calls\", requestHeader, data).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(makeCall) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(makeCall) REST conversation created\");\n        that.logger.log(\"internal\", LOG_ID + \"(makeCall) REST conversation created : \", json.data);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(makeCall) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(makeCall) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  releaseCall(requestHeader, call) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      if (call.connectionId) {\n        let data = encodeURIComponent(call.connectionId);\n        that.http.delete(\"/api/rainbow/telephony/v1.0/calls/\" + data, requestHeader).then(json => {\n          that.logger.log(\"info\", LOG_ID + \"(releasecall) successfull\");\n          that.logger.log(\"info\", LOG_ID + \"(releasecall) REST conversation released\");\n          that.logger.log(\"internal\", LOG_ID + \"(releasecall) REST conversation released : \", json.data);\n          resolve(json.data);\n        }).catch(err => {\n          that.logger.log(\"error\", LOG_ID, \"(releasecall) error.\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(releasecall) error : \", err);\n          return reject(err);\n        });\n      } else {\n        let error = ErrorCase.OTHERERROR('can not release call', 'no connectionId found in call ', util.inspect(call)); // errorHelperService.handleError(response);\n\n        that._logger.log(\"error\", LOG_ID + \"(releaseCall) Catch Error !!! \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(releaseCall) Catch Error !!! Error : \", error);\n\n        return reject(error);\n      }\n    });\n  }\n\n  makeConsultationCall(requestHeader, callId, contact, phoneInfo) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      if (callId) {\n        let data = {\n          \"calleeExtNumber\": phoneInfo.longNumber,\n          \"calleeIntNumber\": phoneInfo.internalNumber,\n          \"calleeShortNumber\": phoneInfo.shortNumber,\n          \"calleePbxId\": phoneInfo.pbxId,\n          \"calleeDisplayName\": contact.displayName,\n          \"correlatorData\": phoneInfo.correlatorData ? phoneInfo.correlatorData : \" \"\n        };\n        that.http.post(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(callId) + '/consultation', requestHeader, data).then(json => {\n          that.logger.log(\"info\", LOG_ID + \"(makeConsultationCall) successfull\");\n          that.logger.log(\"info\", LOG_ID + \"(makeConsultationCall) REST conversation consulted\");\n          that.logger.log(\"internal\", LOG_ID + \"(makeConsultationCall) REST conversation consulted : \", json.data);\n          resolve(json.data);\n        }).catch(err => {\n          that.logger.log(\"error\", LOG_ID, \"(makeConsultationCall) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(makeConsultationCall) error : \", err);\n          return reject(err);\n        });\n      } else {\n        let error = ErrorCase.OTHERERROR('can not makeConsultationCall call', 'makeConsultationCall for callId ' + callId); // errorHelperService.handleError(response);\n\n        that._logger.log(\"error\", LOG_ID + \"(makeConsultationCall) \", error);\n\n        return reject(error);\n      }\n    });\n  }\n\n  answerCall(requestHeader, call) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      if (call) {\n        that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(call.connectionId) + '/answer', requestHeader).then(json => {\n          that.logger.log(\"info\", LOG_ID + \"(answerCall) successfull\");\n          that.logger.log(\"info\", LOG_ID + \"(answerCall) REST conversation consulted\");\n          that.logger.log(\"internal\", LOG_ID + \"(answerCall) REST conversation consulted : \", json.data);\n          resolve(json.data);\n        }).catch(err => {\n          that.logger.log(\"error\", LOG_ID, \"(answerCall) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(answerCall) error : \", err);\n          return reject(err);\n        });\n      } else {\n        let error = ErrorCase.OTHERERROR('can not answerCall call', 'answerCall for call ' + util.inspect(call)); // errorHelperService.handleError(response);\n\n        that._logger.log(\"error\", LOG_ID + \"(answerCall) \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(answerCall) : \", error);\n\n        return reject(error);\n      }\n    });\n  }\n\n  holdCall(requestHeader, call) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      if (call) {\n        that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(call.connectionId) + '/hold', requestHeader).then(json => {\n          that.logger.log(\"info\", LOG_ID + \"(holdCall) successfull\");\n          that.logger.log(\"info\", LOG_ID + \"(holdCall) REST conversation consulted\");\n          that.logger.log(\"internal\", LOG_ID + \"(holdCall) REST conversation consulted : \", json.data);\n          resolve(json.data);\n        }).catch(err => {\n          that.logger.log(\"error\", LOG_ID, \"(holdCall) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(holdCall) error : \", err);\n          return reject(err);\n        });\n      } else {\n        let error = ErrorCase.OTHERERROR('can not holdCall call', 'holdCall for call ' + util.inspect(call)); // errorHelperService.handleError(response);\n\n        that._logger.log(\"error\", LOG_ID + \"(answerCall) \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(answerCall) \", error);\n\n        return reject(error);\n      }\n    });\n  }\n\n  retrieveCall(requestHeader, call) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      if (call) {\n        that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(call.connectionId) + '/retrieve', requestHeader).then(json => {\n          that.logger.log(\"info\", LOG_ID + \"(retrieveCall) successfull\");\n          that.logger.log(\"info\", LOG_ID + \"(retrieveCall) REST conversation consulted\");\n          that.logger.log(\"internal\", LOG_ID + \"(retrieveCall) REST conversation consulted : \", json.data);\n          resolve(json.data);\n        }).catch(err => {\n          that.logger.log(\"error\", LOG_ID, \"(retrieveCall) error\");\n          that.logger.log(\"internal\", LOG_ID, \"(retrieveCall) error : \", err);\n          return reject(err);\n        });\n      } else {\n        let error = ErrorCase.OTHERERROR('can not retrieveCall call', 'retrieveCall for call ' + util.inspect(call)); // errorHelperService.handleError(response);\n\n        that._logger.log(\"error\", LOG_ID + \"(retrieveCall) \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(retrieveCall) : \", error);\n\n        return reject(error);\n      }\n    });\n  }\n\n  deflectCallToVM(requestHeader, call, VMInfos) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      if (call) {\n        that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(call.connectionId) + '/deflect', requestHeader, VMInfos).then(json => {\n          that.logger.log(\"info\", LOG_ID + \"(deflectCallToVM) successfull\");\n          that.logger.log(\"info\", LOG_ID + \"(deflectCallToVM) REST conversation consulted\");\n          that.logger.log(\"internal\", LOG_ID + \"(deflectCallToVM) REST conversation consulted : \", json.data);\n          resolve(json.data);\n        }).catch(err => {\n          that.logger.log(\"error\", LOG_ID, \"(deflectCallToVM) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(deflectCallToVM) error : \", err);\n          return reject(err);\n        });\n      } else {\n        let error = ErrorCase.OTHERERROR('can not deflectCallToVM call', 'deflectCallToVM for call ' + util.inspect(call)); // errorHelperService.handleError(response);\n\n        that._logger.log(\"error\", LOG_ID + \"(deflectCallToVM) \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(deflectCallToVM) : \", error);\n\n        return reject(error);\n      }\n    });\n  }\n\n  deflectCall(requestHeader, call, VMInfos) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      if (call) {\n        that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(call.connectionId) + '/deflect', requestHeader, VMInfos).then(json => {\n          that.logger.log(\"info\", LOG_ID + \"(deflectCall) successfull\");\n          that.logger.log(\"info\", LOG_ID + \"(deflectCall) REST conversation consulted\");\n          that.logger.log(\"internal\", LOG_ID + \"(deflectCall) REST conversation consulted : \", json.data);\n          resolve(json.data);\n        }).catch(err => {\n          that.logger.log(\"error\", LOG_ID, \"(deflectCall) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(deflectCall) error : \", err);\n          return reject(err);\n        });\n      } else {\n        let error = ErrorCase.OTHERERROR('can not deflectCall call', 'deflectCall for call ' + util.inspect(call)); // errorHelperService.handleError(response);\n\n        that._logger.log(\"error\", LOG_ID + \"(deflectCall) \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(deflectCall) : \", error);\n\n        return reject(error);\n      }\n    });\n  }\n\n  transfertCall(requestHeader, activeCall, heldCall) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      if (activeCall && heldCall) {\n        that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(activeCall.connectionId) + '/transfer/' + encodeURIComponent(heldCall.connectionId), requestHeader).then(json => {\n          that.logger.log(\"info\", LOG_ID + \"(transfertCall) successfull\");\n          that.logger.log(\"info\", LOG_ID + \"(transfertCall) REST conversation consulted\");\n          that.logger.log(\"internal\", LOG_ID + \"(transfertCall) REST conversation consulted : \", json.data);\n          resolve(json.data);\n        }).catch(err => {\n          that.logger.log(\"error\", LOG_ID, \"(transfertCall) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(transfertCall) error : \", err);\n          return reject(err);\n        });\n      } else {\n        let error = ErrorCase.OTHERERROR('can not transfertCall call', 'transfertCall for call ' + util.inspect(activeCall) + util.inspect(heldCall)); // errorHelperService.handleError(response);\n\n        that._logger.log(\"error\", LOG_ID + \"(transfertCall) \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(transfertCall) : \", error);\n\n        return reject(error);\n      }\n    });\n  }\n\n  conferenceCall(requestHeader, activeCall, heldCall) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      if (activeCall && heldCall) {\n        that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(activeCall.connectionId) + '/conference/' + encodeURIComponent(heldCall.connectionId), requestHeader).then(json => {\n          that.logger.log(\"info\", LOG_ID + \"(conferenceCall) successfull\");\n          that.logger.log(\"info\", LOG_ID + \"(conferenceCall) REST conversation consulted\");\n          that.logger.log(\"internal\", LOG_ID + \"(conferenceCall) REST conversation consulted : \", json.data);\n          resolve(json.data);\n        }).catch(err => {\n          that.logger.log(\"error\", LOG_ID, \"(conferenceCall) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(conferenceCall) error : \", err);\n          return reject(err);\n        });\n      } else {\n        let error = ErrorCase.OTHERERROR('can not conferenceCall call', 'conferenceCall for call ' + util.inspect(activeCall) + util.inspect(heldCall)); // errorHelperService.handleError(response);\n\n        that._logger.log(\"error\", LOG_ID + \"(conferenceCall) \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(conferenceCall) : \", error);\n\n        return reject(error);\n      }\n    });\n  }\n\n  forwardToDevice(requestHeader, contact, phoneInfo) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      let data = {\n        calleeExtNumber: phoneInfo.longNumber,\n        calleeIntNumber: phoneInfo.internalNumber,\n        calleeShortNumber: phoneInfo.shortNumber,\n        calleePbxId: phoneInfo.pbxId,\n        calleeDisplayName: contact.displayName\n      };\n      that.http.post(\"/api/rainbow/telephony/v1.0/calls/forward\", requestHeader, data).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(forwardToDevice) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(forwardToDevice) REST conversation consulted\");\n        that.logger.log(\"internal\", LOG_ID + \"(forwardToDevice) REST conversation consulted : \", json.data);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(forwardToDevice) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(forwardToDevice) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getForwardStatus(requestHeader) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/telephony/v1.0/forward\", requestHeader).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(getForwardStatus) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(getForwardStatus) REST conversation consulted\");\n        that.logger.log(\"internal\", LOG_ID + \"(getForwardStatus) REST conversation consulted : \", json.data);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(getForwardStatus) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getForwardStatus) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n  /**\r\n   * @public\r\n   * @method sendDtmf\r\n   * @description\r\n   *      send dtmf to the remote party\r\n   * @param requestHeader\r\n   * @param callId\r\n   * @param deviceId\r\n   * @param data\r\n   */\n\n\n  sendDtmf(requestHeader, callId, deviceId, data) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.post(\"/api/rainbow/telephony/v1.0/calls/\" + callId + \"%23\" + deviceId + \"/dtmf\", requestHeader, data).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(sendDtmf) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(sendDtmf) REST conversation consulted\");\n        that.logger.log(\"internal\", LOG_ID + \"(sendDtmf) REST conversation consulted : \", json.data);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(sendDtmf) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(sendDtmf) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getNomadicStatus(requestHeader) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/telephony/v1.0/nomadic\", requestHeader).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(getNomadicStatus) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(getNomadicStatus) REST conversation consulted\");\n        that.logger.log(\"internal\", LOG_ID + \"(getNomadicStatus) REST conversation consulted : \", json.data);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(getNomadicStatus) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getNomadicStatus) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  nomadicLogin(requestHeader, data) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.put(\"/api/rainbow/telephony/v1.0/nomadic/login\", requestHeader, data).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(nomadicLogin) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(nomadicLogin) REST nomadic login succeed\");\n        that.logger.log(\"internal\", LOG_ID + \"(nomadicLogin) REST nomadic login succeed : \", json.data);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(nomadicLogin) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(nomadicLogin) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  logon(requestHeader, endpointTel, agentId, password, groupId) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      let data = {\n        endpointTel,\n        agentId,\n        password,\n        groupId\n      };\n      that.http.post(\"/api/rainbow/telephony/v1.0/ccd/logon\", requestHeader, data).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(login) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(login) REST conversation created\");\n        that.logger.log(\"internal\", LOG_ID + \"(login) REST conversation created : \", json);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(login) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(login) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  logoff(requestHeader, endpointTel, agentId, password, groupId) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      let data = {\n        endpointTel,\n        agentId,\n        password,\n        groupId\n      };\n      that.http.post(\"/api/rainbow/telephony/v1.0/ccd/logoff\", requestHeader, data).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(logoff) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(logoff) REST conversation created\");\n        that.logger.log(\"internal\", LOG_ID + \"(logoff) REST conversation created : \", json);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(logoff) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(logoff) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  withdrawal(requestHeader, agentId, groupId, status) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      let data = {\n        agentId,\n        groupId,\n        status\n      };\n      that.http.post(\"/api/rainbow/telephony/v1.0/ccd/withdrawal\", requestHeader, data).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(withdrawal) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(withdrawal) REST conversation created\");\n        that.logger.log(\"internal\", LOG_ID + \"(withdrawal) REST conversation created : \", json);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(withdrawal) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(withdrawal) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  wrapup(requestHeader, agentId, groupId, password, status) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      let data = {\n        agentId,\n        password,\n        groupId,\n        status\n      };\n      that.http.post(\"/api/rainbow/telephony/v1.0/ccd/wrapup\", requestHeader, data).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(wrapup) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(wrapup) REST conversation created\");\n        that.logger.log(\"internal\", LOG_ID + \"(wrapup) REST conversation created : \", json);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(wrapup) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(wrapup) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n};\nRESTTelephony = __decorate([Utils_1.logEntryExit(LOG_ID)], RESTTelephony);\nexports.RESTTelephony = RESTTelephony;\nlet restService = null;\nmodule.exports.RESTTelephony = RESTTelephony;","map":{"version":3,"sources":["../../../src/lib/connection/RestServices/RESTTelephony.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Utils_1 = require(\"../../common/Utils\");\r\nconst ErrorCase = require('../../common/ErrorManager');\r\nconst util = require('util');\r\nconst LOG_ID = \"REST/TEL - \";\r\nlet RESTTelephony = class RESTTelephony {\r\n    constructor(evtEmitter, logger) {\r\n        let that = this;\r\n        that.evtEmitter = evtEmitter;\r\n        that.logger = logger;\r\n    }\r\n    start(http) {\r\n        return new Promise((resolve) => {\r\n            let that = this;\r\n            that.http = http;\r\n            resolve();\r\n        });\r\n    }\r\n    makeCall(requestHeader, contact, phoneInfo) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            let data = {\r\n                //data: {\r\n                \"calleeExtNumber\": phoneInfo.longNumber,\r\n                \"calleeIntNumber\": phoneInfo.internalNumber,\r\n                \"calleeShortNumber\": phoneInfo.shortNumber,\r\n                \"calleePbxId\": phoneInfo.pbxId,\r\n                \"calleeDisplayName\": contact.displayName,\r\n                \"correlatorData\": phoneInfo.correlatorData ? phoneInfo.correlatorData : \" \"\r\n                //}\r\n            };\r\n            that.http.post(\"/api/rainbow/telephony/v1.0/calls\", requestHeader, data).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(makeCall) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(makeCall) REST conversation created\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(makeCall) REST conversation created : \", json.data);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(makeCall) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(makeCall) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    releaseCall(requestHeader, call) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            if (call.connectionId) {\r\n                let data = encodeURIComponent(call.connectionId);\r\n                that.http.delete(\"/api/rainbow/telephony/v1.0/calls/\" + data, requestHeader).then((json) => {\r\n                    that.logger.log(\"info\", LOG_ID + \"(releasecall) successfull\");\r\n                    that.logger.log(\"info\", LOG_ID + \"(releasecall) REST conversation released\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(releasecall) REST conversation released : \", json.data);\r\n                    resolve(json.data);\r\n                }).catch((err) => {\r\n                    that.logger.log(\"error\", LOG_ID, \"(releasecall) error.\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(releasecall) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            else {\r\n                let error = ErrorCase.OTHERERROR('can not release call', 'no connectionId found in call ', util.inspect(call)); // errorHelperService.handleError(response);\r\n                that._logger.log(\"error\", LOG_ID + \"(releaseCall) Catch Error !!! \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(releaseCall) Catch Error !!! Error : \", error);\r\n                return reject(error);\r\n            }\r\n        });\r\n    }\r\n    makeConsultationCall(requestHeader, callId, contact, phoneInfo) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            if (callId) {\r\n                let data = {\r\n                    \"calleeExtNumber\": phoneInfo.longNumber,\r\n                    \"calleeIntNumber\": phoneInfo.internalNumber,\r\n                    \"calleeShortNumber\": phoneInfo.shortNumber,\r\n                    \"calleePbxId\": phoneInfo.pbxId,\r\n                    \"calleeDisplayName\": contact.displayName,\r\n                    \"correlatorData\": phoneInfo.correlatorData ? phoneInfo.correlatorData : \" \"\r\n                };\r\n                that.http.post(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(callId) + '/consultation', requestHeader, data).then((json) => {\r\n                    that.logger.log(\"info\", LOG_ID + \"(makeConsultationCall) successfull\");\r\n                    that.logger.log(\"info\", LOG_ID + \"(makeConsultationCall) REST conversation consulted\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(makeConsultationCall) REST conversation consulted : \", json.data);\r\n                    resolve(json.data);\r\n                }).catch((err) => {\r\n                    that.logger.log(\"error\", LOG_ID, \"(makeConsultationCall) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(makeConsultationCall) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            else {\r\n                let error = ErrorCase.OTHERERROR('can not makeConsultationCall call', 'makeConsultationCall for callId ' + callId); // errorHelperService.handleError(response);\r\n                that._logger.log(\"error\", LOG_ID + \"(makeConsultationCall) \", error);\r\n                return reject(error);\r\n            }\r\n        });\r\n    }\r\n    answerCall(requestHeader, call) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            if (call) {\r\n                that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(call.connectionId) + '/answer', requestHeader).then((json) => {\r\n                    that.logger.log(\"info\", LOG_ID + \"(answerCall) successfull\");\r\n                    that.logger.log(\"info\", LOG_ID + \"(answerCall) REST conversation consulted\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(answerCall) REST conversation consulted : \", json.data);\r\n                    resolve(json.data);\r\n                }).catch((err) => {\r\n                    that.logger.log(\"error\", LOG_ID, \"(answerCall) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(answerCall) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            else {\r\n                let error = ErrorCase.OTHERERROR('can not answerCall call', 'answerCall for call ' + util.inspect(call)); // errorHelperService.handleError(response);\r\n                that._logger.log(\"error\", LOG_ID + \"(answerCall) \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(answerCall) : \", error);\r\n                return reject(error);\r\n            }\r\n        });\r\n    }\r\n    holdCall(requestHeader, call) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            if (call) {\r\n                that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(call.connectionId) + '/hold', requestHeader).then((json) => {\r\n                    that.logger.log(\"info\", LOG_ID + \"(holdCall) successfull\");\r\n                    that.logger.log(\"info\", LOG_ID + \"(holdCall) REST conversation consulted\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(holdCall) REST conversation consulted : \", json.data);\r\n                    resolve(json.data);\r\n                }).catch((err) => {\r\n                    that.logger.log(\"error\", LOG_ID, \"(holdCall) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(holdCall) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            else {\r\n                let error = ErrorCase.OTHERERROR('can not holdCall call', 'holdCall for call ' + util.inspect(call)); // errorHelperService.handleError(response);\r\n                that._logger.log(\"error\", LOG_ID + \"(answerCall) \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(answerCall) \", error);\r\n                return reject(error);\r\n            }\r\n        });\r\n    }\r\n    retrieveCall(requestHeader, call) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            if (call) {\r\n                that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(call.connectionId) + '/retrieve', requestHeader).then((json) => {\r\n                    that.logger.log(\"info\", LOG_ID + \"(retrieveCall) successfull\");\r\n                    that.logger.log(\"info\", LOG_ID + \"(retrieveCall) REST conversation consulted\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(retrieveCall) REST conversation consulted : \", json.data);\r\n                    resolve(json.data);\r\n                }).catch((err) => {\r\n                    that.logger.log(\"error\", LOG_ID, \"(retrieveCall) error\");\r\n                    that.logger.log(\"internal\", LOG_ID, \"(retrieveCall) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            else {\r\n                let error = ErrorCase.OTHERERROR('can not retrieveCall call', 'retrieveCall for call ' + util.inspect(call)); // errorHelperService.handleError(response);\r\n                that._logger.log(\"error\", LOG_ID + \"(retrieveCall) \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(retrieveCall) : \", error);\r\n                return reject(error);\r\n            }\r\n        });\r\n    }\r\n    deflectCallToVM(requestHeader, call, VMInfos) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            if (call) {\r\n                that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(call.connectionId) + '/deflect', requestHeader, VMInfos).then((json) => {\r\n                    that.logger.log(\"info\", LOG_ID + \"(deflectCallToVM) successfull\");\r\n                    that.logger.log(\"info\", LOG_ID + \"(deflectCallToVM) REST conversation consulted\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(deflectCallToVM) REST conversation consulted : \", json.data);\r\n                    resolve(json.data);\r\n                }).catch((err) => {\r\n                    that.logger.log(\"error\", LOG_ID, \"(deflectCallToVM) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(deflectCallToVM) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            else {\r\n                let error = ErrorCase.OTHERERROR('can not deflectCallToVM call', 'deflectCallToVM for call ' + util.inspect(call)); // errorHelperService.handleError(response);\r\n                that._logger.log(\"error\", LOG_ID + \"(deflectCallToVM) \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(deflectCallToVM) : \", error);\r\n                return reject(error);\r\n            }\r\n        });\r\n    }\r\n    deflectCall(requestHeader, call, VMInfos) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            if (call) {\r\n                that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(call.connectionId) + '/deflect', requestHeader, VMInfos).then((json) => {\r\n                    that.logger.log(\"info\", LOG_ID + \"(deflectCall) successfull\");\r\n                    that.logger.log(\"info\", LOG_ID + \"(deflectCall) REST conversation consulted\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(deflectCall) REST conversation consulted : \", json.data);\r\n                    resolve(json.data);\r\n                }).catch((err) => {\r\n                    that.logger.log(\"error\", LOG_ID, \"(deflectCall) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(deflectCall) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            else {\r\n                let error = ErrorCase.OTHERERROR('can not deflectCall call', 'deflectCall for call ' + util.inspect(call)); // errorHelperService.handleError(response);\r\n                that._logger.log(\"error\", LOG_ID + \"(deflectCall) \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(deflectCall) : \", error);\r\n                return reject(error);\r\n            }\r\n        });\r\n    }\r\n    transfertCall(requestHeader, activeCall, heldCall) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            if (activeCall && heldCall) {\r\n                that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(activeCall.connectionId) + '/transfer/' + encodeURIComponent(heldCall.connectionId), requestHeader).then((json) => {\r\n                    that.logger.log(\"info\", LOG_ID + \"(transfertCall) successfull\");\r\n                    that.logger.log(\"info\", LOG_ID + \"(transfertCall) REST conversation consulted\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(transfertCall) REST conversation consulted : \", json.data);\r\n                    resolve(json.data);\r\n                }).catch((err) => {\r\n                    that.logger.log(\"error\", LOG_ID, \"(transfertCall) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(transfertCall) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            else {\r\n                let error = ErrorCase.OTHERERROR('can not transfertCall call', 'transfertCall for call ' + util.inspect(activeCall) + util.inspect(heldCall)); // errorHelperService.handleError(response);\r\n                that._logger.log(\"error\", LOG_ID + \"(transfertCall) \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(transfertCall) : \", error);\r\n                return reject(error);\r\n            }\r\n        });\r\n    }\r\n    conferenceCall(requestHeader, activeCall, heldCall) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            if (activeCall && heldCall) {\r\n                that.http.put(\"/api/rainbow/telephony/v1.0/calls/\" + encodeURIComponent(activeCall.connectionId) + '/conference/' + encodeURIComponent(heldCall.connectionId), requestHeader).then((json) => {\r\n                    that.logger.log(\"info\", LOG_ID + \"(conferenceCall) successfull\");\r\n                    that.logger.log(\"info\", LOG_ID + \"(conferenceCall) REST conversation consulted\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(conferenceCall) REST conversation consulted : \", json.data);\r\n                    resolve(json.data);\r\n                }).catch((err) => {\r\n                    that.logger.log(\"error\", LOG_ID, \"(conferenceCall) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(conferenceCall) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            else {\r\n                let error = ErrorCase.OTHERERROR('can not conferenceCall call', 'conferenceCall for call ' + util.inspect(activeCall) + util.inspect(heldCall)); // errorHelperService.handleError(response);\r\n                that._logger.log(\"error\", LOG_ID + \"(conferenceCall) \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(conferenceCall) : \", error);\r\n                return reject(error);\r\n            }\r\n        });\r\n    }\r\n    forwardToDevice(requestHeader, contact, phoneInfo) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            let data = {\r\n                calleeExtNumber: phoneInfo.longNumber,\r\n                calleeIntNumber: phoneInfo.internalNumber,\r\n                calleeShortNumber: phoneInfo.shortNumber,\r\n                calleePbxId: phoneInfo.pbxId,\r\n                calleeDisplayName: contact.displayName\r\n            };\r\n            that.http.post(\"/api/rainbow/telephony/v1.0/calls/forward\", requestHeader, data).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(forwardToDevice) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(forwardToDevice) REST conversation consulted\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(forwardToDevice) REST conversation consulted : \", json.data);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(forwardToDevice) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(forwardToDevice) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getForwardStatus(requestHeader) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/telephony/v1.0/forward\", requestHeader).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(getForwardStatus) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(getForwardStatus) REST conversation consulted\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getForwardStatus) REST conversation consulted : \", json.data);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(getForwardStatus) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getForwardStatus) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method sendDtmf\r\n     * @description\r\n     *      send dtmf to the remote party\r\n     * @param requestHeader\r\n     * @param callId\r\n     * @param deviceId\r\n     * @param data\r\n     */\r\n    sendDtmf(requestHeader, callId, deviceId, data) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.post(\"/api/rainbow/telephony/v1.0/calls/\" + callId + \"%23\" + deviceId + \"/dtmf\", requestHeader, data).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(sendDtmf) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(sendDtmf) REST conversation consulted\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(sendDtmf) REST conversation consulted : \", json.data);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(sendDtmf) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(sendDtmf) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getNomadicStatus(requestHeader) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/telephony/v1.0/nomadic\", requestHeader).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(getNomadicStatus) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(getNomadicStatus) REST conversation consulted\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getNomadicStatus) REST conversation consulted : \", json.data);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(getNomadicStatus) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getNomadicStatus) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    nomadicLogin(requestHeader, data) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.put(\"/api/rainbow/telephony/v1.0/nomadic/login\", requestHeader, data).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(nomadicLogin) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(nomadicLogin) REST nomadic login succeed\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(nomadicLogin) REST nomadic login succeed : \", json.data);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(nomadicLogin) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(nomadicLogin) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    logon(requestHeader, endpointTel, agentId, password, groupId) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            let data = {\r\n                endpointTel,\r\n                agentId,\r\n                password,\r\n                groupId\r\n            };\r\n            that.http.post(\"/api/rainbow/telephony/v1.0/ccd/logon\", requestHeader, data).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(login) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(login) REST conversation created\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(login) REST conversation created : \", json);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(login) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(login) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    logoff(requestHeader, endpointTel, agentId, password, groupId) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            let data = {\r\n                endpointTel,\r\n                agentId,\r\n                password,\r\n                groupId\r\n            };\r\n            that.http.post(\"/api/rainbow/telephony/v1.0/ccd/logoff\", requestHeader, data).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(logoff) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(logoff) REST conversation created\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(logoff) REST conversation created : \", json);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(logoff) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(logoff) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    withdrawal(requestHeader, agentId, groupId, status) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            let data = {\r\n                agentId,\r\n                groupId,\r\n                status\r\n            };\r\n            that.http.post(\"/api/rainbow/telephony/v1.0/ccd/withdrawal\", requestHeader, data).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(withdrawal) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(withdrawal) REST conversation created\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(withdrawal) REST conversation created : \", json);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(withdrawal) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(withdrawal) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    wrapup(requestHeader, agentId, groupId, password, status) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            let data = {\r\n                agentId,\r\n                password,\r\n                groupId,\r\n                status\r\n            };\r\n            that.http.post(\"/api/rainbow/telephony/v1.0/ccd/wrapup\", requestHeader, data).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(wrapup) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(wrapup) REST conversation created\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(wrapup) REST conversation created : \", json);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(wrapup) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(wrapup) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n};\r\nRESTTelephony = __decorate([\r\n    Utils_1.logEntryExit(LOG_ID)\r\n], RESTTelephony);\r\nexports.RESTTelephony = RESTTelephony;\r\nlet restService = null;\r\nmodule.exports.RESTTelephony = RESTTelephony;\r\n//# sourceMappingURL=RESTTelephony.js.map"]},"metadata":{},"sourceType":"script"}