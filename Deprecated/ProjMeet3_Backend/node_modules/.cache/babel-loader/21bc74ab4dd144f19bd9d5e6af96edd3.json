{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('@xmpp/events');\n\nclass Reconnect extends EventEmitter {\n  constructor(entity) {\n    super();\n    this.delay = 1000;\n    this.entity = entity;\n    this._timeout = null;\n  }\n\n  scheduleReconnect() {\n    const {\n      entity,\n      delay,\n      _timeout\n    } = this;\n    clearTimeout(_timeout);\n    this._timeout = setTimeout(async () => {\n      if (entity.status !== 'disconnect') {\n        return;\n      }\n\n      try {\n        await this.reconnect(); // eslint-disable-next-line no-unused-vars\n      } catch (err) {// Ignoring the rejection is safe because the error is emitted on entity by #start\n      }\n    }, delay);\n  }\n\n  async reconnect() {\n    const {\n      entity\n    } = this;\n    this.emit('reconnecting');\n    const {\n      service,\n      domain,\n      lang\n    } = entity.options;\n    await entity.connect(service);\n    await entity.open({\n      domain,\n      lang\n    });\n    this.emit('reconnected');\n  }\n\n  start() {\n    const {\n      entity\n    } = this;\n    const listeners = {};\n\n    listeners.disconnect = () => {\n      this.scheduleReconnect();\n    };\n\n    this.listeners = listeners;\n    entity.on('disconnect', listeners.disconnect);\n  }\n\n  stop() {\n    const {\n      entity,\n      listeners,\n      _timeout\n    } = this;\n    entity.removeListener('disconnect', listeners.disconnect);\n    clearTimeout(_timeout);\n  }\n\n}\n\nmodule.exports = function reconnect({\n  entity\n}) {\n  const r = new Reconnect(entity);\n  r.start();\n  return r;\n};","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/@xmpp/reconnect/index.js"],"names":["EventEmitter","require","Reconnect","constructor","entity","delay","_timeout","scheduleReconnect","clearTimeout","setTimeout","status","reconnect","err","emit","service","domain","lang","options","connect","open","start","listeners","disconnect","on","stop","removeListener","module","exports","r"],"mappings":"AAAA;;AAEA,MAAM;AAACA,EAAAA;AAAD,IAAiBC,OAAO,CAAC,cAAD,CAA9B;;AAEA,MAAMC,SAAN,SAAwBF,YAAxB,CAAqC;AACnCG,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB;AAEA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,QAAL,GAAgB,IAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAACH,MAAAA,MAAD;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,QAA4B,IAAlC;AACAE,IAAAA,YAAY,CAACF,QAAD,CAAZ;AACA,SAAKA,QAAL,GAAgBG,UAAU,CAAC,YAAY;AACrC,UAAIL,MAAM,CAACM,MAAP,KAAkB,YAAtB,EAAoC;AAClC;AACD;;AAED,UAAI;AACF,cAAM,KAAKC,SAAL,EAAN,CADE,CAEF;AACD,OAHD,CAGE,OAAOC,GAAP,EAAY,CACZ;AACD;AACF,KAXyB,EAWvBP,KAXuB,CAA1B;AAYD;;AAED,QAAMM,SAAN,GAAkB;AAChB,UAAM;AAACP,MAAAA;AAAD,QAAW,IAAjB;AACA,SAAKS,IAAL,CAAU,cAAV;AAEA,UAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA,MAAV;AAAkBC,MAAAA;AAAlB,QAA0BZ,MAAM,CAACa,OAAvC;AACA,UAAMb,MAAM,CAACc,OAAP,CAAeJ,OAAf,CAAN;AACA,UAAMV,MAAM,CAACe,IAAP,CAAY;AAACJ,MAAAA,MAAD;AAASC,MAAAA;AAAT,KAAZ,CAAN;AAEA,SAAKH,IAAL,CAAU,aAAV;AACD;;AAEDO,EAAAA,KAAK,GAAG;AACN,UAAM;AAAChB,MAAAA;AAAD,QAAW,IAAjB;AACA,UAAMiB,SAAS,GAAG,EAAlB;;AACAA,IAAAA,SAAS,CAACC,UAAV,GAAuB,MAAM;AAC3B,WAAKf,iBAAL;AACD,KAFD;;AAIA,SAAKc,SAAL,GAAiBA,SAAjB;AACAjB,IAAAA,MAAM,CAACmB,EAAP,CAAU,YAAV,EAAwBF,SAAS,CAACC,UAAlC;AACD;;AAEDE,EAAAA,IAAI,GAAG;AACL,UAAM;AAACpB,MAAAA,MAAD;AAASiB,MAAAA,SAAT;AAAoBf,MAAAA;AAApB,QAAgC,IAAtC;AACAF,IAAAA,MAAM,CAACqB,cAAP,CAAsB,YAAtB,EAAoCJ,SAAS,CAACC,UAA9C;AACAd,IAAAA,YAAY,CAACF,QAAD,CAAZ;AACD;;AApDkC;;AAuDrCoB,MAAM,CAACC,OAAP,GAAiB,SAAShB,SAAT,CAAmB;AAACP,EAAAA;AAAD,CAAnB,EAA6B;AAC5C,QAAMwB,CAAC,GAAG,IAAI1B,SAAJ,CAAcE,MAAd,CAAV;AACAwB,EAAAA,CAAC,CAACR,KAAF;AACA,SAAOQ,CAAP;AACD,CAJD","sourcesContent":["'use strict'\r\n\r\nconst {EventEmitter} = require('@xmpp/events')\r\n\r\nclass Reconnect extends EventEmitter {\r\n  constructor(entity) {\r\n    super()\r\n\r\n    this.delay = 1000\r\n    this.entity = entity\r\n    this._timeout = null\r\n  }\r\n\r\n  scheduleReconnect() {\r\n    const {entity, delay, _timeout} = this\r\n    clearTimeout(_timeout)\r\n    this._timeout = setTimeout(async () => {\r\n      if (entity.status !== 'disconnect') {\r\n        return\r\n      }\r\n\r\n      try {\r\n        await this.reconnect()\r\n        // eslint-disable-next-line no-unused-vars\r\n      } catch (err) {\r\n        // Ignoring the rejection is safe because the error is emitted on entity by #start\r\n      }\r\n    }, delay)\r\n  }\r\n\r\n  async reconnect() {\r\n    const {entity} = this\r\n    this.emit('reconnecting')\r\n\r\n    const {service, domain, lang} = entity.options\r\n    await entity.connect(service)\r\n    await entity.open({domain, lang})\r\n\r\n    this.emit('reconnected')\r\n  }\r\n\r\n  start() {\r\n    const {entity} = this\r\n    const listeners = {}\r\n    listeners.disconnect = () => {\r\n      this.scheduleReconnect()\r\n    }\r\n\r\n    this.listeners = listeners\r\n    entity.on('disconnect', listeners.disconnect)\r\n  }\r\n\r\n  stop() {\r\n    const {entity, listeners, _timeout} = this\r\n    entity.removeListener('disconnect', listeners.disconnect)\r\n    clearTimeout(_timeout)\r\n  }\r\n}\r\n\r\nmodule.exports = function reconnect({entity}) {\r\n  const r = new Reconnect(entity)\r\n  r.start()\r\n  return r\r\n}\r\n"]},"metadata":{},"sourceType":"script"}