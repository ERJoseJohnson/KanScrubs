{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); //const Call = require(\"./Call\");\n\nconst Call_1 = require(\"./Call\");\n\nconst uuid4 = require(\"uuid/v4\");\n/**\r\n * @class\r\n * @name Conversation\r\n * @description\r\n *      This class represents a conversation <br>\r\n *\t\tA conversation is a \"long\" interaction (aka the \"long tail\") between the user ane one or several contacts (Rainbow users or not) based on the IM media if the recipients are Rainbow users. <br>\r\n *\t\tA conversation never ends and all interactions done can be retrieved. <br>\r\n */\n\n\nclass Conversation {\n  constructor(conversationId) {\n    /**\r\n     * @public\r\n     * @property {string} id The conversation ID\r\n     * @readonly\r\n     */\n    this.id = conversationId;\n    /**\r\n     * @public\r\n     * @property {string} dbId The database ID\r\n     * @readonly\r\n     */\n\n    this.dbId = null;\n    /**\r\n     * @public\r\n     * @property {ConversationType} type The type of the conversation. Can be ONE_TO_ONE (0), BUBBLE (1) or BOT (2)\r\n     * @readonly\r\n     */\n\n    this.type = null;\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.owner = null;\n    /**\r\n     * @public\r\n     * @property {Contact} contact (ONE_TO_ONE conversation only) The recipient of the conversation\r\n     * @link Contact\r\n     * @readonly\r\n     */\n\n    this.contact = null;\n    /**\r\n     * @public\r\n     * @property {Bubble} bubble (BUBBLE conversation only) The conversation bubble\r\n     * @link Bubble\r\n     * @readonly\r\n     */\n\n    this.bubble = null;\n    /**\r\n     * @public\r\n     * @property {Object} capabilities The capabilities of the conversation\r\n     * @readonly\r\n     */\n\n    this.capabilities = null; // Display information\n\n    /**\r\n     * @public\r\n     * @property {Object} avatar (ONE_TO_ONE conversation only) The avatar of the conversation\r\n     * @readonly\r\n     */\n\n    this.avatar = null;\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.presenceStatus = null;\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.name = function () {\n      return {};\n    };\n    /**\r\n     * @public\r\n     * @property {string} filterName The name of the conversation (the display name of the recipient for ONE_TO_ONE conversation or the room name for a ROOM conversation)\r\n     * @readonly\r\n     */\n\n\n    this.filterName = \"\";\n    /**\r\n     * @public\r\n     * @property {number} missedCounter The number of instant messages not read\r\n     * @readonly\r\n     */\n\n    this.missedCounter = 0;\n    /**\r\n     * @public\r\n     * @property {number} missedCalls (ONE_TO_ONE conversation only) The number of call missed with this recipient (only WebRTC call)\r\n     * @readonly\r\n     */\n\n    this.missedCalls = 0;\n    /**\r\n     * @public\r\n     * @property {Message[]} messages The list of messages downloaded for this conversation\r\n     * @link Message\r\n     * @readonly\r\n     */\n\n    this.messages = [];\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.participantStatuses = {};\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.draft = \"\";\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.uploadFile = null;\n    /**\r\n     * @public\r\n     * @property {ConversationStatus} status The status of the conversation\r\n     * @readonly\r\n     */\n\n    this.status = Conversation.Status.ACTIVE; // History stuff\n\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.historyIndex = -1;\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.historyMessages = [];\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.historyDefered = null;\n    /**\r\n     * @public\r\n     * @property {Boolean} True if the history has been completely loaded\r\n     * @readonly\r\n     */\n\n    this.historyComplete = false; // LastModification\n\n    /**\r\n     * @public\r\n     * @property {Date} lastModification The date of the last modification of the conversation\r\n     * @readonly\r\n     */\n\n    this.lastModification = undefined; // CreationDate\n\n    /**\r\n     * @public\r\n     * @property {Date} creationDate The date of the creation of the conversation\r\n     * @since 1.21\r\n     * @readonly\r\n     */\n\n    this.creationDate = new Date(); // LastMessageText\n\n    /**\r\n     * @public\r\n     * @property {string} lastMessageText The text of the last message received of the conversation\r\n     * @readonly\r\n     */\n\n    this.lastMessageText = \"\"; // LastMessageSenderID\n\n    /**\r\n     * @public\r\n     * @property {string} lastMessageSender The ID of the user for the last message\r\n     * @readonly\r\n     */\n\n    this.lastMessageSender = \"\"; // Picture in picture\n\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.pip = true; // Call references\n\n    /**\r\n     * @public\r\n     * @property {Call} videoCall Link to a WebRTC call (audio/video/sharing) if exists\r\n     * @readonly\r\n     */\n\n    this.videoCall = {\n      status: Call_1.Call.Status.UNKNOWN\n    };\n    /**\r\n     * @public\r\n     * @property {Call} audioCall Link to a telephony call (from a PBX) if exists\r\n     * @readonly\r\n     */\n\n    this.audioCall = null;\n    /**\r\n     * @public\r\n     * @property {ConferenceSession} pstnConferenceSession Link to a pstn conference session if exists\r\n     * @readonly\r\n     * @since 1.30\r\n     */\n\n    this.pstnConferenceSession = null;\n    /**\r\n     * @public\r\n     * @property {ConferenceSession} webConferenceSession Link to a webrtc conference session if exists\r\n     * @readonly\r\n     * @since 1.30\r\n     */\n\n    this.webConferenceSession = null; //is muted\n\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.isMutedAudio = false;\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.isMutedVideo = false;\n    /**\r\n     * @private\r\n     * @readonly\r\n     */\n\n    this.infoVisible = null; //is conversation muted\n\n    this.muted = false; //message ID\n\n    var randomBase = this.generateRandomID();\n    var messageId = 0;\n  }\n  /**\r\n   * @private\r\n   * @method addMessage\r\n   * @memberof Conversation\r\n   * @instance\r\n   */\n\n\n  addMessage(message) {\n    let that = this; // Check if this message already exist in message store\n\n    if (that.messages.find(function (item) {\n      return item.id === message.id;\n    })) {\n      return message;\n    } // Store the message\n\n\n    that.messages.push(message); // Update lastModification\n\n    that.lastModification = new Date(); // Update lastMessageText\n\n    that.lastMessageText = message.content; //update last activity date for rooms when we receive/sent messages\n\n    /*\r\n    console.log(\"conversation bubble : \", this.bubble);\r\n    // */\n\n    if (this.bubble) {\n      this.bubble.lastActivityDate = this.lastModification;\n    }\n\n    return message;\n  }\n  /*************************************************************/\n\n  /* STATIC FACTORIES                                          */\n\n  /*************************************************************/\n\n\n  static createOneToOneConversation(participant) {\n    // Create the conversation object\n    let conversation = new Conversation(participant.jid_im); // Attach it to contact\n\n    conversation.contact = participant;\n    participant.conversation = conversation; // Fill display information\n\n    if (participant.isBot) {\n      conversation.avatar = \"\";\n      conversation.type = Conversation.Type.BOT;\n    } else {\n      conversation.avatar = participant.avatar ? participant.avatar.src : null;\n      conversation.type = Conversation.Type.ONE_TO_ONE;\n    }\n\n    conversation.name = participant.name; // TODO ? conversation.filterName =\n    // utilService.removeDiacritis(participant.displayName.toLowerCase());\n\n    return conversation;\n  }\n\n  static createBubbleConversation(bubble) {\n    // Create the conversation object\n    var conversation = new Conversation(bubble.jid);\n    conversation.type = Conversation.Type.ROOM;\n    conversation.bubble = bubble; // TODO ? conversation.filterName =\n    // utilService.removeDiacritis(room.name.toLowerCase());\n\n    return conversation;\n  }\n\n  generateRandomID() {\n    return uuid4();\n  }\n\n  static getUniqueMessageId() {\n    let messageToSendID = \"node_\" + this.randomBase + this.messageId;\n    this.messageId = this.messageId + 1;\n    return messageToSendID;\n  }\n  /*************************************************************/\n\n  /* PUBLIC STATIC METHODS                                     */\n\n  /*************************************************************/\n\n\n  static stringToStatus(status) {\n    switch (status) {\n      case \"composing\":\n        return Conversation.Status.COMPOSING;\n\n      case \"paused\":\n        return Conversation.Status.PAUSED;\n\n      default:\n        return Conversation.Status.ACTIVE;\n    }\n  }\n  /*************************************************************/\n\n  /* PUBLIC METHODS                                            */\n\n  /*************************************************************/\n\n\n  reset() {\n    this.messages = [];\n    this.historyIndex = -1;\n    this.historyMessages = [];\n    this.historyComplete = false;\n    this.currentHistoryId = null;\n    this.lastMessageText = null;\n  }\n\n  getMessageById(messId) {\n    return this.messages.find(item => {\n      return item.id === messId;\n    });\n  }\n\n  getlastEditableMsg() {\n    this.messages.sort((a, b) => {\n      let dateElmt1 = new Date(a.date);\n      let dateElmt2 = new Date(b.date);\n      return dateElmt1.getTime() - dateElmt2.getTime();\n    });\n    return this.messages.slice(-1)[0];\n  }\n\n}\n\nexports.Conversation = Conversation;\n/**\r\n * Enum conversation type\r\n * @public\r\n * @enum {number}\r\n * @readonly\r\n */\n\nConversation.Type = {\n  /** One-to-one conversation */\n  ONE_TO_ONE: 0,\n\n  /** Room conversation with multiple participants */\n  ROOM: 1,\n\n  /** Conversation with a Bot */\n  BOT: 2\n};\n/**\r\n * Enum conversation status\r\n * @public\r\n * @enum {Object}\r\n * @readonly\r\n */\n\nConversation.Status = {\n  /** Active conversation */\n  ACTIVE: {\n    key: 0,\n    value: \"active\"\n  },\n\n  /** Inactive conversation */\n  INACTIVE: {\n    key: 1,\n    value: \"inactive\"\n  },\n\n  /** When composing a message */\n  COMPOSING: {\n    key: 2,\n    value: \"composing\"\n  },\n\n  /** When a message is written but not sent */\n  PAUSED: {\n    key: 3,\n    value: \"paused\"\n  }\n};\nmodule.exports.Conversation = Conversation;","map":{"version":3,"sources":["../../../src/lib/common/models/Conversation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//const Call = require(\"./Call\");\r\nconst Call_1 = require(\"./Call\");\r\nconst uuid4 = require(\"uuid/v4\");\r\n/**\r\n * @class\r\n * @name Conversation\r\n * @description\r\n *      This class represents a conversation <br>\r\n *\t\tA conversation is a \"long\" interaction (aka the \"long tail\") between the user ane one or several contacts (Rainbow users or not) based on the IM media if the recipients are Rainbow users. <br>\r\n *\t\tA conversation never ends and all interactions done can be retrieved. <br>\r\n */\r\nclass Conversation {\r\n    constructor(conversationId) {\r\n        /**\r\n         * @public\r\n         * @property {string} id The conversation ID\r\n         * @readonly\r\n         */\r\n        this.id = conversationId;\r\n        /**\r\n         * @public\r\n         * @property {string} dbId The database ID\r\n         * @readonly\r\n         */\r\n        this.dbId = null;\r\n        /**\r\n         * @public\r\n         * @property {ConversationType} type The type of the conversation. Can be ONE_TO_ONE (0), BUBBLE (1) or BOT (2)\r\n         * @readonly\r\n         */\r\n        this.type = null;\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.owner = null;\r\n        /**\r\n         * @public\r\n         * @property {Contact} contact (ONE_TO_ONE conversation only) The recipient of the conversation\r\n         * @link Contact\r\n         * @readonly\r\n         */\r\n        this.contact = null;\r\n        /**\r\n         * @public\r\n         * @property {Bubble} bubble (BUBBLE conversation only) The conversation bubble\r\n         * @link Bubble\r\n         * @readonly\r\n         */\r\n        this.bubble = null;\r\n        /**\r\n         * @public\r\n         * @property {Object} capabilities The capabilities of the conversation\r\n         * @readonly\r\n         */\r\n        this.capabilities = null;\r\n        // Display information\r\n        /**\r\n         * @public\r\n         * @property {Object} avatar (ONE_TO_ONE conversation only) The avatar of the conversation\r\n         * @readonly\r\n         */\r\n        this.avatar = null;\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.presenceStatus = null;\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.name = function () {\r\n            return {};\r\n        };\r\n        /**\r\n         * @public\r\n         * @property {string} filterName The name of the conversation (the display name of the recipient for ONE_TO_ONE conversation or the room name for a ROOM conversation)\r\n         * @readonly\r\n         */\r\n        this.filterName = \"\";\r\n        /**\r\n         * @public\r\n         * @property {number} missedCounter The number of instant messages not read\r\n         * @readonly\r\n         */\r\n        this.missedCounter = 0;\r\n        /**\r\n         * @public\r\n         * @property {number} missedCalls (ONE_TO_ONE conversation only) The number of call missed with this recipient (only WebRTC call)\r\n         * @readonly\r\n         */\r\n        this.missedCalls = 0;\r\n        /**\r\n         * @public\r\n         * @property {Message[]} messages The list of messages downloaded for this conversation\r\n         * @link Message\r\n         * @readonly\r\n         */\r\n        this.messages = [];\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.participantStatuses = {};\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.draft = \"\";\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.uploadFile = null;\r\n        /**\r\n         * @public\r\n         * @property {ConversationStatus} status The status of the conversation\r\n         * @readonly\r\n         */\r\n        this.status = Conversation.Status.ACTIVE;\r\n        // History stuff\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.historyIndex = -1;\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.historyMessages = [];\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.historyDefered = null;\r\n        /**\r\n         * @public\r\n         * @property {Boolean} True if the history has been completely loaded\r\n         * @readonly\r\n         */\r\n        this.historyComplete = false;\r\n        // LastModification\r\n        /**\r\n         * @public\r\n         * @property {Date} lastModification The date of the last modification of the conversation\r\n         * @readonly\r\n         */\r\n        this.lastModification = undefined;\r\n        // CreationDate\r\n        /**\r\n         * @public\r\n         * @property {Date} creationDate The date of the creation of the conversation\r\n         * @since 1.21\r\n         * @readonly\r\n         */\r\n        this.creationDate = new Date();\r\n        // LastMessageText\r\n        /**\r\n         * @public\r\n         * @property {string} lastMessageText The text of the last message received of the conversation\r\n         * @readonly\r\n         */\r\n        this.lastMessageText = \"\";\r\n        // LastMessageSenderID\r\n        /**\r\n         * @public\r\n         * @property {string} lastMessageSender The ID of the user for the last message\r\n         * @readonly\r\n         */\r\n        this.lastMessageSender = \"\";\r\n        // Picture in picture\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.pip = true;\r\n        // Call references\r\n        /**\r\n         * @public\r\n         * @property {Call} videoCall Link to a WebRTC call (audio/video/sharing) if exists\r\n         * @readonly\r\n         */\r\n        this.videoCall = {\r\n            status: Call_1.Call.Status.UNKNOWN\r\n        };\r\n        /**\r\n         * @public\r\n         * @property {Call} audioCall Link to a telephony call (from a PBX) if exists\r\n         * @readonly\r\n         */\r\n        this.audioCall = null;\r\n        /**\r\n         * @public\r\n         * @property {ConferenceSession} pstnConferenceSession Link to a pstn conference session if exists\r\n         * @readonly\r\n         * @since 1.30\r\n         */\r\n        this.pstnConferenceSession = null;\r\n        /**\r\n         * @public\r\n         * @property {ConferenceSession} webConferenceSession Link to a webrtc conference session if exists\r\n         * @readonly\r\n         * @since 1.30\r\n         */\r\n        this.webConferenceSession = null;\r\n        //is muted\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.isMutedAudio = false;\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.isMutedVideo = false;\r\n        /**\r\n         * @private\r\n         * @readonly\r\n         */\r\n        this.infoVisible = null;\r\n        //is conversation muted\r\n        this.muted = false;\r\n        //message ID\r\n        var randomBase = this.generateRandomID();\r\n        var messageId = 0;\r\n    }\r\n    /**\r\n     * @private\r\n     * @method addMessage\r\n     * @memberof Conversation\r\n     * @instance\r\n     */\r\n    addMessage(message) {\r\n        let that = this;\r\n        // Check if this message already exist in message store\r\n        if (that.messages.find(function (item) { return item.id === message.id; })) {\r\n            return message;\r\n        }\r\n        // Store the message\r\n        that.messages.push(message);\r\n        // Update lastModification\r\n        that.lastModification = new Date();\r\n        // Update lastMessageText\r\n        that.lastMessageText = message.content;\r\n        //update last activity date for rooms when we receive/sent messages\r\n        /*\r\n        console.log(\"conversation bubble : \", this.bubble);\r\n        // */\r\n        if (this.bubble) {\r\n            this.bubble.lastActivityDate = this.lastModification;\r\n        }\r\n        return message;\r\n    }\r\n    /*************************************************************/\r\n    /* STATIC FACTORIES                                          */\r\n    /*************************************************************/\r\n    static createOneToOneConversation(participant) {\r\n        // Create the conversation object\r\n        let conversation = new Conversation(participant.jid_im);\r\n        // Attach it to contact\r\n        conversation.contact = participant;\r\n        participant.conversation = conversation;\r\n        // Fill display information\r\n        if (participant.isBot) {\r\n            conversation.avatar = \"\";\r\n            conversation.type = Conversation.Type.BOT;\r\n        }\r\n        else {\r\n            conversation.avatar = participant.avatar ?\r\n                participant.avatar.src :\r\n                null;\r\n            conversation.type = Conversation.Type.ONE_TO_ONE;\r\n        }\r\n        conversation.name = participant.name;\r\n        // TODO ? conversation.filterName =\r\n        // utilService.removeDiacritis(participant.displayName.toLowerCase());\r\n        return conversation;\r\n    }\r\n    static createBubbleConversation(bubble) {\r\n        // Create the conversation object\r\n        var conversation = new Conversation(bubble.jid);\r\n        conversation.type = Conversation.Type.ROOM;\r\n        conversation.bubble = bubble;\r\n        // TODO ? conversation.filterName =\r\n        // utilService.removeDiacritis(room.name.toLowerCase());\r\n        return conversation;\r\n    }\r\n    generateRandomID() {\r\n        return uuid4();\r\n    }\r\n    static getUniqueMessageId() {\r\n        let messageToSendID = \"node_\" + this.randomBase + this.messageId;\r\n        this.messageId = this.messageId + 1;\r\n        return messageToSendID;\r\n    }\r\n    /*************************************************************/\r\n    /* PUBLIC STATIC METHODS                                     */\r\n    /*************************************************************/\r\n    static stringToStatus(status) {\r\n        switch (status) {\r\n            case \"composing\":\r\n                return Conversation.Status.COMPOSING;\r\n            case \"paused\":\r\n                return Conversation.Status.PAUSED;\r\n            default:\r\n                return Conversation.Status.ACTIVE;\r\n        }\r\n    }\r\n    /*************************************************************/\r\n    /* PUBLIC METHODS                                            */\r\n    /*************************************************************/\r\n    reset() {\r\n        this.messages = [];\r\n        this.historyIndex = -1;\r\n        this.historyMessages = [];\r\n        this.historyComplete = false;\r\n        this.currentHistoryId = null;\r\n        this.lastMessageText = null;\r\n    }\r\n    getMessageById(messId) {\r\n        return this\r\n            .messages\r\n            .find((item) => {\r\n            return item.id === messId;\r\n        });\r\n    }\r\n    getlastEditableMsg() {\r\n        this.messages.sort((a, b) => {\r\n            let dateElmt1 = new Date(a.date);\r\n            let dateElmt2 = new Date(b.date);\r\n            return dateElmt1.getTime() - dateElmt2.getTime();\r\n        });\r\n        return this.messages.slice(-1)[0];\r\n    }\r\n}\r\nexports.Conversation = Conversation;\r\n/**\r\n * Enum conversation type\r\n * @public\r\n * @enum {number}\r\n * @readonly\r\n */\r\nConversation.Type = {\r\n    /** One-to-one conversation */\r\n    ONE_TO_ONE: 0,\r\n    /** Room conversation with multiple participants */\r\n    ROOM: 1,\r\n    /** Conversation with a Bot */\r\n    BOT: 2\r\n};\r\n/**\r\n * Enum conversation status\r\n * @public\r\n * @enum {Object}\r\n * @readonly\r\n */\r\nConversation.Status = {\r\n    /** Active conversation */\r\n    ACTIVE: {\r\n        key: 0,\r\n        value: \"active\"\r\n    },\r\n    /** Inactive conversation */\r\n    INACTIVE: {\r\n        key: 1,\r\n        value: \"inactive\"\r\n    },\r\n    /** When composing a message */\r\n    COMPOSING: {\r\n        key: 2,\r\n        value: \"composing\"\r\n    },\r\n    /** When a message is written but not sent */\r\n    PAUSED: {\r\n        key: 3,\r\n        value: \"paused\"\r\n    }\r\n};\r\nmodule.exports.Conversation = Conversation;\r\n//# sourceMappingURL=Conversation.js.map"]},"metadata":{},"sourceType":"script"}