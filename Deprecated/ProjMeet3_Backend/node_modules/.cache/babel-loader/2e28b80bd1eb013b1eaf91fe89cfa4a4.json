{"ast":null,"code":"'use strict';\n/**\r\n * References\r\n * https://xmpp.org/rfcs/rfc6120.html#stanzas-semantics-iq\r\n * https://xmpp.org/rfcs/rfc6120.html#stanzas-error\r\n */\n\nconst xml = require('@xmpp/xml');\n\nconst NS_STANZA = 'urn:ietf:params:xml:ns:xmpp-stanzas';\n\nfunction isQuery({\n  name,\n  type\n}) {\n  if (name !== 'iq') return false;\n  if (type === 'error' || type === 'result') return false;\n  return true;\n}\n\nfunction isValidQuery({\n  type\n}, children, child) {\n  if (type !== 'get' && type !== 'set') return false;\n  if (children.length !== 1) return false;\n  if (!child) return false;\n  return true;\n}\n\nfunction buildReply({\n  stanza\n}) {\n  return xml('iq', {\n    to: stanza.attrs.from,\n    from: stanza.attrs.to,\n    id: stanza.attrs.id\n  });\n}\n\nfunction buildReplyResult(ctx, child) {\n  const reply = buildReply(ctx);\n  reply.attrs.type = 'result';\n\n  if (child) {\n    reply.append(child);\n  }\n\n  return reply;\n}\n\nfunction buildReplyError(ctx, error, child) {\n  const reply = buildReply(ctx);\n  reply.attrs.type = 'error';\n\n  if (child) {\n    reply.append(child);\n  }\n\n  reply.append(error);\n  return reply;\n}\n\nfunction buildError(type, condition) {\n  return xml('error', {\n    type\n  }, xml(condition, NS_STANZA));\n}\n\nfunction iqHandler(entity) {\n  return async function iqHandler(ctx, next) {\n    if (!isQuery(ctx)) return next();\n    const {\n      stanza\n    } = ctx;\n    const children = stanza.getChildElements();\n    const [child] = children;\n\n    if (!isValidQuery(ctx, children, child)) {\n      return buildReplyError(ctx, buildError('modify', 'bad-request'), child);\n    }\n\n    ctx.element = child;\n    let reply;\n\n    try {\n      reply = await next();\n    } catch (err) {\n      entity.emit('error', err);\n      reply = buildError('cancel', 'internal-server-error');\n    }\n\n    if (!reply) {\n      reply = buildError('cancel', 'service-unavailable');\n    }\n\n    if (reply instanceof xml.Element && reply.is('error')) {\n      return buildReplyError(ctx, reply, child);\n    }\n\n    return buildReplyResult(ctx, reply instanceof xml.Element ? reply : undefined);\n  };\n}\n\nfunction route(type, ns, name, handler) {\n  return function (ctx, next) {\n    if (ctx.type !== type | !ctx.element || !ctx.element.is(name, ns)) return next();\n    return handler(ctx, next);\n  };\n}\n\nmodule.exports = function ({\n  middleware,\n  entity\n}) {\n  middleware.use(iqHandler(entity));\n  return {\n    get(ns, name, handler) {\n      middleware.use(route('get', ns, name, handler));\n    },\n\n    set(ns, name, handler) {\n      middleware.use(route('set', ns, name, handler));\n    }\n\n  };\n};","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/@xmpp/iq/callee.js"],"names":["xml","require","NS_STANZA","isQuery","name","type","isValidQuery","children","child","length","buildReply","stanza","to","attrs","from","id","buildReplyResult","ctx","reply","append","buildReplyError","error","buildError","condition","iqHandler","entity","next","getChildElements","element","err","emit","Element","is","undefined","route","ns","handler","module","exports","middleware","use","get","set"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\n/**\r\n * References\r\n * https://xmpp.org/rfcs/rfc6120.html#stanzas-semantics-iq\r\n * https://xmpp.org/rfcs/rfc6120.html#stanzas-error\r\n */\r\n\r\nconst xml = require('@xmpp/xml')\r\n\r\nconst NS_STANZA = 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n\r\nfunction isQuery({name, type}) {\r\n  if (name !== 'iq') return false\r\n  if (type === 'error' || type === 'result') return false\r\n  return true\r\n}\r\n\r\nfunction isValidQuery({type}, children, child) {\r\n  if (type !== 'get' && type !== 'set') return false\r\n  if (children.length !== 1) return false\r\n  if (!child) return false\r\n  return true\r\n}\r\n\r\nfunction buildReply({stanza}) {\r\n  return xml('iq', {\r\n    to: stanza.attrs.from,\r\n    from: stanza.attrs.to,\r\n    id: stanza.attrs.id,\r\n  })\r\n}\r\n\r\nfunction buildReplyResult(ctx, child) {\r\n  const reply = buildReply(ctx)\r\n  reply.attrs.type = 'result'\r\n  if (child) {\r\n    reply.append(child)\r\n  }\r\n\r\n  return reply\r\n}\r\n\r\nfunction buildReplyError(ctx, error, child) {\r\n  const reply = buildReply(ctx)\r\n  reply.attrs.type = 'error'\r\n  if (child) {\r\n    reply.append(child)\r\n  }\r\n\r\n  reply.append(error)\r\n  return reply\r\n}\r\n\r\nfunction buildError(type, condition) {\r\n  return xml('error', {type}, xml(condition, NS_STANZA))\r\n}\r\n\r\nfunction iqHandler(entity) {\r\n  return async function iqHandler(ctx, next) {\r\n    if (!isQuery(ctx)) return next()\r\n\r\n    const {stanza} = ctx\r\n    const children = stanza.getChildElements()\r\n    const [child] = children\r\n\r\n    if (!isValidQuery(ctx, children, child)) {\r\n      return buildReplyError(ctx, buildError('modify', 'bad-request'), child)\r\n    }\r\n\r\n    ctx.element = child\r\n\r\n    let reply\r\n    try {\r\n      reply = await next()\r\n    } catch (err) {\r\n      entity.emit('error', err)\r\n      reply = buildError('cancel', 'internal-server-error')\r\n    }\r\n\r\n    if (!reply) {\r\n      reply = buildError('cancel', 'service-unavailable')\r\n    }\r\n\r\n    if (reply instanceof xml.Element && reply.is('error')) {\r\n      return buildReplyError(ctx, reply, child)\r\n    }\r\n\r\n    return buildReplyResult(\r\n      ctx,\r\n      reply instanceof xml.Element ? reply : undefined\r\n    )\r\n  }\r\n}\r\n\r\nfunction route(type, ns, name, handler) {\r\n  return function(ctx, next) {\r\n    if ((ctx.type !== type) | !ctx.element || !ctx.element.is(name, ns))\r\n      return next()\r\n    return handler(ctx, next)\r\n  }\r\n}\r\n\r\nmodule.exports = function({middleware, entity}) {\r\n  middleware.use(iqHandler(entity))\r\n\r\n  return {\r\n    get(ns, name, handler) {\r\n      middleware.use(route('get', ns, name, handler))\r\n    },\r\n    set(ns, name, handler) {\r\n      middleware.use(route('set', ns, name, handler))\r\n    },\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}