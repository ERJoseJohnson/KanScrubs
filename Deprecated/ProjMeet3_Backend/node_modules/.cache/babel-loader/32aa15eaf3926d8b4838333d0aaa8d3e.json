{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Utils_1 = require(\"../../common/Utils\");\n\nconst GenericHandler = require(\"./genericHandler\");\n\nconst xml = require(\"@xmpp/xml\");\n\nconst packageVersion = require(\"../../../package\");\n\nconst LOG_ID = \"XMPP/HNDL/IQ - \";\nlet IQEventHandler = class IQEventHandler extends GenericHandler {\n  constructor(xmppService) {\n    super(xmppService);\n    this.IQ_GET = \"jabber:client.iq.get\";\n    this.IQ_SET = \"jabber:client.iq.set\";\n    this.IQ_RESULT = \"jabber:client.iq.result\";\n    this.IQ_ERROR = \"jabber:client.iq.error\";\n    let that = this;\n\n    this.onIqGetReceived = (msg, stanza) => {\n      try {\n        let children = stanza.children;\n        children.forEach(node => {\n          switch (node.getName()) {\n            case \"query\":\n              that.logger.log(\"internal\", LOG_ID + \"(onIqGetReceived) _entering_ : \", msg, stanza);\n\n              that._onIqGetQueryReceived(stanza, node);\n\n              break;\n\n            case \"ping\":\n              that._onIqGetPingReceived(stanza, node);\n\n              break;\n\n            case \"default\":\n              that.logger.log(\"internal\", LOG_ID + \"(onIqGetReceived) _entering_ : \", msg, stanza);\n              that.logger.log(\"warn\", LOG_ID + \"(handleXMPPConnection) onIqGetReceived - not managed - 'stanza'\", node.getName());\n              break;\n\n            default:\n              that.logger.log(\"internal\", LOG_ID + \"(onIqGetReceived) _entering_ : \", msg, stanza);\n              that.logger.log(\"warn\", LOG_ID + \"(handleXMPPConnection) onIqGetReceived - child not managed for iq - 'stanza'\", node.getName());\n              that.logger.log(\"internal\", LOG_ID + \"(handleXMPPConnection) onIqGetReceived - child not managed for iq - 'stanza'\", node.getName(), \"stanza : \", stanza, \" node : \", node);\n          }\n        });\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onPresenceReceived) CATCH ErrorManager !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onPresenceReceived) CATCH ErrorManager !!! : \", err);\n      }\n    };\n\n    this.onIqResultReceived = (msg, stanza) => {\n      try {\n        that.logger.log(\"internal\", LOG_ID + \"(onIqResultReceived) _entering_\", msg, stanza);\n        let children = stanza.children;\n        children.forEach(node => {\n          switch (node.getName()) {\n            case \"query\":\n              that._onIqGetQueryReceived(stanza, node);\n\n              break;\n\n            case \"bind\":\n              that.logger.log(\"info\", LOG_ID + \"(onIqResultReceived)  - 'stanza'\", node.getName());\n              break;\n\n            case \"pbxagentstatus\":\n              // The treatment is in telephonyEventHandler\n              //that._onIqGetPbxAgentStatusReceived(stanza, node);\n              break;\n\n            case \"deleted\":\n              // One treatment is in calllogEventHandler\n              break;\n\n            case \"default\":\n              that.logger.log(\"warn\", LOG_ID + \"(onIqResultReceived) - not managed - 'stanza'\", node.getName());\n              break;\n\n            default:\n              that.logger.log(\"warn\", LOG_ID + \"(onIqResultReceived) - child not managed for iq - 'stanza'\", node.getName());\n              that.logger.log(\"internal\", LOG_ID + \"(onIqResultReceived) - child not managed for iq - 'stanza'\", node.getName(), \"stanza : \", stanza, \" node : \", node);\n          }\n        });\n\n        if (stanza.attrs.id === \"enable_xmpp_carbon\") {\n          that.eventEmitter.emit(\"rainbow_oncarbonactivated\");\n        }\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onIqResultReceived) CATCH ErrorManager !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onIqResultReceived) CATCH ErrorManager !!! : \", err);\n      }\n    }; // Private methods\n\n\n    that._onIqGetPbxAgentStatusReceived = (stanza, node) => {\n      let pbxagentstatus = {\n        \"phoneapi\": \"\",\n        \"xmppagent\": \"\",\n        \"version\": \"\"\n      };\n      var subchildren = node.children;\n      subchildren.forEach(function (item) {\n        let typeItem = typeof item;\n\n        if (typeof item === \"object\") {\n          let itemName = item.getName();\n\n          if (itemName) {\n            pbxagentstatus[itemName] = item.text();\n          }\n        }\n      });\n      that.logger.log(\"info\", LOG_ID + \"(handleXMPPConnection) _onIqGetPbxAgentStatusReceived - 'pbxagentstatus'\", pbxagentstatus.toString());\n      that.eventEmitter.emit(\"rainbow_onpbxagentstatusreceived_xmpp\", pbxagentstatus);\n    };\n\n    this._onIqGetPingReceived = (stanza, node) => {\n      try {\n        // that.logger.log(\"debug\", LOG_ID + \"(_onIqGetPingReceived) _entering_\");\n        //that.logger.log(\"internal\", LOG_ID + \"(_onIqGetPingReceived) _entering_\", stanza, node);\n        let stanzaResponse = xml(\"iq\", {\n          \"to\": stanza.attrs.from,\n          \"id\": stanza.attrs.id,\n          \"xmlns\": stanza.getNS(),\n          \"type\": \"result\"\n        });\n        that.logger.log(\"info\", LOG_ID + \"(handleXMPPConnection) send ping answer - 'stanza' for Rainbow Node SDK version : \", that.logger.colors.magenta(packageVersion.version)); //        .log(\"info\", LOG_ID + \"(handleXMPPConnection) answered - 'stanza'\", stanzaResponse.toString(), \" for Rainbow Node SDK version : \", packageVersion.version);\n\n        that.xmppClient.send(stanzaResponse);\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(_onIqGetPingReceived) CATCH ErrorManager !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(_onIqGetPingReceived) CATCH ErrorManager !!! : \", err);\n      }\n    };\n\n    this._onIqGetQueryReceived = (stanza, node) => {\n      try {\n        that.logger.log(\"internal\", LOG_ID + \"(_onIqGetQueryReceived) _entering_ : \", stanza, node);\n\n        if (node.attrs.xmlns === \"jabber:iq:roster\") {\n          let contacts = [];\n          let subchildren = node.children;\n          subchildren.forEach(function (item) {\n            if (item.attrs.jid.substr(0, 3) !== \"tel\") {\n              contacts.push({\n                jid: item.attrs.jid,\n                subscription: item.attrs.subscription,\n                ask: item.attrs.ask || \"\"\n              });\n            }\n          });\n          that.logger.log(\"info\", LOG_ID + \"(handleXMPPConnection) XMPP Rosters received length : \", contacts.length);\n          that.eventEmitter.emit(\"evt_internal_onrosters\", contacts);\n        }\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(_onIqGetQueryReceived) CATCH ErrorManager !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(_onIqGetQueryReceived) CATCH ErrorManager !!! : \", err);\n      }\n    };\n  }\n\n};\nIQEventHandler = __decorate([Utils_1.logEntryExit(LOG_ID)], IQEventHandler);\nexports.IQEventHandler = IQEventHandler;\nmodule.exports.IQEventHandler = IQEventHandler;","map":{"version":3,"sources":["../../../src/lib/connection/XMPPServiceHandler/iqEventHandler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils_1 = require(\"../../common/Utils\");\nconst GenericHandler = require(\"./genericHandler\");\nconst xml = require(\"@xmpp/xml\");\nconst packageVersion = require(\"../../../package\");\nconst LOG_ID = \"XMPP/HNDL/IQ - \";\nlet IQEventHandler = class IQEventHandler extends GenericHandler {\n    constructor(xmppService) {\n        super(xmppService);\n        this.IQ_GET = \"jabber:client.iq.get\";\n        this.IQ_SET = \"jabber:client.iq.set\";\n        this.IQ_RESULT = \"jabber:client.iq.result\";\n        this.IQ_ERROR = \"jabber:client.iq.error\";\n        let that = this;\n        this.onIqGetReceived = (msg, stanza) => {\n            try {\n                let children = stanza.children;\n                children.forEach((node) => {\n                    switch (node.getName()) {\n                        case \"query\":\n                            that.logger.log(\"internal\", LOG_ID + \"(onIqGetReceived) _entering_ : \", msg, stanza);\n                            that._onIqGetQueryReceived(stanza, node);\n                            break;\n                        case \"ping\":\n                            that._onIqGetPingReceived(stanza, node);\n                            break;\n                        case \"default\":\n                            that.logger.log(\"internal\", LOG_ID + \"(onIqGetReceived) _entering_ : \", msg, stanza);\n                            that.logger.log(\"warn\", LOG_ID + \"(handleXMPPConnection) onIqGetReceived - not managed - 'stanza'\", node.getName());\n                            break;\n                        default:\n                            that.logger.log(\"internal\", LOG_ID + \"(onIqGetReceived) _entering_ : \", msg, stanza);\n                            that.logger.log(\"warn\", LOG_ID + \"(handleXMPPConnection) onIqGetReceived - child not managed for iq - 'stanza'\", node.getName());\n                            that.logger.log(\"internal\", LOG_ID + \"(handleXMPPConnection) onIqGetReceived - child not managed for iq - 'stanza'\", node.getName(), \"stanza : \", stanza, \" node : \", node);\n                    }\n                });\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(onPresenceReceived) CATCH ErrorManager !!! \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(onPresenceReceived) CATCH ErrorManager !!! : \", err);\n            }\n        };\n        this.onIqResultReceived = (msg, stanza) => {\n            try {\n                that.logger.log(\"internal\", LOG_ID + \"(onIqResultReceived) _entering_\", msg, stanza);\n                let children = stanza.children;\n                children.forEach((node) => {\n                    switch (node.getName()) {\n                        case \"query\":\n                            that._onIqGetQueryReceived(stanza, node);\n                            break;\n                        case \"bind\":\n                            that.logger.log(\"info\", LOG_ID + \"(onIqResultReceived)  - 'stanza'\", node.getName());\n                            break;\n                        case \"pbxagentstatus\":\n                            // The treatment is in telephonyEventHandler\n                            //that._onIqGetPbxAgentStatusReceived(stanza, node);\n                            break;\n                        case \"deleted\":\n                            // One treatment is in calllogEventHandler\n                            break;\n                        case \"default\":\n                            that.logger.log(\"warn\", LOG_ID + \"(onIqResultReceived) - not managed - 'stanza'\", node.getName());\n                            break;\n                        default:\n                            that.logger.log(\"warn\", LOG_ID + \"(onIqResultReceived) - child not managed for iq - 'stanza'\", node.getName());\n                            that.logger.log(\"internal\", LOG_ID + \"(onIqResultReceived) - child not managed for iq - 'stanza'\", node.getName(), \"stanza : \", stanza, \" node : \", node);\n                    }\n                });\n                if (stanza.attrs.id === \"enable_xmpp_carbon\") {\n                    that.eventEmitter.emit(\"rainbow_oncarbonactivated\");\n                }\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(onIqResultReceived) CATCH ErrorManager !!! \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(onIqResultReceived) CATCH ErrorManager !!! : \", err);\n            }\n        };\n        // Private methods\n        that._onIqGetPbxAgentStatusReceived = (stanza, node) => {\n            let pbxagentstatus = {\n                \"phoneapi\": \"\",\n                \"xmppagent\": \"\",\n                \"version\": \"\"\n            };\n            var subchildren = node.children;\n            subchildren.forEach(function (item) {\n                let typeItem = typeof item;\n                if (typeof item === \"object\") {\n                    let itemName = item.getName();\n                    if (itemName) {\n                        pbxagentstatus[itemName] = item.text();\n                    }\n                }\n            });\n            that.logger.log(\"info\", LOG_ID + \"(handleXMPPConnection) _onIqGetPbxAgentStatusReceived - 'pbxagentstatus'\", pbxagentstatus.toString());\n            that.eventEmitter.emit(\"rainbow_onpbxagentstatusreceived_xmpp\", pbxagentstatus);\n        };\n        this._onIqGetPingReceived = (stanza, node) => {\n            try {\n                // that.logger.log(\"debug\", LOG_ID + \"(_onIqGetPingReceived) _entering_\");\n                //that.logger.log(\"internal\", LOG_ID + \"(_onIqGetPingReceived) _entering_\", stanza, node);\n                let stanzaResponse = xml(\"iq\", {\n                    \"to\": stanza.attrs.from,\n                    \"id\": stanza.attrs.id,\n                    \"xmlns\": stanza.getNS(),\n                    \"type\": \"result\"\n                });\n                that.logger.log(\"info\", LOG_ID + \"(handleXMPPConnection) send ping answer - 'stanza' for Rainbow Node SDK version : \", that.logger.colors.magenta(packageVersion.version));\n                //        .log(\"info\", LOG_ID + \"(handleXMPPConnection) answered - 'stanza'\", stanzaResponse.toString(), \" for Rainbow Node SDK version : \", packageVersion.version);\n                that.xmppClient.send(stanzaResponse);\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(_onIqGetPingReceived) CATCH ErrorManager !!! \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(_onIqGetPingReceived) CATCH ErrorManager !!! : \", err);\n            }\n        };\n        this._onIqGetQueryReceived = (stanza, node) => {\n            try {\n                that.logger.log(\"internal\", LOG_ID + \"(_onIqGetQueryReceived) _entering_ : \", stanza, node);\n                if (node.attrs.xmlns === \"jabber:iq:roster\") {\n                    let contacts = [];\n                    let subchildren = node.children;\n                    subchildren.forEach(function (item) {\n                        if (item.attrs.jid.substr(0, 3) !== \"tel\") {\n                            contacts.push({\n                                jid: item.attrs.jid,\n                                subscription: item.attrs.subscription,\n                                ask: item.attrs.ask || \"\"\n                            });\n                        }\n                    });\n                    that.logger.log(\"info\", LOG_ID + \"(handleXMPPConnection) XMPP Rosters received length : \", contacts.length);\n                    that.eventEmitter.emit(\"evt_internal_onrosters\", contacts);\n                }\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(_onIqGetQueryReceived) CATCH ErrorManager !!! \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(_onIqGetQueryReceived) CATCH ErrorManager !!! : \", err);\n            }\n        };\n    }\n};\nIQEventHandler = __decorate([\n    Utils_1.logEntryExit(LOG_ID)\n], IQEventHandler);\nexports.IQEventHandler = IQEventHandler;\nmodule.exports.IQEventHandler = IQEventHandler;\n//# sourceMappingURL=iqEventHandler.js.map"]},"metadata":{},"sourceType":"script"}