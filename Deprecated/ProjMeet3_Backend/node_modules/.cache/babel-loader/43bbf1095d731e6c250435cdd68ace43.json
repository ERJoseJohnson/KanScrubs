{"ast":null,"code":"'use strict';\n/**\r\n * Expose compositor.\r\n */\n\nmodule.exports = compose;\n/**\r\n * Compose `middleware` returning\r\n * a fully valid middleware comprised\r\n * of all those which are passed.\r\n *\r\n * @param {Array} middleware\r\n * @return {Function}\r\n * @api public\r\n */\n\nfunction compose(middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!');\n\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!');\n  }\n  /**\r\n   * @param {Object} context\r\n   * @return {Promise}\r\n   * @api public\r\n   */\n\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1;\n    return dispatch(0);\n\n    function dispatch(i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'));\n      index = i;\n      let fn = middleware[i];\n      if (i === middleware.length) fn = next;\n      if (!fn) return Promise.resolve();\n\n      try {\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/koa-compose/index.js"],"names":["module","exports","compose","middleware","Array","isArray","TypeError","fn","context","next","index","dispatch","i","Promise","reject","Error","length","resolve","bind","err"],"mappings":"AAAA;AAEA;;;;AAIAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AAEA;;;;;;;;;;AAUA,SAASA,OAAT,CAAkBC,UAAlB,EAA8B;AAC5B,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAL,EAAgC,MAAM,IAAIG,SAAJ,CAAc,oCAAd,CAAN;;AAChC,OAAK,MAAMC,EAAX,IAAiBJ,UAAjB,EAA6B;AAC3B,QAAI,OAAOI,EAAP,KAAc,UAAlB,EAA8B,MAAM,IAAID,SAAJ,CAAc,2CAAd,CAAN;AAC/B;AAED;;;;;;;AAMA,SAAO,UAAUE,OAAV,EAAmBC,IAAnB,EAAyB;AAC9B;AACA,QAAIC,KAAK,GAAG,CAAC,CAAb;AACA,WAAOC,QAAQ,CAAC,CAAD,CAAf;;AACA,aAASA,QAAT,CAAmBC,CAAnB,EAAsB;AACpB,UAAIA,CAAC,IAAIF,KAAT,EAAgB,OAAOG,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,8BAAV,CAAf,CAAP;AAChBL,MAAAA,KAAK,GAAGE,CAAR;AACA,UAAIL,EAAE,GAAGJ,UAAU,CAACS,CAAD,CAAnB;AACA,UAAIA,CAAC,KAAKT,UAAU,CAACa,MAArB,EAA6BT,EAAE,GAAGE,IAAL;AAC7B,UAAI,CAACF,EAAL,EAAS,OAAOM,OAAO,CAACI,OAAR,EAAP;;AACT,UAAI;AACF,eAAOJ,OAAO,CAACI,OAAR,CAAgBV,EAAE,CAACC,OAAD,EAAUG,QAAQ,CAACO,IAAT,CAAc,IAAd,EAAoBN,CAAC,GAAG,CAAxB,CAAV,CAAlB,CAAP;AACD,OAFD,CAEE,OAAOO,GAAP,EAAY;AACZ,eAAON,OAAO,CAACC,MAAR,CAAeK,GAAf,CAAP;AACD;AACF;AACF,GAhBD;AAiBD","sourcesContent":["'use strict'\r\n\r\n/**\r\n * Expose compositor.\r\n */\r\n\r\nmodule.exports = compose\r\n\r\n/**\r\n * Compose `middleware` returning\r\n * a fully valid middleware comprised\r\n * of all those which are passed.\r\n *\r\n * @param {Array} middleware\r\n * @return {Function}\r\n * @api public\r\n */\r\n\r\nfunction compose (middleware) {\r\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\r\n  for (const fn of middleware) {\r\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\r\n  }\r\n\r\n  /**\r\n   * @param {Object} context\r\n   * @return {Promise}\r\n   * @api public\r\n   */\r\n\r\n  return function (context, next) {\r\n    // last called middleware #\r\n    let index = -1\r\n    return dispatch(0)\r\n    function dispatch (i) {\r\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\r\n      index = i\r\n      let fn = middleware[i]\r\n      if (i === middleware.length) fn = next\r\n      if (!fn) return Promise.resolve()\r\n      try {\r\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\r\n      } catch (err) {\r\n        return Promise.reject(err)\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}