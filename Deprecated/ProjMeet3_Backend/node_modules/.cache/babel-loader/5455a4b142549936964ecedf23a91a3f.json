{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst GenericHandler = require(\"./genericHandler\");\n\nconst Utils_1 = require(\"../../common/Utils\");\n\nconst util = require('util');\n\nconst xml = require(\"@xmpp/xml\");\n\nconst LOG_ID = \"XMPP/HNDL/CHNL - \";\nconst TYPE_CHAT = \"chat\";\nconst TYPE_GROUPCHAT = \"groupchat\";\nlet ChannelEventHandler = class ChannelEventHandler extends GenericHandler {\n  constructor(xmppService, channelsService) {\n    super(xmppService);\n    this.MESSAGE_CHAT = \"jabber:client.message.chat\";\n    this.MESSAGE_GROUPCHAT = \"jabber:client.message.groupchat\";\n    this.MESSAGE_WEBRTC = \"jabber:client.message.webrtc\";\n    this.MESSAGE_MANAGEMENT = \"jabber:client.message.management\";\n    this.MESSAGE_ERROR = \"jabber:client.message.error\";\n    this.MESSAGE_HEADLINE = \"jabber:client.message.headline\";\n    this.MESSAGE_CLOSE = \"jabber:client.message.headline\";\n    this.channelsService = channelsService;\n    let that = this;\n\n    this.onManagementMessageReceived = (msg, stanza) => {\n      try {\n        that.logger.log(\"internal\", LOG_ID + \"(onManagementMessageReceived) _entering_ : \", msg, stanza);\n        let children = stanza.children;\n        children.forEach(function (node) {\n          switch (node.getName()) {\n            case \"room\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"usersettings\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"userinvite\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"group\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"conversation\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"mute\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"unmute\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"file\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"thumbnail\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"channel-subscription\":\n            case \"channel\":\n              that.onChannelManagementMessageReceived(node);\n              break;\n\n            case \"favorite\":\n              // treated in favoriteEventHandler\n              break;\n\n            default:\n              that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) unmanaged management message node \" + node.getName());\n              break;\n          }\n        });\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! : \", err);\n      }\n    };\n\n    this.onHeadlineMessageReceived = (msg, stanza) => {\n      try {\n        that.logger.log(\"internal\", LOG_ID + \"(onHeadlineMessageReceived) _entering_ : \", msg, stanza);\n        that.logger.log(\"info\", LOG_ID + \"(onHeadlineMessageReceived) channel message received\");\n        that.logger.log(\"info\", LOG_ID + \"(onHeadlineMessageReceived) channel message received\");\n        let eventNode = stanza.children[0];\n\n        if (!eventNode) {\n          that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived eventNode is empty\");\n          that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\n          that.logger.log(\"internal\", LOG_ID + util.inspect(stanza));\n          return;\n        }\n\n        let items = eventNode.children[0];\n\n        if (!items) {\n          that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived items is empty\");\n          that.logger.log(\"internal\", LOG_ID + util.inspect(eventNode));\n          that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\n          return;\n        }\n\n        let item = items.children[0];\n\n        if (!item) {\n          that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived item is empty\");\n          that.logger.log(\"internal\", LOG_ID + util.inspect(items));\n          that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\n          return;\n        }\n\n        let entry = item.children[0];\n\n        if (!entry) {\n          that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) onHeadlineMessageReceived entry is empty\");\n          that.logger.log(\"internal\", LOG_ID + util.inspect(item));\n          that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza); //return;\n        }\n\n        switch (item.name) {\n          case \"retract\":\n            {\n              let messageId = item.attrs ? item.attrs.id || null : null;\n\n              if (messageId === null) {\n                that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel retract received, but id is empty. So ignored.\");\n              } else {\n                let message = {\n                  messageId: null\n                };\n                message.messageId = item.attrs.id;\n                that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) channel retract received, for messageId \" + message.messageId);\n                that.eventEmitter.emit(\"evt_internal_channelmessagedeletedreceived\", message);\n              }\n            }\n            break;\n\n          case \"item\":\n            {\n              if (entry) {\n                let message = {\n                  \"messageId\": item.attrs.id,\n                  \"channelId\": entry.attrs.channelId,\n                  \"fromJid\": entry.attrs.from,\n                  \"message\": entry.getChild(\"message\") ? entry.getChild(\"message\").getText() || \"\" : \"\",\n                  \"title\": entry.getChild(\"title\") ? entry.getChild(\"title\").getText() || \"\" : \"\",\n                  \"url\": entry.getChild(\"url\") ? entry.getChild(\"url\").getText() || \"\" : \"\",\n                  \"date\": new Date(entry.attrs.timestamp),\n                  \"images\": new Array()\n                };\n                let images = entry.getChildren(\"images\");\n\n                if (Array.isArray(images)) {\n                  images.forEach(image => {\n                    //that.logger.log(\"info\", LOG_ID + \"(handleXMPPConnection) channel entry images.\", image);\n                    let id = image.getChild(\"id\") ? image.getChild(\"id\").getText() || null : null;\n\n                    if (id === null) {\n                      that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel image entry received, but image id empty. So ignored.\");\n                    } else {\n                      message.images.push(id);\n                    }\n                  });\n                }\n\n                that.eventEmitter.emit(\"evt_internal_channelitemreceived\", message);\n              } else {\n                that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel entry received, but empty. It can not be parsed, so ignored.\");\n                that.logger.log(\"internalerror\", LOG_ID + \"(onHeadlineMessageReceived) channel entry received, but empty. It can not be parsed, so ignored. : \", stanza);\n              }\n            }\n            break;\n\n          default:\n            {\n              that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) channel unknown event \" + item.name + \" received\");\n            }\n            break;\n        } // */\n\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) CATCH Error !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onHeadlineMessageReceived) CATCH Error !!! : \", err);\n      }\n    };\n\n    this.onChannelManagementMessageReceived = stanza => {\n      that.logger.log(\"internal\", LOG_ID + \"(onChannelManagementMessageReceived) _entering_ : \", stanza);\n\n      try {\n        if (stanza.attrs.xmlns === \"jabber:iq:configuration\") {\n          let channelElem = stanza.find(\"channel\");\n\n          if (channelElem && channelElem.length > 0) {\n            // Extract channel identifier\n            let channelId = channelElem.attrs.channelid; // Handle cached channel info\n\n            /*\n            let channel: Channel = this.getChannelFromCache(channelId);\n            if (channel) {\n                let avatarElem = channelElem.find(\"avatar\");\n                let nameElem = channelElem.find(\"name\");\n                let topicElem = channelElem.find(\"topic\");\n                let categoryElem = channelElem.find(\"category\");\n                 if (avatarElem && avatarElem.length > 0) {\n                    this.onAvatarChange(channelId, avatarElem);\n                }\n                if (nameElem && nameElem.length > 0) {\n                    channel.name = nameElem.text();\n                }\n                if (topicElem && topicElem.length > 0) {\n                    channel.topic = topicElem.text();\n                }\n                if (categoryElem && categoryElem.length > 0) {\n                    channel.category = categoryElem.text();\n                }\n            }\n            // */\n            // Handle channel action events\n\n            let action = channelElem.attrs.action;\n            that.logger.log(\"debug\", LOG_ID + \"(onChannelManagementMessageReceived) - action : \" + action + \" event received on channel \" + channelId);\n\n            switch (action) {\n              case 'add':\n                that.eventEmitter.emit(\"evt_internal_addtochannel\", {\n                  'id': channelId\n                }); // this.onAddToChannel(channelId);\n\n                break;\n\n              case 'update':\n                that.eventEmitter.emit(\"evt_internal_updatetochannel\", {\n                  'id': channelId\n                }); //this.onUpdateToChannel(channelId);\n\n                break;\n\n              case 'remove':\n                that.eventEmitter.emit(\"evt_internal_removefromchannel\", {\n                  'id': channelId\n                }); //this.onRemovedFromChannel(channelId);\n\n                break;\n\n              case 'subscribe':\n                that.eventEmitter.emit(\"evt_internal_subscribetochannel\", {\n                  'id': channelId,\n                  'subscribers': channelElem.attrs.subscribers\n                }); //this.onSubscribeToChannel(channelId, channelElem.attrs.subscribers);\n\n                break;\n\n              case 'unsubscribe':\n                that.eventEmitter.emit(\"evt_internal_unsubscribetochannel\", {\n                  'id': channelId,\n                  'subscribers': channelElem.attrs.subscribers\n                }); //this.onUnsubscribeToChannel(channelId, channelElem.attrs.subscribers);\n\n                break;\n\n              case 'delete':\n                //this.onDeleteChannel(channelId);\n                that.eventEmitter.emit(\"evt_internal_deletechannel\", {\n                  'id': channelId\n                });\n                break;\n\n              default:\n                break;\n            }\n          }\n\n          let channelSubscriptionElem = stanza.find(\"channel-subscription\");\n\n          if (channelSubscriptionElem && channelSubscriptionElem.length > 0) {\n            // Extract information\n            let channelId = channelSubscriptionElem.attrs.channelid;\n            let action = channelSubscriptionElem.attrs.action;\n            let userId = channelSubscriptionElem.attrs.id;\n            let subscribers = channelSubscriptionElem.attrs.subscribers;\n            that.logger.log(\"debug\", LOG_ID + \"(onChannelManagementMessageReceived) - subscription- action : \", action, \" event received on channelId : \", channelId, \", userId : \", userId, \", subscribers : \", subscribers);\n\n            switch (action) {\n              case 'subscribe':\n                that.eventEmitter.emit(\"evt_internal_usersubscribechannel\", {\n                  'id': channelId,\n                  'userId': userId,\n                  'subscribers': Number.parseInt(\"0\" + subscribers)\n                }); //this.onUserSubscribeEvent(channelId, userId);\n\n                break;\n\n              case 'unsubscribe':\n                that.eventEmitter.emit(\"evt_internal_userunsubscribechannel\", {\n                  'id': channelId,\n                  'userId': userId,\n                  'subscribers': Number.parseInt(\"0\" + subscribers)\n                }); //this.onUserUnsubscribeEvent(channelId, userId);\n\n                break;\n\n              default:\n                break;\n            }\n          }\n        }\n\n        return true;\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onChannelManagementMessageReceived) -- failure -- \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onChannelManagementMessageReceived) -- failure -- : \" + err.message);\n        return true;\n      }\n    };\n\n    this.onReceiptMessageReceived = (msg, stanza) => {};\n\n    this.onErrorMessageReceived = (msg, stanza) => {\n      try {\n        if (stanza.getChild('no-store') != undefined) {// // Treated in conversation handler that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) The 'to' of the message can not received the message\");\n        } else {\n          that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) something goes wrong...\", msg, stanza);\n          that.eventEmitter.emit(\"evt_internal_xmpperror\", msg);\n        }\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! : \", err);\n      }\n    };\n\n    this.findAttrs = () => {};\n    /*\n    this.findChildren = (element) => {\n        try {\n            that.logger.log(\"debug\", LOG_ID + \"(findChildren) _entering_\");\n            that.logger.log(\"internal\", LOG_ID + \"(findChildren) _entering_\", element);\n            that.logger.log(\"error\", LOG_ID + \"(findChildren) findChildren element : \", element, \" name : \", element.getName());\n            let json = {};\n            //let result = null;\n            let children = element.children;\n            if (children.length > 0) {\n                json[element.getName()] = {};\n                let childrenJson = json[element.getName()];\n                children.forEach((elemt) => {\n                    // @ts-ignore\n                    if (typeof elemt.children === Array) {\n                        that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach Array : \", element, \", elemt : \", elemt);\n                        childrenJson[elemt.getName()] = elemt.children[0];\n                    }\n                    that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach element : \", element, \", elemt : \", elemt);\n                    childrenJson[elemt.getName()] = this.findChildren(elemt);\n                });\n                return json;\n            } else {\n                that.logger.log(\"error\", LOG_ID + \"(findChildren)  No children element : \", element);\n                return element.getText();\n            }\n            //return result;\n        } catch (err) {\n            that.logger.log(\"error\", LOG_ID + \"(findChildren) CATCH Error !!! : \", err);\n        }\n    };\n     */\n\n  }\n\n};\nChannelEventHandler = __decorate([Utils_1.logEntryExit(LOG_ID)], ChannelEventHandler);\nexports.ChannelEventHandler = ChannelEventHandler;\nmodule.exports.ChannelEventHandler = ChannelEventHandler;","map":{"version":3,"sources":["../../../src/lib/connection/XMPPServiceHandler/channelEventHandler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GenericHandler = require(\"./genericHandler\");\nconst Utils_1 = require(\"../../common/Utils\");\nconst util = require('util');\nconst xml = require(\"@xmpp/xml\");\nconst LOG_ID = \"XMPP/HNDL/CHNL - \";\nconst TYPE_CHAT = \"chat\";\nconst TYPE_GROUPCHAT = \"groupchat\";\nlet ChannelEventHandler = class ChannelEventHandler extends GenericHandler {\n    constructor(xmppService, channelsService) {\n        super(xmppService);\n        this.MESSAGE_CHAT = \"jabber:client.message.chat\";\n        this.MESSAGE_GROUPCHAT = \"jabber:client.message.groupchat\";\n        this.MESSAGE_WEBRTC = \"jabber:client.message.webrtc\";\n        this.MESSAGE_MANAGEMENT = \"jabber:client.message.management\";\n        this.MESSAGE_ERROR = \"jabber:client.message.error\";\n        this.MESSAGE_HEADLINE = \"jabber:client.message.headline\";\n        this.MESSAGE_CLOSE = \"jabber:client.message.headline\";\n        this.channelsService = channelsService;\n        let that = this;\n        this.onManagementMessageReceived = (msg, stanza) => {\n            try {\n                that.logger.log(\"internal\", LOG_ID + \"(onManagementMessageReceived) _entering_ : \", msg, stanza);\n                let children = stanza.children;\n                children.forEach(function (node) {\n                    switch (node.getName()) {\n                        case \"room\":\n                            // treated in conversationEventHandler\n                            break;\n                        case \"usersettings\":\n                            // treated in conversationEventHandler\n                            break;\n                        case \"userinvite\":\n                            // treated in conversationEventHandler\n                            break;\n                        case \"group\":\n                            // treated in conversationEventHandler\n                            break;\n                        case \"conversation\":\n                            // treated in conversationEventHandler\n                            break;\n                        case \"mute\":\n                            // treated in conversationEventHandler\n                            break;\n                        case \"unmute\":\n                            // treated in conversationEventHandler\n                            break;\n                        case \"file\":\n                            // treated in conversationEventHandler\n                            break;\n                        case \"thumbnail\":\n                            // treated in conversationEventHandler\n                            break;\n                        case \"channel-subscription\":\n                        case \"channel\":\n                            that.onChannelManagementMessageReceived(node);\n                            break;\n                        case \"favorite\":\n                            // treated in favoriteEventHandler\n                            break;\n                        default:\n                            that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) unmanaged management message node \" + node.getName());\n                            break;\n                    }\n                });\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! : \", err);\n            }\n        };\n        this.onHeadlineMessageReceived = (msg, stanza) => {\n            try {\n                that.logger.log(\"internal\", LOG_ID + \"(onHeadlineMessageReceived) _entering_ : \", msg, stanza);\n                that.logger.log(\"info\", LOG_ID + \"(onHeadlineMessageReceived) channel message received\");\n                that.logger.log(\"info\", LOG_ID + \"(onHeadlineMessageReceived) channel message received\");\n                let eventNode = stanza.children[0];\n                if (!eventNode) {\n                    that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived eventNode is empty\");\n                    that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\n                    that.logger.log(\"internal\", LOG_ID + util.inspect(stanza));\n                    return;\n                }\n                let items = eventNode.children[0];\n                if (!items) {\n                    that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived items is empty\");\n                    that.logger.log(\"internal\", LOG_ID + util.inspect(eventNode));\n                    that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\n                    return;\n                }\n                let item = items.children[0];\n                if (!item) {\n                    that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived item is empty\");\n                    that.logger.log(\"internal\", LOG_ID + util.inspect(items));\n                    that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\n                    return;\n                }\n                let entry = item.children[0];\n                if (!entry) {\n                    that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) onHeadlineMessageReceived entry is empty\");\n                    that.logger.log(\"internal\", LOG_ID + util.inspect(item));\n                    that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\n                    //return;\n                }\n                switch (item.name) {\n                    case \"retract\":\n                        {\n                            let messageId = item.attrs ? item.attrs.id || null : null;\n                            if (messageId === null) {\n                                that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel retract received, but id is empty. So ignored.\");\n                            }\n                            else {\n                                let message = { messageId: null };\n                                message.messageId = item.attrs.id;\n                                that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) channel retract received, for messageId \" + message.messageId);\n                                that.eventEmitter.emit(\"evt_internal_channelmessagedeletedreceived\", message);\n                            }\n                        }\n                        break;\n                    case \"item\":\n                        {\n                            if (entry) {\n                                let message = {\n                                    \"messageId\": item.attrs.id,\n                                    \"channelId\": entry.attrs.channelId,\n                                    \"fromJid\": entry.attrs.from,\n                                    \"message\": entry.getChild(\"message\") ? entry.getChild(\"message\").getText() || \"\" : \"\",\n                                    \"title\": entry.getChild(\"title\") ? entry.getChild(\"title\").getText() || \"\" : \"\",\n                                    \"url\": entry.getChild(\"url\") ? entry.getChild(\"url\").getText() || \"\" : \"\",\n                                    \"date\": new Date(entry.attrs.timestamp),\n                                    \"images\": new Array()\n                                };\n                                let images = entry.getChildren(\"images\");\n                                if (Array.isArray(images)) {\n                                    images.forEach((image) => {\n                                        //that.logger.log(\"info\", LOG_ID + \"(handleXMPPConnection) channel entry images.\", image);\n                                        let id = image.getChild(\"id\") ? image.getChild(\"id\").getText() || null : null;\n                                        if (id === null) {\n                                            that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel image entry received, but image id empty. So ignored.\");\n                                        }\n                                        else {\n                                            message.images.push(id);\n                                        }\n                                    });\n                                }\n                                that.eventEmitter.emit(\"evt_internal_channelitemreceived\", message);\n                            }\n                            else {\n                                that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel entry received, but empty. It can not be parsed, so ignored.\");\n                                that.logger.log(\"internalerror\", LOG_ID + \"(onHeadlineMessageReceived) channel entry received, but empty. It can not be parsed, so ignored. : \", stanza);\n                            }\n                        }\n                        break;\n                    default:\n                        {\n                            that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) channel unknown event \" + item.name + \" received\");\n                        }\n                        break;\n                } // */\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) CATCH Error !!! \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(onHeadlineMessageReceived) CATCH Error !!! : \", err);\n            }\n        };\n        this.onChannelManagementMessageReceived = (stanza) => {\n            that.logger.log(\"internal\", LOG_ID + \"(onChannelManagementMessageReceived) _entering_ : \", stanza);\n            try {\n                if (stanza.attrs.xmlns === \"jabber:iq:configuration\") {\n                    let channelElem = stanza.find(\"channel\");\n                    if (channelElem && channelElem.length > 0) {\n                        // Extract channel identifier\n                        let channelId = channelElem.attrs.channelid;\n                        // Handle cached channel info\n                        /*\n                        let channel: Channel = this.getChannelFromCache(channelId);\n                        if (channel) {\n                            let avatarElem = channelElem.find(\"avatar\");\n                            let nameElem = channelElem.find(\"name\");\n                            let topicElem = channelElem.find(\"topic\");\n                            let categoryElem = channelElem.find(\"category\");\n\n                            if (avatarElem && avatarElem.length > 0) {\n                                this.onAvatarChange(channelId, avatarElem);\n                            }\n                            if (nameElem && nameElem.length > 0) {\n                                channel.name = nameElem.text();\n                            }\n                            if (topicElem && topicElem.length > 0) {\n                                channel.topic = topicElem.text();\n                            }\n                            if (categoryElem && categoryElem.length > 0) {\n                                channel.category = categoryElem.text();\n                            }\n                        }\n                        // */\n                        // Handle channel action events\n                        let action = channelElem.attrs.action;\n                        that.logger.log(\"debug\", LOG_ID + \"(onChannelManagementMessageReceived) - action : \" + action + \" event received on channel \" + channelId);\n                        switch (action) {\n                            case 'add':\n                                that.eventEmitter.emit(\"evt_internal_addtochannel\", { 'id': channelId });\n                                // this.onAddToChannel(channelId);\n                                break;\n                            case 'update':\n                                that.eventEmitter.emit(\"evt_internal_updatetochannel\", { 'id': channelId });\n                                //this.onUpdateToChannel(channelId);\n                                break;\n                            case 'remove':\n                                that.eventEmitter.emit(\"evt_internal_removefromchannel\", { 'id': channelId });\n                                //this.onRemovedFromChannel(channelId);\n                                break;\n                            case 'subscribe':\n                                that.eventEmitter.emit(\"evt_internal_subscribetochannel\", { 'id': channelId, 'subscribers': channelElem.attrs.subscribers });\n                                //this.onSubscribeToChannel(channelId, channelElem.attrs.subscribers);\n                                break;\n                            case 'unsubscribe':\n                                that.eventEmitter.emit(\"evt_internal_unsubscribetochannel\", { 'id': channelId, 'subscribers': channelElem.attrs.subscribers });\n                                //this.onUnsubscribeToChannel(channelId, channelElem.attrs.subscribers);\n                                break;\n                            case 'delete':\n                                //this.onDeleteChannel(channelId);\n                                that.eventEmitter.emit(\"evt_internal_deletechannel\", { 'id': channelId });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    let channelSubscriptionElem = stanza.find(\"channel-subscription\");\n                    if (channelSubscriptionElem && channelSubscriptionElem.length > 0) {\n                        // Extract information\n                        let channelId = channelSubscriptionElem.attrs.channelid;\n                        let action = channelSubscriptionElem.attrs.action;\n                        let userId = channelSubscriptionElem.attrs.id;\n                        let subscribers = channelSubscriptionElem.attrs.subscribers;\n                        that.logger.log(\"debug\", LOG_ID + \"(onChannelManagementMessageReceived) - subscription- action : \", action, \" event received on channelId : \", channelId, \", userId : \", userId, \", subscribers : \", subscribers);\n                        switch (action) {\n                            case 'subscribe':\n                                that.eventEmitter.emit(\"evt_internal_usersubscribechannel\", { 'id': channelId, 'userId': userId, 'subscribers': Number.parseInt(\"0\" + subscribers) });\n                                //this.onUserSubscribeEvent(channelId, userId);\n                                break;\n                            case 'unsubscribe':\n                                that.eventEmitter.emit(\"evt_internal_userunsubscribechannel\", { 'id': channelId, 'userId': userId, 'subscribers': Number.parseInt(\"0\" + subscribers) });\n                                //this.onUserUnsubscribeEvent(channelId, userId);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n                return true;\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(onChannelManagementMessageReceived) -- failure -- \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(onChannelManagementMessageReceived) -- failure -- : \" + err.message);\n                return true;\n            }\n        };\n        this.onReceiptMessageReceived = (msg, stanza) => {\n        };\n        this.onErrorMessageReceived = (msg, stanza) => {\n            try {\n                if (stanza.getChild('no-store') != undefined) {\n                    // // Treated in conversation handler that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) The 'to' of the message can not received the message\");\n                }\n                else {\n                    that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) something goes wrong...\", msg, stanza);\n                    that.eventEmitter.emit(\"evt_internal_xmpperror\", msg);\n                }\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! : \", err);\n            }\n        };\n        this.findAttrs = () => {\n        };\n        /*\n        this.findChildren = (element) => {\n            try {\n                that.logger.log(\"debug\", LOG_ID + \"(findChildren) _entering_\");\n                that.logger.log(\"internal\", LOG_ID + \"(findChildren) _entering_\", element);\n                that.logger.log(\"error\", LOG_ID + \"(findChildren) findChildren element : \", element, \" name : \", element.getName());\n                let json = {};\n                //let result = null;\n                let children = element.children;\n                if (children.length > 0) {\n                    json[element.getName()] = {};\n                    let childrenJson = json[element.getName()];\n                    children.forEach((elemt) => {\n                        // @ts-ignore\n                        if (typeof elemt.children === Array) {\n                            that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach Array : \", element, \", elemt : \", elemt);\n                            childrenJson[elemt.getName()] = elemt.children[0];\n                        }\n                        that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach element : \", element, \", elemt : \", elemt);\n                        childrenJson[elemt.getName()] = this.findChildren(elemt);\n                    });\n                    return json;\n                } else {\n                    that.logger.log(\"error\", LOG_ID + \"(findChildren)  No children element : \", element);\n                    return element.getText();\n                }\n                //return result;\n            } catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(findChildren) CATCH Error !!! : \", err);\n            }\n        };\n         */\n    }\n};\nChannelEventHandler = __decorate([\n    Utils_1.logEntryExit(LOG_ID)\n], ChannelEventHandler);\nexports.ChannelEventHandler = ChannelEventHandler;\nmodule.exports.ChannelEventHandler = ChannelEventHandler;\n//# sourceMappingURL=channelEventHandler.js.map"]},"metadata":{},"sourceType":"script"}