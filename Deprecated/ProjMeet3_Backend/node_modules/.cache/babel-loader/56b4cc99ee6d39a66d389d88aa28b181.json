{"ast":null,"code":"'use strict';\n/*!\r\n * FileStreamRotator\r\n * Copyright(c) 2012-2017 Holiday Extras.\r\n * Copyright(c) 2017 Roger C.\r\n * MIT Licensed\r\n */\n\n/**\r\n * Module dependencies.\r\n */\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar moment = require('moment');\n\nvar crypto = require('crypto');\n\nvar EventEmitter = require('events');\n/**\r\n * FileStreamRotator:\r\n *\r\n * Returns a file stream that auto-rotates based on date.\r\n *\r\n * Options:\r\n *\r\n *   - `filename`       Filename including full path used by the stream\r\n *\r\n *   - `frequency`      How often to rotate. Options are 'daily', 'custom' and 'test'. 'test' rotates every minute.\r\n *                      If frequency is set to none of the above, a YYYYMMDD string will be added to the end of the filename.\r\n *\r\n *   - `verbose`        If set, it will log to STDOUT when it rotates files and name of log file. Default is TRUE.\r\n *\r\n *   - `date_format`    Format as used in moment.js http://momentjs.com/docs/#/displaying/format/. The result is used to replace\r\n *                      the '%DATE%' placeholder in the filename.\r\n *                      If using 'custom' frequency, it is used to trigger file change when the string representation changes.\r\n *\r\n *   - `size`           Max size of the file after which it will rotate. It can be combined with frequency or date format.\r\n *                      The size units are 'k', 'm' and 'g'. Units need to directly follow a number e.g. 1g, 100m, 20k.\r\n *\r\n *   - `max_logs`       Max number of logs to keep. If not set, it won't remove past logs. It uses its own log audit file\r\n *                      to keep track of the log files in a json format. It won't delete any file not contained in it.\r\n *                      It can be a number of files or number of days. If using days, add 'd' as the suffix.\r\n *\r\n *   - `audit_file`     Location to store the log audit file. If not set, it will be stored in the root of the application.\r\n * \r\n *   - `end_stream`     End stream (true) instead of the default behaviour of destroy (false). Set value to true if when writing to the\r\n *                      stream in a loop, if the application terminates or log rotates, data pending to be flushed might be lost.                    \r\n *\r\n *   - `file_options`   An object passed to the stream. This can be used to specify flags, encoding, and mode.\r\n *                      See https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options. Default `{ flags: 'a' }`.\r\n * \r\n *   - `utc`            Use UTC time for date in filename. Defaults to 'FALSE'\r\n * \r\n *   - `extension`      File extension to be appended to the filename. This is useful when using size restrictions as the rotation\r\n *                      adds a count (1,2,3,4,...) at the end of the filename when the required size is met.\r\n * \r\n *   - `watch_log`      Watch the current file being written to and recreate it in case of accidental deletion. Defaults to 'FALSE'\r\n *\r\n *   - `create_symlink` Create a tailable symlink to the current active log file. Defaults to 'FALSE'\r\n * \r\n *   - `symlink_name`   Name to use when creating the symbolic link. Defaults to 'current.log'\r\n *\r\n * To use with Express / Connect, use as below.\r\n *\r\n * var rotatingLogStream = require('FileStreamRotator').getStream({filename:\"/tmp/test.log\", frequency:\"daily\", verbose: false})\r\n * app.use(express.logger({stream: rotatingLogStream, format: \"default\"}));\r\n *\r\n * @param {Object} options\r\n * @return {Object}\r\n * @api public\r\n */\n\n\nvar FileStreamRotator = {};\nmodule.exports = FileStreamRotator;\nvar staticFrequency = ['daily', 'test', 'm', 'h', 'custom'];\nvar DATE_FORMAT = 'YYYYMMDDHHmm';\n/**\r\n * Returns frequency metadata for minute/hour rotation\r\n * @param type\r\n * @param num\r\n * @returns {*}\r\n * @private\r\n */\n\nvar _checkNumAndType = function (type, num) {\n  if (typeof num == 'number') {\n    switch (type) {\n      case 'm':\n        if (num < 0 || num > 60) {\n          return false;\n        }\n\n        break;\n\n      case 'h':\n        if (num < 0 || num > 24) {\n          return false;\n        }\n\n        break;\n    }\n\n    return {\n      type: type,\n      digit: num\n    };\n  }\n};\n/**\r\n * Returns frequency metadata for defined frequency\r\n * @param freqType\r\n * @returns {*}\r\n * @private\r\n */\n\n\nvar _checkDailyAndTest = function (freqType) {\n  switch (freqType) {\n    case 'custom':\n    case 'daily':\n      return {\n        type: freqType,\n        digit: undefined\n      };\n      break;\n\n    case 'test':\n      return {\n        type: freqType,\n        digit: 0\n      };\n  }\n\n  return false;\n};\n/**\r\n * Returns frequency metadata\r\n * @param frequency\r\n * @returns {*}\r\n */\n\n\nFileStreamRotator.getFrequency = function (frequency) {\n  var _f = frequency.toLowerCase().match(/^(\\d+)([mh])$/);\n\n  if (_f) {\n    return _checkNumAndType(_f[2], parseInt(_f[1]));\n  }\n\n  var dailyOrTest = _checkDailyAndTest(frequency);\n\n  if (dailyOrTest) {\n    return dailyOrTest;\n  }\n\n  return false;\n};\n/**\r\n * Returns a number based on the option string\r\n * @param size\r\n * @returns {Number}\r\n */\n\n\nFileStreamRotator.parseFileSize = function (size) {\n  if (size && typeof size == \"string\") {\n    var _s = size.toLowerCase().match(/^((?:0\\.)?\\d+)([kmg])$/);\n\n    if (_s) {\n      switch (_s[2]) {\n        case 'k':\n          return _s[1] * 1024;\n\n        case 'm':\n          return _s[1] * 1024 * 1024;\n\n        case 'g':\n          return _s[1] * 1024 * 1024 * 1024;\n      }\n    }\n  }\n\n  return null;\n};\n/**\r\n * Returns date string for a given format / date_format\r\n * @param format\r\n * @param date_format\r\n * @param {boolean} utc\r\n * @returns {string}\r\n */\n\n\nFileStreamRotator.getDate = function (format, date_format, utc) {\n  date_format = date_format || DATE_FORMAT;\n  let currentMoment = utc ? moment.utc() : moment().local();\n\n  if (format && staticFrequency.indexOf(format.type) !== -1) {\n    switch (format.type) {\n      case 'm':\n        var minute = Math.floor(currentMoment.minutes() / format.digit) * format.digit;\n        return currentMoment.minutes(minute).format(date_format);\n        break;\n\n      case 'h':\n        var hour = Math.floor(currentMoment.hour() / format.digit) * format.digit;\n        return currentMoment.hour(hour).format(date_format);\n        break;\n\n      case 'daily':\n      case 'custom':\n      case 'test':\n        return currentMoment.format(date_format);\n    }\n  }\n\n  return currentMoment.format(date_format);\n};\n/**\r\n * Read audit json object from disk or return new object or null\r\n * @param max_logs\r\n * @param audit_file\r\n * @param log_file\r\n * @returns {Object} auditLogSettings\r\n * @property {Object} auditLogSettings.keep\r\n * @property {Boolean} auditLogSettings.keep.days\r\n * @property {Number} auditLogSettings.keep.amount\r\n * @property {String} auditLogSettings.auditLog\r\n * @property {Array} auditLogSettings.files\r\n */\n\n\nFileStreamRotator.setAuditLog = function (max_logs, audit_file, log_file) {\n  var _rtn = null;\n\n  if (max_logs) {\n    var use_days = max_logs.toString().substr(-1);\n\n    var _num = max_logs.toString().match(/^(\\d+)/);\n\n    if (Number(_num[1]) > 0) {\n      var baseLog = path.dirname(log_file.replace(/%DATE%.+/, \"_filename\"));\n\n      try {\n        if (audit_file) {\n          var full_path = path.resolve(audit_file);\n          _rtn = JSON.parse(fs.readFileSync(full_path, {\n            encoding: 'utf-8'\n          }));\n        } else {\n          var full_path = path.resolve(baseLog + \"/\" + \".audit.json\");\n          _rtn = JSON.parse(fs.readFileSync(full_path, {\n            encoding: 'utf-8'\n          }));\n        }\n      } catch (e) {\n        if (e.code !== \"ENOENT\") {\n          return null;\n        }\n\n        _rtn = {\n          keep: {\n            days: false,\n            amount: Number(_num[1])\n          },\n          auditLog: audit_file || baseLog + \"/\" + \".audit.json\",\n          files: []\n        };\n      }\n\n      _rtn.keep = {\n        days: use_days === 'd',\n        amount: Number(_num[1])\n      };\n    }\n  }\n\n  return _rtn;\n};\n/**\r\n * Write audit json object to disk\r\n * @param {Object} audit\r\n * @param {Object} audit.keep\r\n * @param {Boolean} audit.keep.days\r\n * @param {Number} audit.keep.amount\r\n * @param {String} audit.auditLog\r\n * @param {Array} audit.files\r\n * @param {Boolean} verbose \r\n */\n\n\nFileStreamRotator.writeAuditLog = function (audit, verbose) {\n  try {\n    mkDirForFile(audit.auditLog);\n    fs.writeFileSync(audit.auditLog, JSON.stringify(audit, null, 4));\n  } catch (e) {\n    if (verbose) {\n      console.error(new Date(), \"[FileStreamRotator] Failed to store log audit at:\", audit.auditLog, \"Error:\", e);\n    }\n  }\n};\n/**\r\n * Removes old log file\r\n * @param file\r\n * @param file.hash\r\n * @param file.name\r\n * @param file.date\r\n * @param {Boolean} verbose \r\n */\n\n\nfunction removeFile(file, verbose) {\n  if (file.hash === crypto.createHash('md5').update(file.name + \"LOG_FILE\" + file.date).digest(\"hex\")) {\n    try {\n      if (fs.existsSync(file.name)) {\n        fs.unlinkSync(file.name);\n      }\n    } catch (e) {\n      if (verbose) {\n        console.error(new Date(), \"[FileStreamRotator] Could not remove old log file: \", file.name);\n      }\n    }\n  }\n}\n/**\r\n * Create symbolic link to current log file\r\n * @param {String} logfile \r\n * @param {String} name Name to use for symbolic link \r\n * @param {Boolean} verbose \r\n */\n\n\nfunction createCurrentSymLink(logfile, name, verbose) {\n  let symLinkName = name || \"current.log\";\n  let logPath = path.dirname(logfile);\n  let logfileName = path.basename(logfile);\n  let current = logPath + \"/\" + symLinkName;\n\n  try {\n    let stats = fs.lstatSync(current);\n\n    if (stats.isSymbolicLink()) {\n      fs.unlinkSync(current);\n      fs.symlinkSync(logfileName, current);\n    }\n  } catch (err) {\n    if (err && err.code == \"ENOENT\") {\n      try {\n        fs.symlinkSync(logfileName, current);\n      } catch (e) {\n        if (verbose) {\n          console.error(new Date(), \"[FileStreamRotator] Could not create symlink file: \", current, ' -> ', logfileName);\n        }\n      }\n    }\n  }\n}\n/**\r\n * \r\n * @param {String} logfile \r\n * @param {Boolean} verbose \r\n * @param {function} cb \r\n */\n\n\nfunction createLogWatcher(logfile, verbose, cb) {\n  if (!logfile) return null; // console.log(\"Creating log watcher\")\n\n  try {\n    let stats = fs.lstatSync(logfile);\n    return fs.watch(logfile, function (event, filename) {\n      // console.log(Date(), event, filename)\n      if (event == \"rename\") {\n        try {\n          let stats = fs.lstatSync(logfile); // console.log(\"STATS:\", stats)\n        } catch (err) {\n          // console.log(\"ERROR:\", err)\n          cb(err, logfile);\n        }\n      }\n    });\n  } catch (err) {\n    if (verbose) {\n      console.log(new Date(), \"[FileStreamRotator] Could not add watcher for \" + logfile);\n    }\n  }\n}\n/**\r\n * Write audit json object to disk\r\n * @param {String} logfile\r\n * @param {Object} audit\r\n * @param {Object} audit.keep\r\n * @param {Boolean} audit.keep.days\r\n * @param {Number} audit.keep.amount\r\n * @param {String} audit.auditLog\r\n * @param {Array} audit.files\r\n * @param {EventEmitter} stream\r\n * @param {Boolean} verbose \r\n */\n\n\nFileStreamRotator.addLogToAudit = function (logfile, audit, stream, verbose) {\n  if (audit && audit.files) {\n    // Based on contribution by @nickbug - https://github.com/nickbug\n    var index = audit.files.findIndex(function (file) {\n      return file.name === logfile;\n    });\n\n    if (index !== -1) {\n      // nothing to do as entry already exists.\n      return audit;\n    }\n\n    var time = Date.now();\n    audit.files.push({\n      date: time,\n      name: logfile,\n      hash: crypto.createHash('md5').update(logfile + \"LOG_FILE\" + time).digest(\"hex\")\n    });\n\n    if (audit.keep.days) {\n      var oldestDate = moment().subtract(audit.keep.amount, \"days\").valueOf();\n      var recentFiles = audit.files.filter(function (file) {\n        if (file.date > oldestDate) {\n          return true;\n        }\n\n        removeFile(file, verbose);\n        stream.emit(\"logRemoved\", file);\n        return false;\n      });\n      audit.files = recentFiles;\n    } else {\n      var filesToKeep = audit.files.splice(-audit.keep.amount);\n\n      if (audit.files.length > 0) {\n        audit.files.filter(function (file) {\n          removeFile(file, verbose);\n          stream.emit(\"logRemoved\", file);\n          return false;\n        });\n      }\n\n      audit.files = filesToKeep;\n    }\n\n    FileStreamRotator.writeAuditLog(audit, verbose);\n  }\n\n  return audit;\n};\n/**\r\n *\r\n * @param options\r\n * @param options.filename\r\n * @param options.frequency\r\n * @param options.verbose\r\n * @param options.date_format\r\n * @param options.size\r\n * @param options.max_logs\r\n * @param options.audit_file\r\n * @param options.file_options\r\n * @param options.utc\r\n * @param options.extension File extension to be added at the end of the filename\r\n * @param options.watch_log\r\n * @param options.create_symlink\r\n * @param options.symlink_name\r\n * @returns {Object} stream\r\n */\n\n\nFileStreamRotator.getStream = function (options) {\n  var frequencyMetaData = null;\n  var curDate = null;\n  var self = this;\n\n  if (!options.filename) {\n    console.error(new Date(), \"[FileStreamRotator] No filename supplied. Defaulting to STDOUT\");\n    return process.stdout;\n  }\n\n  if (options.frequency) {\n    frequencyMetaData = self.getFrequency(options.frequency);\n  }\n\n  let auditLog = self.setAuditLog(options.max_logs, options.audit_file, options.filename);\n  self.verbose = options.verbose !== undefined ? options.verbose : true;\n  var fileSize = null;\n  var fileCount = 0;\n  var curSize = 0;\n\n  if (options.size) {\n    fileSize = FileStreamRotator.parseFileSize(options.size);\n  }\n\n  var dateFormat = options.date_format || DATE_FORMAT;\n\n  if (frequencyMetaData && frequencyMetaData.type == \"daily\") {\n    if (!options.date_format) {\n      dateFormat = \"YYYY-MM-DD\";\n    }\n\n    if (moment().format(dateFormat) != moment().endOf(\"day\").format(dateFormat) || moment().format(dateFormat) == moment().add(1, \"day\").format(dateFormat)) {\n      if (self.verbose) {\n        console.log(new Date(), \"[FileStreamRotator] Changing type to custom as date format changes more often than once a day or not every day\");\n      }\n\n      frequencyMetaData.type = \"custom\";\n    }\n  }\n\n  if (frequencyMetaData) {\n    curDate = options.frequency ? self.getDate(frequencyMetaData, dateFormat, options.utc) : \"\";\n  }\n\n  options.create_symlink = options.create_symlink || false;\n  options.extension = options.extension || \"\";\n  var filename = options.filename;\n  var oldFile = null;\n  var logfile = filename + (curDate ? \".\" + curDate : \"\");\n\n  if (filename.match(/%DATE%/)) {\n    logfile = filename.replace(/%DATE%/g, curDate ? curDate : self.getDate(null, dateFormat, options.utc));\n  }\n\n  if (fileSize) {\n    var lastLogFile = null;\n    var t_log = logfile;\n    var f = null;\n\n    if (auditLog && auditLog.files && auditLog.files instanceof Array && auditLog.files.length > 0) {\n      var lastEntry = auditLog.files[auditLog.files.length - 1].name;\n\n      if (lastEntry.match(t_log)) {\n        var lastCount = lastEntry.match(t_log + \"\\\\.(\\\\d+)\"); // Thanks for the PR contribution from @andrefarzat - https://github.com/andrefarzat\n\n        if (lastCount) {\n          t_log = lastEntry;\n          fileCount = lastCount[1];\n        }\n      }\n    }\n\n    if (fileCount == 0 && t_log == logfile) {\n      t_log += options.extension;\n    }\n\n    while (f = fs.existsSync(t_log)) {\n      lastLogFile = t_log;\n      fileCount++;\n      t_log = logfile + \".\" + fileCount + options.extension;\n    }\n\n    if (lastLogFile) {\n      var lastLogFileStats = fs.statSync(lastLogFile);\n\n      if (lastLogFileStats.size < fileSize) {\n        t_log = lastLogFile;\n        fileCount--;\n        curSize = lastLogFileStats.size;\n      }\n    }\n\n    logfile = t_log;\n  } else {\n    logfile += options.extension;\n  }\n\n  if (self.verbose) {\n    console.log(new Date(), \"[FileStreamRotator] Logging to: \", logfile);\n  }\n\n  mkDirForFile(logfile);\n  var file_options = options.file_options || {\n    flags: 'a'\n  };\n  var rotateStream = fs.createWriteStream(logfile, file_options);\n\n  if (curDate && frequencyMetaData && staticFrequency.indexOf(frequencyMetaData.type) > -1 || fileSize > 0) {\n    if (self.verbose) {\n      console.log(new Date(), \"[FileStreamRotator] Rotating file: \", frequencyMetaData ? frequencyMetaData.type : \"\", fileSize ? \"size: \" + fileSize : \"\");\n    }\n\n    var stream = new EventEmitter();\n    stream.auditLog = auditLog;\n\n    stream.end = function () {\n      rotateStream.end.apply(rotateStream, arguments);\n    };\n\n    BubbleEvents(rotateStream, stream);\n    stream.on('close', function () {\n      if (logWatcher) {\n        logWatcher.close();\n      }\n    });\n    stream.on(\"new\", function (newLog) {\n      // console.log(\"new log\", newLog)\n      stream.auditLog = self.addLogToAudit(newLog, stream.auditLog, stream, self.verbose);\n\n      if (options.create_symlink) {\n        createCurrentSymLink(newLog, options.symlink_name, self.verbose);\n      }\n\n      if (options.watch_log) {\n        stream.emit(\"addWatcher\", newLog);\n      }\n    });\n    var logWatcher;\n    stream.on(\"addWatcher\", function (newLog) {\n      if (logWatcher) {\n        logWatcher.close();\n      }\n\n      if (!options.watch_log) {\n        return;\n      } // console.log(\"ADDING WATCHER\", newLog)\n\n\n      logWatcher = createLogWatcher(newLog, self.verbose, function (err, newLog) {\n        stream.emit('createLog', newLog);\n      });\n    });\n    stream.on(\"createLog\", function (file) {\n      try {\n        let stats = fs.lstatSync(file);\n      } catch (err) {\n        if (rotateStream && rotateStream.end == \"function\") {\n          rotateStream.end();\n        }\n\n        rotateStream = fs.createWriteStream(file, file_options);\n        BubbleEvents(rotateStream, stream);\n      }\n    });\n\n    stream.write = function (str, encoding) {\n      var newDate = this.getDate(frequencyMetaData, dateFormat, options.utc);\n\n      if (newDate != curDate || fileSize && curSize > fileSize) {\n        var newLogfile = filename + (curDate ? \".\" + newDate : \"\");\n\n        if (filename.match(/%DATE%/) && curDate) {\n          newLogfile = filename.replace(/%DATE%/g, newDate);\n        }\n\n        if (fileSize && curSize > fileSize) {\n          fileCount++;\n          newLogfile += \".\" + fileCount + options.extension;\n        } else {\n          // reset file count\n          fileCount = 0;\n          newLogfile += options.extension;\n        }\n\n        curSize = 0;\n\n        if (self.verbose) {\n          console.log(new Date(), require('util').format(\"[FileStreamRotator] Changing logs from %s to %s\", logfile, newLogfile));\n        }\n\n        curDate = newDate;\n        oldFile = logfile;\n        logfile = newLogfile; // Thanks to @mattberther https://github.com/mattberther for raising it again.\n\n        if (options.end_stream === true) {\n          rotateStream.end();\n        } else {\n          rotateStream.destroy();\n        }\n\n        mkDirForFile(logfile);\n        rotateStream = fs.createWriteStream(newLogfile, file_options);\n        stream.emit('new', newLogfile);\n        stream.emit('rotate', oldFile, newLogfile);\n        BubbleEvents(rotateStream, stream);\n      }\n\n      rotateStream.write(str, encoding); // Handle length of double-byte characters\n\n      curSize += Buffer.byteLength(str, encoding);\n    }.bind(this);\n\n    process.nextTick(function () {\n      stream.emit('new', logfile);\n    });\n    stream.emit('new', logfile);\n    return stream;\n  } else {\n    if (self.verbose) {\n      console.log(new Date(), \"[FileStreamRotator] File won't be rotated: \", options.frequency, options.size);\n    }\n\n    process.nextTick(function () {\n      rotateStream.emit('new', logfile);\n    });\n    return rotateStream;\n  }\n};\n/**\r\n * Check and make parent directory\r\n * @param pathWithFile\r\n */\n\n\nvar mkDirForFile = function (pathWithFile) {\n  var _path = path.dirname(pathWithFile);\n\n  _path.split(path.sep).reduce(function (fullPath, folder) {\n    fullPath += folder + path.sep; // Option to replace existsSync as deprecated. Maybe in a future release.\n    // try{\n    //     var stats = fs.statSync(fullPath);\n    //     console.log('STATS',fullPath, stats);\n    // }catch(e){\n    //     fs.mkdirSync(fullPath);\n    //     console.log(\"STATS ERROR\",e)\n    // }\n\n    if (!fs.existsSync(fullPath)) {\n      fs.mkdirSync(fullPath);\n    }\n\n    return fullPath;\n  }, '');\n};\n/**\r\n * Bubbles events to the proxy\r\n * @param emitter\r\n * @param proxy\r\n * @constructor\r\n */\n\n\nvar BubbleEvents = function BubbleEvents(emitter, proxy) {\n  emitter.on('close', function () {\n    proxy.emit('close');\n  });\n  emitter.on('finish', function () {\n    proxy.emit('finish');\n  });\n  emitter.on('error', function (err) {\n    proxy.emit('error', err);\n  });\n  emitter.on('open', function (fd) {\n    proxy.emit('open', fd);\n  });\n};","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/file-stream-rotator/FileStreamRotator.js"],"names":["fs","require","path","moment","crypto","EventEmitter","FileStreamRotator","module","exports","staticFrequency","DATE_FORMAT","_checkNumAndType","type","num","digit","_checkDailyAndTest","freqType","undefined","getFrequency","frequency","_f","toLowerCase","match","parseInt","dailyOrTest","parseFileSize","size","_s","getDate","format","date_format","utc","currentMoment","local","indexOf","minute","Math","floor","minutes","hour","setAuditLog","max_logs","audit_file","log_file","_rtn","use_days","toString","substr","_num","Number","baseLog","dirname","replace","full_path","resolve","JSON","parse","readFileSync","encoding","e","code","keep","days","amount","auditLog","files","writeAuditLog","audit","verbose","mkDirForFile","writeFileSync","stringify","console","error","Date","removeFile","file","hash","createHash","update","name","date","digest","existsSync","unlinkSync","createCurrentSymLink","logfile","symLinkName","logPath","logfileName","basename","current","stats","lstatSync","isSymbolicLink","symlinkSync","err","createLogWatcher","cb","watch","event","filename","log","addLogToAudit","stream","index","findIndex","time","now","push","oldestDate","subtract","valueOf","recentFiles","filter","emit","filesToKeep","splice","length","getStream","options","frequencyMetaData","curDate","self","process","stdout","fileSize","fileCount","curSize","dateFormat","endOf","add","create_symlink","extension","oldFile","lastLogFile","t_log","f","Array","lastEntry","lastCount","lastLogFileStats","statSync","file_options","flags","rotateStream","createWriteStream","end","apply","arguments","BubbleEvents","on","logWatcher","close","newLog","symlink_name","watch_log","write","str","newDate","newLogfile","end_stream","destroy","Buffer","byteLength","bind","nextTick","pathWithFile","_path","split","sep","reduce","fullPath","folder","mkdirSync","emitter","proxy","fd"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n/*!\r\n * FileStreamRotator\r\n * Copyright(c) 2012-2017 Holiday Extras.\r\n * Copyright(c) 2017 Roger C.\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar moment = require('moment');\r\nvar crypto = require('crypto');\r\n\r\nvar EventEmitter = require('events');\r\n\r\n/**\r\n * FileStreamRotator:\r\n *\r\n * Returns a file stream that auto-rotates based on date.\r\n *\r\n * Options:\r\n *\r\n *   - `filename`       Filename including full path used by the stream\r\n *\r\n *   - `frequency`      How often to rotate. Options are 'daily', 'custom' and 'test'. 'test' rotates every minute.\r\n *                      If frequency is set to none of the above, a YYYYMMDD string will be added to the end of the filename.\r\n *\r\n *   - `verbose`        If set, it will log to STDOUT when it rotates files and name of log file. Default is TRUE.\r\n *\r\n *   - `date_format`    Format as used in moment.js http://momentjs.com/docs/#/displaying/format/. The result is used to replace\r\n *                      the '%DATE%' placeholder in the filename.\r\n *                      If using 'custom' frequency, it is used to trigger file change when the string representation changes.\r\n *\r\n *   - `size`           Max size of the file after which it will rotate. It can be combined with frequency or date format.\r\n *                      The size units are 'k', 'm' and 'g'. Units need to directly follow a number e.g. 1g, 100m, 20k.\r\n *\r\n *   - `max_logs`       Max number of logs to keep. If not set, it won't remove past logs. It uses its own log audit file\r\n *                      to keep track of the log files in a json format. It won't delete any file not contained in it.\r\n *                      It can be a number of files or number of days. If using days, add 'd' as the suffix.\r\n *\r\n *   - `audit_file`     Location to store the log audit file. If not set, it will be stored in the root of the application.\r\n * \r\n *   - `end_stream`     End stream (true) instead of the default behaviour of destroy (false). Set value to true if when writing to the\r\n *                      stream in a loop, if the application terminates or log rotates, data pending to be flushed might be lost.                    \r\n *\r\n *   - `file_options`   An object passed to the stream. This can be used to specify flags, encoding, and mode.\r\n *                      See https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options. Default `{ flags: 'a' }`.\r\n * \r\n *   - `utc`            Use UTC time for date in filename. Defaults to 'FALSE'\r\n * \r\n *   - `extension`      File extension to be appended to the filename. This is useful when using size restrictions as the rotation\r\n *                      adds a count (1,2,3,4,...) at the end of the filename when the required size is met.\r\n * \r\n *   - `watch_log`      Watch the current file being written to and recreate it in case of accidental deletion. Defaults to 'FALSE'\r\n *\r\n *   - `create_symlink` Create a tailable symlink to the current active log file. Defaults to 'FALSE'\r\n * \r\n *   - `symlink_name`   Name to use when creating the symbolic link. Defaults to 'current.log'\r\n *\r\n * To use with Express / Connect, use as below.\r\n *\r\n * var rotatingLogStream = require('FileStreamRotator').getStream({filename:\"/tmp/test.log\", frequency:\"daily\", verbose: false})\r\n * app.use(express.logger({stream: rotatingLogStream, format: \"default\"}));\r\n *\r\n * @param {Object} options\r\n * @return {Object}\r\n * @api public\r\n */\r\nvar FileStreamRotator = {};\r\n\r\nmodule.exports = FileStreamRotator;\r\n\r\nvar staticFrequency = ['daily', 'test', 'm', 'h', 'custom'];\r\nvar DATE_FORMAT = ('YYYYMMDDHHmm');\r\n\r\n\r\n/**\r\n * Returns frequency metadata for minute/hour rotation\r\n * @param type\r\n * @param num\r\n * @returns {*}\r\n * @private\r\n */\r\nvar _checkNumAndType = function (type, num) {\r\n    if (typeof num == 'number') {\r\n        switch (type) {\r\n            case 'm':\r\n                if (num < 0 || num > 60) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case 'h':\r\n                if (num < 0 || num > 24) {\r\n                    return false;\r\n                }\r\n                break;\r\n        }\r\n        return {type: type, digit: num};\r\n    }\r\n}\r\n\r\n/**\r\n * Returns frequency metadata for defined frequency\r\n * @param freqType\r\n * @returns {*}\r\n * @private\r\n */\r\nvar _checkDailyAndTest = function (freqType) {\r\n    switch (freqType) {\r\n        case 'custom':\r\n        case 'daily':\r\n            return {type: freqType, digit: undefined};\r\n            break;\r\n        case 'test':\r\n            return {type: freqType, digit: 0};\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n/**\r\n * Returns frequency metadata\r\n * @param frequency\r\n * @returns {*}\r\n */\r\nFileStreamRotator.getFrequency = function (frequency) {\r\n    var _f = frequency.toLowerCase().match(/^(\\d+)([mh])$/)\r\n    if(_f){\r\n        return _checkNumAndType(_f[2], parseInt(_f[1]));\r\n    }\r\n\r\n    var dailyOrTest = _checkDailyAndTest(frequency);\r\n    if (dailyOrTest) {\r\n        return dailyOrTest;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Returns a number based on the option string\r\n * @param size\r\n * @returns {Number}\r\n */\r\nFileStreamRotator.parseFileSize = function (size) {\r\n    if(size && typeof size == \"string\"){\r\n        var _s = size.toLowerCase().match(/^((?:0\\.)?\\d+)([kmg])$/);\r\n        if(_s){\r\n            switch(_s[2]){\r\n                case 'k':\r\n                    return _s[1]*1024\r\n                case 'm':\r\n                    return _s[1]*1024*1024\r\n                case 'g':\r\n                    return _s[1]*1024*1024*1024\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns date string for a given format / date_format\r\n * @param format\r\n * @param date_format\r\n * @param {boolean} utc\r\n * @returns {string}\r\n */\r\nFileStreamRotator.getDate = function (format, date_format, utc) {\r\n    date_format = date_format || DATE_FORMAT;\r\n    let currentMoment = utc ? moment.utc() : moment().local()\r\n    if (format && staticFrequency.indexOf(format.type) !== -1) {\r\n        switch (format.type) {\r\n            case 'm':\r\n                var minute = Math.floor(currentMoment.minutes() / format.digit) * format.digit;\r\n                return currentMoment.minutes(minute).format(date_format);\r\n                break;\r\n            case 'h':\r\n                var hour = Math.floor(currentMoment.hour() / format.digit) * format.digit;\r\n                return currentMoment.hour(hour).format(date_format);\r\n                break;\r\n            case 'daily':\r\n            case 'custom':\r\n            case 'test':\r\n                return currentMoment.format(date_format);\r\n        }\r\n    }\r\n    return currentMoment.format(date_format);\r\n}\r\n\r\n/**\r\n * Read audit json object from disk or return new object or null\r\n * @param max_logs\r\n * @param audit_file\r\n * @param log_file\r\n * @returns {Object} auditLogSettings\r\n * @property {Object} auditLogSettings.keep\r\n * @property {Boolean} auditLogSettings.keep.days\r\n * @property {Number} auditLogSettings.keep.amount\r\n * @property {String} auditLogSettings.auditLog\r\n * @property {Array} auditLogSettings.files\r\n */\r\nFileStreamRotator.setAuditLog = function (max_logs, audit_file, log_file){\r\n    var _rtn = null;\r\n    if(max_logs){\r\n        var use_days = max_logs.toString().substr(-1);\r\n        var _num = max_logs.toString().match(/^(\\d+)/);\r\n\r\n        if(Number(_num[1]) > 0) {\r\n            var baseLog = path.dirname(log_file.replace(/%DATE%.+/,\"_filename\"));\r\n            try{\r\n                if(audit_file){\r\n                    var full_path = path.resolve(audit_file);\r\n                    _rtn = JSON.parse(fs.readFileSync(full_path, { encoding: 'utf-8' }));\r\n                }else{\r\n                    var full_path = path.resolve(baseLog + \"/\" + \".audit.json\")\r\n                    _rtn = JSON.parse(fs.readFileSync(full_path, { encoding: 'utf-8' }));\r\n                }\r\n            }catch(e){\r\n                if(e.code !== \"ENOENT\"){\r\n                    return null;\r\n                }\r\n                _rtn = {\r\n                    keep: {\r\n                        days: false,\r\n                        amount: Number(_num[1])\r\n                    },\r\n                    auditLog: audit_file || baseLog + \"/\" + \".audit.json\",\r\n                    files: []\r\n                };\r\n            }\r\n\r\n            _rtn.keep = {\r\n                days: use_days === 'd',\r\n                amount: Number(_num[1])\r\n            };\r\n\r\n        }\r\n    }\r\n    return _rtn;\r\n};\r\n\r\n/**\r\n * Write audit json object to disk\r\n * @param {Object} audit\r\n * @param {Object} audit.keep\r\n * @param {Boolean} audit.keep.days\r\n * @param {Number} audit.keep.amount\r\n * @param {String} audit.auditLog\r\n * @param {Array} audit.files\r\n * @param {Boolean} verbose \r\n */\r\nFileStreamRotator.writeAuditLog = function(audit, verbose){\r\n    try{\r\n        mkDirForFile(audit.auditLog);\r\n        fs.writeFileSync(audit.auditLog, JSON.stringify(audit,null,4));\r\n    }catch(e){\r\n        if (verbose) {\r\n            console.error(new Date(),\"[FileStreamRotator] Failed to store log audit at:\", audit.auditLog,\"Error:\", e);\r\n        }\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Removes old log file\r\n * @param file\r\n * @param file.hash\r\n * @param file.name\r\n * @param file.date\r\n * @param {Boolean} verbose \r\n */\r\nfunction removeFile(file, verbose){\r\n    if(file.hash === crypto.createHash('md5').update(file.name + \"LOG_FILE\" + file.date).digest(\"hex\")){\r\n        try{\r\n            if (fs.existsSync(file.name)) {\r\n                fs.unlinkSync(file.name);\r\n            }\r\n        }catch(e){\r\n            if (verbose) {\r\n                console.error(new Date(), \"[FileStreamRotator] Could not remove old log file: \", file.name);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Create symbolic link to current log file\r\n * @param {String} logfile \r\n * @param {String} name Name to use for symbolic link \r\n * @param {Boolean} verbose \r\n */\r\nfunction createCurrentSymLink(logfile, name, verbose) {\r\n    let symLinkName = name || \"current.log\"\r\n    let logPath = path.dirname(logfile)\r\n    let logfileName = path.basename(logfile)\r\n    let current = logPath + \"/\" + symLinkName\r\n    try {\r\n        let stats = fs.lstatSync(current)\r\n        if(stats.isSymbolicLink()){\r\n            fs.unlinkSync(current)\r\n            fs.symlinkSync(logfileName, current)\r\n        }\r\n    } catch (err) {\r\n        if(err && err.code == \"ENOENT\") {\r\n            try {\r\n                fs.symlinkSync(logfileName, current)\r\n            } catch (e) {\r\n                if (verbose) {\r\n                    console.error(new Date(), \"[FileStreamRotator] Could not create symlink file: \", current, ' -> ', logfileName);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} logfile \r\n * @param {Boolean} verbose \r\n * @param {function} cb \r\n */\r\nfunction createLogWatcher(logfile, verbose, cb){\r\n    if(!logfile) return null\r\n    // console.log(\"Creating log watcher\")\r\n    try {\r\n        let stats = fs.lstatSync(logfile)\r\n        return fs.watch(logfile, function(event,filename){\r\n            // console.log(Date(), event, filename)\r\n            if(event == \"rename\"){\r\n                try {\r\n                    let stats = fs.lstatSync(logfile)\r\n                    // console.log(\"STATS:\", stats)\r\n                }catch(err){\r\n                    // console.log(\"ERROR:\", err)\r\n                    cb(err,logfile)\r\n                }                    \r\n            }\r\n        })\r\n    }catch(err){\r\n        if(verbose){\r\n            console.log(new Date(),\"[FileStreamRotator] Could not add watcher for \" + logfile);\r\n        }\r\n    }                    \r\n}\r\n\r\n/**\r\n * Write audit json object to disk\r\n * @param {String} logfile\r\n * @param {Object} audit\r\n * @param {Object} audit.keep\r\n * @param {Boolean} audit.keep.days\r\n * @param {Number} audit.keep.amount\r\n * @param {String} audit.auditLog\r\n * @param {Array} audit.files\r\n * @param {EventEmitter} stream\r\n * @param {Boolean} verbose \r\n */\r\nFileStreamRotator.addLogToAudit = function(logfile, audit, stream, verbose){\r\n    if(audit && audit.files){\r\n        // Based on contribution by @nickbug - https://github.com/nickbug\r\n        var index = audit.files.findIndex(function(file) {\r\n            return (file.name === logfile);\r\n        });\r\n        if (index !== -1) {\r\n            // nothing to do as entry already exists.\r\n            return audit;\r\n        }\r\n        var time = Date.now();\r\n        audit.files.push({\r\n            date: time,\r\n            name: logfile,\r\n            hash: crypto.createHash('md5').update(logfile + \"LOG_FILE\" + time).digest(\"hex\")\r\n        });\r\n\r\n        if(audit.keep.days){\r\n            var oldestDate = moment().subtract(audit.keep.amount,\"days\").valueOf();\r\n            var recentFiles = audit.files.filter(function(file){\r\n                if(file.date > oldestDate){\r\n                    return true;\r\n                }\r\n                removeFile(file, verbose);\r\n                stream.emit(\"logRemoved\", file)\r\n                return false;\r\n            });\r\n            audit.files = recentFiles;\r\n        }else{\r\n            var filesToKeep = audit.files.splice(-audit.keep.amount);\r\n            if(audit.files.length > 0){\r\n                audit.files.filter(function(file){\r\n                    removeFile(file, verbose);\r\n                    stream.emit(\"logRemoved\", file)\r\n                    return false;\r\n                })\r\n            }\r\n            audit.files = filesToKeep;\r\n        }\r\n\r\n        FileStreamRotator.writeAuditLog(audit, verbose);\r\n    }\r\n\r\n    return audit;\r\n}\r\n\r\n/**\r\n *\r\n * @param options\r\n * @param options.filename\r\n * @param options.frequency\r\n * @param options.verbose\r\n * @param options.date_format\r\n * @param options.size\r\n * @param options.max_logs\r\n * @param options.audit_file\r\n * @param options.file_options\r\n * @param options.utc\r\n * @param options.extension File extension to be added at the end of the filename\r\n * @param options.watch_log\r\n * @param options.create_symlink\r\n * @param options.symlink_name\r\n * @returns {Object} stream\r\n */\r\nFileStreamRotator.getStream = function (options) {\r\n    var frequencyMetaData = null;\r\n    var curDate = null;\r\n    var self = this;\r\n\r\n    if (!options.filename) {\r\n        console.error(new Date(),\"[FileStreamRotator] No filename supplied. Defaulting to STDOUT\");\r\n        return process.stdout;\r\n    }\r\n\r\n    if (options.frequency) {\r\n        frequencyMetaData = self.getFrequency(options.frequency);\r\n    }\r\n\r\n    let auditLog = self.setAuditLog(options.max_logs, options.audit_file, options.filename);\r\n    self.verbose = (options.verbose !== undefined ? options.verbose : true);\r\n\r\n    var fileSize = null;\r\n    var fileCount = 0;\r\n    var curSize = 0;\r\n    if(options.size){\r\n        fileSize = FileStreamRotator.parseFileSize(options.size);\r\n    }\r\n\r\n    var dateFormat = (options.date_format || DATE_FORMAT);\r\n    if(frequencyMetaData && frequencyMetaData.type == \"daily\"){\r\n        if(!options.date_format){\r\n            dateFormat = \"YYYY-MM-DD\";\r\n        }\r\n        if(moment().format(dateFormat) != moment().endOf(\"day\").format(dateFormat) || moment().format(dateFormat) == moment().add(1,\"day\").format(dateFormat)){\r\n            if(self.verbose){\r\n                console.log(new Date(),\"[FileStreamRotator] Changing type to custom as date format changes more often than once a day or not every day\");\r\n            }\r\n            frequencyMetaData.type = \"custom\";\r\n        }\r\n    }\r\n\r\n    if (frequencyMetaData) {\r\n        curDate = (options.frequency ? self.getDate(frequencyMetaData,dateFormat, options.utc) : \"\");\r\n    }\r\n\r\n    options.create_symlink = options.create_symlink || false;\r\n    options.extension = options.extension || \"\"\r\n    var filename = options.filename;\r\n    var oldFile = null;\r\n    var logfile = filename + (curDate ? \".\" + curDate : \"\");\r\n    if(filename.match(/%DATE%/)){\r\n        logfile = filename.replace(/%DATE%/g,(curDate?curDate:self.getDate(null,dateFormat, options.utc)));\r\n    }\r\n\r\n    if(fileSize){\r\n        var lastLogFile = null;\r\n        var t_log = logfile;\r\n        var f = null;\r\n        if(auditLog && auditLog.files && auditLog.files instanceof Array && auditLog.files.length > 0){\r\n            var lastEntry = auditLog.files[auditLog.files.length - 1].name;\r\n            if(lastEntry.match(t_log)){\r\n                var lastCount = lastEntry.match(t_log + \"\\\\.(\\\\d+)\");\r\n                // Thanks for the PR contribution from @andrefarzat - https://github.com/andrefarzat\r\n                if(lastCount){                    \r\n                    t_log = lastEntry;\r\n                    fileCount = lastCount[1];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fileCount == 0 && t_log == logfile) {\r\n            t_log += options.extension\r\n        }\r\n\r\n        while(f = fs.existsSync(t_log)){\r\n            lastLogFile = t_log;\r\n            fileCount++;\r\n            t_log = logfile + \".\" + fileCount + options.extension;\r\n        }\r\n        if(lastLogFile){\r\n            var lastLogFileStats = fs.statSync(lastLogFile);\r\n            if(lastLogFileStats.size < fileSize){\r\n                t_log = lastLogFile;\r\n                fileCount--;\r\n                curSize = lastLogFileStats.size;\r\n            }\r\n        }\r\n        logfile = t_log;\r\n    } else {\r\n        logfile += options.extension\r\n    }\r\n\r\n    if (self.verbose) {\r\n        console.log(new Date(),\"[FileStreamRotator] Logging to: \", logfile);\r\n    }\r\n\r\n    mkDirForFile(logfile);\r\n\r\n    var file_options = options.file_options || {flags: 'a'};\r\n    var rotateStream = fs.createWriteStream(logfile, file_options);\r\n    if ((curDate && frequencyMetaData && (staticFrequency.indexOf(frequencyMetaData.type) > -1)) || fileSize > 0) {\r\n        if (self.verbose) {\r\n            console.log(new Date(),\"[FileStreamRotator] Rotating file: \", frequencyMetaData?frequencyMetaData.type:\"\", fileSize?\"size: \" + fileSize:\"\");\r\n        }\r\n        var stream = new EventEmitter();\r\n        stream.auditLog = auditLog;\r\n        stream.end = function(){\r\n            rotateStream.end.apply(rotateStream,arguments);\r\n        };\r\n        BubbleEvents(rotateStream,stream);\r\n\r\n        stream.on('close', function(){\r\n            if (logWatcher) {\r\n                logWatcher.close()\r\n            }\r\n        })\r\n\r\n        stream.on(\"new\",function(newLog){\r\n            // console.log(\"new log\", newLog)\r\n            stream.auditLog = self.addLogToAudit(newLog,stream.auditLog, stream, self.verbose)\r\n            if(options.create_symlink){\r\n                createCurrentSymLink(newLog, options.symlink_name, self.verbose)\r\n            }\r\n            if(options.watch_log){\r\n                stream.emit(\"addWatcher\", newLog)\r\n            }\r\n        });\r\n        \r\n        var logWatcher;\r\n        stream.on(\"addWatcher\", function(newLog){\r\n            if (logWatcher) {\r\n                logWatcher.close()\r\n            }\r\n            if(!options.watch_log){\r\n                return\r\n            }\r\n            // console.log(\"ADDING WATCHER\", newLog)\r\n            logWatcher = createLogWatcher(newLog, self.verbose, function(err,newLog){\r\n                stream.emit('createLog', newLog)\r\n            })        \r\n        })\r\n\r\n        stream.on(\"createLog\",function(file){\r\n            try {\r\n                let stats = fs.lstatSync(file)\r\n            }catch(err){\r\n                if(rotateStream && rotateStream.end == \"function\"){\r\n                    rotateStream.end();\r\n                }\r\n                rotateStream = fs.createWriteStream(file, file_options);\r\n                BubbleEvents(rotateStream,stream);\r\n            }\r\n        });\r\n\r\n\r\n        stream.write = (function (str, encoding) {\r\n            var newDate = this.getDate(frequencyMetaData, dateFormat, options.utc);\r\n            if (newDate != curDate || (fileSize && curSize > fileSize)) {\r\n                var newLogfile = filename + (curDate ? \".\" + newDate : \"\");\r\n                if(filename.match(/%DATE%/) && curDate){\r\n                    newLogfile = filename.replace(/%DATE%/g,newDate);\r\n                }\r\n\r\n                if(fileSize && curSize > fileSize){\r\n                    fileCount++;\r\n                    newLogfile += \".\" + fileCount + options.extension;\r\n                }else{\r\n                    // reset file count\r\n                    fileCount = 0;\r\n                    newLogfile += options.extension\r\n                }\r\n                curSize = 0;\r\n\r\n                if (self.verbose) {\r\n                    console.log(new Date(),require('util').format(\"[FileStreamRotator] Changing logs from %s to %s\", logfile, newLogfile));\r\n                }\r\n                curDate = newDate;\r\n                oldFile = logfile;\r\n                logfile = newLogfile;\r\n                // Thanks to @mattberther https://github.com/mattberther for raising it again.\r\n                if(options.end_stream === true){\r\n                    rotateStream.end();\r\n                }else{\r\n                    rotateStream.destroy();\r\n                }\r\n\r\n                mkDirForFile(logfile);\r\n\r\n                rotateStream = fs.createWriteStream(newLogfile, file_options);\r\n                stream.emit('new',newLogfile);\r\n                stream.emit('rotate',oldFile, newLogfile);\r\n                BubbleEvents(rotateStream,stream);\r\n            }\r\n            rotateStream.write(str, encoding);\r\n            // Handle length of double-byte characters\r\n            curSize += Buffer.byteLength(str, encoding);\r\n        }).bind(this);\r\n        process.nextTick(function(){\r\n            stream.emit('new',logfile);\r\n        })\r\n        stream.emit('new',logfile)\r\n        return stream;\r\n    } else {\r\n        if (self.verbose) {\r\n            console.log(new Date(),\"[FileStreamRotator] File won't be rotated: \", options.frequency, options.size);\r\n        }\r\n        process.nextTick(function(){\r\n            rotateStream.emit('new',logfile);\r\n        })\r\n        return rotateStream;\r\n    }\r\n}\r\n\r\n/**\r\n * Check and make parent directory\r\n * @param pathWithFile\r\n */\r\nvar mkDirForFile = function(pathWithFile){\r\n    var _path = path.dirname(pathWithFile);\r\n    _path.split(path.sep).reduce(\r\n        function(fullPath, folder) {\r\n            fullPath += folder + path.sep;\r\n            // Option to replace existsSync as deprecated. Maybe in a future release.\r\n            // try{\r\n            //     var stats = fs.statSync(fullPath);\r\n            //     console.log('STATS',fullPath, stats);\r\n            // }catch(e){\r\n            //     fs.mkdirSync(fullPath);\r\n            //     console.log(\"STATS ERROR\",e)\r\n            // }\r\n            if (!fs.existsSync(fullPath)) {\r\n                fs.mkdirSync(fullPath);\r\n            }\r\n            return fullPath;\r\n        },\r\n        ''\r\n    );\r\n};\r\n\r\n\r\n/**\r\n * Bubbles events to the proxy\r\n * @param emitter\r\n * @param proxy\r\n * @constructor\r\n */\r\nvar BubbleEvents = function BubbleEvents(emitter,proxy){\r\n    emitter.on('close',function(){\r\n        proxy.emit('close');\r\n    })\r\n    emitter.on('finish',function(){\r\n        proxy.emit('finish');\r\n    })\r\n    emitter.on('error',function(err){\r\n        proxy.emit('error',err);\r\n    })\r\n    emitter.on('open',function(fd){\r\n        proxy.emit('open',fd);\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}