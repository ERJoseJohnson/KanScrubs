{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\n\nconst Offer_1 = require(\"../common/models/Offer\");\n\nconst Utils_1 = require(\"../common/Utils\");\n\nconst LOG_ID = \"PROFILES/SVCE - \";\nconst FeaturesEnum = {\n  COMPANY_ADMIN_COUNT: \"COMPANY_ADMIN_COUNT\",\n  COMPANY_LOGO_MODIFICATION: \"COMPANY_LOGO_MODIFICATION\",\n  COMPANY_DOMAIN_NAME_MODIFICATION: \"COMPANY_DOMAIN_NAME_MODIFICATION\",\n  COMPANY_DETAILS_MODIFICATION: \"COMPANY_DETAILS_MODIFICATION\",\n  WEBRTC_FOR_MOBILE: \"WEBRTC_FOR_MOBILE\",\n  BUBBLE_PARTICIPANT_COUNT: \"BUBBLE_PARTICIPANT_COUNT\",\n  TELEPHONY_BASIC_CALL: \"TELEPHONY_BASIC_CALL\",\n  TELEPHONY_SECOND_CALL: \"TELEPHONY_SECOND_CALL\",\n  TELEPHONY_TRANSFER_CALL: \"TELEPHONY_TRANSFER_CALL\",\n  TELEPHONY_CONFERENCE_CALL: \"TELEPHONY_CONFERENCE_CALL\",\n  TELEPHONY_DEFLECT_CALL: \"TELEPHONY_DEFLECT_CALL\",\n  TELEPHONY_PHONE_BOOK: \"TELEPHONY_PHONE_BOOK\",\n  TELEPHONY_VOICE_MAIL: \"TELEPHONY_VOICE_MAIL\",\n  TELEPHONY_CALL_FORWARD: \"TELEPHONY_CALL_FORWARD\",\n  TELEPHONY_NOMADIC: \"TELEPHONY_NOMADIC\",\n  CONFERENCE_PARTICIPANT_COUNT: \"CONFERENCE_PARTICIPANT_COUNT\",\n  CONFERENCE_PARTICIPANT_ALLOWED: \"CONFERENCE_PARTICIPANT_ALLOWED\",\n  WEBRTC_CONFERENCE_ALLOWED: \"WEBRTC_CONFERENCE_ALLOWED\",\n  WEBRTC_CONFERENCE_PARTICIPANT_COUNT: \"WEBRTC_CONFERENCE_PARTICIPANT_COUNT\",\n  WEBRTC_PARTICIPANT_ALLOWED: \"WEBRTC_PARTICIPANT_ALLOWED\",\n  CONFERENCE_ALLOWED: \"CONFERENCE_ALLOWED\",\n  CONFERENCE_DIAL_OUT: \"CONFERENCE_DIAL_OUT\",\n  CONFERENCE_RECORDING: \"CONFERENCE_RECORDING\",\n  MSO365_CALENDAR_PRESENCE: \"MSO365_CALENDAR_PRESENCE\",\n  MSO365_DIRECTORY_SEARCH: \"MSO365_DIRECTORY_SEARCH\",\n  MS_OUTLOOK_PLUGIN: \"MS_OUTLOOK_PLUGIN\",\n  MS_SKYPE_PLUGIN: \"MS_SKYPE_PLUGIN\",\n  FILE_SHARING_QUOTA_GB: \"FILE_SHARING_QUOTA_GB\",\n  GOOGLE_CALENDAR_PRESENCE: \"GOOGLE_CALENDAR_PRESENCE\",\n  WEBRTC_P2P_RECORDING: \"WEBRTC_P2P_RECORDING\",\n  BUBBLE_PROMOTE_MEMBER: \"BUBBLE_PROMOTE_MEMBER\",\n  BUBBLE_GUESTS_ALLOWED: \"BUBBLE_GUESTS_ALLOWED\",\n  TELEPHONY_WEBRTC_GATEWAY: \"TELEPHONY_WEBRTC_GATEWAY\",\n  TELEPHONY_WEBRTC_PSTN_CALLING: \"TELEPHONY_WEBRTC_PSTN_CALLING\",\n  ANALYTICS_DASHBOARD_EC: \"ANALYTICS_DASHBOARD_EC\",\n  ANALYTICS_DASHBOARD_BP: \"ANALYTICS_DASHBOARD_BP\",\n  TELEPHONY_CALL_SUBJECT: \"CALL_SUBJECT\",\n  CHANNEL_CREATE: \"CHANNEL_CREATE\",\n  CHANNEL_CREATE_ADMIN_ROLE_BYPASS: \"CHANNEL_CREATE_ADMIN_ROLE_BYPASS\",\n  CHANNEL_ACTIVATED: \"CHANNEL_ACTIVATED\"\n  /*COMPANY_ADMIN_COUNT: \"COMPANY_ADMIN_COUNT\",\r\n  COMPANY_LOGO_MODIFICATION: \"COMPANY_LOGO_MODIFICATION\",\r\n  COMPANY_DOMAIN_NAME_MODIFICATION: \"COMPANY_DOMAIN_NAME_MODIFICATION\",\r\n  COMPANY_DETAILS_MODIFICATION: \"COMPANY_DETAILS_MODIFICATION\",\r\n  WEBRTC_FOR_MOBILE: \"WEBRTC_FOR_MOBILE\",\r\n  BUBBLE_PARTICIPANT_COUNT: \"BUBBLE_PARTICIPANT_COUNT\",\r\n  TELEPHONY_BASIC_CALL: \"TELEPHONY_BASIC_CALL\",\r\n  TELEPHONY_SECOND_CALL: \"TELEPHONY_SECOND_CALL\",\r\n  TELEPHONY_TRANSFER_CALL: \"TELEPHONY_TRANSFER_CALL\",\r\n  TELEPHONY_CONFERENCE_CALL: \"TELEPHONY_CONFERENCE_CALL\",\r\n  TELEPHONY_DEFLECT_CALL: \"TELEPHONY_DEFLECT_CALL\",\r\n  TELEPHONY_PHONE_BOOK: \"TELEPHONY_PHONE_BOOK\",\r\n  TELEPHONY_VOICE_MAIL: \"TELEPHONY_VOICE_MAIL\",\r\n  TELEPHONY_CALL_FORWARD: \"TELEPHONY_CALL_FORWARD\",\r\n  CONFERENCE_PARTICIPANT_COUNT: \"CONFERENCE_PARTICIPANT_COUNT\",\r\n  CONFERENCE_PARTICIPANT_ALLOWED: \"CONFERENCE_PARTICIPANT_ALLOWED\",\r\n  WEBRTC_CONFERENCE_ALLOWED: \"WEBRTC_CONFERENCE_ALLOWED\",\r\n  WEBRTC_CONFERENCE_PARTICIPANT_COUNT: \"WEBRTC_CONFERENCE_PARTICIPANT_COUNT\",\r\n  WEBRTC_PARTICIPANT_ALLOWED: \"WEBRTC_PARTICIPANT_ALLOWED\",\r\n  CONFERENCE_ALLOWED: \"CONFERENCE_ALLOWED\",\r\n  CONFERENCE_DIAL_OUT: \"CONFERENCE_DIAL_OUT\",\r\n  CONFERENCE_RECORDING: \"CONFERENCE_RECORDING\",\r\n  MSO365_CALENDAR_PRESENCE: \"MSO365_CALENDAR_PRESENCE\",\r\n  MSO365_DIRECTORY_SEARCH: \"MSO365_DIRECTORY_SEARCH\",\r\n  MS_OUTLOOK_PLUGIN: \"MS_OUTLOOK_PLUGIN\",\r\n  MS_SKYPE_PLUGIN: \"MS_SKYPE_PLUGIN\",\r\n  FILE_SHARING_QUOTA_GB: \"FILE_SHARING_QUOTA_GB\",\r\n  GOOGLE_CALENDAR_PRESENCE: \"GOOGLE_CALENDAR_PRESENCE\",\r\n  WEBRTC_P2P_RECORDING: \"WEBRTC_P2P_RECORDING\" // */\n\n};\nexports.FeaturesEnum = FeaturesEnum;\nlet ProfilesService =\n/**\r\n * @module\r\n * @name ProfilesService\r\n * @version 1.67.1 \r\n * @private\r\n * @description\r\n *  This module is the service used to retrieve profiles from server.\r\n*/\nclass ProfilesService {\n  constructor(_eventEmitter, _logger, _startConfig) {\n    this.ready = false;\n    this._startConfig = _startConfig;\n    this._xmpp = null;\n    this._rest = null;\n    this._s2s = null;\n    this._options = {};\n    this._useXMPP = false;\n    this._useS2S = false;\n    this._eventEmitter = _eventEmitter;\n    this._logger = _logger;\n    this.started = false;\n    let that = this;\n\n    this.onUserUpdateNeeded = __event => {\n      //wait 3 seconds before requesting the featureProfile for this user; ignore events in the meantime\n      if (that.timer) {\n        return;\n      }\n\n      that.timer = setTimeout(() => {\n        that.getServerProfile().then(function () {\n          // $rootScope.$broadcast(\"ON_PROFILE_FEATURES_UPDATED\");\n          //that._logger.log(\"debug\", LOG_ID + \"(start) send rainbow_onprofilefeatureupdated \");\n          that._eventEmitter.emit(\"evt_internal_profilefeatureupdated\");\n\n          clearInterval(that.timer);\n          that.timer = null;\n        }).catch(function (error) {\n          that.timer = null;\n\n          that._logger.log(\"warn\", LOG_ID + \"(onUserUpdateNeeded) FAILURE .\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(onUserUpdateNeeded) FAILURE === \", error.message); // reject(error);\n\n        });\n      }, 3000);\n    };\n\n    this.ready = false;\n  }\n\n  get startConfig() {\n    return this._startConfig;\n  }\n  /*********************************************************************/\n\n  /** LIFECYCLE STUFF                                                 **/\n\n  /*********************************************************************/\n\n\n  start(_options, _core, stats) {\n    let that = this; //that._logger.log(\"debug\", LOG_ID + \"(start) \");\n\n    that._logger.log(\"info\", LOG_ID + \"(start) [profileService] === STARTING ===\");\n\n    that.stats = stats ? stats : [];\n    that._xmpp = _core._xmpp;\n    that._rest = _core._rest;\n    that._options = _options;\n    that._s2s = _core._s2s;\n    that._useXMPP = that._options.useXMPP;\n    that._useS2S = that._options.useS2S;\n    that.features = {};\n    that.profiles = [];\n    that.mainOffers = [];\n    that.startDate = new Date();\n    this.ready = true;\n  }\n\n  stop() {\n    let that = this;\n\n    that._logger.log(\"debug\", LOG_ID + \"(stop) [profileService] === STOPPING ===\");\n\n    that.started = false;\n\n    that._logger.log(\"debug\", LOG_ID + \"(stop) [profileService] === STOPPED ===\");\n\n    this.ready = false;\n    return Promise.resolve();\n  }\n\n  restart() {\n    let that = this;\n\n    that._logger.log(\"debug\", LOG_ID + \"(restart) [profileService] === RESTART ===\"); //resend the features for the desktop client\n\n\n    this.onUserUpdateNeeded();\n  }\n\n  init() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      // Fetch profile from server\n      that.getServerProfile().then(function () {\n        // Consider service as started\n        that.started = true; // @ts-ignore\n\n        let startDuration = Math.round(new Date() - that.startDate);\n        that.stats.push({\n          service: \"profileService\",\n          startDuration: startDuration\n        });\n\n        that._logger.log(\"debug\", LOG_ID + \"(start) [profileService] === STARTED (\" + startDuration + \" ms) ===\"); //$rootScope.$broadcast(\"ON_PROFILE_FEATURES_UPDATED\");\n\n\n        that._logger.log(\"debug\", LOG_ID + \"(start) send rainbow_onprofilefeatureupdated \");\n\n        that._eventEmitter.emit(\"evt_internal_profilefeatureupdated\"); // NED TO BE PORTED !!!!!!!\n        // $rootScope.$on(\"$destroy\", $rootScope.$on(\"ON_PROFILE_FEATURES_UPDATE_NEEDED\", that.onUserUpdateNeeded));\n\n\n        resolve();\n      }).catch(function (error) {\n        that._logger.log(\"warn\", LOG_ID + \"([profileService] === STARTING FAILURE === \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"([profileService] === STARTING FAILURE === : \" + error.message);\n\n        return reject(error);\n      });\n    });\n  }\n  /*********************************************************************/\n\n  /** PROFILE API STUFF                                          **/\n\n  /*********************************************************************/\n\n\n  getServerProfile() {\n    let that = this;\n    return Promise.all([that.getServerProfiles(), that.getServerProfilesFeatures()]);\n  }\n\n  getServerProfiles() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that._rest.getServerProfiles()\n      /* $http({\r\n          method: \"GET\",\r\n          url: config.restServerUrl + \"/api/rainbow/enduser/v1.0/users/\" + contactService.userContact.dbId + \"/profiles\",\r\n          headers: authService.getRequestHeader()\r\n      }) // */\n      .then(function success(response) {\n        that.profiles = [];\n        that.mainOffers = [];\n        response.forEach(function (profileData) {\n          that._logger.log(\"internal\", LOG_ID + \"(getServerProfiles) === response ===\" + profileData); //store profile data\n\n\n          that.profiles.push(profileData);\n          let offer = Offer_1.offerManager.createOfferFromProfileData(profileData);\n\n          if (offer.isExclusive || offer.isDefault) {\n            that.mainOffers.push(offer);\n          }\n        });\n        that.mainOffers.sort(Offer_1.offerManager.offerComparator);\n        resolve();\n      }, function error(response) {\n        let errorMessage = \"(getServerProfiles) failure: no server response\";\n\n        if (response) {\n          errorMessage = \"(getServerProfiles) failure: \" + JSON.stringify(response);\n        }\n\n        that._logger.log(\"error\", LOG_ID + \"(getServerProfiles) Error. \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(getServerProfiles) Error : \", errorMessage);\n\n        return reject(ErrorManager_1.ErrorManager.getErrorManager().OTHERERROR(\"REQUESTERROR\", errorMessage));\n      });\n    });\n  }\n\n  getServerProfilesFeatures() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      /* $http({\r\n          method: \"GET\",\r\n          url: config.restServerUrl + \"/api/rainbow/enduser/v1.0/users/\" + contactService.userContact.dbId + \"/profiles/features\",\r\n          headers: authService.getRequestHeader()\r\n      }) // */\n      that._rest.getServerProfilesFeatures().then(function success(response) {\n        that.features = {};\n        response.forEach(function (featureData) {\n          that._logger.log(\"internal\", LOG_ID + \"(getServerProfilesFeatures) === response === : \", featureData); //store feature data\n\n\n          if (featureData.hasOwnProperty(\"featureUniqueRef\")) {\n            that.features[featureData.featureUniqueRef] = featureData;\n          }\n        });\n        resolve();\n      }, function error(response) {\n        let errorMessage = \"(getServerProfilesFeatures) failure : no server response\";\n\n        if (response) {\n          errorMessage = \"(getServerProfilesFeatures) failure : \" + JSON.stringify(response);\n        }\n\n        that._logger.log(\"error\", LOG_ID + \"(getServerProfilesFeatures) Error.\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(getServerProfilesFeatures) Error : \", errorMessage);\n\n        return reject(ErrorManager_1.ErrorManager.getErrorManager().OTHERERROR(\"REQUESTERROR\", errorMessage));\n      });\n    });\n  }\n  /*********************************************************************/\n\n  /** USER DATA API STUFF                                             **/\n\n  /*********************************************************************/\n\n  /*getUserData getUserData() {\r\n      return authService.getUserData();\r\n  }\r\n    setUserData setUserData(params) {\r\n      return $q(function (resolve, reject) {\r\n          let url = config.restServerUrl + \"/api/rainbow/enduser/v1.0/users/\" + contactService.userContact.dbId;\r\n          $http({method: \"PUT\", url: url, headers: authService.getRequestHeader(), data: params})\r\n              .then(\r\n                  function success(result) {\r\n                      $log.info(\"[profileService] setUserData \" + JSON.stringify(params) + \" -- success\");\r\n                      resolve(result.data);\r\n                  },\r\n                  function failure(response) {\r\n                      let errorMessage = \"setUserData failure: no server response\";\r\n                      if (response) {\r\n                          errorMessage = \"setUserData failure: \" + JSON.stringify(response);\r\n                      }\r\n                      $log.error(\"[profileService] \" + errorMessage);\r\n                  reject( ErrorManager.getErrorManager().OTHERERROR(\"REQUESTERROR\", errorMessage));\r\n                  });\r\n      });\r\n  }\r\n  // */\n\n  /**\r\n   * APIs for GUI components\r\n   * Used by SDK (public)\r\n   * Warning when modifying this method\r\n   */\n\n\n  isFeatureEnabled(featureUniqueRef) {\n    let that = this;\n\n    if (that.started && that.features.hasOwnProperty(featureUniqueRef) && that.features[featureUniqueRef].hasOwnProperty(\"featureType\") && that.features[featureUniqueRef].featureType === \"boolean\" && that.features[featureUniqueRef].hasOwnProperty(\"isEnabled\")) {\n      let enabled = that.features[featureUniqueRef].isEnabled;\n\n      that._logger.log(\"debug\", LOG_ID + \"(isFeatureEnabled) : \" + featureUniqueRef + \" : \" + enabled);\n\n      return enabled;\n    }\n\n    that._logger.log(\"debug\", LOG_ID + \"(isFeatureEnabled) : \" + featureUniqueRef + \" : service not started or feature not enabled\");\n\n    return false;\n  }\n\n  getFeatureLimitMax(featureUniqueRef) {\n    let that = this;\n\n    if (that.started && that.features.hasOwnProperty(featureUniqueRef) && that.features[featureUniqueRef].hasOwnProperty(\"featureType\") && that.features[featureUniqueRef].featureType === \"number\" && that.features[featureUniqueRef].hasOwnProperty(\"limitMax\")) {\n      let limitMax = that.features[featureUniqueRef].limitMax;\n\n      that._logger.log(\"debug\", LOG_ID + \"(getFeatureLimitMax) : \" + featureUniqueRef + \" : \" + limitMax);\n\n      return limitMax;\n    }\n\n    that._logger.log(\"debug\", LOG_ID + \"(getFeatureLimitMax) : \" + featureUniqueRef + \" : service not started or feature not enabled\");\n\n    return 0;\n  }\n\n  getFeatureLimitMin(featureUniqueRef) {\n    let that = this;\n\n    if (that.started && that.features.hasOwnProperty(featureUniqueRef) && that.features[featureUniqueRef].hasOwnProperty(\"featureType\") && that.features[featureUniqueRef].featureType === \"number\" && that.features[featureUniqueRef].hasOwnProperty(\"limitMin\")) {\n      let limitMin = that.features[featureUniqueRef].limitMin;\n\n      that._logger.log(\"debug\", LOG_ID + \"(getFeatureLimitMin) : \" + featureUniqueRef + \" : \" + limitMin);\n\n      return limitMin;\n    }\n\n    that._logger.log(\"debug\", LOG_ID + \"(getFeatureLimitMin) : \" + featureUniqueRef + \" : service not started or feature not enabled\");\n\n    return 0;\n  }\n  /**\r\n   * Returns the profile \"Enterprise\", \"Business\", \"Essential\" or null (if none of them)\r\n   */\n\n\n  getMyProfileOffer() {\n    let that = this;\n\n    if (that.mainOffers.length > 0) {\n      return that.mainOffers.slice(-1)[0];\n    }\n\n    return null;\n  }\n\n  getMyProfileName() {\n    let that = this;\n    let profile = that.getMyProfileOffer();\n\n    if (profile) {\n      return profile.name;\n    }\n\n    return null;\n  }\n  /**\r\n   * APIs for GUI components\r\n   * Used by SDK (public)\r\n   */\n\n\n  getMyProfiles() {\n    let that = this;\n    let profiles = [];\n\n    if (that.started) {\n      //TODO return a simplified profile object ???\n      profiles = that.profiles;\n    } else {\n      that._logger.log(\"debug\", LOG_ID + \"(getMyProfiles) : service not started\");\n    }\n\n    return profiles;\n  }\n  /**\r\n   * Used by SDK (public)\r\n   * Warning when modifying this method\r\n   */\n\n\n  getMyProfileFeatures() {\n    let that = this;\n    let profileFeatures = {};\n\n    if (that.started) {\n      //return a simplified feature object with featureType, limitMin, limitMax and isEnabled properties only\n      Object.keys(that.features).forEach(function (featureUniqueRef) {\n        let originalFeature = that.features[featureUniqueRef];\n        let feature = {};\n        Object.keys(originalFeature).filter(function (featureProperty) {\n          return featureProperty === \"featureUniqueRef\" || featureProperty === \"featureType\" || featureProperty === \"limitMin\" || featureProperty === \"limitMax\" || featureProperty === \"isEnabled\";\n        }).forEach(function (featureProperty) {\n          feature[featureProperty] = originalFeature[featureProperty];\n        });\n        profileFeatures[featureUniqueRef] = feature;\n      });\n    } else {\n      that._logger.log(\"warn\", LOG_ID + \"(getMyProfileFeatures) : service not started\");\n    }\n\n    return profileFeatures;\n  }\n\n  getFeaturesEnum() {\n    return FeaturesEnum;\n  }\n\n};\nProfilesService = __decorate([Utils_1.logEntryExit(LOG_ID), Utils_1.isStarted([])\n/**\r\n * @module\r\n * @name ProfilesService\r\n * @version 1.67.1 \r\n * @private\r\n * @description\r\n *  This module is the service used to retrieve profiles from server.\r\n*/\n], ProfilesService);\nexports.ProfilesService = ProfilesService;\nmodule.exports = {\n  \"ProfilesService\": ProfilesService,\n  \"FeaturesEnum\": FeaturesEnum\n};","map":{"version":3,"sources":["../../src/lib/services/ProfilesService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\r\nconst Offer_1 = require(\"../common/models/Offer\");\r\nconst Utils_1 = require(\"../common/Utils\");\r\nconst LOG_ID = \"PROFILES/SVCE - \";\r\nconst FeaturesEnum = {\r\n    COMPANY_ADMIN_COUNT: \"COMPANY_ADMIN_COUNT\",\r\n    COMPANY_LOGO_MODIFICATION: \"COMPANY_LOGO_MODIFICATION\",\r\n    COMPANY_DOMAIN_NAME_MODIFICATION: \"COMPANY_DOMAIN_NAME_MODIFICATION\",\r\n    COMPANY_DETAILS_MODIFICATION: \"COMPANY_DETAILS_MODIFICATION\",\r\n    WEBRTC_FOR_MOBILE: \"WEBRTC_FOR_MOBILE\",\r\n    BUBBLE_PARTICIPANT_COUNT: \"BUBBLE_PARTICIPANT_COUNT\",\r\n    TELEPHONY_BASIC_CALL: \"TELEPHONY_BASIC_CALL\",\r\n    TELEPHONY_SECOND_CALL: \"TELEPHONY_SECOND_CALL\",\r\n    TELEPHONY_TRANSFER_CALL: \"TELEPHONY_TRANSFER_CALL\",\r\n    TELEPHONY_CONFERENCE_CALL: \"TELEPHONY_CONFERENCE_CALL\",\r\n    TELEPHONY_DEFLECT_CALL: \"TELEPHONY_DEFLECT_CALL\",\r\n    TELEPHONY_PHONE_BOOK: \"TELEPHONY_PHONE_BOOK\",\r\n    TELEPHONY_VOICE_MAIL: \"TELEPHONY_VOICE_MAIL\",\r\n    TELEPHONY_CALL_FORWARD: \"TELEPHONY_CALL_FORWARD\",\r\n    TELEPHONY_NOMADIC: \"TELEPHONY_NOMADIC\",\r\n    CONFERENCE_PARTICIPANT_COUNT: \"CONFERENCE_PARTICIPANT_COUNT\",\r\n    CONFERENCE_PARTICIPANT_ALLOWED: \"CONFERENCE_PARTICIPANT_ALLOWED\",\r\n    WEBRTC_CONFERENCE_ALLOWED: \"WEBRTC_CONFERENCE_ALLOWED\",\r\n    WEBRTC_CONFERENCE_PARTICIPANT_COUNT: \"WEBRTC_CONFERENCE_PARTICIPANT_COUNT\",\r\n    WEBRTC_PARTICIPANT_ALLOWED: \"WEBRTC_PARTICIPANT_ALLOWED\",\r\n    CONFERENCE_ALLOWED: \"CONFERENCE_ALLOWED\",\r\n    CONFERENCE_DIAL_OUT: \"CONFERENCE_DIAL_OUT\",\r\n    CONFERENCE_RECORDING: \"CONFERENCE_RECORDING\",\r\n    MSO365_CALENDAR_PRESENCE: \"MSO365_CALENDAR_PRESENCE\",\r\n    MSO365_DIRECTORY_SEARCH: \"MSO365_DIRECTORY_SEARCH\",\r\n    MS_OUTLOOK_PLUGIN: \"MS_OUTLOOK_PLUGIN\",\r\n    MS_SKYPE_PLUGIN: \"MS_SKYPE_PLUGIN\",\r\n    FILE_SHARING_QUOTA_GB: \"FILE_SHARING_QUOTA_GB\",\r\n    GOOGLE_CALENDAR_PRESENCE: \"GOOGLE_CALENDAR_PRESENCE\",\r\n    WEBRTC_P2P_RECORDING: \"WEBRTC_P2P_RECORDING\",\r\n    BUBBLE_PROMOTE_MEMBER: \"BUBBLE_PROMOTE_MEMBER\",\r\n    BUBBLE_GUESTS_ALLOWED: \"BUBBLE_GUESTS_ALLOWED\",\r\n    TELEPHONY_WEBRTC_GATEWAY: \"TELEPHONY_WEBRTC_GATEWAY\",\r\n    TELEPHONY_WEBRTC_PSTN_CALLING: \"TELEPHONY_WEBRTC_PSTN_CALLING\",\r\n    ANALYTICS_DASHBOARD_EC: \"ANALYTICS_DASHBOARD_EC\",\r\n    ANALYTICS_DASHBOARD_BP: \"ANALYTICS_DASHBOARD_BP\",\r\n    TELEPHONY_CALL_SUBJECT: \"CALL_SUBJECT\",\r\n    CHANNEL_CREATE: \"CHANNEL_CREATE\",\r\n    CHANNEL_CREATE_ADMIN_ROLE_BYPASS: \"CHANNEL_CREATE_ADMIN_ROLE_BYPASS\",\r\n    CHANNEL_ACTIVATED: \"CHANNEL_ACTIVATED\"\r\n    /*COMPANY_ADMIN_COUNT: \"COMPANY_ADMIN_COUNT\",\r\n    COMPANY_LOGO_MODIFICATION: \"COMPANY_LOGO_MODIFICATION\",\r\n    COMPANY_DOMAIN_NAME_MODIFICATION: \"COMPANY_DOMAIN_NAME_MODIFICATION\",\r\n    COMPANY_DETAILS_MODIFICATION: \"COMPANY_DETAILS_MODIFICATION\",\r\n    WEBRTC_FOR_MOBILE: \"WEBRTC_FOR_MOBILE\",\r\n    BUBBLE_PARTICIPANT_COUNT: \"BUBBLE_PARTICIPANT_COUNT\",\r\n    TELEPHONY_BASIC_CALL: \"TELEPHONY_BASIC_CALL\",\r\n    TELEPHONY_SECOND_CALL: \"TELEPHONY_SECOND_CALL\",\r\n    TELEPHONY_TRANSFER_CALL: \"TELEPHONY_TRANSFER_CALL\",\r\n    TELEPHONY_CONFERENCE_CALL: \"TELEPHONY_CONFERENCE_CALL\",\r\n    TELEPHONY_DEFLECT_CALL: \"TELEPHONY_DEFLECT_CALL\",\r\n    TELEPHONY_PHONE_BOOK: \"TELEPHONY_PHONE_BOOK\",\r\n    TELEPHONY_VOICE_MAIL: \"TELEPHONY_VOICE_MAIL\",\r\n    TELEPHONY_CALL_FORWARD: \"TELEPHONY_CALL_FORWARD\",\r\n    CONFERENCE_PARTICIPANT_COUNT: \"CONFERENCE_PARTICIPANT_COUNT\",\r\n    CONFERENCE_PARTICIPANT_ALLOWED: \"CONFERENCE_PARTICIPANT_ALLOWED\",\r\n    WEBRTC_CONFERENCE_ALLOWED: \"WEBRTC_CONFERENCE_ALLOWED\",\r\n    WEBRTC_CONFERENCE_PARTICIPANT_COUNT: \"WEBRTC_CONFERENCE_PARTICIPANT_COUNT\",\r\n    WEBRTC_PARTICIPANT_ALLOWED: \"WEBRTC_PARTICIPANT_ALLOWED\",\r\n    CONFERENCE_ALLOWED: \"CONFERENCE_ALLOWED\",\r\n    CONFERENCE_DIAL_OUT: \"CONFERENCE_DIAL_OUT\",\r\n    CONFERENCE_RECORDING: \"CONFERENCE_RECORDING\",\r\n    MSO365_CALENDAR_PRESENCE: \"MSO365_CALENDAR_PRESENCE\",\r\n    MSO365_DIRECTORY_SEARCH: \"MSO365_DIRECTORY_SEARCH\",\r\n    MS_OUTLOOK_PLUGIN: \"MS_OUTLOOK_PLUGIN\",\r\n    MS_SKYPE_PLUGIN: \"MS_SKYPE_PLUGIN\",\r\n    FILE_SHARING_QUOTA_GB: \"FILE_SHARING_QUOTA_GB\",\r\n    GOOGLE_CALENDAR_PRESENCE: \"GOOGLE_CALENDAR_PRESENCE\",\r\n    WEBRTC_P2P_RECORDING: \"WEBRTC_P2P_RECORDING\" // */\r\n};\r\nexports.FeaturesEnum = FeaturesEnum;\r\nlet ProfilesService = \r\n/**\r\n * @module\r\n * @name ProfilesService\r\n * @version 1.67.1 \r\n * @private\r\n * @description\r\n *  This module is the service used to retrieve profiles from server.\r\n*/\r\nclass ProfilesService {\r\n    constructor(_eventEmitter, _logger, _startConfig) {\r\n        this.ready = false;\r\n        this._startConfig = _startConfig;\r\n        this._xmpp = null;\r\n        this._rest = null;\r\n        this._s2s = null;\r\n        this._options = {};\r\n        this._useXMPP = false;\r\n        this._useS2S = false;\r\n        this._eventEmitter = _eventEmitter;\r\n        this._logger = _logger;\r\n        this.started = false;\r\n        let that = this;\r\n        this.onUserUpdateNeeded = (__event) => {\r\n            //wait 3 seconds before requesting the featureProfile for this user; ignore events in the meantime\r\n            if (that.timer) {\r\n                return;\r\n            }\r\n            that.timer = setTimeout(() => {\r\n                that.getServerProfile()\r\n                    .then(function () {\r\n                    // $rootScope.$broadcast(\"ON_PROFILE_FEATURES_UPDATED\");\r\n                    //that._logger.log(\"debug\", LOG_ID + \"(start) send rainbow_onprofilefeatureupdated \");\r\n                    that._eventEmitter.emit(\"evt_internal_profilefeatureupdated\");\r\n                    clearInterval(that.timer);\r\n                    that.timer = null;\r\n                })\r\n                    .catch(function (error) {\r\n                    that.timer = null;\r\n                    that._logger.log(\"warn\", LOG_ID + \"(onUserUpdateNeeded) FAILURE .\");\r\n                    that._logger.log(\"internalerror\", LOG_ID + \"(onUserUpdateNeeded) FAILURE === \", error.message);\r\n                    // reject(error);\r\n                });\r\n            }, 3000);\r\n        };\r\n        this.ready = false;\r\n    }\r\n    get startConfig() {\r\n        return this._startConfig;\r\n    }\r\n    /*********************************************************************/\r\n    /** LIFECYCLE STUFF                                                 **/\r\n    /*********************************************************************/\r\n    start(_options, _core, stats) {\r\n        let that = this;\r\n        //that._logger.log(\"debug\", LOG_ID + \"(start) \");\r\n        that._logger.log(\"info\", LOG_ID + \"(start) [profileService] === STARTING ===\");\r\n        that.stats = stats ? stats : [];\r\n        that._xmpp = _core._xmpp;\r\n        that._rest = _core._rest;\r\n        that._options = _options;\r\n        that._s2s = _core._s2s;\r\n        that._useXMPP = that._options.useXMPP;\r\n        that._useS2S = that._options.useS2S;\r\n        that.features = {};\r\n        that.profiles = [];\r\n        that.mainOffers = [];\r\n        that.startDate = new Date();\r\n        this.ready = true;\r\n    }\r\n    stop() {\r\n        let that = this;\r\n        that._logger.log(\"debug\", LOG_ID + \"(stop) [profileService] === STOPPING ===\");\r\n        that.started = false;\r\n        that._logger.log(\"debug\", LOG_ID + \"(stop) [profileService] === STOPPED ===\");\r\n        this.ready = false;\r\n        return Promise.resolve();\r\n    }\r\n    restart() {\r\n        let that = this;\r\n        that._logger.log(\"debug\", LOG_ID + \"(restart) [profileService] === RESTART ===\");\r\n        //resend the features for the desktop client\r\n        this.onUserUpdateNeeded();\r\n    }\r\n    init() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            // Fetch profile from server\r\n            that.getServerProfile()\r\n                .then(function () {\r\n                // Consider service as started\r\n                that.started = true;\r\n                // @ts-ignore\r\n                let startDuration = Math.round(new Date() - that.startDate);\r\n                that.stats.push({ service: \"profileService\", startDuration: startDuration });\r\n                that._logger.log(\"debug\", LOG_ID + \"(start) [profileService] === STARTED (\" + startDuration + \" ms) ===\");\r\n                //$rootScope.$broadcast(\"ON_PROFILE_FEATURES_UPDATED\");\r\n                that._logger.log(\"debug\", LOG_ID + \"(start) send rainbow_onprofilefeatureupdated \");\r\n                that._eventEmitter.emit(\"evt_internal_profilefeatureupdated\");\r\n                // NED TO BE PORTED !!!!!!!\r\n                // $rootScope.$on(\"$destroy\", $rootScope.$on(\"ON_PROFILE_FEATURES_UPDATE_NEEDED\", that.onUserUpdateNeeded));\r\n                resolve();\r\n            })\r\n                .catch(function (error) {\r\n                that._logger.log(\"warn\", LOG_ID + \"([profileService] === STARTING FAILURE === \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"([profileService] === STARTING FAILURE === : \" + error.message);\r\n                return reject(error);\r\n            });\r\n        });\r\n    }\r\n    /*********************************************************************/\r\n    /** PROFILE API STUFF                                          **/\r\n    /*********************************************************************/\r\n    getServerProfile() {\r\n        let that = this;\r\n        return Promise.all([that.getServerProfiles(), that.getServerProfilesFeatures()]);\r\n    }\r\n    getServerProfiles() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that._rest.getServerProfiles()\r\n                /* $http({\r\n                    method: \"GET\",\r\n                    url: config.restServerUrl + \"/api/rainbow/enduser/v1.0/users/\" + contactService.userContact.dbId + \"/profiles\",\r\n                    headers: authService.getRequestHeader()\r\n                }) // */ .then(function success(response) {\r\n                that.profiles = [];\r\n                that.mainOffers = [];\r\n                response.forEach(function (profileData) {\r\n                    that._logger.log(\"internal\", LOG_ID + \"(getServerProfiles) === response ===\" + profileData);\r\n                    //store profile data\r\n                    that.profiles.push(profileData);\r\n                    let offer = Offer_1.offerManager.createOfferFromProfileData(profileData);\r\n                    if (offer.isExclusive || offer.isDefault) {\r\n                        that.mainOffers.push(offer);\r\n                    }\r\n                });\r\n                that.mainOffers.sort(Offer_1.offerManager.offerComparator);\r\n                resolve();\r\n            }, function error(response) {\r\n                let errorMessage = \"(getServerProfiles) failure: no server response\";\r\n                if (response) {\r\n                    errorMessage = \"(getServerProfiles) failure: \" + JSON.stringify(response);\r\n                }\r\n                that._logger.log(\"error\", LOG_ID + \"(getServerProfiles) Error. \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(getServerProfiles) Error : \", errorMessage);\r\n                return reject(ErrorManager_1.ErrorManager.getErrorManager().OTHERERROR(\"REQUESTERROR\", errorMessage));\r\n            });\r\n        });\r\n    }\r\n    getServerProfilesFeatures() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            /* $http({\r\n                method: \"GET\",\r\n                url: config.restServerUrl + \"/api/rainbow/enduser/v1.0/users/\" + contactService.userContact.dbId + \"/profiles/features\",\r\n                headers: authService.getRequestHeader()\r\n            }) // */\r\n            that._rest.getServerProfilesFeatures().then(function success(response) {\r\n                that.features = {};\r\n                response.forEach(function (featureData) {\r\n                    that._logger.log(\"internal\", LOG_ID + \"(getServerProfilesFeatures) === response === : \", featureData);\r\n                    //store feature data\r\n                    if (featureData.hasOwnProperty(\"featureUniqueRef\")) {\r\n                        that.features[featureData.featureUniqueRef] = featureData;\r\n                    }\r\n                });\r\n                resolve();\r\n            }, function error(response) {\r\n                let errorMessage = \"(getServerProfilesFeatures) failure : no server response\";\r\n                if (response) {\r\n                    errorMessage = \"(getServerProfilesFeatures) failure : \" + JSON.stringify(response);\r\n                }\r\n                that._logger.log(\"error\", LOG_ID + \"(getServerProfilesFeatures) Error.\");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(getServerProfilesFeatures) Error : \", errorMessage);\r\n                return reject(ErrorManager_1.ErrorManager.getErrorManager().OTHERERROR(\"REQUESTERROR\", errorMessage));\r\n            });\r\n        });\r\n    }\r\n    /*********************************************************************/\r\n    /** USER DATA API STUFF                                             **/\r\n    /*********************************************************************/\r\n    /*getUserData getUserData() {\r\n        return authService.getUserData();\r\n    }\r\n\r\n    setUserData setUserData(params) {\r\n        return $q(function (resolve, reject) {\r\n            let url = config.restServerUrl + \"/api/rainbow/enduser/v1.0/users/\" + contactService.userContact.dbId;\r\n            $http({method: \"PUT\", url: url, headers: authService.getRequestHeader(), data: params})\r\n                .then(\r\n                    function success(result) {\r\n                        $log.info(\"[profileService] setUserData \" + JSON.stringify(params) + \" -- success\");\r\n                        resolve(result.data);\r\n                    },\r\n                    function failure(response) {\r\n                        let errorMessage = \"setUserData failure: no server response\";\r\n                        if (response) {\r\n                            errorMessage = \"setUserData failure: \" + JSON.stringify(response);\r\n                        }\r\n                        $log.error(\"[profileService] \" + errorMessage);\r\n                    reject( ErrorManager.getErrorManager().OTHERERROR(\"REQUESTERROR\", errorMessage));\r\n                    });\r\n        });\r\n    }\r\n    // */\r\n    /**\r\n     * APIs for GUI components\r\n     * Used by SDK (public)\r\n     * Warning when modifying this method\r\n     */\r\n    isFeatureEnabled(featureUniqueRef) {\r\n        let that = this;\r\n        if (that.started &&\r\n            that.features.hasOwnProperty(featureUniqueRef) &&\r\n            that.features[featureUniqueRef].hasOwnProperty(\"featureType\") &&\r\n            that.features[featureUniqueRef].featureType === \"boolean\" &&\r\n            that.features[featureUniqueRef].hasOwnProperty(\"isEnabled\")) {\r\n            let enabled = that.features[featureUniqueRef].isEnabled;\r\n            that._logger.log(\"debug\", LOG_ID + \"(isFeatureEnabled) : \" + featureUniqueRef + \" : \" + enabled);\r\n            return enabled;\r\n        }\r\n        that._logger.log(\"debug\", LOG_ID + \"(isFeatureEnabled) : \" + featureUniqueRef + \" : service not started or feature not enabled\");\r\n        return false;\r\n    }\r\n    getFeatureLimitMax(featureUniqueRef) {\r\n        let that = this;\r\n        if (that.started &&\r\n            that.features.hasOwnProperty(featureUniqueRef) &&\r\n            that.features[featureUniqueRef].hasOwnProperty(\"featureType\") &&\r\n            that.features[featureUniqueRef].featureType === \"number\" &&\r\n            that.features[featureUniqueRef].hasOwnProperty(\"limitMax\")) {\r\n            let limitMax = that.features[featureUniqueRef].limitMax;\r\n            that._logger.log(\"debug\", LOG_ID + \"(getFeatureLimitMax) : \" + featureUniqueRef + \" : \" + limitMax);\r\n            return limitMax;\r\n        }\r\n        that._logger.log(\"debug\", LOG_ID + \"(getFeatureLimitMax) : \" + featureUniqueRef + \" : service not started or feature not enabled\");\r\n        return 0;\r\n    }\r\n    getFeatureLimitMin(featureUniqueRef) {\r\n        let that = this;\r\n        if (that.started &&\r\n            that.features.hasOwnProperty(featureUniqueRef) &&\r\n            that.features[featureUniqueRef].hasOwnProperty(\"featureType\") &&\r\n            that.features[featureUniqueRef].featureType === \"number\" &&\r\n            that.features[featureUniqueRef].hasOwnProperty(\"limitMin\")) {\r\n            let limitMin = that.features[featureUniqueRef].limitMin;\r\n            that._logger.log(\"debug\", LOG_ID + \"(getFeatureLimitMin) : \" + featureUniqueRef + \" : \" + limitMin);\r\n            return limitMin;\r\n        }\r\n        that._logger.log(\"debug\", LOG_ID + \"(getFeatureLimitMin) : \" + featureUniqueRef + \" : service not started or feature not enabled\");\r\n        return 0;\r\n    }\r\n    /**\r\n     * Returns the profile \"Enterprise\", \"Business\", \"Essential\" or null (if none of them)\r\n     */\r\n    getMyProfileOffer() {\r\n        let that = this;\r\n        if (that.mainOffers.length > 0) {\r\n            return that.mainOffers.slice(-1)[0];\r\n        }\r\n        return null;\r\n    }\r\n    getMyProfileName() {\r\n        let that = this;\r\n        let profile = that.getMyProfileOffer();\r\n        if (profile) {\r\n            return profile.name;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * APIs for GUI components\r\n     * Used by SDK (public)\r\n     */\r\n    getMyProfiles() {\r\n        let that = this;\r\n        let profiles = [];\r\n        if (that.started) {\r\n            //TODO return a simplified profile object ???\r\n            profiles = that.profiles;\r\n        }\r\n        else {\r\n            that._logger.log(\"debug\", LOG_ID + \"(getMyProfiles) : service not started\");\r\n        }\r\n        return profiles;\r\n    }\r\n    /**\r\n     * Used by SDK (public)\r\n     * Warning when modifying this method\r\n     */\r\n    getMyProfileFeatures() {\r\n        let that = this;\r\n        let profileFeatures = {};\r\n        if (that.started) {\r\n            //return a simplified feature object with featureType, limitMin, limitMax and isEnabled properties only\r\n            Object.keys(that.features).forEach(function (featureUniqueRef) {\r\n                let originalFeature = that.features[featureUniqueRef];\r\n                let feature = {};\r\n                Object.keys(originalFeature).filter(function (featureProperty) {\r\n                    return (featureProperty === \"featureUniqueRef\" || featureProperty === \"featureType\" || featureProperty === \"limitMin\" || featureProperty === \"limitMax\" || featureProperty === \"isEnabled\");\r\n                }).forEach(function (featureProperty) {\r\n                    feature[featureProperty] = originalFeature[featureProperty];\r\n                });\r\n                profileFeatures[featureUniqueRef] = feature;\r\n            });\r\n        }\r\n        else {\r\n            that._logger.log(\"warn\", LOG_ID + \"(getMyProfileFeatures) : service not started\");\r\n        }\r\n        return profileFeatures;\r\n    }\r\n    getFeaturesEnum() {\r\n        return FeaturesEnum;\r\n    }\r\n};\r\nProfilesService = __decorate([\r\n    Utils_1.logEntryExit(LOG_ID),\r\n    Utils_1.isStarted([])\r\n    /**\r\n     * @module\r\n     * @name ProfilesService\r\n     * @version 1.67.1 \r\n     * @private\r\n     * @description\r\n     *  This module is the service used to retrieve profiles from server.\r\n    */\r\n], ProfilesService);\r\nexports.ProfilesService = ProfilesService;\r\nmodule.exports = { \"ProfilesService\": ProfilesService, \"FeaturesEnum\": FeaturesEnum };\r\n//# sourceMappingURL=ProfilesService.js.map"]},"metadata":{},"sourceType":"script"}