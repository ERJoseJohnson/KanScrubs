{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); //const config = require(\"./config\");\n\nconst config_1 = require(\"./config\");\n\nconst LOG_ID = \"OPTIONS - \";\n\nclass Options {\n  constructor(_options, _logger) {\n    this._logger = _logger;\n    this._options = _options;\n    this._hasCredentials = true;\n    this._hasApplication = true;\n    this._withXMPP = true;\n    this._withS2S = false;\n    this._CLIMode = true;\n    this._testOutdatedVersion = true;\n  }\n\n  parse() {\n    if (!this._options) {\n      this._logger.log(\"error\", LOG_ID + \"(constructor) No 'options' parameter. Can't sign-in. Check the documentation to configure it\");\n\n      this._hasCredentials = false;\n    }\n\n    if (!this._options.rainbow || !this._options.rainbow.host) {\n      this._logger.log(\"warn\", LOG_ID + \"(constructor) 'host' property is not defined. Use default: 'sandbox'. Check the documentation to configure it\");\n\n      this._options.rainbow = {\n        host: \"sandbox\"\n      };\n    }\n\n    if (!this._options.proxy) {\n      this._logger.log(\"info\", LOG_ID + \"(constructor) 'proxy' property is not defined. Use default: no proxy. Check the documentation to enable it\");\n\n      this._options.proxy = {\n        host: \"\",\n        protocol: \"http\",\n        port: 80\n      };\n    }\n\n    if (!this._options.credentials) {\n      this._logger.log(\"error\", LOG_ID + \"(constructor) 'credentials' property is not defined. Can't sign-in. Check the documentation to configure it\");\n\n      this._hasCredentials = false;\n    } else if (!this._options.credentials.login || !this._options.credentials.password) {\n      this._logger.log(\"error\", LOG_ID + \"(constructor) 'login' or 'password' is not defined. Can't sign-in. Check the documentation to configure it\");\n\n      this._hasCredentials = false;\n    }\n\n    if (!this._options.application) {\n      this._logger.log(\"error\", LOG_ID + \"(constructor) 'application' property is not defined. Can't sign-in. Check the documentation to configure it\");\n\n      this._hasApplication = false;\n    } else if (!this._options.application.appID || !this._options.application.appSecret) {\n      this._logger.log(\"error\", LOG_ID + \"(constructor) 'appId' or 'appSecret' is not defined. Can't sign-in. Check the documentation to configure it\");\n\n      this._hasApplication = false;\n    }\n\n    this._httpOptions = this._getHTTPOptions();\n    this._xmppOptions = this._getXMPPOptions();\n    this._s2sOptions = this._getS2SOptions();\n    this._proxyoptions = this._getProxyOptions();\n    this._imOptions = this._getIMOptions();\n    this._applicationOptions = this._getApplicationsOptions();\n\n    let mode = this._getModeOption();\n\n    this._withXMPP = mode === \"xmpp\";\n    this._withS2S = mode === \"s2s\";\n    this._CLIMode = mode === \"cli\";\n    this._servicesToStart = this._getservicesToStart();\n    this._testOutdatedVersion = this._gettestOutdatedVersion();\n  }\n\n  get testOutdatedVersion() {\n    return this._testOutdatedVersion;\n  }\n\n  set testOutdatedVersion(value) {\n    this._testOutdatedVersion = value;\n  }\n\n  get servicesToStart() {\n    return this._servicesToStart;\n  }\n\n  get httpOptions() {\n    return this._httpOptions;\n  }\n\n  get xmppOptions() {\n    return this._xmppOptions;\n  }\n\n  get s2sOptions() {\n    return this._s2sOptions;\n  }\n\n  get proxyOptions() {\n    return this._proxyoptions;\n  }\n\n  get imOptions() {\n    return this._imOptions;\n  }\n\n  get applicationOptions() {\n    return this._applicationOptions;\n  }\n\n  get hasCredentials() {\n    return this._hasCredentials;\n  }\n\n  get hasApplication() {\n    return this._hasApplication;\n  }\n\n  get useXMPP() {\n    return this._withXMPP;\n  }\n\n  get useS2S() {\n    return this._withS2S;\n  }\n\n  get useCLIMode() {\n    return this._CLIMode;\n  }\n\n  get credentials() {\n    return this._options.credentials;\n  }\n\n  _gettestOutdatedVersion() {\n    if (this._options[\"testOutdatedVersion\"] !== undefined) {\n      return this._options.testOutdatedVersion;\n    } else {\n      return config_1.config.testOutdatedVersion;\n    }\n  }\n\n  _getservicesToStart() {\n    let svceToStart = {};\n\n    if (!this._options.servicesToStart) {\n      svceToStart = Object.assign({}, config_1.config.servicesToStart);\n    } else {\n      svceToStart = Object.assign({}, config_1.config.servicesToStart); // Read each property one by one in the option parameter. To avoid missed service config.\n\n      if (typeof this._options.servicesToStart === 'object') {\n        Object.keys(this._options.servicesToStart).forEach(key => {\n          if (!svceToStart[key]) {\n            this._logger.log(\"warn\", LOG_ID + \"(_getservicesToStart) the service \", key, \" is requested have start up to be configured, but it is not defined in default config.\");\n\n            svceToStart[key] = {};\n          }\n\n          svceToStart[key].start_up = \"start_up\" in this._options.servicesToStart[key] ? this._options.servicesToStart[key].start_up : config_1.config.servicesToStart[key].start_up;\n          svceToStart[key].optional = \"optional\" in this._options.servicesToStart[key] ? this._options.servicesToStart[key].optional : config_1.config.servicesToStart[key].optional;\n        });\n      } // Else the options parameter is not well completed, so keep default values to start services.\n\n    }\n\n    return svceToStart;\n  }\n\n  _isOfficialRainbow() {\n    return this._options.rainbow.host === \"official\";\n  }\n\n  _getHTTPOptions() {\n    let httpOptions = config_1.config.sandbox.http;\n\n    switch (this._options.rainbow.host) {\n      case \"official\":\n        httpOptions = config_1.config.official.http;\n\n        this._logger.log(\"debug\", LOG_ID + \"(constructor) Use REST services on Rainbow Official platform\");\n\n        break;\n\n      case \"sandbox\":\n        httpOptions = config_1.config.sandbox.http;\n\n        this._logger.log(\"debug\", LOG_ID + \"(constructor) Use REST services on Rainbow Sandbox platform\");\n\n        break;\n\n      default:\n        httpOptions = config_1.config.any.http;\n        httpOptions.host = this._options.rainbow.host;\n\n        this._logger.log(\"debug\", LOG_ID + \"(constructor) Use REST services on Rainbow \" + this._options.rainbow.host + \" platform\");\n\n        break;\n    }\n\n    return httpOptions;\n  }\n\n  _getXMPPOptions() {\n    let xmppOptions = config_1.config.sandbox.xmpp;\n\n    switch (this._options.rainbow.host) {\n      case \"official\":\n        xmppOptions = config_1.config.official.xmpp;\n\n        this._logger.log(\"debug\", LOG_ID + \"(constructor) Use XMPP services on Rainbow Official platform\");\n\n        break;\n\n      case \"sandbox\":\n        xmppOptions = config_1.config.sandbox.xmpp;\n\n        this._logger.log(\"debug\", LOG_ID + \"(constructor) Use XMPP services on Rainbow Sandbox platform\");\n\n        break;\n\n      default:\n        xmppOptions = config_1.config.any.xmpp;\n        xmppOptions.host = this._options.rainbow.host;\n\n        if (this._options.xmpp && this._options.xmpp.protocol) {\n          xmppOptions.protocol = this._options.xmpp.protocol;\n        }\n\n        if (this._options.xmpp && this._options.xmpp.port) {\n          xmppOptions.port = this._options.xmpp.port;\n        }\n\n        this._logger.warn(\"Be careful, an unofficial Rainbow core is used : \" + JSON.stringify(xmppOptions));\n\n        this._logger.log(\"debug\", LOG_ID + \"(constructor) Use XMPP services on Rainbow \" + this._options.rainbow.host + \" platform\");\n\n        break;\n    }\n\n    return xmppOptions;\n  }\n\n  _getS2SOptions() {\n    let s2sOptions = config_1.config.sandbox.s2s;\n\n    switch (this._options.rainbow.host) {\n      case \"official\":\n        s2sOptions = config_1.config.official.s2s;\n\n        if (this._options.s2s && this._options.s2s.hostCallback) {\n          s2sOptions.hostCallback = this._options.s2s.hostCallback;\n        }\n\n        if (this._options.s2s && this._options.s2s.locallistenningport) {\n          s2sOptions.locallistenningport = this._options.s2s.locallistenningport;\n        }\n\n        this._logger.log(\"debug\", LOG_ID + \"(constructor) Use S2S services on Rainbow Official platform\");\n\n        break;\n\n      case \"sandbox\":\n        s2sOptions = config_1.config.sandbox.s2s;\n\n        if (this._options.s2s && this._options.s2s.hostCallback) {\n          s2sOptions.hostCallback = this._options.s2s.hostCallback;\n        }\n\n        if (this._options.s2s && this._options.s2s.locallistenningport) {\n          s2sOptions.locallistenningport = this._options.s2s.locallistenningport;\n        }\n\n        this._logger.log(\"debug\", LOG_ID + \"(constructor) Use S2S services on Rainbow Sandbox platform\");\n\n        break;\n\n      default:\n        s2sOptions = config_1.config.any.s2s;\n\n        if (this._options.s2s && this._options.s2s.hostCallback) {\n          s2sOptions.hostCallback = this._options.s2s.hostCallback;\n        }\n\n        if (this._options.s2s && this._options.s2s.locallistenningport) {\n          s2sOptions.locallistenningport = this._options.s2s.locallistenningport;\n        }\n\n        this._logger.warn(\"Be careful, an unofficial Rainbow core is used : \" + JSON.stringify(s2sOptions));\n\n        this._logger.log(\"debug\", LOG_ID + \"(constructor) Use S2S services on Rainbow \" + this._options.rainbow.host + \" platform\");\n\n        break;\n    }\n\n    return s2sOptions;\n  }\n\n  _getModeOption() {\n    let mode = config_1.config.mode;\n\n    if (\"rainbow\" in this._options && \"mode\" in this._options.rainbow) {\n      switch (this._options.rainbow.mode) {\n        case \"xmpp\":\n        case \"s2s\":\n        case \"hook\":\n        case \"cli\":\n          mode = this._options.rainbow.mode;\n          break;\n\n        default:\n          mode = config_1.config.mode;\n          break;\n      }\n    }\n\n    return mode;\n  }\n\n  _getProxyOptions() {\n    let proxyOptions = {\n      protocol: \"http\",\n      host: \"\",\n      port: 80,\n      user: undefined,\n      password: undefined,\n      secureProtocol: undefined\n    };\n\n    if (!(\"host\" in this._options.proxy)) {\n      this._logger.log(\"warn\", LOG_ID + \"(constructor) 'host' property is not defined. No proxy will be used\");\n    } else {\n      proxyOptions.host = this._options.proxy.host;\n    }\n\n    if (!(\"port\" in this._options.proxy)) {\n      this._logger.log(\"info\", LOG_ID + \"(constructor) 'port' property is not defined. Use default 80\");\n    } else {\n      proxyOptions.port = this._options.proxy.port;\n    }\n\n    if (!(\"protocol\" in this._options.proxy)) {\n      this._logger.log(\"info\", LOG_ID + \"(constructor) 'protocol' property not defined. Use default 'http'\");\n    } else {\n      proxyOptions.protocol = this._options.proxy.protocol;\n    }\n\n    if (!(\"user\" in this._options.proxy)) {\n      this._logger.log(\"info\", LOG_ID + \"(constructor) 'user' property not defined. No authentication. \");\n    } else {\n      proxyOptions.user = this._options.proxy.user;\n    }\n\n    if (!(\"password\" in this._options.proxy)) {\n      this._logger.log(\"info\", LOG_ID + \"(constructor) 'password' property not defined. No authentication.\");\n    } else {\n      proxyOptions.password = this._options.proxy.password;\n    }\n\n    if (!(\"secureProtocol\" in this._options.proxy)) {\n      this._logger.log(\"info\", LOG_ID + \"(constructor) 'secureProtocol' property not defined. No SSL3.\");\n    } else {\n      proxyOptions.secureProtocol = this._options.proxy.secureProtocol;\n    }\n\n    return proxyOptions;\n  }\n\n  _getIMOptions() {\n    let optionsIM = {\n      sendReadReceipt: config_1.config.im.sendReadReceipt,\n      messageMaxLength: 1024,\n      sendMessageToConnectedUser: false,\n      conversationsRetrievedFormat: \"small\",\n      storeMessages: false,\n      copyMessage: false,\n      nbMaxConversations: 15,\n      rateLimitPerHour: 1000,\n      messagesDataStore: config_1.DataStoreType.UsestoreMessagesField\n    };\n\n    if (!(\"sendReadReceipt\" in this._options.im)) {\n      this._logger.log(\"info\", LOG_ID + \"(constructor) 'sendReadReceipt' property is not defined. Use default true\");\n    } else {\n      optionsIM.sendReadReceipt = this._options.im.sendReadReceipt;\n    }\n\n    optionsIM.messageMaxLength = this._options.im.messageMaxLength ? this._options.im.messageMaxLength : config_1.config.im.messageMaxLength;\n    optionsIM.sendMessageToConnectedUser = this._options.im.sendMessageToConnectedUser ? this._options.im.sendMessageToConnectedUser : config_1.config.im.sendMessageToConnectedUser;\n    optionsIM.conversationsRetrievedFormat = this._options.im.conversationsRetrievedFormat ? this._options.im.conversationsRetrievedFormat : config_1.config.im.conversationsRetrievedFormat;\n    optionsIM.storeMessages = this._options.im.storeMessages ? this._options.im.storeMessages : config_1.config.im.storeMessages;\n    optionsIM.copyMessage = this._options.im.copyMessage ? this._options.im.copyMessage : config_1.config.im.copyMessage;\n    optionsIM.nbMaxConversations = this._options.im.nbMaxConversations ? this._options.im.nbMaxConversations : config_1.config.im.nbMaxConversations;\n    optionsIM.rateLimitPerHour = this._options.im.rateLimitPerHour ? this._options.im.rateLimitPerHour : config_1.config.im.rateLimitPerHour;\n    optionsIM.messagesDataStore = this._options.im.messagesDataStore ? this._options.im.messagesDataStore : config_1.config.im.messagesDataStore;\n    return optionsIM;\n  }\n\n  _getApplicationsOptions() {\n    let applicationOptions = {\n      appID: \"\",\n      appSecret: \"\"\n    };\n\n    if (\"application\" in this._options) {\n      if (!(\"appID\" in this._options.application)) {\n        this._logger.log(\"warn\", LOG_ID + \"(constructor) 'appID' property is not defined. No application ID will be used\");\n      } else {\n        applicationOptions.appID = this._options.application.appID;\n      }\n\n      if (!(\"appSecret\" in this._options.application)) {\n        this._logger.log(\"warn\", LOG_ID + \"(constructor) 'appSecret' property is not defined. No application Secret will be used\");\n      } else {\n        applicationOptions.appSecret = this._options.application.appSecret;\n      }\n    } else {\n      this._logger.log(\"warn\", LOG_ID + \"(constructor) 'appID' property is not defined. No application ID will be used\");\n\n      this._logger.log(\"warn\", LOG_ID + \"(constructor) 'appSecret' property is not defined. No application Secret will be used\");\n    }\n\n    return applicationOptions;\n  }\n\n}\n\nexports.Options = Options;\nmodule.exports.Options = Options;","map":{"version":3,"sources":["../../src/lib/config/Options.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//const config = require(\"./config\");\nconst config_1 = require(\"./config\");\nconst LOG_ID = \"OPTIONS - \";\nclass Options {\n    constructor(_options, _logger) {\n        this._logger = _logger;\n        this._options = _options;\n        this._hasCredentials = true;\n        this._hasApplication = true;\n        this._withXMPP = true;\n        this._withS2S = false;\n        this._CLIMode = true;\n        this._testOutdatedVersion = true;\n    }\n    parse() {\n        if (!this._options) {\n            this._logger.log(\"error\", LOG_ID + \"(constructor) No 'options' parameter. Can't sign-in. Check the documentation to configure it\");\n            this._hasCredentials = false;\n        }\n        if (!this._options.rainbow || !this._options.rainbow.host) {\n            this._logger.log(\"warn\", LOG_ID + \"(constructor) 'host' property is not defined. Use default: 'sandbox'. Check the documentation to configure it\");\n            this._options.rainbow = { host: \"sandbox\" };\n        }\n        if (!this._options.proxy) {\n            this._logger.log(\"info\", LOG_ID + \"(constructor) 'proxy' property is not defined. Use default: no proxy. Check the documentation to enable it\");\n            this._options.proxy = { host: \"\", protocol: \"http\", port: 80 };\n        }\n        if (!this._options.credentials) {\n            this._logger.log(\"error\", LOG_ID + \"(constructor) 'credentials' property is not defined. Can't sign-in. Check the documentation to configure it\");\n            this._hasCredentials = false;\n        }\n        else if (!this._options.credentials.login || !this._options.credentials.password) {\n            this._logger.log(\"error\", LOG_ID + \"(constructor) 'login' or 'password' is not defined. Can't sign-in. Check the documentation to configure it\");\n            this._hasCredentials = false;\n        }\n        if (!this._options.application) {\n            this._logger.log(\"error\", LOG_ID + \"(constructor) 'application' property is not defined. Can't sign-in. Check the documentation to configure it\");\n            this._hasApplication = false;\n        }\n        else if (!this._options.application.appID || !this._options.application.appSecret) {\n            this._logger.log(\"error\", LOG_ID + \"(constructor) 'appId' or 'appSecret' is not defined. Can't sign-in. Check the documentation to configure it\");\n            this._hasApplication = false;\n        }\n        this._httpOptions = this._getHTTPOptions();\n        this._xmppOptions = this._getXMPPOptions();\n        this._s2sOptions = this._getS2SOptions();\n        this._proxyoptions = this._getProxyOptions();\n        this._imOptions = this._getIMOptions();\n        this._applicationOptions = this._getApplicationsOptions();\n        let mode = this._getModeOption();\n        this._withXMPP = mode === \"xmpp\";\n        this._withS2S = mode === \"s2s\";\n        this._CLIMode = mode === \"cli\";\n        this._servicesToStart = this._getservicesToStart();\n        this._testOutdatedVersion = this._gettestOutdatedVersion();\n    }\n    get testOutdatedVersion() {\n        return this._testOutdatedVersion;\n    }\n    set testOutdatedVersion(value) {\n        this._testOutdatedVersion = value;\n    }\n    get servicesToStart() {\n        return this._servicesToStart;\n    }\n    get httpOptions() {\n        return this._httpOptions;\n    }\n    get xmppOptions() {\n        return this._xmppOptions;\n    }\n    get s2sOptions() {\n        return this._s2sOptions;\n    }\n    get proxyOptions() {\n        return this._proxyoptions;\n    }\n    get imOptions() {\n        return this._imOptions;\n    }\n    get applicationOptions() {\n        return this._applicationOptions;\n    }\n    get hasCredentials() {\n        return this._hasCredentials;\n    }\n    get hasApplication() {\n        return this._hasApplication;\n    }\n    get useXMPP() {\n        return this._withXMPP;\n    }\n    get useS2S() {\n        return this._withS2S;\n    }\n    get useCLIMode() {\n        return this._CLIMode;\n    }\n    get credentials() {\n        return this._options.credentials;\n    }\n    _gettestOutdatedVersion() {\n        if (this._options[\"testOutdatedVersion\"] !== undefined) {\n            return this._options.testOutdatedVersion;\n        }\n        else {\n            return config_1.config.testOutdatedVersion;\n        }\n    }\n    _getservicesToStart() {\n        let svceToStart = {};\n        if (!this._options.servicesToStart) {\n            svceToStart = Object.assign({}, config_1.config.servicesToStart);\n        }\n        else {\n            svceToStart = Object.assign({}, config_1.config.servicesToStart);\n            // Read each property one by one in the option parameter. To avoid missed service config.\n            if (typeof (this._options.servicesToStart) === 'object') {\n                Object.keys(this._options.servicesToStart).forEach((key) => {\n                    if (!svceToStart[key]) {\n                        this._logger.log(\"warn\", LOG_ID + \"(_getservicesToStart) the service \", key, \" is requested have start up to be configured, but it is not defined in default config.\");\n                        svceToStart[key] = {};\n                    }\n                    svceToStart[key].start_up = \"start_up\" in this._options.servicesToStart[key] ? this._options.servicesToStart[key].start_up : config_1.config.servicesToStart[key].start_up;\n                    svceToStart[key].optional = \"optional\" in this._options.servicesToStart[key] ? this._options.servicesToStart[key].optional : config_1.config.servicesToStart[key].optional;\n                });\n            } // Else the options parameter is not well completed, so keep default values to start services.\n        }\n        return svceToStart;\n    }\n    _isOfficialRainbow() {\n        return (this._options.rainbow.host === \"official\");\n    }\n    _getHTTPOptions() {\n        let httpOptions = config_1.config.sandbox.http;\n        switch (this._options.rainbow.host) {\n            case \"official\":\n                httpOptions = config_1.config.official.http;\n                this._logger.log(\"debug\", LOG_ID + \"(constructor) Use REST services on Rainbow Official platform\");\n                break;\n            case \"sandbox\":\n                httpOptions = config_1.config.sandbox.http;\n                this._logger.log(\"debug\", LOG_ID + \"(constructor) Use REST services on Rainbow Sandbox platform\");\n                break;\n            default:\n                httpOptions = config_1.config.any.http;\n                httpOptions.host = this._options.rainbow.host;\n                this._logger.log(\"debug\", LOG_ID + \"(constructor) Use REST services on Rainbow \" + this._options.rainbow.host + \" platform\");\n                break;\n        }\n        return httpOptions;\n    }\n    _getXMPPOptions() {\n        let xmppOptions = config_1.config.sandbox.xmpp;\n        switch (this._options.rainbow.host) {\n            case \"official\":\n                xmppOptions = config_1.config.official.xmpp;\n                this._logger.log(\"debug\", LOG_ID + \"(constructor) Use XMPP services on Rainbow Official platform\");\n                break;\n            case \"sandbox\":\n                xmppOptions = config_1.config.sandbox.xmpp;\n                this._logger.log(\"debug\", LOG_ID + \"(constructor) Use XMPP services on Rainbow Sandbox platform\");\n                break;\n            default:\n                xmppOptions = config_1.config.any.xmpp;\n                xmppOptions.host = this._options.rainbow.host;\n                if (this._options.xmpp && this._options.xmpp.protocol) {\n                    xmppOptions.protocol = this._options.xmpp.protocol;\n                }\n                if (this._options.xmpp && this._options.xmpp.port) {\n                    xmppOptions.port = this._options.xmpp.port;\n                }\n                this._logger.warn(\"Be careful, an unofficial Rainbow core is used : \" + JSON.stringify(xmppOptions));\n                this._logger.log(\"debug\", LOG_ID + \"(constructor) Use XMPP services on Rainbow \" + this._options.rainbow.host + \" platform\");\n                break;\n        }\n        return xmppOptions;\n    }\n    _getS2SOptions() {\n        let s2sOptions = config_1.config.sandbox.s2s;\n        switch (this._options.rainbow.host) {\n            case \"official\":\n                s2sOptions = config_1.config.official.s2s;\n                if (this._options.s2s && this._options.s2s.hostCallback) {\n                    s2sOptions.hostCallback = this._options.s2s.hostCallback;\n                }\n                if (this._options.s2s && this._options.s2s.locallistenningport) {\n                    s2sOptions.locallistenningport = this._options.s2s.locallistenningport;\n                }\n                this._logger.log(\"debug\", LOG_ID + \"(constructor) Use S2S services on Rainbow Official platform\");\n                break;\n            case \"sandbox\":\n                s2sOptions = config_1.config.sandbox.s2s;\n                if (this._options.s2s && this._options.s2s.hostCallback) {\n                    s2sOptions.hostCallback = this._options.s2s.hostCallback;\n                }\n                if (this._options.s2s && this._options.s2s.locallistenningport) {\n                    s2sOptions.locallistenningport = this._options.s2s.locallistenningport;\n                }\n                this._logger.log(\"debug\", LOG_ID + \"(constructor) Use S2S services on Rainbow Sandbox platform\");\n                break;\n            default:\n                s2sOptions = config_1.config.any.s2s;\n                if (this._options.s2s && this._options.s2s.hostCallback) {\n                    s2sOptions.hostCallback = this._options.s2s.hostCallback;\n                }\n                if (this._options.s2s && this._options.s2s.locallistenningport) {\n                    s2sOptions.locallistenningport = this._options.s2s.locallistenningport;\n                }\n                this._logger.warn(\"Be careful, an unofficial Rainbow core is used : \" + JSON.stringify(s2sOptions));\n                this._logger.log(\"debug\", LOG_ID + \"(constructor) Use S2S services on Rainbow \" + this._options.rainbow.host + \" platform\");\n                break;\n        }\n        return s2sOptions;\n    }\n    _getModeOption() {\n        let mode = config_1.config.mode;\n        if (\"rainbow\" in this._options && \"mode\" in this._options.rainbow) {\n            switch (this._options.rainbow.mode) {\n                case \"xmpp\":\n                case \"s2s\":\n                case \"hook\":\n                case \"cli\":\n                    mode = this._options.rainbow.mode;\n                    break;\n                default:\n                    mode = config_1.config.mode;\n                    break;\n            }\n        }\n        return mode;\n    }\n    _getProxyOptions() {\n        let proxyOptions = {\n            protocol: \"http\",\n            host: \"\",\n            port: 80,\n            user: undefined,\n            password: undefined,\n            secureProtocol: undefined\n        };\n        if (!(\"host\" in this._options.proxy)) {\n            this._logger.log(\"warn\", LOG_ID + \"(constructor) 'host' property is not defined. No proxy will be used\");\n        }\n        else {\n            proxyOptions.host = this._options.proxy.host;\n        }\n        if (!(\"port\" in this._options.proxy)) {\n            this._logger.log(\"info\", LOG_ID + \"(constructor) 'port' property is not defined. Use default 80\");\n        }\n        else {\n            proxyOptions.port = this._options.proxy.port;\n        }\n        if (!(\"protocol\" in this._options.proxy)) {\n            this._logger.log(\"info\", LOG_ID + \"(constructor) 'protocol' property not defined. Use default 'http'\");\n        }\n        else {\n            proxyOptions.protocol = this._options.proxy.protocol;\n        }\n        if (!(\"user\" in this._options.proxy)) {\n            this._logger.log(\"info\", LOG_ID + \"(constructor) 'user' property not defined. No authentication. \");\n        }\n        else {\n            proxyOptions.user = this._options.proxy.user;\n        }\n        if (!(\"password\" in this._options.proxy)) {\n            this._logger.log(\"info\", LOG_ID + \"(constructor) 'password' property not defined. No authentication.\");\n        }\n        else {\n            proxyOptions.password = this._options.proxy.password;\n        }\n        if (!(\"secureProtocol\" in this._options.proxy)) {\n            this._logger.log(\"info\", LOG_ID + \"(constructor) 'secureProtocol' property not defined. No SSL3.\");\n        }\n        else {\n            proxyOptions.secureProtocol = this._options.proxy.secureProtocol;\n        }\n        return proxyOptions;\n    }\n    _getIMOptions() {\n        let optionsIM = {\n            sendReadReceipt: config_1.config.im.sendReadReceipt,\n            messageMaxLength: 1024,\n            sendMessageToConnectedUser: false,\n            conversationsRetrievedFormat: \"small\",\n            storeMessages: false,\n            copyMessage: false,\n            nbMaxConversations: 15,\n            rateLimitPerHour: 1000,\n            messagesDataStore: config_1.DataStoreType.UsestoreMessagesField\n        };\n        if (!(\"sendReadReceipt\" in this._options.im)) {\n            this._logger.log(\"info\", LOG_ID + \"(constructor) 'sendReadReceipt' property is not defined. Use default true\");\n        }\n        else {\n            optionsIM.sendReadReceipt = this._options.im.sendReadReceipt;\n        }\n        optionsIM.messageMaxLength = this._options.im.messageMaxLength ? this._options.im.messageMaxLength : config_1.config.im.messageMaxLength;\n        optionsIM.sendMessageToConnectedUser = this._options.im.sendMessageToConnectedUser ? this._options.im.sendMessageToConnectedUser : config_1.config.im.sendMessageToConnectedUser;\n        optionsIM.conversationsRetrievedFormat = this._options.im.conversationsRetrievedFormat ? this._options.im.conversationsRetrievedFormat : config_1.config.im.conversationsRetrievedFormat;\n        optionsIM.storeMessages = this._options.im.storeMessages ? this._options.im.storeMessages : config_1.config.im.storeMessages;\n        optionsIM.copyMessage = this._options.im.copyMessage ? this._options.im.copyMessage : config_1.config.im.copyMessage;\n        optionsIM.nbMaxConversations = this._options.im.nbMaxConversations ? this._options.im.nbMaxConversations : config_1.config.im.nbMaxConversations;\n        optionsIM.rateLimitPerHour = this._options.im.rateLimitPerHour ? this._options.im.rateLimitPerHour : config_1.config.im.rateLimitPerHour;\n        optionsIM.messagesDataStore = this._options.im.messagesDataStore ? this._options.im.messagesDataStore : config_1.config.im.messagesDataStore;\n        return optionsIM;\n    }\n    _getApplicationsOptions() {\n        let applicationOptions = {\n            appID: \"\",\n            appSecret: \"\"\n        };\n        if (\"application\" in this._options) {\n            if (!(\"appID\" in this._options.application)) {\n                this._logger.log(\"warn\", LOG_ID + \"(constructor) 'appID' property is not defined. No application ID will be used\");\n            }\n            else {\n                applicationOptions.appID = this._options.application.appID;\n            }\n            if (!(\"appSecret\" in this._options.application)) {\n                this._logger.log(\"warn\", LOG_ID + \"(constructor) 'appSecret' property is not defined. No application Secret will be used\");\n            }\n            else {\n                applicationOptions.appSecret = this._options.application.appSecret;\n            }\n        }\n        else {\n            this._logger.log(\"warn\", LOG_ID + \"(constructor) 'appID' property is not defined. No application ID will be used\");\n            this._logger.log(\"warn\", LOG_ID + \"(constructor) 'appSecret' property is not defined. No application Secret will be used\");\n        }\n        return applicationOptions;\n    }\n}\nexports.Options = Options;\nmodule.exports.Options = Options;\n//# sourceMappingURL=Options.js.map"]},"metadata":{},"sourceType":"script"}