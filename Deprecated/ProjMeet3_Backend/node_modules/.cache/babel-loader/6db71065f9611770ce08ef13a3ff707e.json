{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst PubSub = require(\"pubsub-js\");\n\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\n\nconst invitationEventHandler_1 = require(\"../connection/XMPPServiceHandler/invitationEventHandler\");\n\nconst Utils_1 = require(\"../common/Utils\");\n\nconst Invitation_1 = require(\"../common/models/Invitation\");\n\nconst moment = require(\"moment\");\n\nconst LOG_ID = \"INVITATION/SVCE - \";\n/**\r\n * @module\r\n * @name InvitationsService\r\n * @version 1.67.1 \r\n * @public\r\n * @description\r\n *      This services manages the invitations received/ sent from/to server.\r\n *\r\n */\n\nlet InvitationsService = class InvitationsService {\n  constructor(_eventEmitter, _logger, _startConfig) {\n    this.started = false;\n    this.ready = false;\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method getAllInvitationsNumber\r\n     * @instance\r\n     * @description\r\n     *    Get the number of invitations sent/received to/from others Rainbow users\r\n     * @return {Invitation[]} The list of invite sent\r\n     */\n\n    this.getAllInvitationsNumber = function () {\n      let that = this;\n      return that.receivedInvitationsArray.length + that.sentInvitationsArray.length + that.acceptedInvitationsArray.length;\n    };\n\n    let that = this;\n    this._startConfig = _startConfig;\n    this._xmpp = null;\n    this._rest = null;\n    this._s2s = null;\n    this._options = {};\n    this._useXMPP = false;\n    this._useS2S = false;\n    this._eventEmitter = _eventEmitter;\n    this._logger = _logger;\n    this.started = false; //update the sentInvitations list when new invitation is accepted\n    // DONE : VBR that._listeners.push($rootScope.$on(\"ON_ROSTER_CHANGED_EVENT\", that.getAllSentInvitations));\n\n    this._eventEmitter.on(\"evt_internal_onrosters\", that.onRosterChanged.bind(this));\n\n    this._eventEmitter.on(\"evt_internal_invitationsManagementUpdate\", that.onInvitationsManagementUpdate.bind(this));\n  }\n\n  get startConfig() {\n    return this._startConfig;\n  }\n  /************************************************************/\n\n  /** LIFECYCLE STUFF                                        **/\n\n  /************************************************************/\n\n\n  start(_options, _core, stats) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"info\", LOG_ID + \"\");\n\n      that._logger.log(\"info\", LOG_ID + \"[InvitationService] === STARTING ===\");\n\n      that.stats = stats ? stats : [];\n      that._xmpp = _core._xmpp;\n      that._rest = _core._rest;\n      that._options = _options;\n      that._s2s = _core._s2s;\n      that._useXMPP = that._options.useXMPP;\n      that._useS2S = that._options.useS2S;\n      that._contacts = _core.contacts;\n      let startDate = new Date(); // Private invitation storage\n\n      that.receivedInvitations = {};\n      that.sentInvitations = {}; // Public invitation storage\n\n      that.acceptedInvitationsArray = [];\n      that.sentInvitationsArray = [];\n      that.receivedInvitationsArray = [];\n      that._listeners = []; //that._portalURL = config.restServerUrl + \"/api/rainbow/enduser/v1.0/users/\";\n\n      that.attachHandlers();\n      let now = new Date();\n      let startDuration = Math.round(now - startDate);\n      stats.push({\n        service: \"InvitationService\",\n        startDuration: startDuration\n      });\n\n      that._logger.log(\"info\", LOG_ID + \"[InvitationService] === STARTED (\" + startDuration + \" ms) ===\");\n\n      this.started = true;\n      this.ready = true;\n    });\n  }\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      yield that.getAllSentInvitations();\n      yield that.getAllReceivedInvitations();\n    });\n  }\n\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"info\", LOG_ID + \"\");\n\n      that._logger.log(\"info\", LOG_ID + \"[InvitationService] === STOPPING ===\"); // Remove _listeners\n\n\n      let listener;\n\n      if (that._listeners) {\n        while (listener = that._listeners.pop()) {\n          listener();\n        }\n      }\n\n      that._logger.log(\"info\", LOG_ID + \"[InvitationService] === STOPPED ===\");\n\n      that.started = false;\n      this.ready = false;\n    });\n  }\n\n  /************************************************************/\n\n  /** EVENT HANDLING STUFF                                   **/\n\n  /************************************************************/\n  attachHandlers() {\n    let that = this;\n\n    that._logger.log(\"info\", LOG_ID + \"[InvitationService] attachHandlers\");\n    /* TODO : VBR\r\n    if (that._contactConfigRef) {\r\n        that._xmpp.connection.deleteHandler(that._contactConfigRef);\r\n        that._contactConfigRef = null;\r\n    }\r\n    // */\n    //that._contactConfigRef = that._xmpp.connection.addHandler(that.onInvitationsUpdate, null, \"message\", \"management\");\n\n\n    that._invitationEventHandler = new invitationEventHandler_1.InvitationEventHandler(that._xmpp, that);\n    that._invitationHandlerToken = [//            PubSub.subscribe( that._xmpp.hash + \".\" + that.conversationEventHandler.MESSAGE_CHAT, that.conversationEventHandler.onChatMessageReceived),\n    //            PubSub.subscribe( that._xmpp.hash + \".\" + that.conversationEventHandler.MESSAGE_GROUPCHAT, that.conversationEventHandler.onChatMessageReceived),\n    //            PubSub.subscribe( that._xmpp.hash + \".\" + that.conversationEventHandler.MESSAGE_WEBRTC, that.conversationEventHandler.onWebRTCMessageReceived),\n    PubSub.subscribe(that._xmpp.hash + \".\" + that._invitationEventHandler.MESSAGE_MANAGEMENT, that._invitationEventHandler.onManagementMessageReceived), PubSub.subscribe(that._xmpp.hash + \".\" + that._invitationEventHandler.MESSAGE_ERROR, that._invitationEventHandler.onErrorMessageReceived)];\n  }\n\n  onRosterChanged() {\n    let that = this;\n\n    that._logger.log(\"info\", LOG_ID + \"onRosterChanged\");\n\n    return that.getAllSentInvitations();\n  }\n\n  onInvitationsManagementUpdate(userInvite) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"internal\", LOG_ID + \"(onInvitationsUpdate) userInvite : \", userInvite); //let userInviteElem = stanza.find(\"userinvite\");\n\n\n      if (userInvite) {\n        let id = userInvite.id;\n        let type = userInvite.type;\n        let action = userInvite.action;\n\n        switch (type) {\n          case \"received\":\n            that._logger.log(\"internal\", LOG_ID + \"(onInvitationsUpdate) received\");\n\n            yield that.handleReceivedInvitation(id, action);\n\n            that._logger.log(\"internal\", LOG_ID + \"(onInvitationsUpdate) received after\");\n\n            break;\n\n          case \"sent\":\n            that._logger.log(\"internal\", LOG_ID + \"(onInvitationsUpdate) sent\");\n\n            yield that.handleSentInvitation(id, action);\n\n            that._logger.log(\"internal\", LOG_ID + \"(onInvitationsUpdate) sent after\");\n\n            break;\n\n          default:\n            that._logger.log(\"warn\", LOG_ID + \"(onInvitationsUpdate) - received unexpected type - \" + type);\n\n            break;\n        }\n      } else {\n        that._logger.log(\"warn\", LOG_ID + \"(onInvitationsUpdate) userInvite undefined!\");\n      }\n\n      that._logger.log(\"info\", LOG_ID + \"(onInvitationsUpdate) that.receivedInvitations : \", that.receivedInvitations);\n\n      that._logger.log(\"info\", LOG_ID + \"(onInvitationsUpdate) that.acceptedInvitationsArray : \", that.acceptedInvitationsArray);\n\n      that._logger.log(\"info\", LOG_ID + \"(onInvitationsUpdate) that.sentInvitations : \", that.sentInvitations);\n\n      return true;\n    });\n  }\n\n  handleReceivedInvitation(id, action) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"info\", LOG_ID + \"(handleReceivedInvitation).\");\n\n      that._logger.log(\"info\", LOG_ID + \"(handleReceivedInvitation) : \", id, \", action : \", action); // Handle deletion action\n\n\n      if (action === \"delete\") {\n        delete that.receivedInvitations[id];\n        that.updateReceivedInvitationsArray(); // Hanle other actions\n      } else {\n        yield that.getServerInvitation(id).then(invitation => {\n          that._logger.log(\"info\", LOG_ID + \"(handleReceivedInvitation) invitation received from server : \", invitation);\n\n          let updateInvitation = null;\n          let status = \"none\";\n\n          if (action === \"create\") {\n            that._logger.log(\"debug\", LOG_ID + \"(handleReceivedInvitation) user invite create received\");\n\n            that._eventEmitter.emit(\"evt_internal_userinvitereceived\", invitation);\n          }\n\n          switch (invitation.status) {\n            case \"pending\":\n              that.receivedInvitations[invitation.id] = invitation;\n              updateInvitation = invitation;\n              status = \"ask\";\n              break;\n\n            case \"accepted\":\n            case \"auto-accepted\":\n              that.receivedInvitations[invitation.id] = invitation; //that._logger.log(\"debug\", LOG_ID + \"(onUserInviteManagementMessageReceived) user invite accepted\");\n              //that._eventEmitter.emit(\"evt_internal_userinviteaccepted\", invitation);\n              // TODO : VBR : DONE $rootScope.$broadcast(\"ON_INVITATION_ACCEPTED\", invitation.invitingUserId); // evt_internal_userinviteaccepted\n\n              if (invitation.invitingUserId) {\n                that._contacts.getContactById(invitation.invitingUserId, true).then(function (contact) {// TODO : VBR $rootScope.$broadcast(\"ON_CONTACT_UPDATED_EVENT\", contact);\n                });\n              } //$rootScope.$broadcast(\"ON_INVITATION_EMAIL_RECEIVED\", invitation);\n\n\n              break;\n\n            case \"canceled\":\n              //that._logger.log(\"debug\", LOG_ID + \"(handleReceivedInvitation) user invite canceled\");\n              //that._eventEmitter.emit(\"evt_internal_userinvitecanceled\", {invitationId: id, invitation});\n              break;\n\n            default:\n              delete that.receivedInvitations[invitation.id];\n              status = \"unknown\";\n              break;\n          }\n\n          if (invitation.invitingUserId) {\n            that.updateContactInvitationStatus(invitation.invitingUserId, status, updateInvitation).then(function () {\n              that.updateReceivedInvitationsArray();\n            });\n          } else {\n            that.updateReceivedInvitationsArray();\n          } // Needed for SDK\n          // TODO : VBR : DONE $rootScope.$broadcast(\"ON_INVITATION_CHANGED\", invitation);\n\n        });\n      }\n    });\n  }\n\n  handleSentInvitation(id, action) {\n    let that = this;\n    return new Promise(function (resolve) {\n      that._logger.log(\"info\", LOG_ID + \"(handleSentInvitation) id : \", id, \", action : \", action); // Handle deletion action\n\n\n      if (action === \"delete\") {\n        delete that.sentInvitations[id];\n        that.updateReceivedInvitationsArray();\n        resolve();\n      } // Handle other actions\n      else {\n          that.getServerInvitation(id).then(function (invitation) {\n            that._logger.log(\"info\", LOG_ID + \"(handleSentInvitation) invitation received from server : \", invitation);\n\n            let contactStatus = null;\n\n            switch (invitation.status) {\n              case \"pending\":\n                that.sentInvitations[invitation.id] = invitation;\n                contactStatus = \"wait\";\n                break;\n\n              case \"accepted\":\n              case \"auto-accepted\":\n                that._logger.log(\"debug\", LOG_ID + \"(handleSentInvitation) user invite accepted\");\n\n                that._eventEmitter.emit(\"evt_internal_userinviteaccepted\", invitation); // TODO : VBR $rootScope.$broadcast(\"ON_INVITATION_ACCEPTED\", invitation.invitedUserId); // evt_internal_userinviteaccepted\n\n\n                if (invitation.invitedUserId) {\n                  that._contacts.getContactById(invitation.invitedUserId, true).then(function (contact) {// TODO : VBR $rootScope.$broadcast(\"ON_CONTACT_UPDATED_EVENT\", contact);\n                  });\n                }\n\n                break;\n\n              case \"canceled\":\n                that._logger.log(\"debug\", LOG_ID + \"(handleSentInvitation) user invite canceled\");\n\n                that._eventEmitter.emit(\"evt_internal_userinvitecanceled\", invitation);\n\n                break;\n\n              default:\n                delete that.sentInvitations[invitation.id];\n                contactStatus = \"unknown\";\n                break;\n            }\n\n            if (invitation.invitedUserId) {\n              that.updateContactInvitationStatus(invitation.invitedUserId, contactStatus, invitation).then(function () {\n                that.updateSentInvitationsArray();\n                resolve();\n              });\n            } else {\n              that.updateSentInvitationsArray();\n              resolve();\n            }\n          });\n\n          if (action === \"resend\") {// TODO : VBR : DONE $rootScope.$broadcast(\"ON_INVITATIONS_RE_SEND\", id);\n          }\n        }\n    });\n  }\n\n  updateReceivedInvitationsArray() {\n    let that = this; // Handle received invitations\n\n    that.receivedInvitationsArray = [];\n    that.acceptedInvitationsArray = [];\n\n    for (let key in that.receivedInvitations) {\n      if (that.receivedInvitations.hasOwnProperty(key)) {\n        let invitation = that.receivedInvitations[key];\n\n        switch (invitation.status) {\n          case \"pending\":\n            that.receivedInvitationsArray.push(invitation);\n            break;\n\n          case \"accepted\":\n          case \"auto-accepted\":\n            that.acceptedInvitationsArray.push(invitation);\n            break;\n\n          default:\n            break;\n        }\n      }\n    } // Handle received invitations\n\n\n    that.receivedInvitationsArray.sort(that.sortInvitationArray); // Handle accepted invitations\n\n    that.acceptedInvitationsArray = that.acceptedInvitationsArray.filter(function (acceptedInvitation) {\n      let lastInvite = moment(acceptedInvitation.lastNotificationDate);\n      let duration = moment.duration(moment().diff(lastInvite));\n      let hours = duration.asHours();\n      return hours < 168; // 168 hours = 1 week :)\n    });\n    that.acceptedInvitationsArray.sort(that.sortInvitationArray); // TODO : VBR $rootScope.$broadcast(\"ON_INVITATIONS_NUMBER_UPDATED\");\n  }\n\n  updateSentInvitationsArray() {\n    let that = this;\n    that.sentInvitationsArray = [];\n\n    for (let key in that.sentInvitations) {\n      if (that.sentInvitations.hasOwnProperty(key)) {\n        that.sentInvitationsArray.push(that.sentInvitations[key]);\n      }\n    }\n\n    that.sentInvitationsArray.sort(that.sortInvitationArray); // TODO : VBR $rootScope.$broadcast(\"ON_INVITATIONS_NUMBER_UPDATED\");\n  }\n\n  getServerInvitation(invitationId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that._rest.getServerInvitation(invitationId).then(response => {\n        that._logger.log(\"info\", LOG_ID + \"(getServerInvitation) success\");\n\n        that._logger.log(\"internal\", LOG_ID + \"(getServerInvitation) success : \", response);\n\n        let receivedInvitation = Invitation_1.Invitation.createFromData(response.data);\n        resolve(receivedInvitation);\n      }).catch(err => {\n        that._logger.log(\"error\", LOG_ID + \"(getServerInvitation) error.\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(getServerInvitation) error : \", err);\n\n        reject(err);\n      });\n    });\n  }\n\n  /************************************************************/\n\n  /** PUBLIC METHODS                                         **/\n\n  /************************************************************/\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method getReceivedInvitations\r\n   * @instance\r\n   * @description\r\n   *    Get the invite received coming from Rainbow users\r\n   * @return {Invitation[]} The list of invitations received\r\n   */\n  getReceivedInvitations() {\n    let that = this;\n    return that.receivedInvitationsArray;\n  }\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method \tgetAcceptedInvitations\r\n   * @instance\r\n   * @description\r\n   *    Get the invites you accepted received from others Rainbow users\r\n   * @return {Invitation[]} The list of invite sent\r\n   */\n  getAcceptedInvitations() {\n    let that = this;\n    return that.acceptedInvitationsArray;\n  }\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method getSentInvitations\r\n   * @instance\r\n   * @description\r\n   *    Get the invites sent to others Rainbow users\r\n   * @return {Invitation[]} The list of invite sent\r\n   */\n  getSentInvitations() {\n    let that = this;\n    return that.sentInvitationsArray;\n  }\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method getInvitationsNumberForCounter\r\n   * @instance\r\n   * @description\r\n   *    Get the number of invitations received from others Rainbow users\r\n   * @return {Invitation[]} The list of invite sent\r\n   */\n  getInvitationsNumberForCounter() {\n    let that = this;\n    return that.receivedInvitationsArray.length;\n  }\n\n  // Getter method\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method getInvitation\r\n   * @instance\r\n   * @description\r\n   *    Get an invite by its id\r\n   * @param {String} invitationId the id of the invite to retrieve\r\n   * @return {Invitation} The invite if found\r\n   */\n  getInvitation(invitationId) {\n    let that = this;\n\n    that._logger.log(\"info\", LOG_ID + \"(getInvitation) that.receivedInvitations : \", that.receivedInvitations);\n\n    that._logger.log(\"info\", LOG_ID + \"(getInvitation) that.acceptedInvitationsArray : \", that.acceptedInvitationsArray);\n\n    that._logger.log(\"info\", LOG_ID + \"(getInvitation) that.sentInvitations : \", that.sentInvitations);\n\n    let invitationFound = that.receivedInvitations[invitationId];\n\n    if (!invitationFound) {\n      invitationFound = that.acceptedInvitationsArray[invitationId];\n    }\n\n    if (!invitationFound) {\n      invitationFound = that.sentInvitations[invitationId];\n    }\n    /*if (!invitationFound) {\r\n        that._rest.getInvitationById(data.invitationId).then((invitation : any) => {\r\n                that._logger.log(\"debug\", LOG_ID + \"(_onUserInviteCanceled) invitation canceled id\", invitation.id);\r\n                  that._eventEmitter.emit(\"evt_internal_userinvitecanceled\", invitation);\r\n            }, err => {\r\n                that._logger.log(\"warn\", LOG_ID + \"(_onUserInviteCanceled) no invitation found for \" + data.invitationId);\r\n            });\r\n    } // */\n\n\n    return invitationFound;\n  }\n\n  // Sender methods\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method joinContactInvitation\r\n   * @instance\r\n   * @description\r\n   *    Accept a an invitation from an other Rainbow user to mutually join the network <br>\r\n   *    Once accepted, the user will be part of your network. <br>\r\n   *    Return a promise\r\n   * @param {Contact} contact The invitation to accept\r\n   * @return {Object} A promise that contains SDK.OK if success or an object that describes the error\r\n   */\n  joinContactInvitation(contact) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that._logger.log(\"info\", LOG_ID + \"(joinContactInvitation) contact (\" + contact.jid + \")\");\n\n      return that._rest.joinContactInvitation(contact).then(function success(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n          that._logger.log(\"info\", LOG_ID + \"(joinContactInvitation) - success (\" + contact.jid + \")\");\n\n          if (contact.status === \"unknown\") {\n            yield that.updateContactInvitationStatus(contact.id, \"wait\", null);\n          }\n\n          resolve(data);\n        });\n      }, function failure(err) {\n        that._logger.log(\"error\", LOG_ID + \"(joinContactInvitation) error \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(joinContactInvitation) error : \", err);\n\n        reject(err);\n      });\n    });\n  }\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method sendInvitationByEmail\r\n   * @instance\r\n   * @description\r\n   *    Send an invitation email as UCaaS\r\n   * @param {string} email The email\r\n   * @param {string} [customMessage] The email text (optional)\r\n   * @return {Object} A promise that contains the contact added or an object describing an error\r\n   */\n  sendInvitationByEmail(email, lang, customMessage) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that._logger.log(\"info\", LOG_ID + \"sendInvitationByEmail\");\n\n      return that._rest.sendInvitationByEmail(email, lang, customMessage).then(function success(data) {\n        that._logger.log(\"info\", LOG_ID + \"[InvitationService] sendInvitationByEmail - success\");\n\n        resolve(data);\n      }, function failure(err) {\n        that._logger.log(\"error\", LOG_ID + \"(joinContactInvitation) error \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(joinContactInvitation) error : \", err);\n\n        reject(err);\n      });\n    });\n  }\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method cancelOneSendInvitation\r\n   * @instance\r\n   * @param {Invitation} invitation The invitation to cancel\r\n   * @description\r\n   *    Cancel an invitation sent\r\n   * @return {Object} The SDK Ok object or an error\r\n   */\n  cancelOneSendInvitation(invitation) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that._rest.cancelOneSendInvitation(invitation).then(function success(data) {\n        that._logger.log(\"info\", LOG_ID + \"(cancelOneSendInvitation) success\");\n\n        that._logger.log(\"internal\", LOG_ID + \"(cancelOneSendInvitation) success : \", data);\n\n        resolve(data);\n      }, function failure(err) {\n        that._logger.log(\"error\", LOG_ID + \"(cancelOneSendInvitation) error \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(cancelOneSendInvitation) error : \", err);\n\n        reject(err);\n      });\n    });\n  }\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method reSendInvitation\r\n   * @instance\r\n   * @param {Number} invitationId The invitation to re send\r\n   * @description\r\n   *    Re send an invitation sent\r\n   * @return {Object} The SDK Ok object or an error\r\n   */\n  reSendInvitation(invitationId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that._rest.reSendInvitation(invitationId).then(function success() {\n        that._logger.log(\"info\", LOG_ID + \"[InvitationService] reSendInvitation \" + invitationId + \" - success\");\n\n        resolve();\n      }, function failure(err) {\n        that._logger.log(\"error\", LOG_ID + \"(reSendInvitation) error \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(reSendInvitation) error : \", err);\n\n        reject(err);\n      });\n    });\n  }\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method sendInvitationByEmail\r\n   * @instance\r\n   * @description\r\n   *    Send invitations for a list of emails as UCaaS\r\n   *    LIMITED TO 100 invitations\r\n   * @param {Array} listOfMails The list of emails\r\n   * @return {Object} A promise that the invite result or an object describing an error\r\n   */\n  sendInvitationsParBulk(listOfMails) {\n    let that = this;\n\n    if (!listOfMails.length || listOfMails.length > 100) {\n      that._logger.log(\"error\", LOG_ID + \"[InvitationService] sendInvitationsParBulk mail list length not correct\");\n\n      return Promise.reject();\n    }\n\n    return new Promise(function (resolve, reject) {\n      that._rest.sendInvitationsParBulk(listOfMails).then(function success(data) {\n        that._logger.log(\"info\", LOG_ID + \"[InvitationService] sendInvitationsParBulk - success\");\n\n        resolve(data);\n      }, function failure(err) {\n        that._logger.log(\"error\", LOG_ID + \"(reSendInvitation) error \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(reSendInvitation) error : \", err);\n\n        reject(err);\n      });\n    });\n  }\n\n  // Invited methods\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method acceptInvitation\r\n   * @instance\r\n   * @description\r\n   *    Accept a an invitation from an other Rainbow user to mutually join the network <br>\r\n   *    Once accepted, the user will be part of your network. <br>\r\n   *    Return a promise\r\n   * @param {Invitation} invitation The invitation to accept\r\n   * @return {Object} A promise that contains SDK.OK if success or an object that describes the error\r\n   */\n  acceptInvitation(invitation) {\n    let that = this;\n\n    if (!invitation) {\n      let error = ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST;\n      error.msg += \", invitation not defined, can not acceptInvitation\";\n      return Promise.reject(error);\n    }\n\n    return new Promise(function (resolve, reject) {\n      that._rest.acceptInvitation(invitation).then(function success(data) {\n        that._logger.log(\"info\", LOG_ID + \"(acceptInvitation) success\");\n\n        that._logger.log(\"internal\", LOG_ID + \"(acceptInvitation) success : \", data);\n\n        resolve(data);\n      }, function failure(err) {\n        //let error = errorHelperService.handleError(err);\n        if (err.errorDetailsCode && err.errorDetailsCode === 409605) {\n          that._contacts.getContactById(invitation.invitingUserId, true).then(function (contact) {\n            // TODO : VBR $rootScope.$broadcast(\"ON_CONTACT_UPDATED_EVENT\", contact);\n            reject(err);\n          });\n        } else {\n          that._logger.log(\"error\", LOG_ID + \"(acceptInvitation) error \");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(acceptInvitation) error : \", err);\n\n          reject(err);\n        }\n      });\n    });\n  }\n\n  /**\r\n   * @public\r\n   * @since 1.65\r\n   * @method declineInvitation\r\n   * @instance\r\n   * @description\r\n   *    Decline an invitation from an other Rainbow user to mutually join the network <br>\r\n   *    Once declined, the user will not be part of your network. <br>\r\n   *    Return a promise\r\n   * @param {Invitation} invitation The invitation to decline\r\n   * @return {Object} A promise that contains SDK.OK in case of success or an object that describes the error\r\n   */\n  declineInvitation(invitation) {\n    let that = this;\n\n    if (!invitation) {\n      let error = ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST;\n      error.msg += \", invitation not defined, can not declineInvitation\";\n      return Promise.reject(error);\n    }\n\n    return new Promise(function (resolve, reject) {\n      that._rest.declineInvitation(invitation).then(function success(data) {\n        that._logger.log(\"info\", LOG_ID + \"(declineInvitation) success\");\n\n        that._logger.log(\"internal\", LOG_ID + \"(declineInvitation) success : \", data);\n\n        resolve(data);\n      }, function failure(err) {\n        that._logger.log(\"error\", LOG_ID + \"(declineInvitation) error \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(declineInvitation) error : \", err);\n\n        reject(err);\n      });\n    });\n  }\n\n  /************************************************************/\n\n  /** PRIVATE METHODS                                        **/\n\n  /************************************************************/\n\n  /**\r\n   * @private\r\n   */\n  updateContactInvitationStatus(contactDBId, status, invitation) {\n    let that = this;\n    return new Promise(function (resolve) {\n      that._contacts.getContactById(contactDBId).then(function (contact) {\n        switch (status) {\n          case \"ask\":\n            contact.status = \"unknown\";\n            contact.ask = \"ask\";\n            contact.invitation = invitation;\n            break;\n\n          case \"wait\":\n            contact.status = \"wait\";\n            contact.ask = \"subscribe\";\n            contact.invitation = invitation;\n            break;\n\n          default:\n            contact.ask = \"none\";\n            contact.invitation = null;\n            break;\n        } // contact.updateRichStatus();\n\n\n        resolve();\n      });\n    });\n  }\n\n  /**\r\n   * @private\r\n   */\n  sortInvitationArray(invitA, invitB) {\n    let invitBlastNotificationDate = new Date(invitB.lastNotificationDate);\n    let invitAlastNotificationDate = new Date(invitA.lastNotificationDate);\n    return invitBlastNotificationDate - invitAlastNotificationDate;\n  }\n\n  /**\r\n   * @private\r\n   */\n  getAllReceivedInvitations() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that._rest.getAllReceivedInvitations().then(function success(response) {\n        let invitationsData = response.data;\n\n        that._logger.log(\"info\", LOG_ID + \"(getAllReceivedInvitations) success (find \" + invitationsData.length + \" invitations)\");\n\n        that.receivedInvitations = {};\n        that.acceptedInvitations = {};\n        invitationsData.forEach(function (invitationData) {\n          return __awaiter(this, void 0, void 0, function* () {\n            if (invitationData.status === \"pending\" && invitationData.type !== \"registration\") {\n              let invitation = Invitation_1.Invitation.createFromData(invitationData);\n              that.receivedInvitations[invitationData.id] = invitation;\n\n              if (invitationData.invitingUserId) {\n                yield that.updateContactInvitationStatus(invitationData.invitingUserId, \"ask\", invitation);\n              }\n            } else if (invitationData.status === \"accepted\" || invitationData.status === \"auto-accepted\") {\n              that.receivedInvitations[invitationData.id] = Invitation_1.Invitation.createFromData(invitationData);\n            }\n          });\n        });\n        that.updateReceivedInvitationsArray();\n        resolve(that.receivedInvitations);\n      }, function failure(err) {\n        that._logger.log(\"error\", LOG_ID + \"(getAllReceivedInvitations) error \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(getAllReceivedInvitations) error : \", err);\n\n        reject(err);\n      });\n    });\n  }\n\n  /**\r\n   * @private\r\n   */\n  getAllSentInvitations() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      return that._rest.getAllSentInvitations().then(function success(response) {\n        let invitationsData = response.data;\n\n        that._logger.log(\"info\", LOG_ID + \"(getAllSentInvitations) success (find \" + invitationsData.length + \" invitations)\");\n\n        that.sentInvitations = {};\n        invitationsData.forEach(function (invitationData) {\n          return __awaiter(this, void 0, void 0, function* () {\n            if (invitationData.status === \"pending\" && !invitationData.inviteToJoinMeeting) {\n              let sentInvitation = Invitation_1.Invitation.createFromData(invitationData);\n              that.sentInvitations[invitationData.id] = sentInvitation;\n\n              if (sentInvitation.invitedUserId !== undefined) {\n                yield that.updateContactInvitationStatus(sentInvitation.invitedUserId, \"wait\", sentInvitation);\n              }\n            }\n          });\n        });\n        that.updateSentInvitationsArray();\n        resolve(that.sentInvitations);\n      }, function failure(err) {\n        that._logger.log(\"error\", LOG_ID + \"(getAllSentInvitations) error \");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(getAllSentInvitations) error : \", err);\n\n        reject(err);\n      });\n    });\n  }\n\n};\nInvitationsService = __decorate([Utils_1.logEntryExit(LOG_ID), Utils_1.isStarted([])], InvitationsService);\nexports.InvitationsService = InvitationsService;\nmodule.exports.InvitationsService = InvitationsService;","map":{"version":3,"sources":["../../src/lib/services/InvitationsService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst PubSub = require(\"pubsub-js\");\r\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\r\nconst invitationEventHandler_1 = require(\"../connection/XMPPServiceHandler/invitationEventHandler\");\r\nconst Utils_1 = require(\"../common/Utils\");\r\nconst Invitation_1 = require(\"../common/models/Invitation\");\r\nconst moment = require(\"moment\");\r\nconst LOG_ID = \"INVITATION/SVCE - \";\r\n/**\r\n * @module\r\n * @name InvitationsService\r\n * @version 1.67.1 \r\n * @public\r\n * @description\r\n *      This services manages the invitations received/ sent from/to server.\r\n *\r\n */\r\nlet InvitationsService = class InvitationsService {\r\n    constructor(_eventEmitter, _logger, _startConfig) {\r\n        this.started = false;\r\n        this.ready = false;\r\n        /**\r\n         * @public\r\n         * @since 1.65\r\n         * @method getAllInvitationsNumber\r\n         * @instance\r\n         * @description\r\n         *    Get the number of invitations sent/received to/from others Rainbow users\r\n         * @return {Invitation[]} The list of invite sent\r\n         */\r\n        this.getAllInvitationsNumber = function () {\r\n            let that = this;\r\n            return that.receivedInvitationsArray.length + that.sentInvitationsArray.length + that.acceptedInvitationsArray.length;\r\n        };\r\n        let that = this;\r\n        this._startConfig = _startConfig;\r\n        this._xmpp = null;\r\n        this._rest = null;\r\n        this._s2s = null;\r\n        this._options = {};\r\n        this._useXMPP = false;\r\n        this._useS2S = false;\r\n        this._eventEmitter = _eventEmitter;\r\n        this._logger = _logger;\r\n        this.started = false;\r\n        //update the sentInvitations list when new invitation is accepted\r\n        // DONE : VBR that._listeners.push($rootScope.$on(\"ON_ROSTER_CHANGED_EVENT\", that.getAllSentInvitations));\r\n        this._eventEmitter.on(\"evt_internal_onrosters\", that.onRosterChanged.bind(this));\r\n        this._eventEmitter.on(\"evt_internal_invitationsManagementUpdate\", that.onInvitationsManagementUpdate.bind(this));\r\n    }\r\n    get startConfig() {\r\n        return this._startConfig;\r\n    }\r\n    /************************************************************/\r\n    /** LIFECYCLE STUFF                                        **/\r\n    /************************************************************/\r\n    start(_options, _core, stats) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"info\", LOG_ID + \"\");\r\n            that._logger.log(\"info\", LOG_ID + \"[InvitationService] === STARTING ===\");\r\n            that.stats = stats ? stats : [];\r\n            that._xmpp = _core._xmpp;\r\n            that._rest = _core._rest;\r\n            that._options = _options;\r\n            that._s2s = _core._s2s;\r\n            that._useXMPP = that._options.useXMPP;\r\n            that._useS2S = that._options.useS2S;\r\n            that._contacts = _core.contacts;\r\n            let startDate = new Date();\r\n            // Private invitation storage\r\n            that.receivedInvitations = {};\r\n            that.sentInvitations = {};\r\n            // Public invitation storage\r\n            that.acceptedInvitationsArray = [];\r\n            that.sentInvitationsArray = [];\r\n            that.receivedInvitationsArray = [];\r\n            that._listeners = [];\r\n            //that._portalURL = config.restServerUrl + \"/api/rainbow/enduser/v1.0/users/\";\r\n            that.attachHandlers();\r\n            let now = new Date();\r\n            let startDuration = Math.round(now - startDate);\r\n            stats.push({ service: \"InvitationService\", startDuration: startDuration });\r\n            that._logger.log(\"info\", LOG_ID + \"[InvitationService] === STARTED (\" + startDuration + \" ms) ===\");\r\n            this.started = true;\r\n            this.ready = true;\r\n        });\r\n    }\r\n    ;\r\n    init() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            yield that.getAllSentInvitations();\r\n            yield that.getAllReceivedInvitations();\r\n        });\r\n    }\r\n    stop() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"info\", LOG_ID + \"\");\r\n            that._logger.log(\"info\", LOG_ID + \"[InvitationService] === STOPPING ===\");\r\n            // Remove _listeners\r\n            let listener;\r\n            if (that._listeners) {\r\n                while ((listener = that._listeners.pop())) {\r\n                    listener();\r\n                }\r\n            }\r\n            that._logger.log(\"info\", LOG_ID + \"[InvitationService] === STOPPED ===\");\r\n            that.started = false;\r\n            this.ready = false;\r\n        });\r\n    }\r\n    ;\r\n    /************************************************************/\r\n    /** EVENT HANDLING STUFF                                   **/\r\n    /************************************************************/\r\n    attachHandlers() {\r\n        let that = this;\r\n        that._logger.log(\"info\", LOG_ID + \"[InvitationService] attachHandlers\");\r\n        /* TODO : VBR\r\n        if (that._contactConfigRef) {\r\n            that._xmpp.connection.deleteHandler(that._contactConfigRef);\r\n            that._contactConfigRef = null;\r\n        }\r\n        // */\r\n        //that._contactConfigRef = that._xmpp.connection.addHandler(that.onInvitationsUpdate, null, \"message\", \"management\");\r\n        that._invitationEventHandler = new invitationEventHandler_1.InvitationEventHandler(that._xmpp, that);\r\n        that._invitationHandlerToken = [\r\n            //            PubSub.subscribe( that._xmpp.hash + \".\" + that.conversationEventHandler.MESSAGE_CHAT, that.conversationEventHandler.onChatMessageReceived),\r\n            //            PubSub.subscribe( that._xmpp.hash + \".\" + that.conversationEventHandler.MESSAGE_GROUPCHAT, that.conversationEventHandler.onChatMessageReceived),\r\n            //            PubSub.subscribe( that._xmpp.hash + \".\" + that.conversationEventHandler.MESSAGE_WEBRTC, that.conversationEventHandler.onWebRTCMessageReceived),\r\n            PubSub.subscribe(that._xmpp.hash + \".\" + that._invitationEventHandler.MESSAGE_MANAGEMENT, that._invitationEventHandler.onManagementMessageReceived),\r\n            PubSub.subscribe(that._xmpp.hash + \".\" + that._invitationEventHandler.MESSAGE_ERROR, that._invitationEventHandler.onErrorMessageReceived),\r\n        ];\r\n    }\r\n    ;\r\n    onRosterChanged() {\r\n        let that = this;\r\n        that._logger.log(\"info\", LOG_ID + \"onRosterChanged\");\r\n        return that.getAllSentInvitations();\r\n    }\r\n    onInvitationsManagementUpdate(userInvite) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"internal\", LOG_ID + \"(onInvitationsUpdate) userInvite : \", userInvite);\r\n            //let userInviteElem = stanza.find(\"userinvite\");\r\n            if (userInvite) {\r\n                let id = userInvite.id;\r\n                let type = userInvite.type;\r\n                let action = userInvite.action;\r\n                switch (type) {\r\n                    case \"received\":\r\n                        that._logger.log(\"internal\", LOG_ID + \"(onInvitationsUpdate) received\");\r\n                        yield that.handleReceivedInvitation(id, action);\r\n                        that._logger.log(\"internal\", LOG_ID + \"(onInvitationsUpdate) received after\");\r\n                        break;\r\n                    case \"sent\":\r\n                        that._logger.log(\"internal\", LOG_ID + \"(onInvitationsUpdate) sent\");\r\n                        yield that.handleSentInvitation(id, action);\r\n                        that._logger.log(\"internal\", LOG_ID + \"(onInvitationsUpdate) sent after\");\r\n                        break;\r\n                    default:\r\n                        that._logger.log(\"warn\", LOG_ID + \"(onInvitationsUpdate) - received unexpected type - \" + type);\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                that._logger.log(\"warn\", LOG_ID + \"(onInvitationsUpdate) userInvite undefined!\");\r\n            }\r\n            that._logger.log(\"info\", LOG_ID + \"(onInvitationsUpdate) that.receivedInvitations : \", that.receivedInvitations);\r\n            that._logger.log(\"info\", LOG_ID + \"(onInvitationsUpdate) that.acceptedInvitationsArray : \", that.acceptedInvitationsArray);\r\n            that._logger.log(\"info\", LOG_ID + \"(onInvitationsUpdate) that.sentInvitations : \", that.sentInvitations);\r\n            return true;\r\n        });\r\n    }\r\n    ;\r\n    handleReceivedInvitation(id, action) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"info\", LOG_ID + \"(handleReceivedInvitation).\");\r\n            that._logger.log(\"info\", LOG_ID + \"(handleReceivedInvitation) : \", id, \", action : \", action);\r\n            // Handle deletion action\r\n            if (action === \"delete\") {\r\n                delete that.receivedInvitations[id];\r\n                that.updateReceivedInvitationsArray();\r\n                // Hanle other actions\r\n            }\r\n            else {\r\n                yield that.getServerInvitation(id).then((invitation) => {\r\n                    that._logger.log(\"info\", LOG_ID + \"(handleReceivedInvitation) invitation received from server : \", invitation);\r\n                    let updateInvitation = null;\r\n                    let status = \"none\";\r\n                    if (action === \"create\") {\r\n                        that._logger.log(\"debug\", LOG_ID + \"(handleReceivedInvitation) user invite create received\");\r\n                        that._eventEmitter.emit(\"evt_internal_userinvitereceived\", invitation);\r\n                    }\r\n                    switch (invitation.status) {\r\n                        case \"pending\":\r\n                            that.receivedInvitations[invitation.id] = invitation;\r\n                            updateInvitation = invitation;\r\n                            status = \"ask\";\r\n                            break;\r\n                        case \"accepted\":\r\n                        case \"auto-accepted\":\r\n                            that.receivedInvitations[invitation.id] = invitation;\r\n                            //that._logger.log(\"debug\", LOG_ID + \"(onUserInviteManagementMessageReceived) user invite accepted\");\r\n                            //that._eventEmitter.emit(\"evt_internal_userinviteaccepted\", invitation);\r\n                            // TODO : VBR : DONE $rootScope.$broadcast(\"ON_INVITATION_ACCEPTED\", invitation.invitingUserId); // evt_internal_userinviteaccepted\r\n                            if (invitation.invitingUserId) {\r\n                                that._contacts.getContactById(invitation.invitingUserId, true).then(function (contact) {\r\n                                    // TODO : VBR $rootScope.$broadcast(\"ON_CONTACT_UPDATED_EVENT\", contact);\r\n                                });\r\n                            }\r\n                            //$rootScope.$broadcast(\"ON_INVITATION_EMAIL_RECEIVED\", invitation);\r\n                            break;\r\n                        case \"canceled\":\r\n                            //that._logger.log(\"debug\", LOG_ID + \"(handleReceivedInvitation) user invite canceled\");\r\n                            //that._eventEmitter.emit(\"evt_internal_userinvitecanceled\", {invitationId: id, invitation});\r\n                            break;\r\n                        default:\r\n                            delete that.receivedInvitations[invitation.id];\r\n                            status = \"unknown\";\r\n                            break;\r\n                    }\r\n                    if (invitation.invitingUserId) {\r\n                        that.updateContactInvitationStatus(invitation.invitingUserId, status, updateInvitation).then(function () {\r\n                            that.updateReceivedInvitationsArray();\r\n                        });\r\n                    }\r\n                    else {\r\n                        that.updateReceivedInvitationsArray();\r\n                    }\r\n                    // Needed for SDK\r\n                    // TODO : VBR : DONE $rootScope.$broadcast(\"ON_INVITATION_CHANGED\", invitation);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    ;\r\n    handleSentInvitation(id, action) {\r\n        let that = this;\r\n        return new Promise(function (resolve) {\r\n            that._logger.log(\"info\", LOG_ID + \"(handleSentInvitation) id : \", id, \", action : \", action);\r\n            // Handle deletion action\r\n            if (action === \"delete\") {\r\n                delete that.sentInvitations[id];\r\n                that.updateReceivedInvitationsArray();\r\n                resolve();\r\n            }\r\n            // Handle other actions\r\n            else {\r\n                that.getServerInvitation(id).then(function (invitation) {\r\n                    that._logger.log(\"info\", LOG_ID + \"(handleSentInvitation) invitation received from server : \", invitation);\r\n                    let contactStatus = null;\r\n                    switch (invitation.status) {\r\n                        case \"pending\":\r\n                            that.sentInvitations[invitation.id] = invitation;\r\n                            contactStatus = \"wait\";\r\n                            break;\r\n                        case \"accepted\":\r\n                        case \"auto-accepted\":\r\n                            that._logger.log(\"debug\", LOG_ID + \"(handleSentInvitation) user invite accepted\");\r\n                            that._eventEmitter.emit(\"evt_internal_userinviteaccepted\", invitation);\r\n                            // TODO : VBR $rootScope.$broadcast(\"ON_INVITATION_ACCEPTED\", invitation.invitedUserId); // evt_internal_userinviteaccepted\r\n                            if (invitation.invitedUserId) {\r\n                                that._contacts.getContactById(invitation.invitedUserId, true).then(function (contact) {\r\n                                    // TODO : VBR $rootScope.$broadcast(\"ON_CONTACT_UPDATED_EVENT\", contact);\r\n                                });\r\n                            }\r\n                            break;\r\n                        case \"canceled\":\r\n                            that._logger.log(\"debug\", LOG_ID + \"(handleSentInvitation) user invite canceled\");\r\n                            that._eventEmitter.emit(\"evt_internal_userinvitecanceled\", invitation);\r\n                            break;\r\n                        default:\r\n                            delete that.sentInvitations[invitation.id];\r\n                            contactStatus = \"unknown\";\r\n                            break;\r\n                    }\r\n                    if (invitation.invitedUserId) {\r\n                        that.updateContactInvitationStatus(invitation.invitedUserId, contactStatus, invitation)\r\n                            .then(function () {\r\n                            that.updateSentInvitationsArray();\r\n                            resolve();\r\n                        });\r\n                    }\r\n                    else {\r\n                        that.updateSentInvitationsArray();\r\n                        resolve();\r\n                    }\r\n                });\r\n                if (action === \"resend\") {\r\n                    // TODO : VBR : DONE $rootScope.$broadcast(\"ON_INVITATIONS_RE_SEND\", id);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    ;\r\n    updateReceivedInvitationsArray() {\r\n        let that = this;\r\n        // Handle received invitations\r\n        that.receivedInvitationsArray = [];\r\n        that.acceptedInvitationsArray = [];\r\n        for (let key in that.receivedInvitations) {\r\n            if (that.receivedInvitations.hasOwnProperty(key)) {\r\n                let invitation = that.receivedInvitations[key];\r\n                switch (invitation.status) {\r\n                    case \"pending\":\r\n                        that.receivedInvitationsArray.push(invitation);\r\n                        break;\r\n                    case \"accepted\":\r\n                    case \"auto-accepted\":\r\n                        that.acceptedInvitationsArray.push(invitation);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        // Handle received invitations\r\n        that.receivedInvitationsArray.sort(that.sortInvitationArray);\r\n        // Handle accepted invitations\r\n        that.acceptedInvitationsArray = that.acceptedInvitationsArray.filter(function (acceptedInvitation) {\r\n            let lastInvite = moment(acceptedInvitation.lastNotificationDate);\r\n            let duration = moment.duration(moment().diff(lastInvite));\r\n            let hours = duration.asHours();\r\n            return hours < 168; // 168 hours = 1 week :)\r\n        });\r\n        that.acceptedInvitationsArray.sort(that.sortInvitationArray);\r\n        // TODO : VBR $rootScope.$broadcast(\"ON_INVITATIONS_NUMBER_UPDATED\");\r\n    }\r\n    ;\r\n    updateSentInvitationsArray() {\r\n        let that = this;\r\n        that.sentInvitationsArray = [];\r\n        for (let key in that.sentInvitations) {\r\n            if (that.sentInvitations.hasOwnProperty(key)) {\r\n                that.sentInvitationsArray.push(that.sentInvitations[key]);\r\n            }\r\n        }\r\n        that.sentInvitationsArray.sort(that.sortInvitationArray);\r\n        // TODO : VBR $rootScope.$broadcast(\"ON_INVITATIONS_NUMBER_UPDATED\");\r\n    }\r\n    ;\r\n    getServerInvitation(invitationId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that._rest.getServerInvitation(invitationId).then((response) => {\r\n                that._logger.log(\"info\", LOG_ID + \"(getServerInvitation) success\");\r\n                that._logger.log(\"internal\", LOG_ID + \"(getServerInvitation) success : \", response);\r\n                let receivedInvitation = Invitation_1.Invitation.createFromData(response.data);\r\n                resolve(receivedInvitation);\r\n            }).catch((err) => {\r\n                that._logger.log(\"error\", LOG_ID + \"(getServerInvitation) error.\");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(getServerInvitation) error : \", err);\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /************************************************************/\r\n    /** PUBLIC METHODS                                         **/\r\n    /************************************************************/\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method getReceivedInvitations\r\n     * @instance\r\n     * @description\r\n     *    Get the invite received coming from Rainbow users\r\n     * @return {Invitation[]} The list of invitations received\r\n     */\r\n    getReceivedInvitations() {\r\n        let that = this;\r\n        return that.receivedInvitationsArray;\r\n    }\r\n    ;\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method \tgetAcceptedInvitations\r\n     * @instance\r\n     * @description\r\n     *    Get the invites you accepted received from others Rainbow users\r\n     * @return {Invitation[]} The list of invite sent\r\n     */\r\n    getAcceptedInvitations() {\r\n        let that = this;\r\n        return that.acceptedInvitationsArray;\r\n    }\r\n    ;\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method getSentInvitations\r\n     * @instance\r\n     * @description\r\n     *    Get the invites sent to others Rainbow users\r\n     * @return {Invitation[]} The list of invite sent\r\n     */\r\n    getSentInvitations() {\r\n        let that = this;\r\n        return that.sentInvitationsArray;\r\n    }\r\n    ;\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method getInvitationsNumberForCounter\r\n     * @instance\r\n     * @description\r\n     *    Get the number of invitations received from others Rainbow users\r\n     * @return {Invitation[]} The list of invite sent\r\n     */\r\n    getInvitationsNumberForCounter() {\r\n        let that = this;\r\n        return that.receivedInvitationsArray.length;\r\n    }\r\n    ;\r\n    // Getter method\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method getInvitation\r\n     * @instance\r\n     * @description\r\n     *    Get an invite by its id\r\n     * @param {String} invitationId the id of the invite to retrieve\r\n     * @return {Invitation} The invite if found\r\n     */\r\n    getInvitation(invitationId) {\r\n        let that = this;\r\n        that._logger.log(\"info\", LOG_ID + \"(getInvitation) that.receivedInvitations : \", that.receivedInvitations);\r\n        that._logger.log(\"info\", LOG_ID + \"(getInvitation) that.acceptedInvitationsArray : \", that.acceptedInvitationsArray);\r\n        that._logger.log(\"info\", LOG_ID + \"(getInvitation) that.sentInvitations : \", that.sentInvitations);\r\n        let invitationFound = that.receivedInvitations[invitationId];\r\n        if (!invitationFound) {\r\n            invitationFound = that.acceptedInvitationsArray[invitationId];\r\n        }\r\n        if (!invitationFound) {\r\n            invitationFound = that.sentInvitations[invitationId];\r\n        }\r\n        /*if (!invitationFound) {\r\n            that._rest.getInvitationById(data.invitationId).then((invitation : any) => {\r\n                    that._logger.log(\"debug\", LOG_ID + \"(_onUserInviteCanceled) invitation canceled id\", invitation.id);\r\n\r\n                    that._eventEmitter.emit(\"evt_internal_userinvitecanceled\", invitation);\r\n                }, err => {\r\n                    that._logger.log(\"warn\", LOG_ID + \"(_onUserInviteCanceled) no invitation found for \" + data.invitationId);\r\n                });\r\n        } // */\r\n        return invitationFound;\r\n    }\r\n    ;\r\n    // Sender methods\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method joinContactInvitation\r\n     * @instance\r\n     * @description\r\n     *    Accept a an invitation from an other Rainbow user to mutually join the network <br>\r\n     *    Once accepted, the user will be part of your network. <br>\r\n     *    Return a promise\r\n     * @param {Contact} contact The invitation to accept\r\n     * @return {Object} A promise that contains SDK.OK if success or an object that describes the error\r\n     */\r\n    joinContactInvitation(contact) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that._logger.log(\"info\", LOG_ID + \"(joinContactInvitation) contact (\" + contact.jid + \")\");\r\n            return that._rest.joinContactInvitation(contact).then(function success(data) {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    that._logger.log(\"info\", LOG_ID + \"(joinContactInvitation) - success (\" + contact.jid + \")\");\r\n                    if (contact.status === \"unknown\") {\r\n                        yield that.updateContactInvitationStatus(contact.id, \"wait\", null);\r\n                    }\r\n                    resolve(data);\r\n                });\r\n            }, function failure(err) {\r\n                that._logger.log(\"error\", LOG_ID + \"(joinContactInvitation) error \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(joinContactInvitation) error : \", err);\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method sendInvitationByEmail\r\n     * @instance\r\n     * @description\r\n     *    Send an invitation email as UCaaS\r\n     * @param {string} email The email\r\n     * @param {string} [customMessage] The email text (optional)\r\n     * @return {Object} A promise that contains the contact added or an object describing an error\r\n     */\r\n    sendInvitationByEmail(email, lang, customMessage) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that._logger.log(\"info\", LOG_ID + \"sendInvitationByEmail\");\r\n            return that._rest.sendInvitationByEmail(email, lang, customMessage).then(function success(data) {\r\n                that._logger.log(\"info\", LOG_ID + \"[InvitationService] sendInvitationByEmail - success\");\r\n                resolve(data);\r\n            }, function failure(err) {\r\n                that._logger.log(\"error\", LOG_ID + \"(joinContactInvitation) error \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(joinContactInvitation) error : \", err);\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method cancelOneSendInvitation\r\n     * @instance\r\n     * @param {Invitation} invitation The invitation to cancel\r\n     * @description\r\n     *    Cancel an invitation sent\r\n     * @return {Object} The SDK Ok object or an error\r\n     */\r\n    cancelOneSendInvitation(invitation) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that._rest.cancelOneSendInvitation(invitation).then(function success(data) {\r\n                that._logger.log(\"info\", LOG_ID + \"(cancelOneSendInvitation) success\");\r\n                that._logger.log(\"internal\", LOG_ID + \"(cancelOneSendInvitation) success : \", data);\r\n                resolve(data);\r\n            }, function failure(err) {\r\n                that._logger.log(\"error\", LOG_ID + \"(cancelOneSendInvitation) error \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(cancelOneSendInvitation) error : \", err);\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method reSendInvitation\r\n     * @instance\r\n     * @param {Number} invitationId The invitation to re send\r\n     * @description\r\n     *    Re send an invitation sent\r\n     * @return {Object} The SDK Ok object or an error\r\n     */\r\n    reSendInvitation(invitationId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that._rest.reSendInvitation(invitationId).then(function success() {\r\n                that._logger.log(\"info\", LOG_ID + \"[InvitationService] reSendInvitation \" + invitationId + \" - success\");\r\n                resolve();\r\n            }, function failure(err) {\r\n                that._logger.log(\"error\", LOG_ID + \"(reSendInvitation) error \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(reSendInvitation) error : \", err);\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method sendInvitationByEmail\r\n     * @instance\r\n     * @description\r\n     *    Send invitations for a list of emails as UCaaS\r\n     *    LIMITED TO 100 invitations\r\n     * @param {Array} listOfMails The list of emails\r\n     * @return {Object} A promise that the invite result or an object describing an error\r\n     */\r\n    sendInvitationsParBulk(listOfMails) {\r\n        let that = this;\r\n        if (!listOfMails.length || listOfMails.length > 100) {\r\n            that._logger.log(\"error\", LOG_ID + \"[InvitationService] sendInvitationsParBulk mail list length not correct\");\r\n            return Promise.reject();\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            that._rest.sendInvitationsParBulk(listOfMails).then(function success(data) {\r\n                that._logger.log(\"info\", LOG_ID + \"[InvitationService] sendInvitationsParBulk - success\");\r\n                resolve(data);\r\n            }, function failure(err) {\r\n                that._logger.log(\"error\", LOG_ID + \"(reSendInvitation) error \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(reSendInvitation) error : \", err);\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    // Invited methods\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method acceptInvitation\r\n     * @instance\r\n     * @description\r\n     *    Accept a an invitation from an other Rainbow user to mutually join the network <br>\r\n     *    Once accepted, the user will be part of your network. <br>\r\n     *    Return a promise\r\n     * @param {Invitation} invitation The invitation to accept\r\n     * @return {Object} A promise that contains SDK.OK if success or an object that describes the error\r\n     */\r\n    acceptInvitation(invitation) {\r\n        let that = this;\r\n        if (!invitation) {\r\n            let error = ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST;\r\n            error.msg += \", invitation not defined, can not acceptInvitation\";\r\n            return Promise.reject(error);\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            that._rest.acceptInvitation(invitation).then(function success(data) {\r\n                that._logger.log(\"info\", LOG_ID + \"(acceptInvitation) success\");\r\n                that._logger.log(\"internal\", LOG_ID + \"(acceptInvitation) success : \", data);\r\n                resolve(data);\r\n            }, function failure(err) {\r\n                //let error = errorHelperService.handleError(err);\r\n                if (err.errorDetailsCode && err.errorDetailsCode === 409605) {\r\n                    that._contacts.getContactById(invitation.invitingUserId, true)\r\n                        .then(function (contact) {\r\n                        // TODO : VBR $rootScope.$broadcast(\"ON_CONTACT_UPDATED_EVENT\", contact);\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    that._logger.log(\"error\", LOG_ID + \"(acceptInvitation) error \");\r\n                    that._logger.log(\"internalerror\", LOG_ID + \"(acceptInvitation) error : \", err);\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * @public\r\n     * @since 1.65\r\n     * @method declineInvitation\r\n     * @instance\r\n     * @description\r\n     *    Decline an invitation from an other Rainbow user to mutually join the network <br>\r\n     *    Once declined, the user will not be part of your network. <br>\r\n     *    Return a promise\r\n     * @param {Invitation} invitation The invitation to decline\r\n     * @return {Object} A promise that contains SDK.OK in case of success or an object that describes the error\r\n     */\r\n    declineInvitation(invitation) {\r\n        let that = this;\r\n        if (!invitation) {\r\n            let error = ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST;\r\n            error.msg += \", invitation not defined, can not declineInvitation\";\r\n            return Promise.reject(error);\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            that._rest.declineInvitation(invitation).then(function success(data) {\r\n                that._logger.log(\"info\", LOG_ID + \"(declineInvitation) success\");\r\n                that._logger.log(\"internal\", LOG_ID + \"(declineInvitation) success : \", data);\r\n                resolve(data);\r\n            }, function failure(err) {\r\n                that._logger.log(\"error\", LOG_ID + \"(declineInvitation) error \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(declineInvitation) error : \", err);\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /************************************************************/\r\n    /** PRIVATE METHODS                                        **/\r\n    /************************************************************/\r\n    /**\r\n     * @private\r\n     */\r\n    updateContactInvitationStatus(contactDBId, status, invitation) {\r\n        let that = this;\r\n        return new Promise(function (resolve) {\r\n            that._contacts.getContactById(contactDBId).then(function (contact) {\r\n                switch (status) {\r\n                    case \"ask\":\r\n                        contact.status = \"unknown\";\r\n                        contact.ask = \"ask\";\r\n                        contact.invitation = invitation;\r\n                        break;\r\n                    case \"wait\":\r\n                        contact.status = \"wait\";\r\n                        contact.ask = \"subscribe\";\r\n                        contact.invitation = invitation;\r\n                        break;\r\n                    default:\r\n                        contact.ask = \"none\";\r\n                        contact.invitation = null;\r\n                        break;\r\n                }\r\n                // contact.updateRichStatus();\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * @private\r\n     */\r\n    sortInvitationArray(invitA, invitB) {\r\n        let invitBlastNotificationDate = new Date(invitB.lastNotificationDate);\r\n        let invitAlastNotificationDate = new Date(invitA.lastNotificationDate);\r\n        return invitBlastNotificationDate - invitAlastNotificationDate;\r\n    }\r\n    ;\r\n    /**\r\n     * @private\r\n     */\r\n    getAllReceivedInvitations() {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that._rest.getAllReceivedInvitations().then(function success(response) {\r\n                let invitationsData = response.data;\r\n                that._logger.log(\"info\", LOG_ID + \"(getAllReceivedInvitations) success (find \" + invitationsData.length + \" invitations)\");\r\n                that.receivedInvitations = {};\r\n                that.acceptedInvitations = {};\r\n                invitationsData.forEach(function (invitationData) {\r\n                    return __awaiter(this, void 0, void 0, function* () {\r\n                        if (invitationData.status === \"pending\" && invitationData.type !== \"registration\") {\r\n                            let invitation = Invitation_1.Invitation.createFromData(invitationData);\r\n                            that.receivedInvitations[invitationData.id] = invitation;\r\n                            if (invitationData.invitingUserId) {\r\n                                yield that.updateContactInvitationStatus(invitationData.invitingUserId, \"ask\", invitation);\r\n                            }\r\n                        }\r\n                        else if (invitationData.status === \"accepted\" || invitationData.status === \"auto-accepted\") {\r\n                            that.receivedInvitations[invitationData.id] = Invitation_1.Invitation.createFromData(invitationData);\r\n                        }\r\n                    });\r\n                });\r\n                that.updateReceivedInvitationsArray();\r\n                resolve(that.receivedInvitations);\r\n            }, function failure(err) {\r\n                that._logger.log(\"error\", LOG_ID + \"(getAllReceivedInvitations) error \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(getAllReceivedInvitations) error : \", err);\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * @private\r\n     */\r\n    getAllSentInvitations() {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            return that._rest.getAllSentInvitations().then(function success(response) {\r\n                let invitationsData = response.data;\r\n                that._logger.log(\"info\", LOG_ID + \"(getAllSentInvitations) success (find \" + invitationsData.length + \" invitations)\");\r\n                that.sentInvitations = {};\r\n                invitationsData.forEach(function (invitationData) {\r\n                    return __awaiter(this, void 0, void 0, function* () {\r\n                        if (invitationData.status === \"pending\" && !invitationData.inviteToJoinMeeting) {\r\n                            let sentInvitation = Invitation_1.Invitation.createFromData(invitationData);\r\n                            that.sentInvitations[invitationData.id] = sentInvitation;\r\n                            if (sentInvitation.invitedUserId !== undefined) {\r\n                                yield that.updateContactInvitationStatus(sentInvitation.invitedUserId, \"wait\", sentInvitation);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n                that.updateSentInvitationsArray();\r\n                resolve(that.sentInvitations);\r\n            }, function failure(err) {\r\n                that._logger.log(\"error\", LOG_ID + \"(getAllSentInvitations) error \");\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(getAllSentInvitations) error : \", err);\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n};\r\nInvitationsService = __decorate([\r\n    Utils_1.logEntryExit(LOG_ID),\r\n    Utils_1.isStarted([])\r\n], InvitationsService);\r\nexports.InvitationsService = InvitationsService;\r\nmodule.exports.InvitationsService = InvitationsService;\r\n//# sourceMappingURL=InvitationsService.js.map"]},"metadata":{},"sourceType":"script"}