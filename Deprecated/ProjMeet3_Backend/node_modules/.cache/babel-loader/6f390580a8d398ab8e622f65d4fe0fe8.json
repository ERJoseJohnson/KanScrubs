{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter,\n  promise\n} = require('@xmpp/events');\n\nconst jid = require('@xmpp/jid');\n\nconst xml = require('@xmpp/xml');\n\nconst StreamError = require('./lib/StreamError');\n\nconst {\n  parseHost,\n  parseService\n} = require('./lib/util');\n\nconst NS_STREAM = 'urn:ietf:params:xml:ns:xmpp-streams';\n\nclass Connection extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.jid = null;\n    this.timeout = 2000;\n    this.options = options;\n    this.socketListeners = Object.create(null);\n    this.parserListeners = Object.create(null);\n    this.status = 'offline';\n    this.socket = null;\n    this.parser = null;\n    this.root = null;\n  }\n\n  _reset() {\n    this.jid = null;\n    this.status = 'offline';\n\n    this._detachSocket();\n\n    this._detachParser();\n  }\n\n  async _streamError(condition, children) {\n    try {\n      await this.send( // prettier-ignore\n      xml('stream:error', {}, [xml(condition, {\n        xmlns: NS_STREAM\n      }, children)])); // eslint-disable-next-line no-unused-vars\n    } catch (err) {}\n\n    return this._end();\n  }\n\n  _onData(data) {\n    const str = data.toString('utf8');\n    this.emit('input', str);\n    this.parser.write(str);\n  }\n\n  _onParserError(error) {\n    // https://xmpp.org/rfcs/rfc6120.html#streams-error-conditions-bad-format\n    // \"This error can be used instead of the more specific XML-related errors,\n    // such as <bad-namespace-prefix/>, <invalid-xml/>, <not-well-formed/>, <restricted-xml/>,\n    // and <unsupported-encoding/>. However, the more specific errors are RECOMMENDED.\"\n    this._streamError('bad-format');\n\n    this._detachParser();\n\n    this.emit('error', error);\n  }\n\n  _attachSocket(socket) {\n    const sock = this.socket = socket;\n    const listeners = this.socketListeners;\n    listeners.data = this._onData.bind(this);\n\n    listeners.close = (dirty, event) => {\n      this._reset();\n\n      this._status('disconnect', {\n        clean: !dirty,\n        event\n      });\n    };\n\n    listeners.connect = () => {\n      this._status('connect');\n    };\n\n    listeners.error = error => {\n      this.emit('error', error);\n    };\n\n    sock.on('close', listeners.close);\n    sock.on('data', listeners.data);\n    sock.on('error', listeners.error);\n    sock.on('connect', listeners.connect);\n  }\n\n  _detachSocket() {\n    const {\n      socketListeners,\n      socket\n    } = this;\n    Object.getOwnPropertyNames(socketListeners).forEach(k => {\n      socket.removeListener(k, socketListeners[k]);\n      delete socketListeners[k];\n    });\n    this.socket = null;\n    return socket;\n  }\n\n  _onElement(element) {\n    this.emit('element', element);\n    this.emit(this.isStanza(element) ? 'stanza' : 'nonza', element);\n\n    if (element.name === 'stream:error') {\n      this._onStreamError(element);\n    }\n  } // https://xmpp.org/rfcs/rfc6120.html#streams-error\n\n\n  _onStreamError(element) {\n    const error = StreamError.fromElement(element);\n\n    if (error.condition === 'see-other-host') {\n      this._onSeeOtherHost(error);\n    } else {\n      this.emit('error', error);\n    } // \"Stream Errors Are Unrecoverable\"\n    // \"The entity that receives the stream error then SHALL close the stream\"\n\n\n    this._end();\n  } // https://xmpp.org/rfcs/rfc6120.html#streams-error-conditions-see-other-host\n\n\n  async _onSeeOtherHost(error) {\n    const {\n      protocol\n    } = parseService(this.options.service);\n    const host = error.element.getChildText('see-other-host');\n    const {\n      port\n    } = parseHost(host);\n    let service;\n\n    if (port) {\n      service = `${protocol || 'xmpp:'}//${host}`;\n    } else {\n      service = (protocol ? `${protocol}//` : '') + host;\n    }\n\n    try {\n      await promise(this, 'disconnect');\n      const {\n        domain,\n        lang\n      } = this.options;\n      await this.connect(service);\n      await this.open({\n        domain,\n        lang\n      });\n    } catch (err) {\n      this.emit('error', err);\n    }\n  }\n\n  _attachParser(p) {\n    const parser = this.parser = p;\n    const listeners = this.parserListeners;\n    listeners.element = this._onElement.bind(this);\n    listeners.error = this._onParserError.bind(this);\n\n    listeners.end = element => {\n      this._detachParser();\n\n      this._status('close', element);\n    };\n\n    listeners.start = element => {\n      this._status('open', element);\n    };\n\n    parser.on('error', listeners.error);\n    parser.on('element', listeners.element);\n    parser.on('end', listeners.end);\n    parser.on('start', listeners.start);\n  }\n\n  _detachParser() {\n    const listeners = this.parserListeners;\n    Object.getOwnPropertyNames(listeners).forEach(k => {\n      this.parser.removeListener(k, listeners[k]);\n      delete listeners[k];\n    });\n    this.parser = null;\n  }\n\n  _jid(id) {\n    this.jid = jid(id);\n    return this.jid;\n  }\n\n  _status(status, ...args) {\n    this.status = status;\n    this.emit('status', status, ...args);\n    this.emit(status, ...args);\n  }\n\n  async _end() {\n    let el;\n\n    try {\n      el = await this.close(); // eslint-disable-next-line no-unused-vars\n    } catch (err) {}\n\n    try {\n      await this.disconnect(); // eslint-disable-next-line no-unused-vars\n    } catch (err) {}\n\n    return el;\n  }\n  /**\r\n   * Opens the socket then opens the stream\r\n   */\n\n\n  async start() {\n    if (this.status !== 'offline') {\n      throw new Error('Connection is not offline');\n    }\n\n    const {\n      service,\n      domain,\n      lang\n    } = this.options;\n    await this.connect(service);\n    const promiseOnline = promise(this, 'online');\n    await this.open({\n      domain,\n      lang\n    });\n    return promiseOnline;\n  }\n  /**\r\n   * Connects the socket\r\n   */\n\n\n  async connect(service) {\n    this._status('connecting', service);\n\n    const socket = new this.Socket();\n\n    this._attachSocket(socket); // The 'connect' status is set by the socket 'connect' listener\n\n\n    socket.connect(this.socketParameters(service));\n    return promise(socket, 'connect');\n  }\n  /**\r\n   * Disconnects the socket\r\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\r\n   * https://tools.ietf.org/html/rfc7395#section-3.6\r\n   */\n\n\n  async disconnect(timeout = this.timeout) {\n    if (this.socket) this._status('disconnecting');\n    this.socket.end(); // The 'disconnect' status is set by the socket 'close' listener\n\n    await promise(this.socket, 'close', 'error', timeout);\n  }\n  /**\r\n   * Opens the stream\r\n   */\n\n\n  async open(options) {\n    this._status('opening');\n\n    if (typeof options === 'string') {\n      options = {\n        domain: options\n      };\n    }\n\n    const {\n      domain,\n      lang,\n      timeout = this.timeout\n    } = options;\n    const headerElement = this.headerElement();\n    headerElement.attrs.to = domain;\n    headerElement.attrs['xml:lang'] = lang;\n    this.root = headerElement;\n\n    this._attachParser(new this.Parser());\n\n    await this.write(this.header(headerElement));\n    return promise(this, 'open', 'error', timeout);\n  }\n  /**\r\n   * Closes the stream then closes the socket\r\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\r\n   * https://tools.ietf.org/html/rfc7395#section-3.6\r\n   */\n\n\n  async stop() {\n    const el = await this._end();\n    if (this.status !== 'offline') this._status('offline', el);\n    return el;\n  }\n  /**\r\n   * Closes the stream and wait for the server to close it\r\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\r\n   * https://tools.ietf.org/html/rfc7395#section-3.6\r\n   */\n\n\n  async close(timeout = this.timeout) {\n    const p = Promise.all([promise(this.parser, 'end', 'error', timeout), this.write(this.footer(this.footerElement()))]);\n    if (this.parser && this.socket) this._status('closing');\n    const [el] = await p;\n    this.root = null;\n    return el; // The 'close' status is set by the parser 'end' listener\n  }\n  /**\r\n   * Restart the stream\r\n   * https://xmpp.org/rfcs/rfc6120.html#streams-negotiation-restart\r\n   */\n\n\n  async restart() {\n    this._detachParser();\n\n    const {\n      domain,\n      lang\n    } = this.options;\n    return this.open({\n      domain,\n      lang\n    });\n  }\n\n  async send(element) {\n    element.parent = this.root;\n    this.emit('outgoing', element);\n    await this.write(element);\n    this.emit('send', element);\n  }\n\n  sendReceive(element, timeout = this.timeout) {\n    return Promise.all([this.send(element), promise(this, 'element', 'error', timeout)]).then(([, el]) => el);\n  }\n\n  write(data) {\n    return new Promise((resolve, reject) => {\n      // https://xmpp.org/rfcs/rfc6120.html#streams-close\n      // \"Refrain from sending any further data over its outbound stream to the other entity\"\n      if (this.status === 'closing') {\n        reject(new Error('Connection is closing'));\n        return;\n      }\n\n      const str = data.toString('utf8');\n      this.socket.write(str, err => {\n        if (err) {\n          return reject(err);\n        }\n\n        this.emit('output', str);\n        resolve();\n      });\n    });\n  }\n\n  isStanza(element) {\n    const {\n      name\n    } = element;\n    return name === 'iq' || name === 'message' || name === 'presence';\n  }\n\n  isNonza(element) {\n    return !this.isStanza(element);\n  } // Override\n\n\n  header(el) {\n    return el.toString();\n  } // Override\n\n\n  headerElement() {\n    return new xml.Element('', {\n      version: '1.0',\n      xmlns: this.NS\n    });\n  } // Override\n\n\n  footer(el) {\n    return el.toString();\n  } // Override\n\n\n  footerElement() {} // Override\n\n\n  socketParameters() {}\n\n} // Overrirde\n\n\nConnection.prototype.NS = '';\nConnection.prototype.Socket = null;\nConnection.prototype.Parser = null;\nmodule.exports = Connection;","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/@xmpp/connection/index.js"],"names":["EventEmitter","promise","require","jid","xml","StreamError","parseHost","parseService","NS_STREAM","Connection","constructor","options","timeout","socketListeners","Object","create","parserListeners","status","socket","parser","root","_reset","_detachSocket","_detachParser","_streamError","condition","children","send","xmlns","err","_end","_onData","data","str","toString","emit","write","_onParserError","error","_attachSocket","sock","listeners","bind","close","dirty","event","_status","clean","connect","on","getOwnPropertyNames","forEach","k","removeListener","_onElement","element","isStanza","name","_onStreamError","fromElement","_onSeeOtherHost","protocol","service","host","getChildText","port","domain","lang","open","_attachParser","p","end","start","_jid","id","args","el","disconnect","Error","promiseOnline","Socket","socketParameters","headerElement","attrs","to","Parser","header","stop","Promise","all","footer","footerElement","restart","parent","sendReceive","then","resolve","reject","isNonza","Element","version","NS","prototype","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst {EventEmitter, promise} = require('@xmpp/events')\r\nconst jid = require('@xmpp/jid')\r\nconst xml = require('@xmpp/xml')\r\nconst StreamError = require('./lib/StreamError')\r\nconst {parseHost, parseService} = require('./lib/util')\r\n\r\nconst NS_STREAM = 'urn:ietf:params:xml:ns:xmpp-streams'\r\n\r\nclass Connection extends EventEmitter {\r\n  constructor(options = {}) {\r\n    super()\r\n    this.jid = null\r\n    this.timeout = 2000\r\n    this.options = options\r\n    this.socketListeners = Object.create(null)\r\n    this.parserListeners = Object.create(null)\r\n    this.status = 'offline'\r\n    this.socket = null\r\n    this.parser = null\r\n    this.root = null\r\n  }\r\n\r\n  _reset() {\r\n    this.jid = null\r\n    this.status = 'offline'\r\n    this._detachSocket()\r\n    this._detachParser()\r\n  }\r\n\r\n  async _streamError(condition, children) {\r\n    try {\r\n      await this.send(\r\n        // prettier-ignore\r\n        xml('stream:error', {}, [\r\n          xml(condition, {xmlns: NS_STREAM}, children),\r\n        ])\r\n      )\r\n      // eslint-disable-next-line no-unused-vars\r\n    } catch (err) {}\r\n\r\n    return this._end()\r\n  }\r\n\r\n  _onData(data) {\r\n    const str = data.toString('utf8')\r\n    this.emit('input', str)\r\n    this.parser.write(str)\r\n  }\r\n\r\n  _onParserError(error) {\r\n    // https://xmpp.org/rfcs/rfc6120.html#streams-error-conditions-bad-format\r\n    // \"This error can be used instead of the more specific XML-related errors,\r\n    // such as <bad-namespace-prefix/>, <invalid-xml/>, <not-well-formed/>, <restricted-xml/>,\r\n    // and <unsupported-encoding/>. However, the more specific errors are RECOMMENDED.\"\r\n    this._streamError('bad-format')\r\n    this._detachParser()\r\n    this.emit('error', error)\r\n  }\r\n\r\n  _attachSocket(socket) {\r\n    const sock = (this.socket = socket)\r\n    const listeners = this.socketListeners\r\n\r\n    listeners.data = this._onData.bind(this)\r\n\r\n    listeners.close = (dirty, event) => {\r\n      this._reset()\r\n      this._status('disconnect', {clean: !dirty, event})\r\n    }\r\n\r\n    listeners.connect = () => {\r\n      this._status('connect')\r\n    }\r\n\r\n    listeners.error = error => {\r\n      this.emit('error', error)\r\n    }\r\n\r\n    sock.on('close', listeners.close)\r\n    sock.on('data', listeners.data)\r\n    sock.on('error', listeners.error)\r\n    sock.on('connect', listeners.connect)\r\n  }\r\n\r\n  _detachSocket() {\r\n    const {socketListeners, socket} = this\r\n    Object.getOwnPropertyNames(socketListeners).forEach(k => {\r\n      socket.removeListener(k, socketListeners[k])\r\n      delete socketListeners[k]\r\n    })\r\n    this.socket = null\r\n    return socket\r\n  }\r\n\r\n  _onElement(element) {\r\n    this.emit('element', element)\r\n    this.emit(this.isStanza(element) ? 'stanza' : 'nonza', element)\r\n\r\n    if (element.name === 'stream:error') {\r\n      this._onStreamError(element)\r\n    }\r\n  }\r\n\r\n  // https://xmpp.org/rfcs/rfc6120.html#streams-error\r\n  _onStreamError(element) {\r\n    const error = StreamError.fromElement(element)\r\n\r\n    if (error.condition === 'see-other-host') {\r\n      this._onSeeOtherHost(error)\r\n    } else {\r\n      this.emit('error', error)\r\n    }\r\n\r\n    // \"Stream Errors Are Unrecoverable\"\r\n    // \"The entity that receives the stream error then SHALL close the stream\"\r\n    this._end()\r\n  }\r\n\r\n  // https://xmpp.org/rfcs/rfc6120.html#streams-error-conditions-see-other-host\r\n  async _onSeeOtherHost(error) {\r\n    const {protocol} = parseService(this.options.service)\r\n\r\n    const host = error.element.getChildText('see-other-host')\r\n    const {port} = parseHost(host)\r\n\r\n    let service\r\n    if (port) {\r\n      service = `${protocol || 'xmpp:'}//${host}`\r\n    } else {\r\n      service = (protocol ? `${protocol}//` : '') + host\r\n    }\r\n\r\n    try {\r\n      await promise(this, 'disconnect')\r\n      const {domain, lang} = this.options\r\n      await this.connect(service)\r\n      await this.open({domain, lang})\r\n    } catch (err) {\r\n      this.emit('error', err)\r\n    }\r\n  }\r\n\r\n  _attachParser(p) {\r\n    const parser = (this.parser = p)\r\n    const listeners = this.parserListeners\r\n\r\n    listeners.element = this._onElement.bind(this)\r\n    listeners.error = this._onParserError.bind(this)\r\n\r\n    listeners.end = element => {\r\n      this._detachParser()\r\n      this._status('close', element)\r\n    }\r\n\r\n    listeners.start = element => {\r\n      this._status('open', element)\r\n    }\r\n\r\n    parser.on('error', listeners.error)\r\n    parser.on('element', listeners.element)\r\n    parser.on('end', listeners.end)\r\n    parser.on('start', listeners.start)\r\n  }\r\n\r\n  _detachParser() {\r\n    const listeners = this.parserListeners\r\n    Object.getOwnPropertyNames(listeners).forEach(k => {\r\n      this.parser.removeListener(k, listeners[k])\r\n      delete listeners[k]\r\n    })\r\n    this.parser = null\r\n  }\r\n\r\n  _jid(id) {\r\n    this.jid = jid(id)\r\n    return this.jid\r\n  }\r\n\r\n  _status(status, ...args) {\r\n    this.status = status\r\n    this.emit('status', status, ...args)\r\n    this.emit(status, ...args)\r\n  }\r\n\r\n  async _end() {\r\n    let el\r\n    try {\r\n      el = await this.close()\r\n      // eslint-disable-next-line no-unused-vars\r\n    } catch (err) {}\r\n\r\n    try {\r\n      await this.disconnect()\r\n      // eslint-disable-next-line no-unused-vars\r\n    } catch (err) {}\r\n\r\n    return el\r\n  }\r\n\r\n  /**\r\n   * Opens the socket then opens the stream\r\n   */\r\n  async start() {\r\n    if (this.status !== 'offline') {\r\n      throw new Error('Connection is not offline')\r\n    }\r\n\r\n    const {service, domain, lang} = this.options\r\n\r\n    await this.connect(service)\r\n\r\n    const promiseOnline = promise(this, 'online')\r\n\r\n    await this.open({domain, lang})\r\n\r\n    return promiseOnline\r\n  }\r\n\r\n  /**\r\n   * Connects the socket\r\n   */\r\n  async connect(service) {\r\n    this._status('connecting', service)\r\n    const socket = new this.Socket()\r\n    this._attachSocket(socket)\r\n    // The 'connect' status is set by the socket 'connect' listener\r\n    socket.connect(this.socketParameters(service))\r\n    return promise(socket, 'connect')\r\n  }\r\n\r\n  /**\r\n   * Disconnects the socket\r\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\r\n   * https://tools.ietf.org/html/rfc7395#section-3.6\r\n   */\r\n  async disconnect(timeout = this.timeout) {\r\n    if (this.socket) this._status('disconnecting')\r\n\r\n    this.socket.end()\r\n\r\n    // The 'disconnect' status is set by the socket 'close' listener\r\n    await promise(this.socket, 'close', 'error', timeout)\r\n  }\r\n\r\n  /**\r\n   * Opens the stream\r\n   */\r\n  async open(options) {\r\n    this._status('opening')\r\n\r\n    if (typeof options === 'string') {\r\n      options = {domain: options}\r\n    }\r\n\r\n    const {domain, lang, timeout = this.timeout} = options\r\n\r\n    const headerElement = this.headerElement()\r\n    headerElement.attrs.to = domain\r\n    headerElement.attrs['xml:lang'] = lang\r\n    this.root = headerElement\r\n\r\n    this._attachParser(new this.Parser())\r\n\r\n    await this.write(this.header(headerElement))\r\n    return promise(this, 'open', 'error', timeout)\r\n  }\r\n\r\n  /**\r\n   * Closes the stream then closes the socket\r\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\r\n   * https://tools.ietf.org/html/rfc7395#section-3.6\r\n   */\r\n  async stop() {\r\n    const el = await this._end()\r\n    if (this.status !== 'offline') this._status('offline', el)\r\n    return el\r\n  }\r\n\r\n  /**\r\n   * Closes the stream and wait for the server to close it\r\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\r\n   * https://tools.ietf.org/html/rfc7395#section-3.6\r\n   */\r\n  async close(timeout = this.timeout) {\r\n    const p = Promise.all([\r\n      promise(this.parser, 'end', 'error', timeout),\r\n      this.write(this.footer(this.footerElement())),\r\n    ])\r\n\r\n    if (this.parser && this.socket) this._status('closing')\r\n    const [el] = await p\r\n    this.root = null\r\n    return el\r\n    // The 'close' status is set by the parser 'end' listener\r\n  }\r\n\r\n  /**\r\n   * Restart the stream\r\n   * https://xmpp.org/rfcs/rfc6120.html#streams-negotiation-restart\r\n   */\r\n  async restart() {\r\n    this._detachParser()\r\n    const {domain, lang} = this.options\r\n    return this.open({domain, lang})\r\n  }\r\n\r\n  async send(element) {\r\n    element.parent = this.root\r\n    this.emit('outgoing', element)\r\n    await this.write(element)\r\n    this.emit('send', element)\r\n  }\r\n\r\n  sendReceive(element, timeout = this.timeout) {\r\n    return Promise.all([\r\n      this.send(element),\r\n      promise(this, 'element', 'error', timeout),\r\n    ]).then(([, el]) => el)\r\n  }\r\n\r\n  write(data) {\r\n    return new Promise((resolve, reject) => {\r\n      // https://xmpp.org/rfcs/rfc6120.html#streams-close\r\n      // \"Refrain from sending any further data over its outbound stream to the other entity\"\r\n      if (this.status === 'closing') {\r\n        reject(new Error('Connection is closing'))\r\n        return\r\n      }\r\n\r\n      const str = data.toString('utf8')\r\n      this.socket.write(str, err => {\r\n        if (err) {\r\n          return reject(err)\r\n        }\r\n\r\n        this.emit('output', str)\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  isStanza(element) {\r\n    const {name} = element\r\n    return name === 'iq' || name === 'message' || name === 'presence'\r\n  }\r\n\r\n  isNonza(element) {\r\n    return !this.isStanza(element)\r\n  }\r\n\r\n  // Override\r\n  header(el) {\r\n    return el.toString()\r\n  }\r\n\r\n  // Override\r\n  headerElement() {\r\n    return new xml.Element('', {\r\n      version: '1.0',\r\n      xmlns: this.NS,\r\n    })\r\n  }\r\n\r\n  // Override\r\n  footer(el) {\r\n    return el.toString()\r\n  }\r\n\r\n  // Override\r\n  footerElement() {}\r\n\r\n  // Override\r\n  socketParameters() {}\r\n}\r\n\r\n// Overrirde\r\nConnection.prototype.NS = ''\r\nConnection.prototype.Socket = null\r\nConnection.prototype.Parser = null\r\n\r\nmodule.exports = Connection\r\n"]},"metadata":{},"sourceType":"script"}