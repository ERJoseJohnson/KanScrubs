{"ast":null,"code":"'use strict';\n\nconst xml = require('@xmpp/xml');\n\nconst {\n  canUpgrade,\n  upgrade\n} = require('./starttls');\n/*\n * References\n * https://xmpp.org/rfcs/rfc6120.html#tls\n */\n\n\nconst NS = 'urn:ietf:params:xml:ns:xmpp-tls';\n\nasync function negotiate(entity) {\n  const element = await entity.sendReceive(xml('starttls', {\n    xmlns: NS\n  }));\n\n  if (element.is('proceed', NS)) {\n    return element;\n  }\n\n  throw new Error('STARTTLS_FAILURE');\n}\n\nmodule.exports = function ({\n  streamFeatures\n}) {\n  return streamFeatures.use('starttls', NS, async ({\n    entity\n  }, next) => {\n    const {\n      socket\n    } = entity;\n\n    if (!canUpgrade(socket)) {\n      return next();\n    }\n\n    await negotiate(entity);\n    const tlsSocket = await upgrade(socket, {\n      host: entity.options.domain\n    });\n\n    entity._attachSocket(tlsSocket);\n\n    await entity.restart();\n  });\n};","map":{"version":3,"sources":["C:/Users/HP/Desktop/KanScrubs/random/node_modules/@xmpp/starttls/client.js"],"names":["xml","require","canUpgrade","upgrade","NS","negotiate","entity","element","sendReceive","xmlns","is","Error","module","exports","streamFeatures","use","next","socket","tlsSocket","host","options","domain","_attachSocket","restart"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAM;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,IAAwBF,OAAO,CAAC,YAAD,CAArC;AAEA;;;;;;AAKA,MAAMG,EAAE,GAAG,iCAAX;;AAEA,eAAeC,SAAf,CAAyBC,MAAzB,EAAiC;AAC/B,QAAMC,OAAO,GAAG,MAAMD,MAAM,CAACE,WAAP,CAAmBR,GAAG,CAAC,UAAD,EAAa;AAACS,IAAAA,KAAK,EAAEL;AAAR,GAAb,CAAtB,CAAtB;;AACA,MAAIG,OAAO,CAACG,EAAR,CAAW,SAAX,EAAsBN,EAAtB,CAAJ,EAA+B;AAC7B,WAAOG,OAAP;AACD;;AAED,QAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB,UAAS;AAACC,EAAAA;AAAD,CAAT,EAA2B;AAC1C,SAAOA,cAAc,CAACC,GAAf,CAAmB,UAAnB,EAA+BX,EAA/B,EAAmC,OAAO;AAACE,IAAAA;AAAD,GAAP,EAAiBU,IAAjB,KAA0B;AAClE,UAAM;AAACC,MAAAA;AAAD,QAAWX,MAAjB;;AACA,QAAI,CAACJ,UAAU,CAACe,MAAD,CAAf,EAAyB;AACvB,aAAOD,IAAI,EAAX;AACD;;AAED,UAAMX,SAAS,CAACC,MAAD,CAAf;AACA,UAAMY,SAAS,GAAG,MAAMf,OAAO,CAACc,MAAD,EAAS;AAACE,MAAAA,IAAI,EAAEb,MAAM,CAACc,OAAP,CAAeC;AAAtB,KAAT,CAA/B;;AACAf,IAAAA,MAAM,CAACgB,aAAP,CAAqBJ,SAArB;;AAEA,UAAMZ,MAAM,CAACiB,OAAP,EAAN;AACD,GAXM,CAAP;AAYD,CAbD","sourcesContent":["'use strict'\n\nconst xml = require('@xmpp/xml')\nconst {canUpgrade, upgrade} = require('./starttls')\n\n/*\n * References\n * https://xmpp.org/rfcs/rfc6120.html#tls\n */\n\nconst NS = 'urn:ietf:params:xml:ns:xmpp-tls'\n\nasync function negotiate(entity) {\n  const element = await entity.sendReceive(xml('starttls', {xmlns: NS}))\n  if (element.is('proceed', NS)) {\n    return element\n  }\n\n  throw new Error('STARTTLS_FAILURE')\n}\n\nmodule.exports = function({streamFeatures}) {\n  return streamFeatures.use('starttls', NS, async ({entity}, next) => {\n    const {socket} = entity\n    if (!canUpgrade(socket)) {\n      return next()\n    }\n\n    await negotiate(entity)\n    const tlsSocket = await upgrade(socket, {host: entity.options.domain})\n    entity._attachSocket(tlsSocket)\n\n    await entity.restart()\n  })\n}\n"]},"metadata":{},"sourceType":"script"}