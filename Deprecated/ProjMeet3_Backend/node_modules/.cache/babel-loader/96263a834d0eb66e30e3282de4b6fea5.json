{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst uuid4 = require(\"uuid4\");\n\nclass XMPPUTils {\n  constructor() {\n    this.messageId = 0;\n  }\n\n  static getXMPPUtils() {\n    XMPPUTils.xmppUtils = XMPPUTils.xmppUtils ? XMPPUTils.xmppUtils : new XMPPUTils();\n    return XMPPUTils.xmppUtils;\n  }\n\n  generateRandomID() {\n    let text = \"\";\n    let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (let i = 0; i < 8; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n\n    return text;\n  }\n\n  getUniqueMessageId() {\n    let randomBase = uuid4();\n    let messageToSendID = \"node_\" + randomBase + this.messageId;\n    this.messageId++;\n    return messageToSendID;\n  }\n\n  getUniqueId(suffix) {\n    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      let r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n\n    if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n      return uuid + \":\" + suffix;\n    } else {\n      return uuid + \"\";\n    }\n  }\n\n  generateRandomFullJidForNode(jid, generatedRandomId) {\n    let fullJid = jid + \"/node_\" + generatedRandomId;\n    return fullJid;\n  }\n\n  getBareJIDFromFullJID(fullJid) {\n    let index = 0;\n\n    if (fullJid.indexOf(\"tel_\") === 0) {\n      index = 4;\n    }\n\n    if (fullJid.includes(\"/\")) {\n      fullJid = fullJid.substring(index, fullJid.indexOf(\"/\"));\n    }\n\n    return fullJid;\n  }\n\n  getRoomJIDFromFullJID(fullJid) {\n    let index = 0;\n\n    if (fullJid.indexOf(\"tel_\") === 0) {\n      index = 4;\n    }\n\n    if (fullJid.includes(\"/\")) {\n      fullJid = fullJid.substring(index, fullJid.lastIndexOf(\"/\"));\n    }\n\n    return fullJid;\n  }\n\n  getDomainFromFullJID(fullJid) {\n    let domain = \"\";\n    let bareJID = this.getBareJIDFromFullJID(fullJid);\n\n    if (bareJID.includes(\"@\")) {\n      domain = bareJID.substring(bareJID.lastIndexOf(\"@\") + 1);\n    }\n\n    return domain;\n  }\n\n  findChild(element, nodeNameToFind) {\n    let result = null;\n\n    if (typeof element === \"object\") {\n      let child = element.getChild(nodeNameToFind);\n\n      if (child) {\n        result = child;\n      } else {\n        let children = element.children;\n        children.forEach(elemt => {\n          let child = this.findChild(elemt, nodeNameToFind);\n\n          if (child) {\n            result = child;\n            return child;\n          }\n        });\n      }\n    }\n\n    return result;\n  }\n\n  isFromMobile(fullJid) {\n    return fullJid.indexOf(\"mobile\") > -1;\n  }\n\n  isFromNode(fullJid) {\n    return fullJid.indexOf(\"node\") > -1;\n  }\n\n  isFromS2S(fullJid) {\n    return fullJid.indexOf(\"s2s\") > -1;\n  }\n\n  isFromTelJid(fullJid) {\n    return fullJid.indexOf(\"tel_\") === 0;\n  }\n\n  getResourceFromFullJID(fullJid) {\n    if (fullJid.includes(\"/\")) {\n      return fullJid.substring(fullJid.indexOf(\"/\") + 1);\n    }\n\n    return \"\";\n  }\n\n}\n\nexports.XMPPUTils = XMPPUTils;\nexports.xu = new XMPPUTils();\nmodule.exports.XMPPUTils = XMPPUTils;","map":{"version":3,"sources":["../../src/lib/common/XMPPUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst uuid4 = require(\"uuid4\");\nclass XMPPUTils {\n    constructor() {\n        this.messageId = 0;\n    }\n    static getXMPPUtils() {\n        XMPPUTils.xmppUtils = XMPPUTils.xmppUtils ? XMPPUTils.xmppUtils : new XMPPUTils();\n        return XMPPUTils.xmppUtils;\n    }\n    generateRandomID() {\n        let text = \"\";\n        let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        for (let i = 0; i < 8; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return text;\n    }\n    getUniqueMessageId() {\n        let randomBase = uuid4();\n        let messageToSendID = \"node_\" + randomBase + this.messageId;\n        this.messageId++;\n        return messageToSendID;\n    }\n    getUniqueId(suffix) {\n        let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            let r = Math.random() * 16 | 0, v = c === 'x' ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n        if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n            return uuid + \":\" + suffix;\n        }\n        else {\n            return uuid + \"\";\n        }\n    }\n    generateRandomFullJidForNode(jid, generatedRandomId) {\n        let fullJid = jid + \"/node_\" + generatedRandomId;\n        return fullJid;\n    }\n    getBareJIDFromFullJID(fullJid) {\n        let index = 0;\n        if (fullJid.indexOf(\"tel_\") === 0) {\n            index = 4;\n        }\n        if (fullJid.includes(\"/\")) {\n            fullJid = fullJid.substring(index, fullJid.indexOf(\"/\"));\n        }\n        return fullJid;\n    }\n    getRoomJIDFromFullJID(fullJid) {\n        let index = 0;\n        if (fullJid.indexOf(\"tel_\") === 0) {\n            index = 4;\n        }\n        if (fullJid.includes(\"/\")) {\n            fullJid = fullJid.substring(index, fullJid.lastIndexOf(\"/\"));\n        }\n        return fullJid;\n    }\n    getDomainFromFullJID(fullJid) {\n        let domain = \"\";\n        let bareJID = this.getBareJIDFromFullJID(fullJid);\n        if (bareJID.includes(\"@\")) {\n            domain = bareJID.substring(bareJID.lastIndexOf(\"@\") + 1);\n        }\n        return domain;\n    }\n    findChild(element, nodeNameToFind) {\n        let result = null;\n        if (typeof element === \"object\") {\n            let child = element.getChild(nodeNameToFind);\n            if (child) {\n                result = child;\n            }\n            else {\n                let children = element.children;\n                children.forEach((elemt) => {\n                    let child = this.findChild(elemt, nodeNameToFind);\n                    if (child) {\n                        result = child;\n                        return child;\n                    }\n                });\n            }\n        }\n        return result;\n    }\n    isFromMobile(fullJid) {\n        return (fullJid.indexOf(\"mobile\") > -1);\n    }\n    isFromNode(fullJid) {\n        return (fullJid.indexOf(\"node\") > -1);\n    }\n    isFromS2S(fullJid) {\n        return (fullJid.indexOf(\"s2s\") > -1);\n    }\n    isFromTelJid(fullJid) {\n        return (fullJid.indexOf(\"tel_\") === 0);\n    }\n    getResourceFromFullJID(fullJid) {\n        if (fullJid.includes(\"/\")) {\n            return fullJid.substring(fullJid.indexOf(\"/\") + 1);\n        }\n        return \"\";\n    }\n}\nexports.XMPPUTils = XMPPUTils;\nexports.xu = new XMPPUTils();\nmodule.exports.XMPPUTils = XMPPUTils;\n//# sourceMappingURL=XMPPUtils.js.map"]},"metadata":{},"sourceType":"script"}