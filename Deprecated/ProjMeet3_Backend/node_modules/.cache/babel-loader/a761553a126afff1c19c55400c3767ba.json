{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst MD5 = require(\"md5\");\n\nconst config_1 = require(\"../../config/config\"); //const config = require(\"../../config/config\");\n\n/*************************************************************/\n\n/* STATIC ENUM                                               */\n\n/*************************************************************/\n\n/**\n * @public\n * @enum {string}\n * @readonly\n */\n\n\nconst AdminType = {\n  /** Organization administrator */\n  'ORGANIZATION_ADMIN': \"organization_admin\",\n\n  /** Company administrator */\n  'COMPANY_ADMIN': \"company_admin\",\n\n  /** Site administrator */\n  'SITE_ADMIN': \"site_admin\",\n\n  /** No administrator right */\n  'UNDEFINED': \"undefined\"\n};\nexports.AdminType = AdminType;\n/**\n * @public\n * @enum {number}\n * @readonly\n */\n\nconst NameUpdatePrio = {\n  /* no update prio then could be updated*/\n  'NO_UPDATE_PRIO': 0,\n\n  /*prio associated to outlook name resolution update*/\n  'OUTLOOK_UPDATE_PRIO': 1,\n\n  /*prio associated to server name resolution (phonebook or office365AD ...) update*/\n  'SERVER_UPDATE_PRIO': 2,\n\n  /*max prio : no update could overwrite*/\n  'MAX_UPDATE_PRIO': 99\n};\nexports.NameUpdatePrio = NameUpdatePrio;\nconst textAvatarColor = [\"#ff4500\", \"#d38700\", \"#348833\", \"#007356\", \"#00b2a9\", \"#00b0e5\", \"#0085ca\", \"#6639b7\", \"#91278a\", \"#cf0072\", \"#a50034\", \"#d20000\"];\n/**\n * @class\n * @name Contact\n * @description\n *      This class is used to represent a contact or the connected user <br/>\n *      A contact is defined by a set of public information (name, firstName, avatar...) and a set of private information that are only shared with contacts that are in the user's network or in the same company (email, phone numbers...)\n */\n\nclass Contact {\n  constructor() {\n    /**\n     * @public\n     * @readonly\n     * @property {string} id The ID of the Contact\n     * @instance\n     */\n    this.id = \"\";\n    /**\n     * @private\n     * @readonly\n     */\n\n    this._displayName = \"\";\n    /**\n     * @public\n     * @property {Object} name The display name of the contact\n     * @readonly\n     */\n\n    this.name = {\n      value: this._displayName\n    };\n    this.displayNameMD5 = \"\";\n    /**\n    * @public\n    * @readonly\n    * @property {string} companyName The company name of the Contact\n    * @instance\n    */\n\n    this.companyName = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} loginEmail The login email of the Contact\n     * @instance\n     * @description\n     *  This field will soon become unavailable if the user is not allowed to view it, to follow the GPRD law.\n     */\n\n    this.loginEmail = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} nickName The nickname of the Contact\n     * @instance\n     */\n\n    this.nickName = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} title The title of the Contact\n     * @instance\n     */\n\n    this.title = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} jobTitle The job title of the Contact\n     * @instance\n     */\n\n    this.jobTitle = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} country The country of the Contact\n     * @instance\n     */\n\n    this.country = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} timezone The timezone of the Contact\n     * @instance\n     */\n\n    this.timezone = \"Europe/Paris\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} organisationId The organisation ID of the Contact\n     * @instance\n     */\n\n    this.organisationId = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} siteId The site ID of the Contact\n     * @instance\n     */\n\n    this.siteId = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} companyId The company ID of the Contact\n     * @instance\n     */\n\n    this.companyId = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} jid_im The JID of the Contact\n     * @instance\n     */\n\n    this.jid_im = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} jid The JID of the Contact (same as jid_im, for compatibility)\n     * @instance\n     */\n\n    this.jid = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} jid_tel The JID_TEL of the Contact\n     * @instance\n     */\n\n    this.jid_tel = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} jidtel The JID_TEL of the Contact (same as jidtel, for compatibility)\n     * @instance\n     */\n\n    this.jidtel = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} avatar The Contact avatar, if an avatar exist will return an Url, either a local file.\n     * @instance\n     */\n\n    this.avatar = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} lastAvatarUpdateDate The date of the last avatar update\n     * @instance\n     */\n\n    this.lastAvatarUpdateDate = null;\n    /**\n     * @public\n     * @readonly\n     * @property {string} lastUpdateDate The date of the last time information about the contact changed\n     * @instance\n     */\n\n    this.lastUpdateDate = \"Z\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} adminType The type of admin role. Can be `organization_admin`, `company_admin`, `site_admin`\n     * @instance\n     */\n\n    this.adminType = \"undefined\";\n    /**\n     * @public\n     * @readonly\n     * @property  {string[]} roles (For the connected user only). The associated roles of the connected user. Can be `guest`, `user`, `admin`\n     * @instance\n     * @description\n     *  This field will soon become unavailable if the user is not allowed to view it, to follow the GPRD law.\n     */\n\n    this.roles = [\"user\"];\n    /**\n     * @public\n     * @readonly\n     * @property {Object[]} phoneNumbers The list of phone numbers associated to the Contact\n     * @instance\n     */\n\n    this.phoneNumbers = [];\n    /**\n     * @public\n     * @property {string} phonePro The professional phone number of the contact\n     * @readonly\n     */\n\n    this.phonePro = \"\";\n    /**\n     * @public\n     * @property {string} phoneProCan The professional phone number of the contact (canonical format)\n     * @readonly\n     */\n\n    this.phoneProCan = \"\";\n    /**\n     * @public\n     * @property {string} phonePbx The phone number if exists associated to the user and monitored by Rainbow\n     * @readonly\n     */\n\n    this.phonePbx = \"\";\n    /**\n     * @public\n     * @property {string} phoneInternalNumber The internal number if exists associated to the user and monitored by Rainbow\n     * @readonly\n     */\n\n    this.phoneInternalNumber = \"\";\n    /**\n     * @public\n     * @property {string} pbxId The ID of the PBX monitored by Rainbow where the user's phone is associated\n     * @readonly\n     */\n\n    this.pbxId = \"\";\n    /**\n     * @public\n     * @property {string} mobilePro The professional mobile phone of the contact\n     * @readonly\n     */\n\n    this.mobilePro = \"\";\n    /**\n     * @public\n     * @property {string} mobileProCan The professional mobile phone of the contact (canonical format)\n     * @readonly\n     */\n\n    this.mobileProCan = \"\";\n    /**\n     * @public\n     * @property {string} phonePerso The personal phone of the contact\n     * @readonly\n     */\n\n    this.phonePerso = \"\";\n    /**\n     * @public\n     * @property {string} phonePersoCan The personal phone of the contact (canonical format)\n     * @readonly\n     */\n\n    this.phonePersoCan = \"\";\n    /**\n     * @public\n     * @property {string} mobilePerso The personal mobile phone of the contact\n     * @readonly\n     */\n\n    this.mobilePerso = \"\";\n    /**\n     * @public\n     * @property {string} mobilePersoCan The personal mobile phone of the contact (canonical format)\n     * @readonly\n     */\n\n    this.mobilePersoCan = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {String} voicemailNumber The number of the voicemail associated to the Contact\n     * @instance\n     */\n\n    this.voicemailNumber = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {Object[]} emails The list of email addresses associated to the Contact\n     * @instance\n     */\n\n    this.emails = [];\n    /**\n     * @public\n     * @property {string} emailPro The professional email of the contact\n     * @readonly\n     */\n\n    this.emailPro = \"\";\n    /**\n     * @public\n     * @property {string} emailPerso The personal email of the contact\n     * @readonly\n     */\n\n    this.emailPerso = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} lastName The lastname of the Contact\n     * @instance\n     */\n\n    this.lastName = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} firstName The firstname of the Contact\n     * @instance\n     */\n\n    this.firstName = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {Boolean} isTerminated True if the Contact has been removed\n     * @instance\n     */\n\n    this.isTerminated = false;\n    /**\n     * @public\n     * @readonly\n     * @property {string} language The language of the Contact\n     * @instance\n     */\n\n    this.language = \"en\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} presence The presence of the contact. Can be `offline`, `busy`, `away`, `online`, `unknown`\n     * @instance\n     */\n\n    this.presence = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {string} status An additional status information for the presence. Can be `phone`, `presentation`, `mobile` or ``\n     * @instance\n     */\n\n    this.status = \"\";\n    /**\n     * @public\n     * @readonly\n     * @property {Object[]} resources The list of resources of the Contact\n     * @instance\n     */\n\n    this.resources = \"\";\n    /**\n     * @public\n     * @property {number} nameUpdatePrio Prio of the service having made an update\n     * @readonly\n     */\n\n    this.nameUpdatePrio = NameUpdatePrio.MAX_UPDATE_PRIO; //default Max prio\n\n    /**\n     * @public\n     * @property {string} initials The initials of the contact\n     * @readonly\n     */\n\n    this.initials = \"\";\n    /**\n     * @public\n     * @property {string} nickname The nickname of the contact\n     * @readonly\n     */\n\n    this.nickname = \"\";\n    /**\n     * @public\n     * @property {boolean} roster True if the contact is part of the favorized contact's list of the connected user\n     * @readonly\n     */\n\n    this.roster = false;\n    /**\n     * @private\n     * @readonly\n     */\n\n    this.initialized = false;\n    /**\n     * @public\n     * @property {boolean} guestMode Indicated a user embedded in a chat or conference room, as guest, with limited rights until he finalizes his registration.\n     * @readonly\n     */\n\n    this.guestMode = false;\n    /**\n     * @public\n     * @property {string} id The open invite ID of the user\n     * @readonly\n     */\n\n    this.openInviteId = null;\n    /**\n     * @public\n     * @property {string} ask (Contact Only) The subscription progress\n     * @readonly\n     */\n\n    this.ask = \"none\";\n    /**\n     * @public\n     * @property {string} subscription (Contact only) The subscription state for this contact (none or both)\n     * @readonly\n     */\n\n    this.subscription = \"none\"; // Status\n\n    /**\n     * @public\n     * @readonly\n     */\n\n    this.temp = false;\n    this.userInfo1 = null;\n    this.userInfo2 = null;\n  }\n  /**\n   * @public\n   * @readonly\n   * @property {string} displayName The display name of the Contact\n   * @instance\n   */\n\n\n  set displayName(value) {\n    this._displayName = value;\n    this.name.value = value;\n    this.displayNameMD5 = MD5(value);\n  }\n\n  get displayName() {\n    return this._displayName;\n  }\n\n  setNameUpdatePrio(prio) {\n    switch (prio) {\n      case NameUpdatePrio.NO_UPDATE_PRIO:\n      case NameUpdatePrio.OUTLOOK_UPDATE_PRIO:\n      case NameUpdatePrio.SERVER_UPDATE_PRIO:\n      case NameUpdatePrio.MAX_UPDATE_PRIO:\n        this.nameUpdatePrio = prio;\n        break;\n\n      default: //no change\n\n    }\n  }\n\n  getNameUpdatePrio() {\n    return this.nameUpdatePrio;\n  }\n\n  displayNameForLog() {\n    /*if (config && config.debug) {\n        return this.displayName;\n    } // */\n    return this.displayNameMD5;\n  }\n\n  computeCompleteDisplayName(firstName, lastName) {\n    let displayName = \"\";\n    let initials = \"\";\n\n    if (lastName.length !== 1 && firstName.length !== 2) {\n      if (config_1.config.displayOrder === \"firstLast\") {\n        displayName = firstName + \" \" + lastName;\n        initials = firstName.charAt(0) + lastName.charAt(0);\n      } else {\n        displayName = lastName + \" \" + firstName;\n        initials = lastName.charAt(0) + firstName.charAt(0);\n      }\n    } else {\n      if (config_1.config.displayOrder === \"firstLast\") {\n        displayName = firstName + \" \" + lastName;\n      } else {\n        displayName = lastName + \" \" + firstName;\n      }\n\n      initials = firstName.charAt(0) + firstName.charAt(1);\n    }\n\n    this.displayName = displayName;\n    this.initials = initials; // Compute contact color\n\n    let upperCaseDisplayName = this.displayName.toUpperCase();\n    let sum = 0;\n\n    for (let i = 0; i < upperCaseDisplayName.length; i++) {\n      sum += upperCaseDisplayName.charCodeAt(i);\n    }\n\n    this.colorIndex = sum % 12;\n    this.color = textAvatarColor[this.colorIndex];\n  }\n\n  computeDisplayName() {\n    let firstName = this.firstName ? this.firstName.charAt(0).toUpperCase() + this.firstName.slice(1) : null;\n    let lastName = this.lastName ? this.lastName.charAt(0).toUpperCase() + this.lastName.slice(1) : null;\n    let nickName = this.nickname ? this.nickname.charAt(0).toUpperCase() + this.nickname.slice(1) : null;\n\n    if (lastName && firstName) {\n      this.computeCompleteDisplayName(firstName, lastName);\n    } else if (lastName && !firstName) {\n      this.displayName = lastName;\n      this.initials = lastName.charAt(0);\n    } else if (nickName) {\n      this.displayName = nickName;\n      this.initials = nickName.charAt(0);\n    } else {\n      this.displayName = \"Anonymous\";\n      this.initials = \"A\";\n    }\n  }\n\n  updateName(firstName, lastName) {\n    let that = this; // Identification fields\n\n    that.firstName = firstName;\n    that.lastName = lastName; // Compute display name\n\n    that.computeDisplayName();\n  }\n\n  updateFromUserData(userData) {\n    let that = this; // Identification fields\n\n    that.id = userData.id;\n    that.loginEmail = userData.loginEmail;\n    that.firstName = userData.firstName;\n    that.lastName = userData.lastName;\n    that.nickname = userData.nickName ? userData.nickName : \"\";\n    that.title = userData.title ? userData.title : \"\";\n    that.jobTitle = userData.jobTitle ? userData.jobTitle : \"\";\n    that.organisationId = userData.organisationId;\n    that.companyId = userData.companyId;\n    that.companyName = userData.companyName;\n    that.siteId = userData.siteId;\n    that.country = userData.country ? userData.country : \"FRA\";\n    that.timezone = userData.timezone;\n    that.roles = userData.roles;\n    that.adminType = userData.adminType; //that.isBot = false;\n\n    that.isTerminated = userData.isTerminated;\n    that.isInDefaultCompany = userData.isInDefaultCompany;\n    that.lastAvatarUpdateDate = userData.lastAvatarUpdateDate;\n    that.initialized = userData.isInitialized;\n    that.avatar = userData.avatar;\n    that.guestMode = userData.guestMode ? userData.guestMode : false;\n    that.openInviteId = userData.openInviteId ? userData.openInviteId : that.openInviteId;\n    that.userInfo1 = that.userInfo1 ? that.userInfo1 : userData.userInfo1;\n    that.userInfo2 = that.userInfo2 ? that.userInfo2 : userData.userInfo2; // Handle jids\n\n    if (userData.jid_im) {\n      that._id = userData.jid_im;\n      that.jid = userData.jid_im;\n      that.jidtel = userData.jid_tel;\n      that.jid_im = userData.jid_im;\n      that.jid_tel = userData.jid_tel;\n    } // Company field\n\n\n    if (!that.company || that.company.id !== userData.companyId) {} // this.company = Company.create(userData.companyId, userData.companyName);\n    // Telephony fields\n\n\n    that.phonePro = that.phoneProCan = \"\";\n    that.phonePbx = userData.phonePbx + \"\";\n    that.phoneInternalNumber = \"\"; //#29475\n\n    that.pbxId = \"\";\n    that.mobilePro = that.mobileProCan = \"\";\n    that.phonePerso = that.phonePersoCan = \"\";\n    that.mobilePerso = that.mobilePersoCan = \"\";\n    that.voicemailNumber = \"\";\n    that.hasPhoneNumber = false;\n    that.roster = that.roster ? that.roster : false;\n    that.presence = that.presence ? that.presence : \"offline\";\n    that.status = that.status ? that.status : \"\"; // Update emails\n\n    if (userData.emails) {\n      that.emailPerso = \"\"; //PR_14671\n\n      userData.emails.forEach(function (email) {\n        switch (email.type) {\n          case \"work\":\n            that.emailPro = email.email;\n            break;\n\n          case \"home\":\n            that.emailPerso = email.email;\n            break;\n\n          default:\n            break;\n        }\n      });\n    } // Update phone numbers\n\n\n    if (userData.phoneNumbers) {\n      that.phoneNumbers = userData.phoneNumbers;\n      that.phoneNumbers.forEach(function (phoneNumber) {\n        let number = phoneNumber.number;\n        let numberCan = phoneNumber.numberE164;\n        let deviceType = phoneNumber.deviceType;\n        that.hasPhoneNumber = true;\n\n        switch (phoneNumber.type) {\n          case \"work\":\n            if (deviceType === \"landline\") {\n              that.phonePro = number;\n              that.phoneProCan = numberCan;\n\n              if (phoneNumber.isFromSystem) {\n                that.phonePbx = phoneNumber.shortNumber;\n\n                if (phoneNumber.internalNumber) {\n                  //#29475++\n                  that.phoneInternalNumber = phoneNumber.internalNumber;\n                } //#29475--\n\n\n                that.pbxId = phoneNumber.pbxId;\n                that.voicemailNumber = phoneNumber.voiceMailNumber;\n              }\n            }\n\n            if (deviceType === \"mobile\") {\n              that.mobilePro = number;\n              that.mobileProCan = numberCan;\n            }\n\n            break;\n\n          case \"home\":\n            if (deviceType === \"landline\") {\n              that.phonePerso = number;\n              that.phonePersoCan = numberCan;\n            }\n\n            if (deviceType === \"mobile\") {\n              that.mobilePerso = number;\n              that.mobilePersoCan = numberCan;\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      });\n    } else {\n      that.phoneNumbers = [];\n      that.phonePro = \"\";\n      that.phoneProCan = \"\";\n      that.phonePbx = \"\";\n      that.phoneInternalNumber = \"\";\n      that.pbxId = \"\";\n      that.voicemailNumber = \"\";\n      that.mobilePro = \"\";\n      that.mobileProCan = \"\";\n      that.phonePerso = \"\";\n      that.phonePersoCan = \"\";\n    } // Compute display name\n\n\n    that.computeDisplayName();\n  }\n\n  isGuest() {\n    return this.guestMode;\n  }\n\n}\n\nexports.Contact = Contact;\nmodule.exports = {\n  'Contact': Contact,\n  'AdminType': AdminType,\n  'NameUpdatePrio': NameUpdatePrio\n};","map":{"version":3,"sources":["../../../src/lib/common/models/Contact.ts"],"names":[],"mappings":"AAAA;;;;;;AAIA,MAAM,GAAG,GAAG,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,qBAAA,CAAA,C,CACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;AAKA,MAAM,SAAS,GAAG;AACd;AACA,wBAAsB,oBAFR;;AAGd;AACA,mBAAiB,eAJH;;AAKd;AACA,gBAAc,YANA;;AAOd;AACA,eAAa;AARC,CAAlB;AA4vCyC,OAAA,CAAA,SAAA,GAAA,SAAA;AAjvCzC;;;;;;AAKA,MAAM,cAAc,GAAG;AACnB;AACA,oBAAkB,CAFC;;AAGnB;AACA,yBAAuB,CAJJ;;AAKnB;AACA,wBAAsB,CANH;;AAOnB;AACA,qBAAmB;AARA,CAAvB;AA4uCsE,OAAA,CAAA,cAAA,GAAA,cAAA;AAjuCtE,MAAM,eAAe,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,SAAxD,EAAmE,SAAnE,EAA8E,SAA9E,EAAyF,SAAzF,EAAoG,SAApG,EAA+G,SAA/G,EAA0H,SAA1H,CAAxB;AAGA;;;;;;;;AAOA,MAAM,OAAN,CAAa;AAmET,EAAA,WAAA,GAAA;AAEI;;;;;;AAMA,SAAK,EAAL,GAAU,EAAV;AAEA;;;;;AAIA,SAAK,YAAL,GAAoB,EAApB;AAEA;;;;;;AAKA,SAAK,IAAL,GAAY;AAAC,MAAA,KAAK,EAAE,KAAK;AAAb,KAAZ;AAEA,SAAK,cAAL,GAAsB,EAAtB;AAEI;;;;;;;AAMJ,SAAK,WAAL,GAAmB,EAAnB;AAEA;;;;;;;;;AAQA,SAAK,UAAL,GAAkB,EAAlB;AAEA;;;;;;;AAMA,SAAK,QAAL,GAAgB,EAAhB;AAEA;;;;;;;AAMA,SAAK,KAAL,GAAa,EAAb;AAEA;;;;;;;AAMA,SAAK,QAAL,GAAgB,EAAhB;AAEA;;;;;;;AAMA,SAAK,OAAL,GAAe,EAAf;AAEA;;;;;;;AAMA,SAAK,QAAL,GAAgB,cAAhB;AAEA;;;;;;;AAMA,SAAK,cAAL,GAAsB,EAAtB;AAEA;;;;;;;AAMA,SAAK,MAAL,GAAc,EAAd;AAEA;;;;;;;AAMA,SAAK,SAAL,GAAiB,EAAjB;AAEA;;;;;;;AAMA,SAAK,MAAL,GAAc,EAAd;AAEA;;;;;;;AAMA,SAAK,GAAL,GAAW,EAAX;AAEA;;;;;;;AAMA,SAAK,OAAL,GAAe,EAAf;AAEA;;;;;;;AAMA,SAAK,MAAL,GAAc,EAAd;AAEA;;;;;;;AAMA,SAAK,MAAL,GAAc,EAAd;AAEA;;;;;;;AAMA,SAAK,oBAAL,GAA4B,IAA5B;AAEA;;;;;;;AAMA,SAAK,cAAL,GAAsB,GAAtB;AAEA;;;;;;;AAMA,SAAK,SAAL,GAAiB,WAAjB;AAEA;;;;;;;;;AAQA,SAAK,KAAL,GAAa,CAAC,MAAD,CAAb;AAEA;;;;;;;AAMA,SAAK,YAAL,GAAoB,EAApB;AAEA;;;;;;AAKA,SAAK,QAAL,GAAgB,EAAhB;AAEA;;;;;;AAKA,SAAK,WAAL,GAAmB,EAAnB;AAEA;;;;;;AAKA,SAAK,QAAL,GAAgB,EAAhB;AAEA;;;;;;AAKA,SAAK,mBAAL,GAA2B,EAA3B;AAEA;;;;;;AAKA,SAAK,KAAL,GAAa,EAAb;AAEA;;;;;;AAKA,SAAK,SAAL,GAAiB,EAAjB;AAEA;;;;;;AAKA,SAAK,YAAL,GAAoB,EAApB;AAEA;;;;;;AAKA,SAAK,UAAL,GAAkB,EAAlB;AAEA;;;;;;AAKA,SAAK,aAAL,GAAqB,EAArB;AAEA;;;;;;AAKA,SAAK,WAAL,GAAmB,EAAnB;AAEA;;;;;;AAKA,SAAK,cAAL,GAAsB,EAAtB;AAEA;;;;;;;AAMA,SAAK,eAAL,GAAuB,EAAvB;AAEA;;;;;;;AAMA,SAAK,MAAL,GAAc,EAAd;AAEA;;;;;;AAKA,SAAK,QAAL,GAAgB,EAAhB;AAEA;;;;;;AAKA,SAAK,UAAL,GAAkB,EAAlB;AAEA;;;;;;;AAMA,SAAK,QAAL,GAAgB,EAAhB;AAEA;;;;;;;AAMA,SAAK,SAAL,GAAiB,EAAjB;AAEA;;;;;;;AAMA,SAAK,YAAL,GAAoB,KAApB;AAEA;;;;;;;AAMA,SAAK,QAAL,GAAgB,IAAhB;AAEA;;;;;;;AAMA,SAAK,QAAL,GAAgB,EAAhB;AAEA;;;;;;;AAMA,SAAK,MAAL,GAAc,EAAd;AAEA;;;;;;;AAMA,SAAK,SAAL,GAAiB,EAAjB;AAEA;;;;;;AAKA,SAAK,cAAL,GAAsB,cAAc,CAAC,eAArC,CArWJ,CAqWyD;;AAErD;;;;;;AAKA,SAAK,QAAL,GAAgB,EAAhB;AAEA;;;;;;AAKA,SAAK,QAAL,GAAgB,EAAhB;AAEA;;;;;;AAKA,SAAK,MAAL,GAAc,KAAd;AAEA;;;;;AAIA,SAAK,WAAL,GAAmB,KAAnB;AAEA;;;;;;AAKA,SAAK,SAAL,GAAiB,KAAjB;AAEA;;;;;;AAKA,SAAK,YAAL,GAAoB,IAApB;AAEA;;;;;;AAKA,SAAK,GAAL,GAAW,MAAX;AAEA;;;;;;AAKA,SAAK,YAAL,GAAoB,MAApB,CA5ZJ,CA8ZI;;AACA;;;;;AAIA,SAAK,IAAL,GAAY,KAAZ;AAEA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,SAAL,GAAiB,IAAjB;AAGH;AAED;;;;;;;;AAOA,MAAI,WAAJ,CAAgB,KAAhB,EAAqB;AACjB,SAAK,YAAL,GAAoB,KAApB;AACA,SAAK,IAAL,CAAU,KAAV,GAAkB,KAAlB;AACA,SAAK,cAAL,GAAsB,GAAG,CAAC,KAAD,CAAzB;AACH;;AAED,MAAI,WAAJ,GAAe;AACX,WAAO,KAAK,YAAZ;AACH;;AAED,EAAA,iBAAiB,CAAE,IAAF,EAAM;AACnB,YAAQ,IAAR;AACI,WAAK,cAAc,CAAC,cAApB;AACA,WAAK,cAAc,CAAC,mBAApB;AACA,WAAK,cAAc,CAAC,kBAApB;AACA,WAAK,cAAc,CAAC,eAApB;AACI,aAAK,cAAL,GAAsB,IAAtB;AACA;;AACJ,cAPJ,CAOY;;AAPZ;AASH;;AAED,EAAA,iBAAiB,GAAA;AACb,WAAO,KAAK,cAAZ;AACH;;AAED,EAAA,iBAAiB,GAAA;AACb;;;AAGA,WAAO,KAAK,cAAZ;AACH;;AAED,EAAA,0BAA0B,CAAE,SAAF,EAAa,QAAb,EAAqB;AAC3C,QAAI,WAAW,GAAG,EAAlB;AACA,QAAI,QAAQ,GAAG,EAAf;;AACA,QAAI,QAAQ,CAAC,MAAT,KAAoB,CAApB,IAAyB,SAAS,CAAC,MAAV,KAAqB,CAAlD,EAAqD;AACjD,UAAI,QAAA,CAAA,MAAA,CAAO,YAAP,KAAwB,WAA5B,EAAyC;AACrC,QAAA,WAAW,GAAG,SAAS,GAAG,GAAZ,GAAkB,QAAhC;AACA,QAAA,QAAQ,GAAG,SAAS,CAAC,MAAV,CAAiB,CAAjB,IAAsB,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAjC;AACH,OAHD,MAIK;AACD,QAAA,WAAW,GAAG,QAAQ,GAAG,GAAX,GAAiB,SAA/B;AACA,QAAA,QAAQ,GAAG,QAAQ,CAAC,MAAT,CAAgB,CAAhB,IAAqB,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAhC;AACH;AACJ,KATD,MAUK;AACD,UAAI,QAAA,CAAA,MAAA,CAAO,YAAP,KAAwB,WAA5B,EAAyC;AACrC,QAAA,WAAW,GAAG,SAAS,GAAG,GAAZ,GAAkB,QAAhC;AACH,OAFD,MAEO;AACH,QAAA,WAAW,GAAG,QAAQ,GAAG,GAAX,GAAiB,SAA/B;AACH;;AAED,MAAA,QAAQ,GAAG,SAAS,CAAC,MAAV,CAAiB,CAAjB,IAAsB,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAjC;AACH;;AACD,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,QAAL,GAAgB,QAAhB,CAvB2C,CAyB3C;;AACA,QAAI,oBAAoB,GAAG,KAAK,WAAL,CAAiB,WAAjB,EAA3B;AACA,QAAI,GAAG,GAAG,CAAV;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,oBAAoB,CAAC,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AAClD,MAAA,GAAG,IAAI,oBAAoB,CAAC,UAArB,CAAgC,CAAhC,CAAP;AACH;;AAED,SAAK,UAAL,GAAmB,GAAG,GAAG,EAAzB;AACA,SAAK,KAAL,GAAa,eAAe,CAAC,KAAK,UAAN,CAA5B;AACH;;AAED,EAAA,kBAAkB,GAAA;AACd,QAAI,SAAS,GAAG,KAAK,SAAL,GAAkB,KAAK,SAAL,CAAe,MAAf,CAAsB,CAAtB,EAAyB,WAAzB,KAAyC,KAAK,SAAL,CAAe,KAAf,CAAqB,CAArB,CAA3D,GAAsF,IAAtG;AACA,QAAI,QAAQ,GAAG,KAAK,QAAL,GAAiB,KAAK,QAAL,CAAc,MAAd,CAAqB,CAArB,EAAwB,WAAxB,KAAwC,KAAK,QAAL,CAAc,KAAd,CAAoB,CAApB,CAAzD,GAAmF,IAAlG;AACA,QAAI,QAAQ,GAAG,KAAK,QAAL,GAAiB,KAAK,QAAL,CAAc,MAAd,CAAqB,CAArB,EAAwB,WAAxB,KAAwC,KAAK,QAAL,CAAc,KAAd,CAAoB,CAApB,CAAzD,GAAmF,IAAlG;;AACA,QAAI,QAAQ,IAAI,SAAhB,EAA2B;AACvB,WAAK,0BAAL,CAAgC,SAAhC,EAA2C,QAA3C;AACH,KAFD,MAGK,IAAI,QAAQ,IAAI,CAAC,SAAjB,EAA4B;AAC7B,WAAK,WAAL,GAAmB,QAAnB;AACA,WAAK,QAAL,GAAgB,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAhB;AACH,KAHI,MAIA,IAAI,QAAJ,EAAc;AACf,WAAK,WAAL,GAAmB,QAAnB;AACA,WAAK,QAAL,GAAgB,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAhB;AACH,KAHI,MAIA;AACD,WAAK,WAAL,GAAmB,WAAnB;AACA,WAAK,QAAL,GAAgB,GAAhB;AACH;AACJ;;AAED,EAAA,UAAU,CAAE,SAAF,EAAa,QAAb,EAAqB;AAC3B,QAAI,IAAI,GAAG,IAAX,CAD2B,CAE3B;;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,SAAjB;AACA,IAAA,IAAI,CAAC,QAAL,GAAgB,QAAhB,CAJ2B,CAK3B;;AACA,IAAA,IAAI,CAAC,kBAAL;AACH;;AAED,EAAA,kBAAkB,CAAE,QAAF,EAAU;AACxB,QAAI,IAAI,GAAG,IAAX,CADwB,CAExB;;AACA,IAAA,IAAI,CAAC,EAAL,GAAU,QAAQ,CAAC,EAAnB;AACA,IAAA,IAAI,CAAC,UAAL,GAAkB,QAAQ,CAAC,UAA3B;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,QAAQ,CAAC,SAA1B;AACA,IAAA,IAAI,CAAC,QAAL,GAAgB,QAAQ,CAAC,QAAzB;AACA,IAAA,IAAI,CAAC,QAAL,GAAgB,QAAQ,CAAC,QAAT,GAAoB,QAAQ,CAAC,QAA7B,GAAwC,EAAxD;AACA,IAAA,IAAI,CAAC,KAAL,GAAa,QAAQ,CAAC,KAAT,GAAiB,QAAQ,CAAC,KAA1B,GAAkC,EAA/C;AACA,IAAA,IAAI,CAAC,QAAL,GAAgB,QAAQ,CAAC,QAAT,GAAoB,QAAQ,CAAC,QAA7B,GAAwC,EAAxD;AACA,IAAA,IAAI,CAAC,cAAL,GAAsB,QAAQ,CAAC,cAA/B;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,QAAQ,CAAC,SAA1B;AACA,IAAA,IAAI,CAAC,WAAL,GAAmB,QAAQ,CAAC,WAA5B;AACA,IAAA,IAAI,CAAC,MAAL,GAAc,QAAQ,CAAC,MAAvB;AACA,IAAA,IAAI,CAAC,OAAL,GAAe,QAAQ,CAAC,OAAT,GAAmB,QAAQ,CAAC,OAA5B,GAAsC,KAArD;AACA,IAAA,IAAI,CAAC,QAAL,GAAgB,QAAQ,CAAC,QAAzB;AACA,IAAA,IAAI,CAAC,KAAL,GAAa,QAAQ,CAAC,KAAtB;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,QAAQ,CAAC,SAA1B,CAjBwB,CAkBxB;;AACA,IAAA,IAAI,CAAC,YAAL,GAAoB,QAAQ,CAAC,YAA7B;AACA,IAAA,IAAI,CAAC,kBAAL,GAA0B,QAAQ,CAAC,kBAAnC;AACA,IAAA,IAAI,CAAC,oBAAL,GAA4B,QAAQ,CAAC,oBAArC;AACA,IAAA,IAAI,CAAC,WAAL,GAAmB,QAAQ,CAAC,aAA5B;AACA,IAAA,IAAI,CAAC,MAAL,GAAc,QAAQ,CAAC,MAAvB;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,QAAQ,CAAC,SAAT,GAAqB,QAAQ,CAAC,SAA9B,GAA0C,KAA3D;AACA,IAAA,IAAI,CAAC,YAAL,GAAoB,QAAQ,CAAC,YAAT,GAAwB,QAAQ,CAAC,YAAjC,GAAgD,IAAI,CAAC,YAAzE;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,SAAtB,GAAkC,QAAQ,CAAC,SAA5D;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,SAAtB,GAAkC,QAAQ,CAAC,SAA5D,CA3BwB,CA6BxB;;AACA,QAAI,QAAQ,CAAC,MAAb,EAAqB;AACjB,MAAA,IAAI,CAAC,GAAL,GAAW,QAAQ,CAAC,MAApB;AACA,MAAA,IAAI,CAAC,GAAL,GAAW,QAAQ,CAAC,MAApB;AACA,MAAA,IAAI,CAAC,MAAL,GAAc,QAAQ,CAAC,OAAvB;AACA,MAAA,IAAI,CAAC,MAAL,GAAc,QAAQ,CAAC,MAAvB;AACA,MAAA,IAAI,CAAC,OAAL,GAAe,QAAQ,CAAC,OAAxB;AACH,KApCuB,CAsCxB;;;AACA,QAAI,CAAC,IAAI,CAAC,OAAN,IAAiB,IAAI,CAAC,OAAL,CAAa,EAAb,KAAoB,QAAQ,CAAC,SAAlD,EAA6D,CAE5D,CAFD,CACI;AAGJ;;;AACA,IAAA,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,WAAL,GAAmB,EAAnC;AACA,IAAA,IAAI,CAAC,QAAL,GAAgB,QAAQ,CAAC,QAAT,GAAoB,EAApC;AACA,IAAA,IAAI,CAAC,mBAAL,GAA2B,EAA3B,CA9CwB,CA8CM;;AAC9B,IAAA,IAAI,CAAC,KAAL,GAAa,EAAb;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,YAAL,GAAoB,EAArC;AACA,IAAA,IAAI,CAAC,UAAL,GAAkB,IAAI,CAAC,aAAL,GAAqB,EAAvC;AACA,IAAA,IAAI,CAAC,WAAL,GAAmB,IAAI,CAAC,cAAL,GAAsB,EAAzC;AACA,IAAA,IAAI,CAAC,eAAL,GAAuB,EAAvB;AACA,IAAA,IAAI,CAAC,cAAL,GAAsB,KAAtB;AAEA,IAAA,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,MAAnB,GAA4B,KAA1C;AACA,IAAA,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,QAArB,GAAgC,SAAhD;AACA,IAAA,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,MAAnB,GAA4B,EAA1C,CAxDwB,CA0DxB;;AACA,QAAI,QAAQ,CAAC,MAAb,EAAqB;AACjB,MAAA,IAAI,CAAC,UAAL,GAAkB,EAAlB,CADiB,CACI;;AACrB,MAAA,QAAQ,CAAC,MAAT,CAAgB,OAAhB,CAAwB,UAAU,KAAV,EAAe;AACnC,gBAAQ,KAAK,CAAC,IAAd;AACI,eAAK,MAAL;AACI,YAAA,IAAI,CAAC,QAAL,GAAgB,KAAK,CAAC,KAAtB;AACA;;AACJ,eAAK,MAAL;AACI,YAAA,IAAI,CAAC,UAAL,GAAkB,KAAK,CAAC,KAAxB;AACA;;AACJ;AACI;AARR;AAUH,OAXD;AAYH,KAzEuB,CA2ExB;;;AACA,QAAI,QAAQ,CAAC,YAAb,EAA2B;AACvB,MAAA,IAAI,CAAC,YAAL,GAAoB,QAAQ,CAAC,YAA7B;AACA,MAAA,IAAI,CAAC,YAAL,CAAkB,OAAlB,CAA0B,UAAU,WAAV,EAAqB;AAC3C,YAAI,MAAM,GAAG,WAAW,CAAC,MAAzB;AACA,YAAI,SAAS,GAAG,WAAW,CAAC,UAA5B;AACA,YAAI,UAAU,GAAG,WAAW,CAAC,UAA7B;AACA,QAAA,IAAI,CAAC,cAAL,GAAsB,IAAtB;;AACA,gBAAQ,WAAW,CAAC,IAApB;AACI,eAAK,MAAL;AACI,gBAAI,UAAU,KAAK,UAAnB,EAA+B;AAC3B,cAAA,IAAI,CAAC,QAAL,GAAgB,MAAhB;AACA,cAAA,IAAI,CAAC,WAAL,GAAmB,SAAnB;;AACA,kBAAI,WAAW,CAAC,YAAhB,EAA8B;AAC1B,gBAAA,IAAI,CAAC,QAAL,GAAgB,WAAW,CAAC,WAA5B;;AACA,oBAAI,WAAW,CAAC,cAAhB,EAAgC;AAAE;AAC9B,kBAAA,IAAI,CAAC,mBAAL,GAA2B,WAAW,CAAC,cAAvC;AACH,iBAJyB,CAIxB;;;AACF,gBAAA,IAAI,CAAC,KAAL,GAAa,WAAW,CAAC,KAAzB;AACA,gBAAA,IAAI,CAAC,eAAL,GAAuB,WAAW,CAAC,eAAnC;AACH;AACJ;;AACD,gBAAI,UAAU,KAAK,QAAnB,EAA6B;AACzB,cAAA,IAAI,CAAC,SAAL,GAAiB,MAAjB;AACA,cAAA,IAAI,CAAC,YAAL,GAAoB,SAApB;AACH;;AACD;;AACJ,eAAK,MAAL;AACI,gBAAI,UAAU,KAAK,UAAnB,EAA+B;AAC3B,cAAA,IAAI,CAAC,UAAL,GAAkB,MAAlB;AACA,cAAA,IAAI,CAAC,aAAL,GAAqB,SAArB;AACH;;AACD,gBAAI,UAAU,KAAK,QAAnB,EAA6B;AACzB,cAAA,IAAI,CAAC,WAAL,GAAmB,MAAnB;AACA,cAAA,IAAI,CAAC,cAAL,GAAsB,SAAtB;AACH;;AACD;;AACJ;AACI;AA9BR;AAgCH,OArCD;AAsCH,KAxCD,MAwCO;AACH,MAAA,IAAI,CAAC,YAAL,GAAoB,EAApB;AACA,MAAA,IAAI,CAAC,QAAL,GAAgB,EAAhB;AACA,MAAA,IAAI,CAAC,WAAL,GAAmB,EAAnB;AACA,MAAA,IAAI,CAAC,QAAL,GAAgB,EAAhB;AACA,MAAA,IAAI,CAAC,mBAAL,GAA2B,EAA3B;AACA,MAAA,IAAI,CAAC,KAAL,GAAa,EAAb;AACA,MAAA,IAAI,CAAC,eAAL,GAAuB,EAAvB;AACA,MAAA,IAAI,CAAC,SAAL,GAAiB,EAAjB;AACA,MAAA,IAAI,CAAC,YAAL,GAAoB,EAApB;AACA,MAAA,IAAI,CAAC,UAAL,GAAkB,EAAlB;AACA,MAAA,IAAI,CAAC,aAAL,GAAqB,EAArB;AACH,KAhIuB,CAkIxB;;;AACA,IAAA,IAAI,CAAC,kBAAL;AACH;;AAED,EAAA,OAAO,GAAA;AACH,WAAO,KAAK,SAAZ;AACH;;AAjuBQ;;AAutCM,OAAA,CAAA,OAAA,GAAA,OAAA;AADnB,MAAM,CAAC,OAAP,GAAiB;AAAC,aAAY,OAAb;AAAsB,eAAc,SAApC;AAA+C,oBAAmB;AAAlE,CAAjB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MD5 = require(\"md5\");\nconst config_1 = require(\"../../config/config\");\n//const config = require(\"../../config/config\");\n/*************************************************************/\n/* STATIC ENUM                                               */\n/*************************************************************/\n/**\n * @public\n * @enum {string}\n * @readonly\n */\nconst AdminType = {\n    /** Organization administrator */\n    'ORGANIZATION_ADMIN': \"organization_admin\",\n    /** Company administrator */\n    'COMPANY_ADMIN': \"company_admin\",\n    /** Site administrator */\n    'SITE_ADMIN': \"site_admin\",\n    /** No administrator right */\n    'UNDEFINED': \"undefined\"\n};\nexports.AdminType = AdminType;\n/**\n * @public\n * @enum {number}\n * @readonly\n */\nconst NameUpdatePrio = {\n    /* no update prio then could be updated*/\n    'NO_UPDATE_PRIO': 0,\n    /*prio associated to outlook name resolution update*/\n    'OUTLOOK_UPDATE_PRIO': 1,\n    /*prio associated to server name resolution (phonebook or office365AD ...) update*/\n    'SERVER_UPDATE_PRIO': 2,\n    /*max prio : no update could overwrite*/\n    'MAX_UPDATE_PRIO': 99\n};\nexports.NameUpdatePrio = NameUpdatePrio;\nconst textAvatarColor = [\"#ff4500\", \"#d38700\", \"#348833\", \"#007356\", \"#00b2a9\", \"#00b0e5\", \"#0085ca\", \"#6639b7\", \"#91278a\", \"#cf0072\", \"#a50034\", \"#d20000\"];\n/**\n * @class\n * @name Contact\n * @description\n *      This class is used to represent a contact or the connected user <br/>\n *      A contact is defined by a set of public information (name, firstName, avatar...) and a set of private information that are only shared with contacts that are in the user's network or in the same company (email, phone numbers...)\n */\nclass Contact {\n    constructor() {\n        /**\n         * @public\n         * @readonly\n         * @property {string} id The ID of the Contact\n         * @instance\n         */\n        this.id = \"\";\n        /**\n         * @private\n         * @readonly\n         */\n        this._displayName = \"\";\n        /**\n         * @public\n         * @property {Object} name The display name of the contact\n         * @readonly\n         */\n        this.name = { value: this._displayName };\n        this.displayNameMD5 = \"\";\n        /**\n     * @public\n     * @readonly\n     * @property {string} companyName The company name of the Contact\n     * @instance\n     */\n        this.companyName = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} loginEmail The login email of the Contact\n         * @instance\n         * @description\n         *  This field will soon become unavailable if the user is not allowed to view it, to follow the GPRD law.\n         */\n        this.loginEmail = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} nickName The nickname of the Contact\n         * @instance\n         */\n        this.nickName = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} title The title of the Contact\n         * @instance\n         */\n        this.title = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} jobTitle The job title of the Contact\n         * @instance\n         */\n        this.jobTitle = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} country The country of the Contact\n         * @instance\n         */\n        this.country = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} timezone The timezone of the Contact\n         * @instance\n         */\n        this.timezone = \"Europe/Paris\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} organisationId The organisation ID of the Contact\n         * @instance\n         */\n        this.organisationId = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} siteId The site ID of the Contact\n         * @instance\n         */\n        this.siteId = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} companyId The company ID of the Contact\n         * @instance\n         */\n        this.companyId = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} jid_im The JID of the Contact\n         * @instance\n         */\n        this.jid_im = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} jid The JID of the Contact (same as jid_im, for compatibility)\n         * @instance\n         */\n        this.jid = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} jid_tel The JID_TEL of the Contact\n         * @instance\n         */\n        this.jid_tel = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} jidtel The JID_TEL of the Contact (same as jidtel, for compatibility)\n         * @instance\n         */\n        this.jidtel = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} avatar The Contact avatar, if an avatar exist will return an Url, either a local file.\n         * @instance\n         */\n        this.avatar = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} lastAvatarUpdateDate The date of the last avatar update\n         * @instance\n         */\n        this.lastAvatarUpdateDate = null;\n        /**\n         * @public\n         * @readonly\n         * @property {string} lastUpdateDate The date of the last time information about the contact changed\n         * @instance\n         */\n        this.lastUpdateDate = \"Z\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} adminType The type of admin role. Can be `organization_admin`, `company_admin`, `site_admin`\n         * @instance\n         */\n        this.adminType = \"undefined\";\n        /**\n         * @public\n         * @readonly\n         * @property  {string[]} roles (For the connected user only). The associated roles of the connected user. Can be `guest`, `user`, `admin`\n         * @instance\n         * @description\n         *  This field will soon become unavailable if the user is not allowed to view it, to follow the GPRD law.\n         */\n        this.roles = [\"user\"];\n        /**\n         * @public\n         * @readonly\n         * @property {Object[]} phoneNumbers The list of phone numbers associated to the Contact\n         * @instance\n         */\n        this.phoneNumbers = [];\n        /**\n         * @public\n         * @property {string} phonePro The professional phone number of the contact\n         * @readonly\n         */\n        this.phonePro = \"\";\n        /**\n         * @public\n         * @property {string} phoneProCan The professional phone number of the contact (canonical format)\n         * @readonly\n         */\n        this.phoneProCan = \"\";\n        /**\n         * @public\n         * @property {string} phonePbx The phone number if exists associated to the user and monitored by Rainbow\n         * @readonly\n         */\n        this.phonePbx = \"\";\n        /**\n         * @public\n         * @property {string} phoneInternalNumber The internal number if exists associated to the user and monitored by Rainbow\n         * @readonly\n         */\n        this.phoneInternalNumber = \"\";\n        /**\n         * @public\n         * @property {string} pbxId The ID of the PBX monitored by Rainbow where the user's phone is associated\n         * @readonly\n         */\n        this.pbxId = \"\";\n        /**\n         * @public\n         * @property {string} mobilePro The professional mobile phone of the contact\n         * @readonly\n         */\n        this.mobilePro = \"\";\n        /**\n         * @public\n         * @property {string} mobileProCan The professional mobile phone of the contact (canonical format)\n         * @readonly\n         */\n        this.mobileProCan = \"\";\n        /**\n         * @public\n         * @property {string} phonePerso The personal phone of the contact\n         * @readonly\n         */\n        this.phonePerso = \"\";\n        /**\n         * @public\n         * @property {string} phonePersoCan The personal phone of the contact (canonical format)\n         * @readonly\n         */\n        this.phonePersoCan = \"\";\n        /**\n         * @public\n         * @property {string} mobilePerso The personal mobile phone of the contact\n         * @readonly\n         */\n        this.mobilePerso = \"\";\n        /**\n         * @public\n         * @property {string} mobilePersoCan The personal mobile phone of the contact (canonical format)\n         * @readonly\n         */\n        this.mobilePersoCan = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {String} voicemailNumber The number of the voicemail associated to the Contact\n         * @instance\n         */\n        this.voicemailNumber = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {Object[]} emails The list of email addresses associated to the Contact\n         * @instance\n         */\n        this.emails = [];\n        /**\n         * @public\n         * @property {string} emailPro The professional email of the contact\n         * @readonly\n         */\n        this.emailPro = \"\";\n        /**\n         * @public\n         * @property {string} emailPerso The personal email of the contact\n         * @readonly\n         */\n        this.emailPerso = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} lastName The lastname of the Contact\n         * @instance\n         */\n        this.lastName = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} firstName The firstname of the Contact\n         * @instance\n         */\n        this.firstName = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {Boolean} isTerminated True if the Contact has been removed\n         * @instance\n         */\n        this.isTerminated = false;\n        /**\n         * @public\n         * @readonly\n         * @property {string} language The language of the Contact\n         * @instance\n         */\n        this.language = \"en\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} presence The presence of the contact. Can be `offline`, `busy`, `away`, `online`, `unknown`\n         * @instance\n         */\n        this.presence = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {string} status An additional status information for the presence. Can be `phone`, `presentation`, `mobile` or ``\n         * @instance\n         */\n        this.status = \"\";\n        /**\n         * @public\n         * @readonly\n         * @property {Object[]} resources The list of resources of the Contact\n         * @instance\n         */\n        this.resources = \"\";\n        /**\n         * @public\n         * @property {number} nameUpdatePrio Prio of the service having made an update\n         * @readonly\n         */\n        this.nameUpdatePrio = NameUpdatePrio.MAX_UPDATE_PRIO; //default Max prio\n        /**\n         * @public\n         * @property {string} initials The initials of the contact\n         * @readonly\n         */\n        this.initials = \"\";\n        /**\n         * @public\n         * @property {string} nickname The nickname of the contact\n         * @readonly\n         */\n        this.nickname = \"\";\n        /**\n         * @public\n         * @property {boolean} roster True if the contact is part of the favorized contact's list of the connected user\n         * @readonly\n         */\n        this.roster = false;\n        /**\n         * @private\n         * @readonly\n         */\n        this.initialized = false;\n        /**\n         * @public\n         * @property {boolean} guestMode Indicated a user embedded in a chat or conference room, as guest, with limited rights until he finalizes his registration.\n         * @readonly\n         */\n        this.guestMode = false;\n        /**\n         * @public\n         * @property {string} id The open invite ID of the user\n         * @readonly\n         */\n        this.openInviteId = null;\n        /**\n         * @public\n         * @property {string} ask (Contact Only) The subscription progress\n         * @readonly\n         */\n        this.ask = \"none\";\n        /**\n         * @public\n         * @property {string} subscription (Contact only) The subscription state for this contact (none or both)\n         * @readonly\n         */\n        this.subscription = \"none\";\n        // Status\n        /**\n         * @public\n         * @readonly\n         */\n        this.temp = false;\n        this.userInfo1 = null;\n        this.userInfo2 = null;\n    }\n    /**\n     * @public\n     * @readonly\n     * @property {string} displayName The display name of the Contact\n     * @instance\n     */\n    set displayName(value) {\n        this._displayName = value;\n        this.name.value = value;\n        this.displayNameMD5 = MD5(value);\n    }\n    get displayName() {\n        return this._displayName;\n    }\n    setNameUpdatePrio(prio) {\n        switch (prio) {\n            case NameUpdatePrio.NO_UPDATE_PRIO:\n            case NameUpdatePrio.OUTLOOK_UPDATE_PRIO:\n            case NameUpdatePrio.SERVER_UPDATE_PRIO:\n            case NameUpdatePrio.MAX_UPDATE_PRIO:\n                this.nameUpdatePrio = prio;\n                break;\n            default: //no change\n        }\n    }\n    getNameUpdatePrio() {\n        return this.nameUpdatePrio;\n    }\n    displayNameForLog() {\n        /*if (config && config.debug) {\n            return this.displayName;\n        } // */\n        return this.displayNameMD5;\n    }\n    computeCompleteDisplayName(firstName, lastName) {\n        let displayName = \"\";\n        let initials = \"\";\n        if (lastName.length !== 1 && firstName.length !== 2) {\n            if (config_1.config.displayOrder === \"firstLast\") {\n                displayName = firstName + \" \" + lastName;\n                initials = firstName.charAt(0) + lastName.charAt(0);\n            }\n            else {\n                displayName = lastName + \" \" + firstName;\n                initials = lastName.charAt(0) + firstName.charAt(0);\n            }\n        }\n        else {\n            if (config_1.config.displayOrder === \"firstLast\") {\n                displayName = firstName + \" \" + lastName;\n            }\n            else {\n                displayName = lastName + \" \" + firstName;\n            }\n            initials = firstName.charAt(0) + firstName.charAt(1);\n        }\n        this.displayName = displayName;\n        this.initials = initials;\n        // Compute contact color\n        let upperCaseDisplayName = this.displayName.toUpperCase();\n        let sum = 0;\n        for (let i = 0; i < upperCaseDisplayName.length; i++) {\n            sum += upperCaseDisplayName.charCodeAt(i);\n        }\n        this.colorIndex = (sum % 12);\n        this.color = textAvatarColor[this.colorIndex];\n    }\n    computeDisplayName() {\n        let firstName = this.firstName ? (this.firstName.charAt(0).toUpperCase() + this.firstName.slice(1)) : null;\n        let lastName = this.lastName ? (this.lastName.charAt(0).toUpperCase() + this.lastName.slice(1)) : null;\n        let nickName = this.nickname ? (this.nickname.charAt(0).toUpperCase() + this.nickname.slice(1)) : null;\n        if (lastName && firstName) {\n            this.computeCompleteDisplayName(firstName, lastName);\n        }\n        else if (lastName && !firstName) {\n            this.displayName = lastName;\n            this.initials = lastName.charAt(0);\n        }\n        else if (nickName) {\n            this.displayName = nickName;\n            this.initials = nickName.charAt(0);\n        }\n        else {\n            this.displayName = \"Anonymous\";\n            this.initials = \"A\";\n        }\n    }\n    updateName(firstName, lastName) {\n        let that = this;\n        // Identification fields\n        that.firstName = firstName;\n        that.lastName = lastName;\n        // Compute display name\n        that.computeDisplayName();\n    }\n    updateFromUserData(userData) {\n        let that = this;\n        // Identification fields\n        that.id = userData.id;\n        that.loginEmail = userData.loginEmail;\n        that.firstName = userData.firstName;\n        that.lastName = userData.lastName;\n        that.nickname = userData.nickName ? userData.nickName : \"\";\n        that.title = userData.title ? userData.title : \"\";\n        that.jobTitle = userData.jobTitle ? userData.jobTitle : \"\";\n        that.organisationId = userData.organisationId;\n        that.companyId = userData.companyId;\n        that.companyName = userData.companyName;\n        that.siteId = userData.siteId;\n        that.country = userData.country ? userData.country : \"FRA\";\n        that.timezone = userData.timezone;\n        that.roles = userData.roles;\n        that.adminType = userData.adminType;\n        //that.isBot = false;\n        that.isTerminated = userData.isTerminated;\n        that.isInDefaultCompany = userData.isInDefaultCompany;\n        that.lastAvatarUpdateDate = userData.lastAvatarUpdateDate;\n        that.initialized = userData.isInitialized;\n        that.avatar = userData.avatar;\n        that.guestMode = userData.guestMode ? userData.guestMode : false;\n        that.openInviteId = userData.openInviteId ? userData.openInviteId : that.openInviteId;\n        that.userInfo1 = that.userInfo1 ? that.userInfo1 : userData.userInfo1;\n        that.userInfo2 = that.userInfo2 ? that.userInfo2 : userData.userInfo2;\n        // Handle jids\n        if (userData.jid_im) {\n            that._id = userData.jid_im;\n            that.jid = userData.jid_im;\n            that.jidtel = userData.jid_tel;\n            that.jid_im = userData.jid_im;\n            that.jid_tel = userData.jid_tel;\n        }\n        // Company field\n        if (!that.company || that.company.id !== userData.companyId) {\n            // this.company = Company.create(userData.companyId, userData.companyName);\n        }\n        // Telephony fields\n        that.phonePro = that.phoneProCan = \"\";\n        that.phonePbx = userData.phonePbx + \"\";\n        that.phoneInternalNumber = \"\"; //#29475\n        that.pbxId = \"\";\n        that.mobilePro = that.mobileProCan = \"\";\n        that.phonePerso = that.phonePersoCan = \"\";\n        that.mobilePerso = that.mobilePersoCan = \"\";\n        that.voicemailNumber = \"\";\n        that.hasPhoneNumber = false;\n        that.roster = that.roster ? that.roster : false;\n        that.presence = that.presence ? that.presence : \"offline\";\n        that.status = that.status ? that.status : \"\";\n        // Update emails\n        if (userData.emails) {\n            that.emailPerso = \"\"; //PR_14671\n            userData.emails.forEach(function (email) {\n                switch (email.type) {\n                    case \"work\":\n                        that.emailPro = email.email;\n                        break;\n                    case \"home\":\n                        that.emailPerso = email.email;\n                        break;\n                    default:\n                        break;\n                }\n            });\n        }\n        // Update phone numbers\n        if (userData.phoneNumbers) {\n            that.phoneNumbers = userData.phoneNumbers;\n            that.phoneNumbers.forEach(function (phoneNumber) {\n                let number = phoneNumber.number;\n                let numberCan = phoneNumber.numberE164;\n                let deviceType = phoneNumber.deviceType;\n                that.hasPhoneNumber = true;\n                switch (phoneNumber.type) {\n                    case \"work\":\n                        if (deviceType === \"landline\") {\n                            that.phonePro = number;\n                            that.phoneProCan = numberCan;\n                            if (phoneNumber.isFromSystem) {\n                                that.phonePbx = phoneNumber.shortNumber;\n                                if (phoneNumber.internalNumber) { //#29475++\n                                    that.phoneInternalNumber = phoneNumber.internalNumber;\n                                } //#29475--\n                                that.pbxId = phoneNumber.pbxId;\n                                that.voicemailNumber = phoneNumber.voiceMailNumber;\n                            }\n                        }\n                        if (deviceType === \"mobile\") {\n                            that.mobilePro = number;\n                            that.mobileProCan = numberCan;\n                        }\n                        break;\n                    case \"home\":\n                        if (deviceType === \"landline\") {\n                            that.phonePerso = number;\n                            that.phonePersoCan = numberCan;\n                        }\n                        if (deviceType === \"mobile\") {\n                            that.mobilePerso = number;\n                            that.mobilePersoCan = numberCan;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            });\n        }\n        else {\n            that.phoneNumbers = [];\n            that.phonePro = \"\";\n            that.phoneProCan = \"\";\n            that.phonePbx = \"\";\n            that.phoneInternalNumber = \"\";\n            that.pbxId = \"\";\n            that.voicemailNumber = \"\";\n            that.mobilePro = \"\";\n            that.mobileProCan = \"\";\n            that.phonePerso = \"\";\n            that.phonePersoCan = \"\";\n        }\n        // Compute display name\n        that.computeDisplayName();\n    }\n    isGuest() {\n        return this.guestMode;\n    }\n    ;\n}\nexports.Contact = Contact;\nmodule.exports = { 'Contact': Contact, 'AdminType': AdminType, 'NameUpdatePrio': NameUpdatePrio };\n//# sourceMappingURL=Contact.js.map"]},"metadata":{},"sourceType":"script"}