{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Utils_1 = require(\"../../common/Utils\");\n\nconst XMPPUtils_1 = require(\"../../common/XMPPUtils\");\n\nconst ErrorManager_1 = require(\"../../common/ErrorManager\");\n\nconst S2SServiceEventHandler_1 = require(\"./S2SServiceEventHandler\");\n\nconst express = require(\"express\");\n\nconst LOG_ID = \"S2S - \";\nlet S2SService = class S2SService {\n  constructor(_s2s, _im, _application, _eventEmitter, _logger, _proxy) {\n    this.serverURL = \"\"; //_s2s.protocol + \"://\" + _s2s.host + \":\" + _s2s.port + \"/websocket\";\n\n    this.hostCallback = _s2s.hostCallback;\n    this.locallistenningport = _s2s.locallistenningport;\n    this.eventEmitter = _eventEmitter;\n    this.version = \"0.1\";\n    this.jid_im = \"\";\n    this.jid_tel = \"\";\n    this.jid_password = \"\";\n    this.fullJid = \"\";\n    this.jid = \"\";\n    this.userId = \"\"; //        this.initialPresence = true;\n    //        this.xmppClient = null;\n\n    this.logger = _logger;\n    this.proxy = _proxy;\n    this.useS2S = false;\n    /*\n    this.shouldSendMessageToConnectedUser = _im.sendMessageToConnectedUser;\n    this.storeMessages = _im.storeMessages;\n    this.copyMessage = _im.copyMessage;\n    this.rateLimitPerHour = _im.rateLimitPerHour;\n    this.messagesDataStore = _im.messagesDataStore;\n    this.useXMPP = true;\n    this.timeBetweenXmppRequests = _xmpp.timeBetweenXmppRequests;\n    this.isReconnecting = false;\n    this.maxAttempts = 1;\n    this.idleTimer = null;\n    this.pingTimer = null;\n    this.forceClose = false;\n    this.applicationId = _application.appID;\n    // */\n\n    this.xmppUtils = XMPPUtils_1.XMPPUTils.getXMPPUtils();\n    this.generatedRandomId = this.xmppUtils.generateRandomID();\n    this.hash = Utils_1.makeId(8);\n    this.s2sEventHandler = new S2SServiceEventHandler_1.S2SServiceEventHandler(_im, _application, _eventEmitter, _logger, _s2s.hostCallback);\n    this.eventEmitter.on(\"evt_internal_ons2sready\", this.onS2SReady.bind(this));\n    this.app = express();\n    this.logger.log(\"internal\", LOG_ID + \"(S2SService) \", this.logger.colors.yellow(\"S2SService contructor.\"));\n  }\n\n  start(_options, _core) {\n    let that = this;\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      try {\n        that.options = _options;\n        that.useS2S = that.options.useS2S;\n        that._rest = _core._rest;\n        that._contacts = _core._contacts;\n        that._conversations = _core._conversations;\n        yield that.s2sEventHandler.start(_core);\n\n        if (that.useS2S) {\n          that.logger.log(\"debug\", LOG_ID + \"(start) S2S hostCallback used : \", that.hostCallback, \", on locallistenningport : \", that.locallistenningport); //that.logger.log(\"info\", LOG_ID + \"(start) S2S URL : \", that.serverUR);\n        } else {\n          that.logger.log(\"info\", LOG_ID + \"(start) S2S connection blocked by configuration\");\n          return resolve();\n        }\n\n        that.app.use(express.json());\n        that.app.listen(that.locallistenningport, function () {\n          that.logger.log(\"debug\", LOG_ID + \"Server is running on \" + that.locallistenningport + \" port\");\n        });\n        /* that.app.post( \"/message\", (req, res ) => {\n                 // console.log( \"received a message\")\n                 // console.log( req.body )\n                 // console.log( req.body.message.conversation_id )\n                 sendMessageToConv(req.body.message.conversation_id, \"J'ai bien recu ton message :\" + req.body.message.body )\n                 res.send(\"<html></html>\");\n             }\n         ) // */\n\n        that.app.all('*', (req, res) => __awaiter(this, void 0, void 0, function* () {\n          res.send('<h1>Hello World!</h1>');\n          that.logger.log(\"internal\", LOG_ID + \"*************************************************\");\n          that.logger.log(\"internal\", LOG_ID + \"received an event: \");\n          that.logger.log(\"internal\", LOG_ID + \"METHOD : \", req.method);\n          that.logger.log(\"internal\", LOG_ID + \"BASELURL : \", req.baseUrl);\n          that.logger.log(\"internal\", LOG_ID + \"ORIGINALURL : \", req.originalUrl);\n          that.logger.log(\"internal\", LOG_ID + \"BODY : \", req.body);\n          that.logger.log(\"internal\", LOG_ID + \"*************************************************\");\n          let body = req.body;\n          that.s2sEventHandler.handleS2SEvent(req);\n        }));\n        resolve();\n      } catch (err) {\n        return reject(err);\n      }\n    }));\n  }\n\n  signin(account, headers) {\n    let that = this;\n    return new Promise(resolve => __awaiter(this, void 0, void 0, function* () {\n      that.jid_im = account.jid_im;\n      that.jid_tel = account.jid_tel;\n      that.jid_password = account.jid_password;\n      that.userId = account.id;\n      that.fullJid = that.xmppUtils.generateRandomFullJidForNode(that.jid_im, that.generatedRandomId);\n      that.jid = account.jid_im;\n      that.logger.log(\"internal\", LOG_ID + \"(signin) account used, jid_im : \", that.jid_im, \", fullJid : \", that.fullJid);\n      yield that.deleteAllConnectionsS2S();\n      this.s2sEventHandler.setAccount(account);\n      resolve((yield that.loginS2S(that.hostCallback)));\n    }));\n  }\n\n  stop(forceStop = false) {\n    let that = this;\n    return new Promise(function (resolve) {\n      that.jid_im = \"\";\n      that.jid_tel = \"\";\n      that.jid_password = \"\";\n      that.fullJid = \"\";\n      that.userId = \"\";\n\n      if (that.useS2S || forceStop) {\n        resolve(that.deleteAllConnectionsS2S());\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  listConnectionsS2S() {\n    let that = this;\n    that.logger.log(\"internal\", LOG_ID + \"(listConnectionsS2S) will get all the cnx S2S\");\n    return that._rest.listConnectionsS2S().then(response => {\n      that.logger.log(\"debug\", LOG_ID + \"(listConnectionsS2S) worked.\"); //console.log( response.data )\n      //connectionInfo = response.data.data\n\n      that.logger.log(\"internal\", LOG_ID + \"(listConnectionsS2S) connexions S2S : \", response);\n      return response;\n    });\n  }\n\n  sendS2SPresence(obj) {\n    let that = this;\n    that.logger.log(\"internal\", LOG_ID + \"(sendS2SPresence) set S2S presence : \", obj);\n    return that._rest.sendS2SPresence(obj).then(response => {\n      that.logger.log(\"internal\", LOG_ID + \"(sendS2SPresence) worked.\"); //console.log( response.data )\n      //connectionInfo = response.data.data\n\n      that.logger.log(\"internal\", LOG_ID + \"(sendS2SPresence) connexions S2S : \", response);\n      return response;\n    });\n  }\n\n  deleteConnectionsS2S(connexions) {\n    let that = this;\n    that.logger.log(\"debug\", LOG_ID + \"(deleteConnectionsS2S) will del cnx S2S.\");\n    that.logger.log(\"info\", LOG_ID + \"(deleteConnectionsS2S) will del cnx S2S : \", connexions);\n\n    if (!connexions && !Array.isArray(connexions)) {\n      that.logger.log(\"warn\", LOG_ID + \"(deleteConnectionsS2S) bad or empty 'connexions' parameter\");\n      that.logger.log(\"internalerror\", LOG_ID + \"(deleteConnectionsS2S) bad or empty 'connexions' parameter : \", connexions);\n      return Promise.reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n    }\n\n    const requests = [];\n    return that._rest.deleteConnectionsS2S(connexions).then(response => {\n      that.logger.log(\"debug\", LOG_ID + \"(deleteConnectionsS2S) worked\"); //console.log( response.data )\n      //connectionInfo = response.data.data\n\n      that.logger.log(\"internal\", LOG_ID + \"(deleteConnectionsS2S) connexions S2S: \", response);\n      return response;\n    });\n  }\n\n  deleteAllConnectionsS2S() {\n    let that = this;\n    that.logger.log(\"internal\", LOG_ID + \"(deleteAllConnectionsS2S) \");\n    return that.listConnectionsS2S().then(response => {\n      that.logger.log(\"debug\", LOG_ID + \"(deleteAllConnectionsS2S) listConnectionsS2S worked.\");\n      that.logger.log(\"internal\", LOG_ID + \"(deleteAllConnectionsS2S) listConnectionsS2S result : \", response);\n      return that.deleteConnectionsS2S(response);\n    });\n  }\n\n  loginS2S(callback_url) {\n    let that = this;\n    let data = {\n      connection: {\n        /*resource: \"s2s_machin\",*/\n        callback_url\n      }\n    };\n    that.logger.log(\"debug\", LOG_ID + \"(loginS2S) will login  S2S.\");\n    that.logger.log(\"internal\", LOG_ID + \"(loginS2S) will login S2S : \", data);\n    return that._rest.loginS2S(callback_url).then(response => {\n      that.logger.log(\"debug\", LOG_ID + \"(loginS2S)  worked\"); //console.log( response.data )\n      //connectionInfo = response.data.data\n\n      that.logger.log(\"internal\", LOG_ID + \"(loginS2S) connexions S2S : \", response);\n      return Promise.resolve(response.data);\n    });\n  }\n\n  infoS2S(s2sConnectionId) {\n    let that = this;\n    that.logger.log(\"debug\", LOG_ID + \"(infoS2S)  will get info S2S\");\n    that.logger.log(\"internal\", LOG_ID + \"(infoS2S) will get info S2S\");\n    return that._rest.infoS2S(s2sConnectionId).then(response => {\n      that.logger.log(\"debug\", LOG_ID + \"(infoS2S) worked.\"); //console.log( response.data )\n      //connectionInfo = response.data.data\n\n      that.logger.log(\"internal\", LOG_ID + \"(infoS2S) S2S: \", response);\n      return response;\n    });\n  } // */\n\n  /** S2S EVENTS */\n\n\n  onS2SReady(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      that.logger.log(\"internal\", LOG_ID + \"(onS2SReady) S2S READY ENVENT: \", event);\n      yield this._rest.setS2SConnection(event.id);\n    });\n  }\n  /** S2S methods */\n\n\n  sendMessageInConversation(conversationId, msg) {\n    let that = this;\n    that.logger.log(\"internal\", LOG_ID + \"(sendMessageInConversation) will send msg S2S : \", msg, \" in conv id : \", conversationId);\n    return that._rest.sendS2SMessageInConversation(conversationId, msg).then(response => {\n      that.logger.log(\"debug\", LOG_ID + \"(sendMessageInConversation) worked.\"); //console.log( response.data )\n      //connectionInfo = response.data.data\n\n      that.logger.log(\"internal\", LOG_ID + \"(sendMessageInConversation) S2S response : \", response);\n      return response;\n    });\n  }\n\n  joinRoom(bubbleId) {\n    let that = this;\n    that.logger.log(\"internal\", LOG_ID + \"(joinRoom) will send presence to joinRoom S2S, bubbleId : \", bubbleId);\n    return that._rest.joinS2SRoom(bubbleId).then(response => {\n      that.logger.log(\"debug\", LOG_ID + \"(joinRoom) worked.\"); //console.log( response.data )\n      //connectionInfo = response.data.data\n\n      that.logger.log(\"internal\", LOG_ID + \"(joinRoom) S2S response : \", response);\n      return response;\n    });\n  }\n\n};\nS2SService = __decorate([Utils_1.logEntryExit(LOG_ID)], S2SService);\nexports.S2SService = S2SService;\nmodule.exports.S2SService = S2SService;","map":{"version":3,"sources":["../../../src/lib/connection/S2S/S2SService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils_1 = require(\"../../common/Utils\");\nconst XMPPUtils_1 = require(\"../../common/XMPPUtils\");\nconst ErrorManager_1 = require(\"../../common/ErrorManager\");\nconst S2SServiceEventHandler_1 = require(\"./S2SServiceEventHandler\");\nconst express = require(\"express\");\nconst LOG_ID = \"S2S - \";\nlet S2SService = class S2SService {\n    constructor(_s2s, _im, _application, _eventEmitter, _logger, _proxy) {\n        this.serverURL = \"\"; //_s2s.protocol + \"://\" + _s2s.host + \":\" + _s2s.port + \"/websocket\";\n        this.hostCallback = _s2s.hostCallback;\n        this.locallistenningport = _s2s.locallistenningport;\n        this.eventEmitter = _eventEmitter;\n        this.version = \"0.1\";\n        this.jid_im = \"\";\n        this.jid_tel = \"\";\n        this.jid_password = \"\";\n        this.fullJid = \"\";\n        this.jid = \"\";\n        this.userId = \"\";\n        //        this.initialPresence = true;\n        //        this.xmppClient = null;\n        this.logger = _logger;\n        this.proxy = _proxy;\n        this.useS2S = false;\n        /*\n        this.shouldSendMessageToConnectedUser = _im.sendMessageToConnectedUser;\n        this.storeMessages = _im.storeMessages;\n        this.copyMessage = _im.copyMessage;\n        this.rateLimitPerHour = _im.rateLimitPerHour;\n        this.messagesDataStore = _im.messagesDataStore;\n        this.useXMPP = true;\n        this.timeBetweenXmppRequests = _xmpp.timeBetweenXmppRequests;\n        this.isReconnecting = false;\n        this.maxAttempts = 1;\n        this.idleTimer = null;\n        this.pingTimer = null;\n        this.forceClose = false;\n        this.applicationId = _application.appID;\n// */\n        this.xmppUtils = XMPPUtils_1.XMPPUTils.getXMPPUtils();\n        this.generatedRandomId = this.xmppUtils.generateRandomID();\n        this.hash = Utils_1.makeId(8);\n        this.s2sEventHandler = new S2SServiceEventHandler_1.S2SServiceEventHandler(_im, _application, _eventEmitter, _logger, _s2s.hostCallback);\n        this.eventEmitter.on(\"evt_internal_ons2sready\", this.onS2SReady.bind(this));\n        this.app = express();\n        this.logger.log(\"internal\", LOG_ID + \"(S2SService) \", this.logger.colors.yellow(\"S2SService contructor.\"));\n    }\n    start(_options, _core) {\n        let that = this;\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                that.options = _options;\n                that.useS2S = that.options.useS2S;\n                that._rest = _core._rest;\n                that._contacts = _core._contacts;\n                that._conversations = _core._conversations;\n                yield that.s2sEventHandler.start(_core);\n                if (that.useS2S) {\n                    that.logger.log(\"debug\", LOG_ID + \"(start) S2S hostCallback used : \", that.hostCallback, \", on locallistenningport : \", that.locallistenningport);\n                    //that.logger.log(\"info\", LOG_ID + \"(start) S2S URL : \", that.serverUR);\n                }\n                else {\n                    that.logger.log(\"info\", LOG_ID + \"(start) S2S connection blocked by configuration\");\n                    return resolve();\n                }\n                that.app.use(express.json());\n                that.app.listen(that.locallistenningport, function () {\n                    that.logger.log(\"debug\", LOG_ID + \"Server is running on \" + that.locallistenningport + \" port\");\n                });\n                /* that.app.post( \"/message\", (req, res ) => {\n                         // console.log( \"received a message\")\n                         // console.log( req.body )\n                         // console.log( req.body.message.conversation_id )\n                         sendMessageToConv(req.body.message.conversation_id, \"J'ai bien recu ton message :\" + req.body.message.body )\n                         res.send(\"<html></html>\");\n                     }\n                 ) // */\n                that.app.all('*', (req, res) => __awaiter(this, void 0, void 0, function* () {\n                    res.send('<h1>Hello World!</h1>');\n                    that.logger.log(\"internal\", LOG_ID + \"*************************************************\");\n                    that.logger.log(\"internal\", LOG_ID + \"received an event: \");\n                    that.logger.log(\"internal\", LOG_ID + \"METHOD : \", req.method);\n                    that.logger.log(\"internal\", LOG_ID + \"BASELURL : \", req.baseUrl);\n                    that.logger.log(\"internal\", LOG_ID + \"ORIGINALURL : \", req.originalUrl);\n                    that.logger.log(\"internal\", LOG_ID + \"BODY : \", req.body);\n                    that.logger.log(\"internal\", LOG_ID + \"*************************************************\");\n                    let body = req.body;\n                    that.s2sEventHandler.handleS2SEvent(req);\n                }));\n                resolve();\n            }\n            catch (err) {\n                return reject(err);\n            }\n        }));\n    }\n    signin(account, headers) {\n        let that = this;\n        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n            that.jid_im = account.jid_im;\n            that.jid_tel = account.jid_tel;\n            that.jid_password = account.jid_password;\n            that.userId = account.id;\n            that.fullJid = that.xmppUtils.generateRandomFullJidForNode(that.jid_im, that.generatedRandomId);\n            that.jid = account.jid_im;\n            that.logger.log(\"internal\", LOG_ID + \"(signin) account used, jid_im : \", that.jid_im, \", fullJid : \", that.fullJid);\n            yield that.deleteAllConnectionsS2S();\n            this.s2sEventHandler.setAccount(account);\n            resolve(yield that.loginS2S(that.hostCallback));\n        }));\n    }\n    stop(forceStop = false) {\n        let that = this;\n        return new Promise(function (resolve) {\n            that.jid_im = \"\";\n            that.jid_tel = \"\";\n            that.jid_password = \"\";\n            that.fullJid = \"\";\n            that.userId = \"\";\n            if (that.useS2S || forceStop) {\n                resolve(that.deleteAllConnectionsS2S());\n            }\n            else {\n                resolve();\n            }\n        });\n    }\n    listConnectionsS2S() {\n        let that = this;\n        that.logger.log(\"internal\", LOG_ID + \"(listConnectionsS2S) will get all the cnx S2S\");\n        return that._rest.listConnectionsS2S()\n            .then(response => {\n            that.logger.log(\"debug\", LOG_ID + \"(listConnectionsS2S) worked.\");\n            //console.log( response.data )\n            //connectionInfo = response.data.data\n            that.logger.log(\"internal\", LOG_ID + \"(listConnectionsS2S) connexions S2S : \", response);\n            return response;\n        });\n    }\n    sendS2SPresence(obj) {\n        let that = this;\n        that.logger.log(\"internal\", LOG_ID + \"(sendS2SPresence) set S2S presence : \", obj);\n        return that._rest.sendS2SPresence(obj)\n            .then(response => {\n            that.logger.log(\"internal\", LOG_ID + \"(sendS2SPresence) worked.\");\n            //console.log( response.data )\n            //connectionInfo = response.data.data\n            that.logger.log(\"internal\", LOG_ID + \"(sendS2SPresence) connexions S2S : \", response);\n            return response;\n        });\n    }\n    deleteConnectionsS2S(connexions) {\n        let that = this;\n        that.logger.log(\"debug\", LOG_ID + \"(deleteConnectionsS2S) will del cnx S2S.\");\n        that.logger.log(\"info\", LOG_ID + \"(deleteConnectionsS2S) will del cnx S2S : \", connexions);\n        if (!connexions && !Array.isArray(connexions)) {\n            that.logger.log(\"warn\", LOG_ID + \"(deleteConnectionsS2S) bad or empty 'connexions' parameter\");\n            that.logger.log(\"internalerror\", LOG_ID + \"(deleteConnectionsS2S) bad or empty 'connexions' parameter : \", connexions);\n            return Promise.reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n        }\n        const requests = [];\n        return that._rest.deleteConnectionsS2S(connexions)\n            .then(response => {\n            that.logger.log(\"debug\", LOG_ID + \"(deleteConnectionsS2S) worked\");\n            //console.log( response.data )\n            //connectionInfo = response.data.data\n            that.logger.log(\"internal\", LOG_ID + \"(deleteConnectionsS2S) connexions S2S: \", response);\n            return response;\n        });\n    }\n    deleteAllConnectionsS2S() {\n        let that = this;\n        that.logger.log(\"internal\", LOG_ID + \"(deleteAllConnectionsS2S) \");\n        return that.listConnectionsS2S().then(response => {\n            that.logger.log(\"debug\", LOG_ID + \"(deleteAllConnectionsS2S) listConnectionsS2S worked.\");\n            that.logger.log(\"internal\", LOG_ID + \"(deleteAllConnectionsS2S) listConnectionsS2S result : \", response);\n            return that.deleteConnectionsS2S(response);\n        });\n    }\n    loginS2S(callback_url) {\n        let that = this;\n        let data = { connection: { /*resource: \"s2s_machin\",*/ callback_url } };\n        that.logger.log(\"debug\", LOG_ID + \"(loginS2S) will login  S2S.\");\n        that.logger.log(\"internal\", LOG_ID + \"(loginS2S) will login S2S : \", data);\n        return that._rest.loginS2S(callback_url)\n            .then((response) => {\n            that.logger.log(\"debug\", LOG_ID + \"(loginS2S)  worked\");\n            //console.log( response.data )\n            //connectionInfo = response.data.data\n            that.logger.log(\"internal\", LOG_ID + \"(loginS2S) connexions S2S : \", response);\n            return Promise.resolve(response.data);\n        });\n    }\n    infoS2S(s2sConnectionId) {\n        let that = this;\n        that.logger.log(\"debug\", LOG_ID + \"(infoS2S)  will get info S2S\");\n        that.logger.log(\"internal\", LOG_ID + \"(infoS2S) will get info S2S\");\n        return that._rest.infoS2S(s2sConnectionId)\n            .then(response => {\n            that.logger.log(\"debug\", LOG_ID + \"(infoS2S) worked.\");\n            //console.log( response.data )\n            //connectionInfo = response.data.data\n            that.logger.log(\"internal\", LOG_ID + \"(infoS2S) S2S: \", response);\n            return response;\n        });\n    }\n    // */\n    /** S2S EVENTS */\n    onS2SReady(event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            that.logger.log(\"internal\", LOG_ID + \"(onS2SReady) S2S READY ENVENT: \", event);\n            yield this._rest.setS2SConnection(event.id);\n        });\n    }\n    /** S2S methods */\n    sendMessageInConversation(conversationId, msg) {\n        let that = this;\n        that.logger.log(\"internal\", LOG_ID + \"(sendMessageInConversation) will send msg S2S : \", msg, \" in conv id : \", conversationId);\n        return that._rest.sendS2SMessageInConversation(conversationId, msg).then(response => {\n            that.logger.log(\"debug\", LOG_ID + \"(sendMessageInConversation) worked.\");\n            //console.log( response.data )\n            //connectionInfo = response.data.data\n            that.logger.log(\"internal\", LOG_ID + \"(sendMessageInConversation) S2S response : \", response);\n            return response;\n        });\n    }\n    joinRoom(bubbleId) {\n        let that = this;\n        that.logger.log(\"internal\", LOG_ID + \"(joinRoom) will send presence to joinRoom S2S, bubbleId : \", bubbleId);\n        return that._rest.joinS2SRoom(bubbleId).then(response => {\n            that.logger.log(\"debug\", LOG_ID + \"(joinRoom) worked.\");\n            //console.log( response.data )\n            //connectionInfo = response.data.data\n            that.logger.log(\"internal\", LOG_ID + \"(joinRoom) S2S response : \", response);\n            return response;\n        });\n    }\n};\nS2SService = __decorate([\n    Utils_1.logEntryExit(LOG_ID)\n], S2SService);\nexports.S2SService = S2SService;\nmodule.exports.S2SService = S2SService;\n//# sourceMappingURL=S2SService.js.map"]},"metadata":{},"sourceType":"script"}