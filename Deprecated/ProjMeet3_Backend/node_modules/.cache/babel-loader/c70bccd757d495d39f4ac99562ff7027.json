{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass Call {\n  /**\r\n   * @this Call\r\n   */\n  constructor(status, id, type, contact, deviceType) {\n    /**\r\n     * @public\r\n     * @property {Object} status The status of the call (e.g. dialing, active, releasing...)\r\n     * @readonly\r\n     */\n    this.status = status;\n    /**\r\n     * @public\r\n     * @property {string} id the id of the call\r\n     * @readonly\r\n     */\n\n    this.id = id;\n    /**\r\n     * @public\r\n     * @property {string} conversationId The reference of the conversation\r\n     * @readonly\r\n     */\n\n    this.conversationId = null;\n    /**\r\n     * @private\r\n     * @property {string} connectionId ??\r\n     * @readonly\r\n     */\n\n    this.connectionId = null;\n    /**\r\n     * @public\r\n     * @property {Object} type The type of the call (e.g. webRTC or Telephony)\r\n     * @readonly\r\n     */\n\n    this.type = type;\n    /**\r\n     * @private\r\n     * @property {Boolean} isVm Indicates whether it is a call to user's own voicemail\r\n     * @readonly\r\n     */\n\n    this.isVm = false;\n    /**\r\n     * @public\r\n     * @property {Contact} contact The reference of the contact engaged in this call\r\n     * @readonly\r\n     */\n\n    this.contact = contact;\n    /**\r\n     * @public\r\n     * @property {Number} remoteMedia The media used by the recipient (e.g. audio, video, sharing, phone)\r\n     * @readonly\r\n     */\n\n    this.remoteMedia = 0;\n    /**\r\n     * @public\r\n     * @property {Number} localMedia The media used by the user (e.g. audio, video, sharing, phone)\r\n     * @readonly\r\n     */\n\n    this.localMedia = 0;\n    /**\r\n     * @public\r\n     * @property {Boolean} isEscalated True if the call has been escalated to sharing or video (only relevant for WebRTC calls)\r\n     * @readonly\r\n     */\n\n    this.isEscalated = false;\n    /**\r\n     * @public\r\n     * @property {Date} startDate The date when the call has been started\r\n     * @readonly\r\n     */\n\n    this.startDate = new Date();\n    /**\r\n     * @public\r\n     * @property {Boolean} isInitiator True if the user is the caller (false if he's the called)\r\n     * @readonly\r\n     */\n\n    this.isInitiator = false;\n    /**\r\n     * @public\r\n     * @property {Contact[]} participants The list of participants in the call (conference)\r\n     * @readonly\r\n     */\n\n    this.participants = null;\n    /**\r\n     * @public\r\n     * @property {Boolean} isRemoteVideoMuted True if the webRTC video has been muted by the recipient (only relevant for WebRTC calls)\r\n     * @readonly\r\n     */\n\n    this.isRemoteVideoMuted = false;\n    /**\r\n     * @public\r\n     * @since 1.20\r\n     * @property {Boolean} isConference True if the call is a conferenceCall\r\n     * @readonly\r\n     */\n\n    this.isConference = false;\n    /**\r\n     * @public\r\n     * @property {String} avatars array of call avatar sources\r\n     * @readonly\r\n     */\n\n    this.avatars = contact && contact.avatar ? [this.contact.avatar.src] : [];\n    /**\r\n     * @public\r\n     * @property {Object}  currentCalled contains current called number and contact\r\n     * @readonly\r\n     */\n\n    this.currentCalled = {\n      contactPhoneNumber: \"\",\n      contact: null,\n      participantsPhoneNumbers: [],\n      participants: []\n    };\n    /**\r\n     * @public\r\n     * @property {String} deviceType type of the RCC phoneset (MAIN, SECONDARY, ...).\r\n     * @readonly\r\n     */\n\n    this.deviceType = deviceType;\n    /**\r\n     * @public\r\n     * @property {String} deviceState state of the RCC phoneset.\r\n     * @readonly\r\n     */\n\n    this.deviceState = undefined;\n    /**\r\n     * @public\r\n     * @property {String} cause of the event of the call.\r\n     * @readonly\r\n     */\n\n    this.cause = undefined;\n    /**\r\n     * @public\r\n     * @property {String} jid of the called party.\r\n     * @readonly\r\n     */\n\n    this.jid = undefined;\n    /**\r\n     * @public\r\n     * @property {String} phonenumber called.\r\n     * @readonly\r\n     */\n\n    this.phoneNumber = undefined;\n    /**\r\n     * @public\r\n     * @property {String} globalCallId a global id when the call go thrue PBX Node.\r\n     * @readonly\r\n     */\n\n    this.globalCallId = undefined;\n    /**\r\n     * @public\r\n     * @property {String} correlatorData Data about a call.\r\n     * @readonly\r\n     */\n\n    this.correlatorData = undefined;\n  } // Static factories\n\n\n  static create(status, id, type, contact, deviceType) {\n    return new Call(status, id, type, contact, deviceType);\n  }\n\n  getCause() {\n    return this.cause;\n  }\n\n  setCause(value) {\n    this.cause = value;\n  }\n\n  getDeviceState() {\n    return this.deviceState;\n  }\n\n  setDeviceState(value) {\n    this.deviceState = value;\n  }\n\n  getDeviceType() {\n    return this.deviceType;\n  }\n\n  setDeviceType(value) {\n    this.deviceType = value;\n  } // Public methods\n\n\n  setCallId(id) {\n    this.id = id;\n  }\n\n  setConversationId(id) {\n    this.conversationId = id;\n  }\n\n  setConnectionId(connectionId) {\n    this.connectionId = connectionId;\n    this.id = Call.getIdFromConnectionId(connectionId);\n  }\n\n  setStatus(status) {\n    this.status = status;\n  }\n\n  setType(type) {\n    this.type = type;\n  }\n\n  setIsVm(isVM) {\n    this.isVm = isVM;\n  }\n\n  setContact(contact) {\n    this.contact = contact;\n    this.avatars = [this.contact.avatar.src];\n  }\n\n  setParticipants(participants) {\n    this.participants = participants;\n    this.avatars = [];\n    var that = this;\n    this.participants.forEach(function (participant) {\n      that.avatars.push(participant.avatar.src);\n    });\n  }\n\n  getGlobalCallId() {\n    return this.globalCallId;\n  }\n\n  setGlobalCallId(value) {\n    this.globalCallId = value;\n  }\n\n  getCurrentCalled() {\n    return this.currentCalled;\n  }\n\n  setCurrentCalled(currentCalled) {\n    if (!currentCalled) {\n      this.currentCalled.contactPhoneNumber = \"\";\n      this.currentCalled.contact = null;\n      this.currentCalled.participantsPhoneNumbers = null;\n      this.currentCalled.participants = null;\n    } else {\n      if (this.contact && this.contact._id) {\n        //simple call case\n        this.currentCalled.contactPhoneNumber = currentCalled.contactPhoneNumber && currentCalled.contactPhoneNumber !== \"\" ? currentCalled.contactPhoneNumber : \"\";\n        this.currentCalled.contact = currentCalled.contact ? currentCalled.contact : null;\n        this.currentCalled.participantsPhoneNumbers = null;\n        this.currentCalled.participants = null;\n      } else {\n        //conf case\n        this.currentCalled.contactPhoneNumber = \"\";\n        this.currentCalled.contact = null;\n        this.currentCalled.participantsPhoneNumbers = currentCalled.participantsPhoneNumbers && currentCalled.participantsPhoneNumbers.length > 0 ? currentCalled.participantsPhoneNumbers : null;\n        this.currentCalled.participants = currentCalled.participants && currentCalled.participants.length > 0 ? currentCalled.participants : null;\n\n        if (this.currentCalled.participantsPhoneNumbers && this.currentCalled.participantsPhoneNumbers.length > 0) {}\n      }\n    }\n  }\n\n  setCurrentCalledContactNumber(number) {\n    this.currentCalled.contactPhoneNumber = number;\n  } // Override toString method\n\n\n  toString() {\n    return \"(type:\" + this.type.value + \", id:\" + this.id + \", status:\" + this.status.value + (this.vm ? \"(voicemail))\" : \")\");\n  }\n  /*********************************************************/\n\n  /**                  TELEPHONY STUFF                     */\n\n  /*********************************************************/\n\n\n  static getIdFromConnectionId(connectionId) {\n    if (!connectionId) return null;\n    return connectionId.split(\"#\")[0] + \"\";\n  }\n\n  static getDeviceIdFromConnectionId(connectionId) {\n    if (!connectionId) return null;\n    return connectionId.split(\"#\")[1] + \"\";\n  }\n  /**\r\n   * @function\r\n   * @public\r\n   * @name updateCall\r\n   * @description\r\n   * This method is used to update a Call from data object\r\n   */\n\n\n  updateCall(data) {\n    let that = this;\n\n    if (data) {\n      let callproperties = Object.getOwnPropertyNames(that);\n      Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\n        if (callproperties.find(el => {\n          return val == el;\n        })) {\n          that[val] = data[val];\n        } else {\n          console.log(\"WARNING : One property of the parameter of updateCall method is not present in the Call class can not update Call with : \", val);\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\r\n   * @function\r\n   * @public\r\n   * @name CallFactory\r\n   * @description\r\n   * This method is used to create a Call from data object\r\n   */\n\n\n  static CallFactory() {\n    return data => {\n      let call = Call.create(data.status, data.id, data.type, data.contact, data.deviceType);\n\n      if (data) {\n        let channelproperties = Object.getOwnPropertyNames(call);\n        Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\n          if (!channelproperties.find(el => {\n            return val == el;\n          })) {\n            console.log(\"WARNING : One property of the parameter of CallFactory method is not present in the Call class : \");\n          }\n        });\n      }\n\n      call.updateCall(data);\n      return call;\n    };\n  }\n\n}\n\nexports.Call = Call;\n/**\r\n * @public\r\n * @readonly\r\n * @enum {Object}\r\n */\n\nCall.Status = {\n  /** Call cleared */\n  UNKNOWN: {\n    key: 0,\n    value: \"Unknown\"\n  },\n\n  /** In dialing */\n  DIALING: {\n    key: 1,\n    value: \"dialing\"\n  },\n\n  /** In queue (user side) */\n  QUEUED_INCOMING: {\n    key: 2,\n    value: \"queuedIncoming\"\n  },\n\n  /** In queue (recipient side) */\n  QUEUED_OUTGOING: {\n    key: 10,\n    value: \"queuedOutGoing\"\n  },\n\n  /** Call in ringing (user side) */\n  RINGING_INCOMING: {\n    key: 3,\n    value: \"incomingCall\"\n  },\n\n  /** Call in ringing (recipient side */\n  RINGING_OUTGOING: {\n    key: 4,\n    value: \"ringingOutgoing\"\n  },\n\n  /** Active call */\n  ACTIVE: {\n    key: 5,\n    value: \"active\"\n  },\n\n  /** Call in hold */\n  HOLD: {\n    key: 6,\n    value: \"held\"\n  },\n\n  /** Call put on hold */\n  PUT_ON_HOLD: {\n    key: 7,\n    value: \"putOnHold\"\n  },\n\n  /** Call is clearing */\n  RELEASING: {\n    key: 8,\n    value: \"releasing\"\n  },\n\n  /** call is answering */\n  ANSWERING: {\n    key: 9,\n    value: \"answering\"\n  },\n\n  /** trying to reconnect */\n  CONNECTING: {\n    key: 12,\n    value: \"connecting\"\n  },\n\n  /** call in error */\n  ERROR: {\n    key: 11,\n    value: \"error\"\n  }\n};\n/**\r\n * @public\r\n * @enum {Object}\r\n * @readonly\r\n */\n\nCall.Type = {\n  /** WebRTC call */\n  WEBRTC: {\n    key: 1,\n    value: \"Video\"\n  },\n\n  /** Telephony call (from PBX) */\n  PHONE: {\n    key: 2,\n    value: \"Phone\"\n  }\n};\n/**\r\n * @public\r\n * @enum {Object}\r\n * @readonly\r\n */\n\nCall.Media = {\n  /** WebRTC audio call */\n  AUDIO: 1,\n\n  /** WebRTC audio and video call */\n  VIDEO: 2,\n\n  /** Telephony call (from pbx) */\n  PHONE: 4,\n\n  /** WebRTC Screen sharing call */\n  SHARING: 8\n}; //module.exports = Call;\n\nmodule.exports.Call = Call;","map":{"version":3,"sources":["../../../src/lib/common/models/Call.ts"],"names":[],"mappings":"AAAA;;;;;;AAMA,MAAM,IAAN,CAAU;AAsCN;;;AAGA,EAAA,WAAA,CAAY,MAAZ,EAAoB,EAApB,EAAwB,IAAxB,EAA8B,OAA9B,EAAuC,UAAvC,EAAiD;AAC7C;;;;;AAKA,SAAK,MAAL,GAAc,MAAd;AAEA;;;;;;AAKA,SAAK,EAAL,GAAU,EAAV;AAEA;;;;;;AAKA,SAAK,cAAL,GAAsB,IAAtB;AAEA;;;;;;AAKA,SAAK,YAAL,GAAoB,IAApB;AAEA;;;;;;AAKA,SAAK,IAAL,GAAY,IAAZ;AAEA;;;;;;AAKA,SAAK,IAAL,GAAY,KAAZ;AAEA;;;;;;AAKA,SAAK,OAAL,GAAe,OAAf;AAEA;;;;;;AAKA,SAAK,WAAL,GAAmB,CAAnB;AAEA;;;;;;AAKA,SAAK,UAAL,GAAkB,CAAlB;AAEA;;;;;;AAKA,SAAK,WAAL,GAAmB,KAAnB;AAEA;;;;;;AAKA,SAAK,SAAL,GAAiB,IAAI,IAAJ,EAAjB;AAEA;;;;;;AAKA,SAAK,WAAL,GAAmB,KAAnB;AAEA;;;;;;AAKA,SAAK,YAAL,GAAoB,IAApB;AAEA;;;;;;AAKA,SAAK,kBAAL,GAA0B,KAA1B;AAEA;;;;;;;AAMA,SAAK,YAAL,GAAoB,KAApB;AAEA;;;;;;AAKA,SAAK,OAAL,GAAgB,OAAO,IAAI,OAAO,CAAC,MAApB,GAA8B,CAAC,KAAK,OAAL,CAAa,MAAb,CAAoB,GAArB,CAA9B,GAA0D,EAAzE;AAEA;;;;;;AAKA,SAAK,aAAL,GAAqB;AACjB,MAAA,kBAAkB,EAAE,EADH;AAEjB,MAAA,OAAO,EAAE,IAFQ;AAGjB,MAAA,wBAAwB,EAAE,EAHT;AAIjB,MAAA,YAAY,EAAE;AAJG,KAArB;AAOA;;;;;;AAKA,SAAK,UAAL,GAAkB,UAAlB;AAEA;;;;;;AAKA,SAAK,WAAL,GAAmB,SAAnB;AAEA;;;;;;AAKA,SAAK,KAAL,GAAa,SAAb;AAEA;;;;;;AAKA,SAAK,GAAL,GAAW,SAAX;AAEA;;;;;;AAKA,SAAK,WAAL,GAAmB,SAAnB;AAEA;;;;;;AAKA,SAAK,YAAL,GAAoB,SAApB;AAEA;;;;;;AAKA,SAAK,cAAL,GAAsB,SAAtB;AACH,GAvNK,CAiCN;;;AACA,SAAO,MAAP,CAAe,MAAf,EAAuB,EAAvB,EAA2B,IAA3B,EAAiC,OAAjC,EAA0C,UAA1C,EAAoD;AAChD,WAAO,IAAI,IAAJ,CAAS,MAAT,EAAiB,EAAjB,EAAqB,IAArB,EAA2B,OAA3B,EAAoC,UAApC,CAAP;AACH;;AAqLD,EAAA,QAAQ,GAAA;AACJ,WAAO,KAAK,KAAZ;AACH;;AAED,EAAA,QAAQ,CAAC,KAAD,EAAM;AACV,SAAK,KAAL,GAAa,KAAb;AACH;;AAED,EAAA,cAAc,GAAA;AACV,WAAO,KAAK,WAAZ;AACH;;AAED,EAAA,cAAc,CAAC,KAAD,EAAM;AAChB,SAAK,WAAL,GAAmB,KAAnB;AACH;;AACD,EAAA,aAAa,GAAA;AACT,WAAO,KAAK,UAAZ;AACH;;AAED,EAAA,aAAa,CAAC,KAAD,EAAW;AACpB,SAAK,UAAL,GAAkB,KAAlB;AACH,GA9OK,CAgPN;;;AACA,EAAA,SAAS,CAAE,EAAF,EAAI;AACT,SAAK,EAAL,GAAU,EAAV;AACH;;AAED,EAAA,iBAAiB,CAAE,EAAF,EAAI;AACjB,SAAK,cAAL,GAAsB,EAAtB;AACH;;AAED,EAAA,eAAe,CAAE,YAAF,EAAc;AACzB,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,EAAL,GAAU,IAAI,CAAC,qBAAL,CAA2B,YAA3B,CAAV;AACH;;AAED,EAAA,SAAS,CAAE,MAAF,EAAQ;AACb,SAAK,MAAL,GAAc,MAAd;AACH;;AAED,EAAA,OAAO,CAAE,IAAF,EAAM;AACT,SAAK,IAAL,GAAY,IAAZ;AACH;;AAED,EAAA,OAAO,CAAE,IAAF,EAAM;AACT,SAAK,IAAL,GAAY,IAAZ;AACH;;AAED,EAAA,UAAU,CAAE,OAAF,EAAS;AACf,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,OAAL,GAAe,CAAC,KAAK,OAAL,CAAa,MAAb,CAAoB,GAArB,CAAf;AACH;;AAED,EAAA,eAAe,CAAE,YAAF,EAAc;AACzB,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,OAAL,GAAe,EAAf;AACA,QAAI,IAAI,GAAG,IAAX;AACA,SAAK,YAAL,CAAkB,OAAlB,CAA0B,UAAU,WAAV,EAAqB;AAC3C,MAAA,IAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,WAAW,CAAC,MAAZ,CAAmB,GAArC;AACH,KAFD;AAGH;;AAED,EAAA,eAAe,GAAA;AACX,WAAO,KAAK,YAAZ;AACH;;AAED,EAAA,eAAe,CAAC,KAAD,EAAiB;AAC5B,SAAK,YAAL,GAAoB,KAApB;AACH;;AAED,EAAA,gBAAgB,GAAA;AACZ,WAAO,KAAK,aAAZ;AACH;;AAED,EAAA,gBAAgB,CAAE,aAAF,EAAe;AAC3B,QAAI,CAAC,aAAL,EAAoB;AAChB,WAAK,aAAL,CAAmB,kBAAnB,GAAwC,EAAxC;AACA,WAAK,aAAL,CAAmB,OAAnB,GAA6B,IAA7B;AACA,WAAK,aAAL,CAAmB,wBAAnB,GAA8C,IAA9C;AACA,WAAK,aAAL,CAAmB,YAAnB,GAAkC,IAAlC;AACH,KALD,MAKO;AACH,UAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,GAAjC,EAAsC;AAAC;AACnC,aAAK,aAAL,CAAmB,kBAAnB,GAAyC,aAAa,CAAC,kBAAd,IAAoC,aAAa,CAAC,kBAAd,KAAqC,EAA1E,GAAgF,aAAa,CAAC,kBAA9F,GAAmH,EAA3J;AACA,aAAK,aAAL,CAAmB,OAAnB,GAA6B,aAAa,CAAC,OAAd,GAAwB,aAAa,CAAC,OAAtC,GAAgD,IAA7E;AACA,aAAK,aAAL,CAAmB,wBAAnB,GAA8C,IAA9C;AACA,aAAK,aAAL,CAAmB,YAAnB,GAAkC,IAAlC;AAEH,OAND,MAMO;AAAC;AACJ,aAAK,aAAL,CAAmB,kBAAnB,GAAwC,EAAxC;AACA,aAAK,aAAL,CAAmB,OAAnB,GAA6B,IAA7B;AACA,aAAK,aAAL,CAAmB,wBAAnB,GAA+C,aAAa,CAAC,wBAAd,IAA0C,aAAa,CAAC,wBAAd,CAAuC,MAAvC,GAAgD,CAA3F,GAAgG,aAAa,CAAC,wBAA9G,GAAyI,IAAvL;AACA,aAAK,aAAL,CAAmB,YAAnB,GAAmC,aAAa,CAAC,YAAd,IAA8B,aAAa,CAAC,YAAd,CAA2B,MAA3B,GAAoC,CAAnE,GAAwE,aAAa,CAAC,YAAtF,GAAqG,IAAvI;;AACA,YAAI,KAAK,aAAL,CAAmB,wBAAnB,IAA+C,KAAK,aAAL,CAAmB,wBAAnB,CAA4C,MAA5C,GAAqD,CAAxG,EAA2G,CAC1G;AACJ;AACJ;AACJ;;AAED,EAAA,6BAA6B,CAAE,MAAF,EAAQ;AACjC,SAAK,aAAL,CAAmB,kBAAnB,GAAwC,MAAxC;AACH,GA9TK,CAgUN;;;AACA,EAAA,QAAQ,GAAA;AACJ,WAAO,WAAW,KAAK,IAAL,CAAU,KAArB,GAA6B,OAA7B,GAAuC,KAAK,EAA5C,GAAiD,WAAjD,GAA+D,KAAK,MAAL,CAAY,KAA3E,IAAoF,KAAK,EAAL,GAAU,cAAV,GAA2B,GAA/G,CAAP;AACH;AAED;;AACA;;AACA;;;AACA,SAAO,qBAAP,CAA6B,YAA7B,EAAyC;AACrC,QAAI,CAAC,YAAL,EAAmB,OAAO,IAAP;AACnB,WAAO,YAAY,CAAC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,IAA6B,EAApC;AACH;;AAED,SAAO,2BAAP,CAAmC,YAAnC,EAA+C;AAC3C,QAAI,CAAC,YAAL,EAAmB,OAAO,IAAP;AACnB,WAAO,YAAY,CAAC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,IAA6B,EAApC;AACH;AAED;;;;;;;;;AAOA,EAAA,UAAU,CAAC,IAAD,EAAK;AACX,QAAI,IAAI,GAAG,IAAX;;AACA,QAAI,IAAJ,EAAU;AAEN,UAAI,cAAc,GAAG,MAAM,CAAC,mBAAP,CAA2B,IAA3B,CAArB;AACA,MAAA,MAAM,CAAC,mBAAP,CAA2B,IAA3B,EAAiC,OAAjC,CACI,CAAC,GAAD,EAAM,GAAN,EAAW,KAAX,KAAoB;AAChB,YAAI,cAAc,CAAC,IAAf,CAAqB,EAAD,IAAO;AAAG,iBAAO,GAAG,IAAI,EAAd;AAAmB,SAAjD,CAAJ,EAAwD;AACpD,UAAA,IAAI,CAAC,GAAD,CAAJ,GAAY,IAAI,CAAC,GAAD,CAAhB;AACH,SAFD,MAEO;AACH,UAAA,OAAO,CAAC,GAAR,CAAY,2HAAZ,EAAyI,GAAzI;AACH;AACJ,OAPL;AAQH;;AAED,WAAO,IAAP;AACH;AAGD;;;;;;;;;AAOO,SAAO,WAAP,GAAkB;AACrB,WAAQ,IAAD,IAAoB;AACvB,UAAI,IAAI,GAAG,IAAI,CAAC,MAAL,CAAY,IAAI,CAAC,MAAjB,EAAyB,IAAI,CAAC,EAA9B,EAAkC,IAAI,CAAC,IAAvC,EAA6C,IAAI,CAAC,OAAlD,EAA2D,IAAI,CAAC,UAAhE,CAAX;;AAEA,UAAI,IAAJ,EAAU;AACN,YAAI,iBAAiB,GAAG,MAAM,CAAC,mBAAP,CAA2B,IAA3B,CAAxB;AACA,QAAA,MAAM,CAAC,mBAAP,CAA2B,IAA3B,EAAiC,OAAjC,CACI,CAAC,GAAD,EAAM,GAAN,EAAW,KAAX,KAAoB;AAChB,cAAI,CAAC,iBAAiB,CAAC,IAAlB,CAAwB,EAAD,IAAO;AAAG,mBAAO,GAAG,IAAI,EAAd;AAAmB,WAApD,CAAL,EAA4D;AACxD,YAAA,OAAO,CAAC,GAAR,CAAY,mGAAZ;AACH;AACJ,SALL;AAMH;;AAED,MAAA,IAAI,CAAC,UAAL,CAAgB,IAAhB;AAEA,aAAO,IAAP;AACH,KAhBD;AAiBH;;AArYK;;AAwfF,OAAA,CAAA,IAAA,GAAA,IAAA;AA/GR;;;;;;AAKA,IAAI,CAAC,MAAL,GAAc;AACV;AACA,EAAA,OAAO,EAAE;AACL,IAAA,GAAG,EAAE,CADA;AAEL,IAAA,KAAK,EAAE;AAFF,GAFC;;AAMV;AACA,EAAA,OAAO,EAAE;AACL,IAAA,GAAG,EAAE,CADA;AAEL,IAAA,KAAK,EAAE;AAFF,GAPC;;AAWV;AACA,EAAA,eAAe,EAAE;AACb,IAAA,GAAG,EAAE,CADQ;AAEb,IAAA,KAAK,EAAE;AAFM,GAZP;;AAgBV;AACA,EAAA,eAAe,EAAE;AACb,IAAA,GAAG,EAAE,EADQ;AAEb,IAAA,KAAK,EAAE;AAFM,GAjBP;;AAqBV;AACA,EAAA,gBAAgB,EAAE;AACd,IAAA,GAAG,EAAE,CADS;AAEd,IAAA,KAAK,EAAE;AAFO,GAtBR;;AA0BV;AACA,EAAA,gBAAgB,EAAE;AACd,IAAA,GAAG,EAAE,CADS;AAEd,IAAA,KAAK,EAAE;AAFO,GA3BR;;AA+BV;AACA,EAAA,MAAM,EAAE;AACJ,IAAA,GAAG,EAAE,CADD;AAEJ,IAAA,KAAK,EAAE;AAFH,GAhCE;;AAoCV;AACA,EAAA,IAAI,EAAE;AACF,IAAA,GAAG,EAAE,CADH;AAEF,IAAA,KAAK,EAAE;AAFL,GArCI;;AAyCV;AACA,EAAA,WAAW,EAAE;AACT,IAAA,GAAG,EAAE,CADI;AAET,IAAA,KAAK,EAAE;AAFE,GA1CH;;AA8CV;AACA,EAAA,SAAS,EAAE;AACP,IAAA,GAAG,EAAE,CADE;AAEP,IAAA,KAAK,EAAE;AAFA,GA/CD;;AAmDV;AACA,EAAA,SAAS,EAAE;AACP,IAAA,GAAG,EAAE,CADE;AAEP,IAAA,KAAK,EAAE;AAFA,GApDD;;AAwDV;AACA,EAAA,UAAU,EAAE;AACR,IAAA,GAAG,EAAE,EADG;AAER,IAAA,KAAK,EAAE;AAFC,GAzDF;;AA6DV;AACA,EAAA,KAAK,EAAE;AACH,IAAA,GAAG,EAAE,EADF;AAEH,IAAA,KAAK,EAAE;AAFJ;AA9DG,CAAd;AAoEA;;;;;;AAKA,IAAI,CAAC,IAAL,GAAY;AACR;AACA,EAAA,MAAM,EAAE;AACJ,IAAA,GAAG,EAAE,CADD;AAEJ,IAAA,KAAK,EAAE;AAFH,GAFA;;AAMR;AACA,EAAA,KAAK,EAAE;AACH,IAAA,GAAG,EAAE,CADF;AAEH,IAAA,KAAK,EAAE;AAFJ;AAPC,CAAZ;AAaA;;;;;;AAKA,IAAI,CAAC,KAAL,GAAa;AACT;AACA,EAAA,KAAK,EAAE,CAFE;;AAGT;AACA,EAAA,KAAK,EAAE,CAJE;;AAKT;AACA,EAAA,KAAK,EAAE,CANE;;AAOT;AACA,EAAA,OAAO,EAAE;AARA,CAAb,C,CAYA;;AAEA,MAAM,CAAC,OAAP,CAAe,IAAf,GAAsB,IAAtB","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Call {\r\n    /**\r\n     * @this Call\r\n     */\r\n    constructor(status, id, type, contact, deviceType) {\r\n        /**\r\n         * @public\r\n         * @property {Object} status The status of the call (e.g. dialing, active, releasing...)\r\n         * @readonly\r\n         */\r\n        this.status = status;\r\n        /**\r\n         * @public\r\n         * @property {string} id the id of the call\r\n         * @readonly\r\n         */\r\n        this.id = id;\r\n        /**\r\n         * @public\r\n         * @property {string} conversationId The reference of the conversation\r\n         * @readonly\r\n         */\r\n        this.conversationId = null;\r\n        /**\r\n         * @private\r\n         * @property {string} connectionId ??\r\n         * @readonly\r\n         */\r\n        this.connectionId = null;\r\n        /**\r\n         * @public\r\n         * @property {Object} type The type of the call (e.g. webRTC or Telephony)\r\n         * @readonly\r\n         */\r\n        this.type = type;\r\n        /**\r\n         * @private\r\n         * @property {Boolean} isVm Indicates whether it is a call to user's own voicemail\r\n         * @readonly\r\n         */\r\n        this.isVm = false;\r\n        /**\r\n         * @public\r\n         * @property {Contact} contact The reference of the contact engaged in this call\r\n         * @readonly\r\n         */\r\n        this.contact = contact;\r\n        /**\r\n         * @public\r\n         * @property {Number} remoteMedia The media used by the recipient (e.g. audio, video, sharing, phone)\r\n         * @readonly\r\n         */\r\n        this.remoteMedia = 0;\r\n        /**\r\n         * @public\r\n         * @property {Number} localMedia The media used by the user (e.g. audio, video, sharing, phone)\r\n         * @readonly\r\n         */\r\n        this.localMedia = 0;\r\n        /**\r\n         * @public\r\n         * @property {Boolean} isEscalated True if the call has been escalated to sharing or video (only relevant for WebRTC calls)\r\n         * @readonly\r\n         */\r\n        this.isEscalated = false;\r\n        /**\r\n         * @public\r\n         * @property {Date} startDate The date when the call has been started\r\n         * @readonly\r\n         */\r\n        this.startDate = new Date();\r\n        /**\r\n         * @public\r\n         * @property {Boolean} isInitiator True if the user is the caller (false if he's the called)\r\n         * @readonly\r\n         */\r\n        this.isInitiator = false;\r\n        /**\r\n         * @public\r\n         * @property {Contact[]} participants The list of participants in the call (conference)\r\n         * @readonly\r\n         */\r\n        this.participants = null;\r\n        /**\r\n         * @public\r\n         * @property {Boolean} isRemoteVideoMuted True if the webRTC video has been muted by the recipient (only relevant for WebRTC calls)\r\n         * @readonly\r\n         */\r\n        this.isRemoteVideoMuted = false;\r\n        /**\r\n         * @public\r\n         * @since 1.20\r\n         * @property {Boolean} isConference True if the call is a conferenceCall\r\n         * @readonly\r\n         */\r\n        this.isConference = false;\r\n        /**\r\n         * @public\r\n         * @property {String} avatars array of call avatar sources\r\n         * @readonly\r\n         */\r\n        this.avatars = (contact && contact.avatar) ? [this.contact.avatar.src] : [];\r\n        /**\r\n         * @public\r\n         * @property {Object}  currentCalled contains current called number and contact\r\n         * @readonly\r\n         */\r\n        this.currentCalled = {\r\n            contactPhoneNumber: \"\",\r\n            contact: null,\r\n            participantsPhoneNumbers: [],\r\n            participants: [],\r\n        };\r\n        /**\r\n         * @public\r\n         * @property {String} deviceType type of the RCC phoneset (MAIN, SECONDARY, ...).\r\n         * @readonly\r\n         */\r\n        this.deviceType = deviceType;\r\n        /**\r\n         * @public\r\n         * @property {String} deviceState state of the RCC phoneset.\r\n         * @readonly\r\n         */\r\n        this.deviceState = undefined;\r\n        /**\r\n         * @public\r\n         * @property {String} cause of the event of the call.\r\n         * @readonly\r\n         */\r\n        this.cause = undefined;\r\n        /**\r\n         * @public\r\n         * @property {String} jid of the called party.\r\n         * @readonly\r\n         */\r\n        this.jid = undefined;\r\n        /**\r\n         * @public\r\n         * @property {String} phonenumber called.\r\n         * @readonly\r\n         */\r\n        this.phoneNumber = undefined;\r\n        /**\r\n         * @public\r\n         * @property {String} globalCallId a global id when the call go thrue PBX Node.\r\n         * @readonly\r\n         */\r\n        this.globalCallId = undefined;\r\n        /**\r\n         * @public\r\n         * @property {String} correlatorData Data about a call.\r\n         * @readonly\r\n         */\r\n        this.correlatorData = undefined;\r\n    }\r\n    // Static factories\r\n    static create(status, id, type, contact, deviceType) {\r\n        return new Call(status, id, type, contact, deviceType);\r\n    }\r\n    getCause() {\r\n        return this.cause;\r\n    }\r\n    setCause(value) {\r\n        this.cause = value;\r\n    }\r\n    getDeviceState() {\r\n        return this.deviceState;\r\n    }\r\n    setDeviceState(value) {\r\n        this.deviceState = value;\r\n    }\r\n    getDeviceType() {\r\n        return this.deviceType;\r\n    }\r\n    setDeviceType(value) {\r\n        this.deviceType = value;\r\n    }\r\n    // Public methods\r\n    setCallId(id) {\r\n        this.id = id;\r\n    }\r\n    setConversationId(id) {\r\n        this.conversationId = id;\r\n    }\r\n    setConnectionId(connectionId) {\r\n        this.connectionId = connectionId;\r\n        this.id = Call.getIdFromConnectionId(connectionId);\r\n    }\r\n    setStatus(status) {\r\n        this.status = status;\r\n    }\r\n    setType(type) {\r\n        this.type = type;\r\n    }\r\n    setIsVm(isVM) {\r\n        this.isVm = isVM;\r\n    }\r\n    setContact(contact) {\r\n        this.contact = contact;\r\n        this.avatars = [this.contact.avatar.src];\r\n    }\r\n    setParticipants(participants) {\r\n        this.participants = participants;\r\n        this.avatars = [];\r\n        var that = this;\r\n        this.participants.forEach(function (participant) {\r\n            that.avatars.push(participant.avatar.src);\r\n        });\r\n    }\r\n    getGlobalCallId() {\r\n        return this.globalCallId;\r\n    }\r\n    setGlobalCallId(value) {\r\n        this.globalCallId = value;\r\n    }\r\n    getCurrentCalled() {\r\n        return this.currentCalled;\r\n    }\r\n    setCurrentCalled(currentCalled) {\r\n        if (!currentCalled) {\r\n            this.currentCalled.contactPhoneNumber = \"\";\r\n            this.currentCalled.contact = null;\r\n            this.currentCalled.participantsPhoneNumbers = null;\r\n            this.currentCalled.participants = null;\r\n        }\r\n        else {\r\n            if (this.contact && this.contact._id) { //simple call case\r\n                this.currentCalled.contactPhoneNumber = (currentCalled.contactPhoneNumber && currentCalled.contactPhoneNumber !== \"\") ? currentCalled.contactPhoneNumber : \"\";\r\n                this.currentCalled.contact = currentCalled.contact ? currentCalled.contact : null;\r\n                this.currentCalled.participantsPhoneNumbers = null;\r\n                this.currentCalled.participants = null;\r\n            }\r\n            else { //conf case\r\n                this.currentCalled.contactPhoneNumber = \"\";\r\n                this.currentCalled.contact = null;\r\n                this.currentCalled.participantsPhoneNumbers = (currentCalled.participantsPhoneNumbers && currentCalled.participantsPhoneNumbers.length > 0) ? currentCalled.participantsPhoneNumbers : null;\r\n                this.currentCalled.participants = (currentCalled.participants && currentCalled.participants.length > 0) ? currentCalled.participants : null;\r\n                if (this.currentCalled.participantsPhoneNumbers && this.currentCalled.participantsPhoneNumbers.length > 0) {\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCurrentCalledContactNumber(number) {\r\n        this.currentCalled.contactPhoneNumber = number;\r\n    }\r\n    // Override toString method\r\n    toString() {\r\n        return \"(type:\" + this.type.value + \", id:\" + this.id + \", status:\" + this.status.value + (this.vm ? \"(voicemail))\" : \")\");\r\n    }\r\n    /*********************************************************/\r\n    /**                  TELEPHONY STUFF                     */\r\n    /*********************************************************/\r\n    static getIdFromConnectionId(connectionId) {\r\n        if (!connectionId)\r\n            return null;\r\n        return connectionId.split(\"#\")[0] + \"\";\r\n    }\r\n    static getDeviceIdFromConnectionId(connectionId) {\r\n        if (!connectionId)\r\n            return null;\r\n        return connectionId.split(\"#\")[1] + \"\";\r\n    }\r\n    /**\r\n     * @function\r\n     * @public\r\n     * @name updateCall\r\n     * @description\r\n     * This method is used to update a Call from data object\r\n     */\r\n    updateCall(data) {\r\n        let that = this;\r\n        if (data) {\r\n            let callproperties = Object.getOwnPropertyNames(that);\r\n            Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\r\n                if (callproperties.find((el) => { return val == el; })) {\r\n                    that[val] = data[val];\r\n                }\r\n                else {\r\n                    console.log(\"WARNING : One property of the parameter of updateCall method is not present in the Call class can not update Call with : \", val);\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @function\r\n     * @public\r\n     * @name CallFactory\r\n     * @description\r\n     * This method is used to create a Call from data object\r\n     */\r\n    static CallFactory() {\r\n        return (data) => {\r\n            let call = Call.create(data.status, data.id, data.type, data.contact, data.deviceType);\r\n            if (data) {\r\n                let channelproperties = Object.getOwnPropertyNames(call);\r\n                Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\r\n                    if (!channelproperties.find((el) => { return val == el; })) {\r\n                        console.log(\"WARNING : One property of the parameter of CallFactory method is not present in the Call class : \");\r\n                    }\r\n                });\r\n            }\r\n            call.updateCall(data);\r\n            return call;\r\n        };\r\n    }\r\n}\r\nexports.Call = Call;\r\n/**\r\n * @public\r\n * @readonly\r\n * @enum {Object}\r\n */\r\nCall.Status = {\r\n    /** Call cleared */\r\n    UNKNOWN: {\r\n        key: 0,\r\n        value: \"Unknown\"\r\n    },\r\n    /** In dialing */\r\n    DIALING: {\r\n        key: 1,\r\n        value: \"dialing\"\r\n    },\r\n    /** In queue (user side) */\r\n    QUEUED_INCOMING: {\r\n        key: 2,\r\n        value: \"queuedIncoming\"\r\n    },\r\n    /** In queue (recipient side) */\r\n    QUEUED_OUTGOING: {\r\n        key: 10,\r\n        value: \"queuedOutGoing\"\r\n    },\r\n    /** Call in ringing (user side) */\r\n    RINGING_INCOMING: {\r\n        key: 3,\r\n        value: \"incomingCall\"\r\n    },\r\n    /** Call in ringing (recipient side */\r\n    RINGING_OUTGOING: {\r\n        key: 4,\r\n        value: \"ringingOutgoing\"\r\n    },\r\n    /** Active call */\r\n    ACTIVE: {\r\n        key: 5,\r\n        value: \"active\"\r\n    },\r\n    /** Call in hold */\r\n    HOLD: {\r\n        key: 6,\r\n        value: \"held\"\r\n    },\r\n    /** Call put on hold */\r\n    PUT_ON_HOLD: {\r\n        key: 7,\r\n        value: \"putOnHold\"\r\n    },\r\n    /** Call is clearing */\r\n    RELEASING: {\r\n        key: 8,\r\n        value: \"releasing\"\r\n    },\r\n    /** call is answering */\r\n    ANSWERING: {\r\n        key: 9,\r\n        value: \"answering\"\r\n    },\r\n    /** trying to reconnect */\r\n    CONNECTING: {\r\n        key: 12,\r\n        value: \"connecting\"\r\n    },\r\n    /** call in error */\r\n    ERROR: {\r\n        key: 11,\r\n        value: \"error\"\r\n    }\r\n};\r\n/**\r\n * @public\r\n * @enum {Object}\r\n * @readonly\r\n */\r\nCall.Type = {\r\n    /** WebRTC call */\r\n    WEBRTC: {\r\n        key: 1,\r\n        value: \"Video\"\r\n    },\r\n    /** Telephony call (from PBX) */\r\n    PHONE: {\r\n        key: 2,\r\n        value: \"Phone\"\r\n    }\r\n};\r\n/**\r\n * @public\r\n * @enum {Object}\r\n * @readonly\r\n */\r\nCall.Media = {\r\n    /** WebRTC audio call */\r\n    AUDIO: 1,\r\n    /** WebRTC audio and video call */\r\n    VIDEO: 2,\r\n    /** Telephony call (from pbx) */\r\n    PHONE: 4,\r\n    /** WebRTC Screen sharing call */\r\n    SHARING: 8\r\n};\r\n//module.exports = Call;\r\nmodule.exports.Call = Call;\r\n//# sourceMappingURL=Call.js.map"]},"metadata":{},"sourceType":"script"}