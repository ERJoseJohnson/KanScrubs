{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction CallLog(id, contact, state, duration, type, read, date, direction, callSubject, isLatestCall) {\n  /**\n   * @public\n   * @property {string} id The CallLog ID\n   * @readonly\n   */\n  this.id = id;\n  /**\n   * @public\n   * @property {Contact} contact The Contact related to the call log\n   * @link Contact\n   * @readonly\n   */\n\n  this.contact = contact;\n  this.state = state;\n  this.duration = duration;\n  this.direction = direction;\n  this.callSubject = callSubject;\n  this.isLatestCall = isLatestCall;\n\n  if (type === \"unknown\" || type === \"audio\" || type === \"webrtc\") {\n    type = CallLog.Type.WEBRTC;\n  } else if (type === \"telephone\") {\n    type = CallLog.Type.TELEPHONE;\n  } else {\n    type = CallLog.Type.CONFERENCE;\n  }\n\n  this.type = type;\n  this.read = read;\n  this.date = date; // this.startDate = startDate;\n  // this.endDate = endDate;\n  // this.contactId = contactId;\n  // this.contact = null;\n  // this.direction = direction;\n  // this.isTelephony = false;\n  // this.isMissed = false;\n  // this.isNotAnswered = false;\n  // this.isWebRTCAudioCall = false;\n}\n\nCallLog.create = function (id, contact, state, duration, type, read, date, direction, callSubject, isLatestCall) {\n  let callLog = new CallLog(id, contact, state, duration, type, read, date, direction, callSubject, isLatestCall);\n  return callLog;\n};\n\nCallLog.getNames = function (callLog) {\n  let result = {\n    firstName: \"\",\n    lastName: \"\",\n    date: 0\n  };\n\n  try {\n    if (callLog && callLog.contact) {\n      result.firstName = callLog.contact.firstName.toUpperCase();\n      result.lastName = callLog.contact.lastName.toUpperCase();\n\n      if (callLog && callLog.date) {\n        result.date = callLog.date.getTime();\n      }\n    }\n  } catch (err) {}\n\n  return result;\n};\n\nCallLog.getDate = function (callLog) {\n  if (callLog && callLog.date) {\n    return callLog.date.getTime();\n  }\n\n  return 0;\n};\n\nCallLog.sortByContact = function (callLogA, callLogB) {\n  let res = -1;\n\n  try {\n    if (callLogA && callLogA.lastName && callLogB && callLogB.lastName) {\n      let str1 = callLogA.lastName;\n      let str2 = callLogB.lastName;\n      res = str1.localeCompare(str2);\n\n      if (res === 0) {\n        str1 = callLogA.firstName;\n        str2 = callLogB.firstName;\n        res = str1.localeCompare(str2);\n\n        if (res === 0 && callLogB.date && callLogA.date) {\n          //order by date\n          res = CallLog.sortByDate(callLogA.date, callLogB.date);\n        }\n      }\n    }\n  } catch (err) {}\n\n  return res;\n};\n\nCallLog.sortByDate = function (callLogA, callLogB) {\n  let res = 0;\n\n  if (callLogA && callLogB) {\n    if (callLogA < callLogB) {\n      res = -1;\n    }\n\n    if (callLogA > callLogB) {\n      res = 1;\n    }\n  }\n  /*\n  //res = 1;\n  // */\n\n\n  return res;\n  /*    let res = 1;\n      if (callLogA && callLogB) {\n          res = callLogB.value - callLogA.value;\n      }\n  \n      return res; // */\n};\n\nCallLog.Type = {\n  /** WebRTC call */\n  WEBRTC: \"webrtc\",\n\n  /** Telephony call (from PBX) */\n  TELEPHONE: \"telephone\",\n\n  /** Conference call (from PBX) */\n  CONFERENCE: \"conference\"\n};\nmodule.exports = CallLog;","map":{"version":3,"sources":["../../../src/lib/common/models/CallLog.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction CallLog(id, contact, state, duration, type, read, date, direction, callSubject, isLatestCall) {\n    /**\n     * @public\n     * @property {string} id The CallLog ID\n     * @readonly\n     */\n    this.id = id;\n    /**\n     * @public\n     * @property {Contact} contact The Contact related to the call log\n     * @link Contact\n     * @readonly\n     */\n    this.contact = contact;\n    this.state = state;\n    this.duration = duration;\n    this.direction = direction;\n    this.callSubject = callSubject;\n    this.isLatestCall = isLatestCall;\n    if (type === \"unknown\" || type === \"audio\" || type === \"webrtc\") {\n        type = CallLog.Type.WEBRTC;\n    }\n    else if (type === \"telephone\") {\n        type = CallLog.Type.TELEPHONE;\n    }\n    else {\n        type = CallLog.Type.CONFERENCE;\n    }\n    this.type = type;\n    this.read = read;\n    this.date = date;\n    // this.startDate = startDate;\n    // this.endDate = endDate;\n    // this.contactId = contactId;\n    // this.contact = null;\n    // this.direction = direction;\n    // this.isTelephony = false;\n    // this.isMissed = false;\n    // this.isNotAnswered = false;\n    // this.isWebRTCAudioCall = false;\n}\nCallLog.create = function (id, contact, state, duration, type, read, date, direction, callSubject, isLatestCall) {\n    let callLog = new CallLog(id, contact, state, duration, type, read, date, direction, callSubject, isLatestCall);\n    return callLog;\n};\nCallLog.getNames = function (callLog) {\n    let result = {\n        firstName: \"\",\n        lastName: \"\",\n        date: 0\n    };\n    try {\n        if (callLog && callLog.contact) {\n            result.firstName = callLog.contact.firstName.toUpperCase();\n            result.lastName = callLog.contact.lastName.toUpperCase();\n            if (callLog && callLog.date) {\n                result.date = callLog.date.getTime();\n            }\n        }\n    }\n    catch (err) {\n    }\n    return result;\n};\nCallLog.getDate = function (callLog) {\n    if (callLog && callLog.date) {\n        return callLog.date.getTime();\n    }\n    return 0;\n};\nCallLog.sortByContact = function (callLogA, callLogB) {\n    let res = -1;\n    try {\n        if (callLogA && callLogA.lastName && callLogB && callLogB.lastName) {\n            let str1 = callLogA.lastName;\n            let str2 = callLogB.lastName;\n            res = str1.localeCompare(str2);\n            if (res === 0) {\n                str1 = callLogA.firstName;\n                str2 = callLogB.firstName;\n                res = str1.localeCompare(str2);\n                if (res === 0 && callLogB.date && callLogA.date) {\n                    //order by date\n                    res = CallLog.sortByDate(callLogA.date, callLogB.date);\n                }\n            }\n        }\n    }\n    catch (err) {\n    }\n    return res;\n};\nCallLog.sortByDate = function (callLogA, callLogB) {\n    let res = 0;\n    if (callLogA && callLogB) {\n        if (callLogA < callLogB) {\n            res = -1;\n        }\n        if (callLogA > callLogB) {\n            res = 1;\n        }\n    }\n    /*\n    //res = 1;\n    // */\n    return res;\n    /*    let res = 1;\n        if (callLogA && callLogB) {\n            res = callLogB.value - callLogA.value;\n        }\n    \n        return res; // */\n};\nCallLog.Type = {\n    /** WebRTC call */\n    WEBRTC: \"webrtc\",\n    /** Telephony call (from PBX) */\n    TELEPHONE: \"telephone\",\n    /** Conference call (from PBX) */\n    CONFERENCE: \"conference\"\n};\nmodule.exports = CallLog;\n//# sourceMappingURL=CallLog.js.map"]},"metadata":{},"sourceType":"script"}