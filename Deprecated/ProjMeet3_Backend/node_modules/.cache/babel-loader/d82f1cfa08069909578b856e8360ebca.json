{"ast":null,"code":"/*jshint strict:true node:true es5:true onevar:true laxcomma:true laxbreak:true eqeqeq:true immed:true latedef:true*/\n(function () {\n  \"use strict\";\n\n  Buffer.prototype.__addchunk_index = 0;\n\n  Buffer.prototype.addChunk = function (chunk) {\n    var len = Math.min(chunk.length, this.length - this.__addchunk_index);\n\n    if (this.__addchunk_index === this.length) {\n      //throw new Error(\"Buffer is full\");\n      return false;\n    }\n\n    chunk.copy(this, this.__addchunk_index, 0, len);\n    this.__addchunk_index += len;\n\n    if (len < chunk.length) {\n      //remnant = new Buffer(chunk.length - len);\n      //chunk.copy(remnant, 0, len, chunk.length);\n      // return remnant;\n      return chunk.slice(len, chunk.length);\n    }\n\n    if (this.__addchunk_index === this.length) {\n      return true;\n    }\n  };\n})();","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/formdata/node_modules/bufferjs/add-chunk.js"],"names":["Buffer","prototype","__addchunk_index","addChunk","chunk","len","Math","min","length","copy","slice"],"mappings":"AAAA;AACC,aAAY;AACX;;AAEAA,EAAAA,MAAM,CAACC,SAAP,CAAiBC,gBAAjB,GAAoC,CAApC;;AAEAF,EAAAA,MAAM,CAACC,SAAP,CAAiBE,QAAjB,GAA4B,UAAUC,KAAV,EAAiB;AAC3C,QAAKC,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASH,KAAK,CAACI,MAAf,EAAuB,KAAKA,MAAL,GAAc,KAAKN,gBAA1C,CAAX;;AAEA,QAAI,KAAKA,gBAAL,KAA0B,KAAKM,MAAnC,EAA2C;AACzC;AACA,aAAO,KAAP;AACD;;AAEDJ,IAAAA,KAAK,CAACK,IAAN,CAAW,IAAX,EAAiB,KAAKP,gBAAtB,EAAwC,CAAxC,EAA2CG,GAA3C;AAEA,SAAKH,gBAAL,IAAyBG,GAAzB;;AAEA,QAAIA,GAAG,GAAGD,KAAK,CAACI,MAAhB,EAAwB;AACtB;AACA;AACA;AACA,aAAOJ,KAAK,CAACM,KAAN,CAAYL,GAAZ,EAAiBD,KAAK,CAACI,MAAvB,CAAP;AACD;;AAED,QAAI,KAAKN,gBAAL,KAA0B,KAAKM,MAAnC,EAA2C;AACzC,aAAO,IAAP;AACD;AACF,GAtBD;AAuBD,CA5BA,GAAD","sourcesContent":["/*jshint strict:true node:true es5:true onevar:true laxcomma:true laxbreak:true eqeqeq:true immed:true latedef:true*/\r\n(function () {\r\n  \"use strict\";\r\n\r\n  Buffer.prototype.__addchunk_index = 0;\r\n\r\n  Buffer.prototype.addChunk = function (chunk) {\r\n    var  len = Math.min(chunk.length, this.length - this.__addchunk_index);\r\n\r\n    if (this.__addchunk_index === this.length) {\r\n      //throw new Error(\"Buffer is full\");\r\n      return false;\r\n    }\r\n\r\n    chunk.copy(this, this.__addchunk_index, 0, len);\r\n\r\n    this.__addchunk_index += len;\r\n\r\n    if (len < chunk.length) {\r\n      //remnant = new Buffer(chunk.length - len);\r\n      //chunk.copy(remnant, 0, len, chunk.length);\r\n      // return remnant;\r\n      return chunk.slice(len, chunk.length);\r\n    }\r\n\r\n    if (this.__addchunk_index === this.length) {\r\n      return true;\r\n    }\r\n  };\r\n}());\r\n"]},"metadata":{},"sourceType":"script"}