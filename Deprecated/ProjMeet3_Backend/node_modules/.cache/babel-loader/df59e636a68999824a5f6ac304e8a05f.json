{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Utils_1 = require(\"../Utils\");\n\nfunction randomString(length = 10) {\n  let string = \"\";\n  let rnd;\n  const chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n  while (length > 0) {\n    rnd = Math.floor(Math.random() * chars.length);\n    string += chars.charAt(rnd);\n    length--;\n  }\n\n  return string;\n}\n\nfunction getUserAdditionDate(user) {\n  if (user && user.additionDate) {\n    try {\n      return new Date(user.additionDate).getTime();\n    } catch (err) {\n      console.error(\"Error while getUserAdditionDate!!!\");\n    }\n  }\n\n  return 0;\n}\n\nfunction sortUsersByDate(userADate, userBDate) {\n  let res = 0;\n\n  if (userADate && userBDate) {\n    if (userADate < userBDate) {\n      res = -1;\n    }\n\n    if (userADate > userBDate) {\n      res = 1;\n    }\n  }\n  /*\n  //res = 1;\n  // */\n\n\n  return res;\n}\n/**\n * @class\n * @name Bubble\n * @description\n *      This class represents a Bubble. <br>\n *\t\tA bubble is an interaction between several participants based on IM media. A bubble is described by a name and a description.<br>\n *\t\tLike for one-to-one conversation, A conversation within a bubble never ends and all interactions done can be retrieved. <br>\n */\n\n\nclass Bubble {\n  constructor(_id = \"\", _name = \"\", _topic = \"\", _jid = \"\", _creator = \"\", _history = \"none\", _users = [], _creationDate = \"\", _visibility = \"private\", _customData = {}, _isActive = false, _conference, _disableNotifications = false, _lastAvatarUpdateDate = null, _guestEmails = [], _confEndpoints = [], _activeUsersCounter = 0, _autoRegister = false, _lastActivityDate, _avatarDomain = \"\", autoAcceptInvitation = false) {\n    /**\n     * @public\n     * @readonly\n     * @property {string} id The ID of the Bubble\n     * @instance\n     */\n    this.id = _id;\n    /**\n     * @public\n     * @readonly\n     * @property {string} name The name of the Bubble\n     * @instance\n     */\n\n    this.name = _name;\n    /**\n     * @public\n     * @readonly\n     * @property {string} topic The topic of the Bubble\n     * @instance\n     */\n\n    this.topic = _topic;\n    /**\n     * @public\n     * @readonly\n     * @property {string} jid The JID of the Bubble\n     * @instance\n     */\n\n    this.jid = _jid;\n    /**\n     * @public\n     * @readonly\n     * @property {string} creator The ID of the creator of the Bubble\n     * @instance\n     */\n\n    this.creator = _creator;\n    /**\n     * @public\n     * @readonly\n     * @property {string} history The type of history the bubble supports. Can be 'none' (no history) or 'full' (Full bubble history is accessible for newcomers)\n     * @instance\n     */\n\n    this.history = _history;\n    /**\n     * @public\n     * @readonly\n     * @property {Object[]} users The list of users of that Bubble with their status and privilege. Note : Only 100 users are return by the server. So if there are more than this limit, you have to retrieve them with the method BubblesService::getUsersFromBubble\n     * @instance\n     */\n\n    if (_users) {\n      // need to order the users by date\n      this.users = Utils_1.orderByFilter(_users, getUserAdditionDate, false, sortUsersByDate);\n      /*\n      console.log(\"users ordered in bubble (\" + this.id + \") : \", this.users);\n      // */\n    } else {\n      this.users = _users;\n    }\n    /**\n     * @public\n     * @readonly\n     * @property {string} organizers of the bubble, built from users property. It is affected by the limit of 100 (splitted between organizers and members).\n     * @instance\n     */\n\n\n    this.organizers = [];\n    /**\n     * @public\n     * @readonly\n     * @property {string} members of the bubble, built from users property. It is affected by the limit of 100 (splitted between organizers and members).\n     * @instance\n     */\n\n    this.members = [];\n    /**\n     * @public\n     * @readonly\n     * @property {string} creationDate The creation date of the Bubble\n     * @instance\n     */\n\n    this.creationDate = _creationDate;\n    /**\n     * @public\n     * @readonly\n     * @property {string} visibility The visibility of the Bubble. Can be private (only visible for members) or public\n     * @instance\n     */\n\n    this.visibility = _visibility;\n    /**\n     * @public\n     * @readonly\n     * @property {Object} customData The custom data attached to that Bubble. List of pairs (key/value).\n     * @instance\n     */\n\n    this.customData = _customData;\n    /**\n     *\n     * @type {boolean}\n     */\n\n    this.isActive = _isActive;\n    /**\n     * @private\n     * @property {string} lastActivityDate The date of the last activity in this bubble\n     * @readonly\n     */\n\n    this.lastActivityDate = _lastActivityDate;\n    this.conference = _conference;\n    this.disableNotifications = _disableNotifications;\n    this.lastAvatarUpdateDate = _lastAvatarUpdateDate;\n    this.guestEmails = _guestEmails;\n    this.confEndpoints = _confEndpoints;\n    this.activeUsersCounter = _activeUsersCounter;\n    /**\n     * @property {string} avatar This is the URL to download the avatar of the bubble. Note that it is an unavailable url if no avatar has been setted.\n     */\n\n    this.avatar = _avatarDomain + \"/api/room-avatar/\" + _id + \"?size=512&rand=\" + randomString();\n    /**\n     * @public\n     * @readonly\n     * @property  {String} autoRegister    A user can create a room and not have to register users. He can share instead a public link also called 'public URL'(<a href=\"#api-users_rooms_public_link\">users public link</a>).\n     * </br>According with autoRegister value, if another person uses the link to join the room:\n     * <ul>\n     * <li>autoRegister = 'unlock':</br>\n     *    If this user is not yet registered inside this room, he is automatically included with the status 'accepted' and join the room.</li>\n     * <li>autoRegister = 'lock':</br>\n     *    If this user is not yet registered inside this room, he can't access to the room. So that he can't join the room.</li>\n     * <li>autoRegister = 'unlock_ack':</br>\n     *    If this user is not yet registered inside this room, he can't access to the room waiting for the room's owner acknowledgment.</li>\n     * </ul>\n     * @instance\n     */\n\n    this.autoRegister = _autoRegister;\n    this.owner = false;\n    /**\n     * @description auto acceptation of the bubble.\n     */\n\n    this.autoAcceptInvitation = autoAcceptInvitation;\n  }\n  /**\n   * Method helper to know if room is a meeting\n   * @private\n   */\n\n\n  isMeetingBubble() {\n    if (this.conference && this.conference.mediaType === \"pstnAudio\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  getStatusForUser(userId) {\n    let that = this;\n    let user = that.users.find(user => {\n      return user.userId === userId;\n    });\n    return user ? user.status : \"none\";\n  }\n\n  setUsers(_users) {\n    if (_users) {\n      // need to order the users by date\n      this.users = Utils_1.orderByFilter(_users, getUserAdditionDate, false, sortUsersByDate);\n      /*\n      // console.log(\"users ordered in bubble (\" + this.id + \") : \", this.users);\n      // */\n    } else {\n      this.users = _users;\n    }\n  }\n\n  updateBubble(data, contactsService) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      if (data) {\n        let bubbleproperties = Object.getOwnPropertyNames(that); //console.log(\"updateBubble update Bubble with : \", data[\"id\"]);\n\n        Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\n          //console.log(val + \" -> \" + data[val]);\n          if (bubbleproperties.find(el => {\n            return val == el;\n          })) {\n            /*\n            // console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class : \", val, \" -> \", data[val]);\n            // */\n            if (val === \"users\") {\n              /*\n              // console.log(\"update users in bubble : \", data[val]);\n              // */\n              that.setUsers(data[val]);\n            } else {\n              that[val] = data[val];\n            }\n          } else {\n            //console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class can not update Bubble with : \", val, \" -> \", data[val]);\n            console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class can not update Bubble property : \", val);\n          }\n        });\n\n        if (data.creator) {\n          that.ownerContact = yield contactsService.getContactById(data.creator, false);\n          that.owner = that.ownerContact.jid === contactsService.userContact.jid;\n        }\n      }\n\n      return this;\n    });\n  }\n  /**\n   * @function\n   * @public\n   * @name BubbleFactory\n   * @description\n   * This class is used to create a bubble from data object\n   */\n\n\n  static BubbleFactory(avatarDomain, contactsService) {\n    //     constructor(_id : any = \"\", _name: any = \"\", _topic: any = \"\", _jid: any = \"\", _creator: any = \"\", _history: any = \"none\", _users: any = [],\n    //     _creationDate: any = \"\", _visibility: any = \"private\", _customData: any = {}, _isActive: any = false, _conference: any) {\n    return data => __awaiter(this, void 0, void 0, function* () {\n      let bubble = new Bubble(data.id, data.name, data.topic, data.jid, data.creator, data.history, data.users, data.creationDate, data.visibility, data.customData, data.isActive, data.conference, data.disableNotifications, data.lastAvatarUpdateDate, data.guestEmails, data.confEndpoints, data.activeUsersCounter, data.autoRegister, data.lastActivityDate, data.autoAcceptInvitation, avatarDomain);\n\n      if (data) {\n        let bubbleproperties = Object.getOwnPropertyNames(bubble);\n        Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\n          //console.log(val + \" -> \" + data[val]);\n          if (!bubbleproperties.find(el => {\n            return val == el;\n          })) {\n            //console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class : \", val, \" -> \", data[val]);\n            console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class : \", val);\n          }\n        });\n\n        if (data.creator) {\n          yield contactsService.getContactById(data.creator, false).then(result => {\n            //console.log(\"(BubbleFactory) getContactById : \", result);\n            bubble.ownerContact = result;\n\n            if (bubble.ownerContact) {\n              if (bubble.ownerContact.jid === contactsService.userContact.jid) {\n                bubble.owner = true;\n              } else {\n                // console.log(\"(BubbleFactory) OWNER false : \" + bubble.ownerContact.jid + \" : \" + contactsService.userContact.jid);\n                bubble.owner = false;\n              }\n            } else {\n              console.log(\"(BubbleFactory) ownerContact empty.\");\n            }\n          });\n        }\n      }\n\n      return bubble;\n    });\n  }\n\n}\n\nexports.Bubble = Bubble;\nBubble.RoomUserStatus = {\n  \"INVITED\": \"invited\",\n  \"ACCEPTED\": \"accepted\",\n  \"UNSUBSCRIBED\": \"unsubscribed\",\n  \"REJECTED\": \"rejected\",\n  \"DELETED\": \"deleted\"\n};\n/**\n * @private\n * @readonly\n * @enum {number}\n */\n\nBubble.Type = {\n  \"PRIVATE\": 0,\n  \"PUBLIC\": 1\n};\n/**\n * @public\n * @readonly\n * @enum {String}\n */\n\nBubble.Privilege = {\n  /** User level */\n  \"USER\": \"user\",\n\n  /** Moderator level */\n  \"MODERATOR\": \"moderator\",\n\n  /** Guest level */\n  \"GUEST\": \"guest\"\n};\n/**\n * @public\n * @readonly\n * @enum {String}\n */\n\nBubble.History = {\n  /** Full bubble history is accessible for newcomers */\n  \"ALL\": \"all\",\n\n  /** No history is accessible for newcomers, only new messages posted */\n  \"NONE\": \"none\"\n};\nmodule.exports = {\n  Bubble\n};","map":{"version":3,"sources":["../../../src/lib/common/models/Bubble.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils_1 = require(\"../Utils\");\nfunction randomString(length = 10) {\n    let string = \"\";\n    let rnd;\n    const chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    while (length > 0) {\n        rnd = Math.floor(Math.random() * chars.length);\n        string += chars.charAt(rnd);\n        length--;\n    }\n    return string;\n}\nfunction getUserAdditionDate(user) {\n    if (user && user.additionDate) {\n        try {\n            return new Date(user.additionDate).getTime();\n        }\n        catch (err) {\n            console.error(\"Error while getUserAdditionDate!!!\");\n        }\n    }\n    return 0;\n}\nfunction sortUsersByDate(userADate, userBDate) {\n    let res = 0;\n    if (userADate && userBDate) {\n        if (userADate < userBDate) {\n            res = -1;\n        }\n        if (userADate > userBDate) {\n            res = 1;\n        }\n    }\n    /*\n    //res = 1;\n    // */\n    return res;\n}\n/**\n * @class\n * @name Bubble\n * @description\n *      This class represents a Bubble. <br>\n *\t\tA bubble is an interaction between several participants based on IM media. A bubble is described by a name and a description.<br>\n *\t\tLike for one-to-one conversation, A conversation within a bubble never ends and all interactions done can be retrieved. <br>\n */\nclass Bubble {\n    constructor(_id = \"\", _name = \"\", _topic = \"\", _jid = \"\", _creator = \"\", _history = \"none\", _users = [], _creationDate = \"\", _visibility = \"private\", _customData = {}, _isActive = false, _conference, _disableNotifications = false, _lastAvatarUpdateDate = null, _guestEmails = [], _confEndpoints = [], _activeUsersCounter = 0, _autoRegister = false, _lastActivityDate, _avatarDomain = \"\", autoAcceptInvitation = false) {\n        /**\n         * @public\n         * @readonly\n         * @property {string} id The ID of the Bubble\n         * @instance\n         */\n        this.id = _id;\n        /**\n         * @public\n         * @readonly\n         * @property {string} name The name of the Bubble\n         * @instance\n         */\n        this.name = _name;\n        /**\n         * @public\n         * @readonly\n         * @property {string} topic The topic of the Bubble\n         * @instance\n         */\n        this.topic = _topic;\n        /**\n         * @public\n         * @readonly\n         * @property {string} jid The JID of the Bubble\n         * @instance\n         */\n        this.jid = _jid;\n        /**\n         * @public\n         * @readonly\n         * @property {string} creator The ID of the creator of the Bubble\n         * @instance\n         */\n        this.creator = _creator;\n        /**\n         * @public\n         * @readonly\n         * @property {string} history The type of history the bubble supports. Can be 'none' (no history) or 'full' (Full bubble history is accessible for newcomers)\n         * @instance\n         */\n        this.history = _history;\n        /**\n         * @public\n         * @readonly\n         * @property {Object[]} users The list of users of that Bubble with their status and privilege. Note : Only 100 users are return by the server. So if there are more than this limit, you have to retrieve them with the method BubblesService::getUsersFromBubble\n         * @instance\n         */\n        if (_users) {\n            // need to order the users by date\n            this.users = Utils_1.orderByFilter(_users, getUserAdditionDate, false, sortUsersByDate);\n            /*\n            console.log(\"users ordered in bubble (\" + this.id + \") : \", this.users);\n            // */\n        }\n        else {\n            this.users = _users;\n        }\n        /**\n         * @public\n         * @readonly\n         * @property {string} organizers of the bubble, built from users property. It is affected by the limit of 100 (splitted between organizers and members).\n         * @instance\n         */\n        this.organizers = [];\n        /**\n         * @public\n         * @readonly\n         * @property {string} members of the bubble, built from users property. It is affected by the limit of 100 (splitted between organizers and members).\n         * @instance\n         */\n        this.members = [];\n        /**\n         * @public\n         * @readonly\n         * @property {string} creationDate The creation date of the Bubble\n         * @instance\n         */\n        this.creationDate = _creationDate;\n        /**\n         * @public\n         * @readonly\n         * @property {string} visibility The visibility of the Bubble. Can be private (only visible for members) or public\n         * @instance\n         */\n        this.visibility = _visibility;\n        /**\n         * @public\n         * @readonly\n         * @property {Object} customData The custom data attached to that Bubble. List of pairs (key/value).\n         * @instance\n         */\n        this.customData = _customData;\n        /**\n         *\n         * @type {boolean}\n         */\n        this.isActive = _isActive;\n        /**\n         * @private\n         * @property {string} lastActivityDate The date of the last activity in this bubble\n         * @readonly\n         */\n        this.lastActivityDate = _lastActivityDate;\n        this.conference = _conference;\n        this.disableNotifications = _disableNotifications;\n        this.lastAvatarUpdateDate = _lastAvatarUpdateDate;\n        this.guestEmails = _guestEmails;\n        this.confEndpoints = _confEndpoints;\n        this.activeUsersCounter = _activeUsersCounter;\n        /**\n         * @property {string} avatar This is the URL to download the avatar of the bubble. Note that it is an unavailable url if no avatar has been setted.\n         */\n        this.avatar = _avatarDomain + \"/api/room-avatar/\" + _id + \"?size=512&rand=\" + randomString();\n        /**\n         * @public\n         * @readonly\n         * @property  {String} autoRegister    A user can create a room and not have to register users. He can share instead a public link also called 'public URL'(<a href=\"#api-users_rooms_public_link\">users public link</a>).\n         * </br>According with autoRegister value, if another person uses the link to join the room:\n         * <ul>\n         * <li>autoRegister = 'unlock':</br>\n         *    If this user is not yet registered inside this room, he is automatically included with the status 'accepted' and join the room.</li>\n         * <li>autoRegister = 'lock':</br>\n         *    If this user is not yet registered inside this room, he can't access to the room. So that he can't join the room.</li>\n         * <li>autoRegister = 'unlock_ack':</br>\n         *    If this user is not yet registered inside this room, he can't access to the room waiting for the room's owner acknowledgment.</li>\n         * </ul>\n         * @instance\n         */\n        this.autoRegister = _autoRegister;\n        this.owner = false;\n        /**\n         * @description auto acceptation of the bubble.\n         */\n        this.autoAcceptInvitation = autoAcceptInvitation;\n    }\n    /**\n     * Method helper to know if room is a meeting\n     * @private\n     */\n    isMeetingBubble() {\n        if (this.conference && this.conference.mediaType === \"pstnAudio\") {\n            return true;\n        }\n        return false;\n    }\n    getStatusForUser(userId) {\n        let that = this;\n        let user = that.users.find((user) => {\n            return user.userId === userId;\n        });\n        return user ? user.status : \"none\";\n    }\n    setUsers(_users) {\n        if (_users) {\n            // need to order the users by date\n            this.users = Utils_1.orderByFilter(_users, getUserAdditionDate, false, sortUsersByDate);\n            /*\n            // console.log(\"users ordered in bubble (\" + this.id + \") : \", this.users);\n            // */\n        }\n        else {\n            this.users = _users;\n        }\n    }\n    updateBubble(data, contactsService) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            if (data) {\n                let bubbleproperties = Object.getOwnPropertyNames(that);\n                //console.log(\"updateBubble update Bubble with : \", data[\"id\"]);\n                Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\n                    //console.log(val + \" -> \" + data[val]);\n                    if (bubbleproperties.find((el) => {\n                        return val == el;\n                    })) {\n                        /*\n                        // console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class : \", val, \" -> \", data[val]);\n                        // */\n                        if (val === \"users\") {\n                            /*\n                            // console.log(\"update users in bubble : \", data[val]);\n                            // */\n                            that.setUsers(data[val]);\n                        }\n                        else {\n                            that[val] = data[val];\n                        }\n                    }\n                    else {\n                        //console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class can not update Bubble with : \", val, \" -> \", data[val]);\n                        console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class can not update Bubble property : \", val);\n                    }\n                });\n                if (data.creator) {\n                    that.ownerContact = yield contactsService.getContactById(data.creator, false);\n                    that.owner = (that.ownerContact.jid === contactsService.userContact.jid);\n                }\n            }\n            return this;\n        });\n    }\n    /**\n     * @function\n     * @public\n     * @name BubbleFactory\n     * @description\n     * This class is used to create a bubble from data object\n     */\n    static BubbleFactory(avatarDomain, contactsService) {\n        //     constructor(_id : any = \"\", _name: any = \"\", _topic: any = \"\", _jid: any = \"\", _creator: any = \"\", _history: any = \"none\", _users: any = [],\n        //     _creationDate: any = \"\", _visibility: any = \"private\", _customData: any = {}, _isActive: any = false, _conference: any) {\n        return (data) => __awaiter(this, void 0, void 0, function* () {\n            let bubble = new Bubble(data.id, data.name, data.topic, data.jid, data.creator, data.history, data.users, data.creationDate, data.visibility, data.customData, data.isActive, data.conference, data.disableNotifications, data.lastAvatarUpdateDate, data.guestEmails, data.confEndpoints, data.activeUsersCounter, data.autoRegister, data.lastActivityDate, data.autoAcceptInvitation, avatarDomain);\n            if (data) {\n                let bubbleproperties = Object.getOwnPropertyNames(bubble);\n                Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\n                    //console.log(val + \" -> \" + data[val]);\n                    if (!bubbleproperties.find((el) => {\n                        return val == el;\n                    })) {\n                        //console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class : \", val, \" -> \", data[val]);\n                        console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class : \", val);\n                    }\n                });\n                if (data.creator) {\n                    yield contactsService.getContactById(data.creator, false).then((result) => {\n                        //console.log(\"(BubbleFactory) getContactById : \", result);\n                        bubble.ownerContact = result;\n                        if (bubble.ownerContact) {\n                            if (bubble.ownerContact.jid === contactsService.userContact.jid) {\n                                bubble.owner = true;\n                            }\n                            else {\n                                // console.log(\"(BubbleFactory) OWNER false : \" + bubble.ownerContact.jid + \" : \" + contactsService.userContact.jid);\n                                bubble.owner = false;\n                            }\n                        }\n                        else {\n                            console.log(\"(BubbleFactory) ownerContact empty.\");\n                        }\n                    });\n                }\n            }\n            return bubble;\n        });\n    }\n}\nexports.Bubble = Bubble;\nBubble.RoomUserStatus = {\n    \"INVITED\": \"invited\",\n    \"ACCEPTED\": \"accepted\",\n    \"UNSUBSCRIBED\": \"unsubscribed\",\n    \"REJECTED\": \"rejected\",\n    \"DELETED\": \"deleted\"\n};\n/**\n * @private\n * @readonly\n * @enum {number}\n */\nBubble.Type = {\n    \"PRIVATE\": 0,\n    \"PUBLIC\": 1\n};\n/**\n * @public\n * @readonly\n * @enum {String}\n */\nBubble.Privilege = {\n    /** User level */\n    \"USER\": \"user\",\n    /** Moderator level */\n    \"MODERATOR\": \"moderator\",\n    /** Guest level */\n    \"GUEST\": \"guest\"\n};\n/**\n * @public\n * @readonly\n * @enum {String}\n */\nBubble.History = {\n    /** Full bubble history is accessible for newcomers */\n    \"ALL\": \"all\",\n    /** No history is accessible for newcomers, only new messages posted */\n    \"NONE\": \"none\"\n};\nmodule.exports = { Bubble };\n//# sourceMappingURL=Bubble.js.map"]},"metadata":{},"sourceType":"script"}