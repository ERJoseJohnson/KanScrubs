{"ast":null,"code":"/**\r\n * Copyright (c) 2010,2011,2012,2013,2014 Morgan Roderick http://roderick.dk\r\n * License: MIT - http://mrgnrdrck.mit-license.org\r\n *\r\n * https://github.com/mroderick/PubSubJS\r\n */\n(function (root, factory) {\n  'use strict';\n\n  var PubSub = {};\n  root.PubSub = PubSub;\n  var define = root.define;\n  factory(PubSub); // AMD support\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return PubSub;\n    }); // CommonJS and Node.js module support\n  } else if (typeof exports === 'object') {\n    if (module !== undefined && module.exports) {\n      exports = module.exports = PubSub; // Node.js specific `module.exports`\n    }\n\n    exports.PubSub = PubSub; // CommonJS module 1.1.1 spec\n\n    module.exports = exports = PubSub; // CommonJS\n  }\n})(typeof window === 'object' && window || this, function (PubSub) {\n  'use strict';\n\n  var messages = {},\n      lastUid = -1;\n\n  function hasKeys(obj) {\n    var key;\n\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\r\n   * Returns a function that throws the passed exception, for use as argument for setTimeout\r\n   * @alias throwException\r\n   * @function\r\n   * @param { Object } ex An Error object\r\n   */\n\n\n  function throwException(ex) {\n    return function reThrowException() {\n      throw ex;\n    };\n  }\n\n  function callSubscriberWithDelayedExceptions(subscriber, message, data) {\n    try {\n      subscriber(message, data);\n    } catch (ex) {\n      setTimeout(throwException(ex), 0);\n    }\n  }\n\n  function callSubscriberWithImmediateExceptions(subscriber, message, data) {\n    subscriber(message, data);\n  }\n\n  function deliverMessage(originalMessage, matchedMessage, data, immediateExceptions) {\n    var subscribers = messages[matchedMessage],\n        callSubscriber = immediateExceptions ? callSubscriberWithImmediateExceptions : callSubscriberWithDelayedExceptions,\n        s;\n\n    if (!messages.hasOwnProperty(matchedMessage)) {\n      return;\n    }\n\n    for (s in subscribers) {\n      if (subscribers.hasOwnProperty(s)) {\n        callSubscriber(subscribers[s], originalMessage, data);\n      }\n    }\n  }\n\n  function createDeliveryFunction(message, data, immediateExceptions) {\n    return function deliverNamespaced() {\n      var topic = String(message),\n          position = topic.lastIndexOf('.'); // deliver the message as it is now\n\n      deliverMessage(message, message, data, immediateExceptions); // trim the hierarchy and deliver message to each level\n\n      while (position !== -1) {\n        topic = topic.substr(0, position);\n        position = topic.lastIndexOf('.');\n        deliverMessage(message, topic, data, immediateExceptions);\n      }\n    };\n  }\n\n  function messageHasSubscribers(message) {\n    var topic = String(message),\n        found = Boolean(messages.hasOwnProperty(topic) && hasKeys(messages[topic])),\n        position = topic.lastIndexOf('.');\n\n    while (!found && position !== -1) {\n      topic = topic.substr(0, position);\n      position = topic.lastIndexOf('.');\n      found = Boolean(messages.hasOwnProperty(topic) && hasKeys(messages[topic]));\n    }\n\n    return found;\n  }\n\n  function publish(message, data, sync, immediateExceptions) {\n    message = typeof message === 'symbol' ? message.toString() : message;\n    var deliver = createDeliveryFunction(message, data, immediateExceptions),\n        hasSubscribers = messageHasSubscribers(message);\n\n    if (!hasSubscribers) {\n      return false;\n    }\n\n    if (sync === true) {\n      deliver();\n    } else {\n      setTimeout(deliver, 0);\n    }\n\n    return true;\n  }\n  /**\r\n   * Publishes the message, passing the data to it's subscribers\r\n   * @function\r\n   * @alias publish\r\n   * @param { String } message The message to publish\r\n   * @param {} data The data to pass to subscribers\r\n   * @return { Boolean }\r\n   */\n\n\n  PubSub.publish = function (message, data) {\n    return publish(message, data, false, PubSub.immediateExceptions);\n  };\n  /**\r\n   * Publishes the message synchronously, passing the data to it's subscribers\r\n   * @function\r\n   * @alias publishSync\r\n   * @param { String } message The message to publish\r\n   * @param {} data The data to pass to subscribers\r\n   * @return { Boolean }\r\n   */\n\n\n  PubSub.publishSync = function (message, data) {\n    return publish(message, data, true, PubSub.immediateExceptions);\n  };\n  /**\r\n   * Subscribes the passed function to the passed message. Every returned token is unique and should be stored if you need to unsubscribe\r\n   * @function\r\n   * @alias subscribe\r\n   * @param { String } message The message to subscribe to\r\n   * @param { Function } func The function to call when a new message is published\r\n   * @return { String }\r\n   */\n\n\n  PubSub.subscribe = function (message, func) {\n    if (typeof func !== 'function') {\n      return false;\n    }\n\n    message = typeof message === 'symbol' ? message.toString() : message; // message is not registered yet\n\n    if (!messages.hasOwnProperty(message)) {\n      messages[message] = {};\n    } // forcing token as String, to allow for future expansions without breaking usage\n    // and allow for easy use as key names for the 'messages' object\n\n\n    var token = 'uid_' + String(++lastUid);\n    messages[message][token] = func; // return token for unsubscribing\n\n    return token;\n  };\n  /**\r\n   * Subscribes the passed function to the passed message once\r\n   * @function\r\n   * @alias subscribeOnce\r\n   * @param { String } message The message to subscribe to\r\n   * @param { Function } func The function to call when a new message is published\r\n   * @return { PubSub }\r\n   */\n\n\n  PubSub.subscribeOnce = function (message, func) {\n    var token = PubSub.subscribe(message, function () {\n      // before func apply, unsubscribe message\n      PubSub.unsubscribe(token);\n      func.apply(this, arguments);\n    });\n    return PubSub;\n  };\n  /**\r\n   * Clears all subscriptions\r\n   * @function\r\n   * @public\r\n   * @alias clearAllSubscriptions\r\n   */\n\n\n  PubSub.clearAllSubscriptions = function clearAllSubscriptions() {\n    messages = {};\n  };\n  /**\r\n   * Clear subscriptions by the topic\r\n   * @function\r\n   * @public\r\n   * @alias clearAllSubscriptions\r\n   * @return { int }\r\n   */\n\n\n  PubSub.clearSubscriptions = function clearSubscriptions(topic) {\n    var m;\n\n    for (m in messages) {\n      if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0) {\n        delete messages[m];\n      }\n    }\n  };\n  /** \r\n     Count subscriptions by the topic\r\n   * @function\r\n   * @public\r\n   * @alias countSubscriptions\r\n   * @return { Array }\r\n  */\n\n\n  PubSub.countSubscriptions = function countSubscriptions(topic) {\n    var m;\n    var count = 0;\n\n    for (m in messages) {\n      if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0) {\n        count++;\n      }\n    }\n\n    return count;\n  };\n  /** \r\n     Gets subscriptions by the topic\r\n   * @function\r\n   * @public\r\n   * @alias getSubscriptions\r\n  */\n\n\n  PubSub.getSubscriptions = function getSubscriptions(topic) {\n    var m;\n    var list = [];\n\n    for (m in messages) {\n      if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0) {\n        list.push(m);\n      }\n    }\n\n    return list;\n  };\n  /**\r\n   * Removes subscriptions\r\n   *\r\n   * - When passed a token, removes a specific subscription.\r\n   *\r\n  * - When passed a function, removes all subscriptions for that function\r\n   *\r\n  * - When passed a topic, removes all subscriptions for that topic (hierarchy)\r\n   * @function\r\n   * @public\r\n   * @alias subscribeOnce\r\n   * @param { String | Function } value A token, function or topic to unsubscribe from\r\n   * @example // Unsubscribing with a token\r\n   * var token = PubSub.subscribe('mytopic', myFunc);\r\n   * PubSub.unsubscribe(token);\r\n   * @example // Unsubscribing with a function\r\n   * PubSub.unsubscribe(myFunc);\r\n   * @example // Unsubscribing from a topic\r\n   * PubSub.unsubscribe('mytopic');\r\n   */\n\n\n  PubSub.unsubscribe = function (value) {\n    var descendantTopicExists = function (topic) {\n      var m;\n\n      for (m in messages) {\n        if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0) {\n          // a descendant of the topic exists:\n          return true;\n        }\n      }\n\n      return false;\n    },\n        isTopic = typeof value === 'string' && (messages.hasOwnProperty(value) || descendantTopicExists(value)),\n        isToken = !isTopic && typeof value === 'string',\n        isFunction = typeof value === 'function',\n        result = false,\n        m,\n        message,\n        t;\n\n    if (isTopic) {\n      PubSub.clearSubscriptions(value);\n      return;\n    }\n\n    for (m in messages) {\n      if (messages.hasOwnProperty(m)) {\n        message = messages[m];\n\n        if (isToken && message[value]) {\n          delete message[value];\n          result = value; // tokens are unique, so we can just stop here\n\n          break;\n        }\n\n        if (isFunction) {\n          for (t in message) {\n            if (message.hasOwnProperty(t) && message[t] === value) {\n              delete message[t];\n              result = true;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n});","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/pubsub-js/src/pubsub.js"],"names":["root","factory","PubSub","define","amd","exports","module","undefined","window","messages","lastUid","hasKeys","obj","key","hasOwnProperty","throwException","ex","reThrowException","callSubscriberWithDelayedExceptions","subscriber","message","data","setTimeout","callSubscriberWithImmediateExceptions","deliverMessage","originalMessage","matchedMessage","immediateExceptions","subscribers","callSubscriber","s","createDeliveryFunction","deliverNamespaced","topic","String","position","lastIndexOf","substr","messageHasSubscribers","found","Boolean","publish","sync","toString","deliver","hasSubscribers","publishSync","subscribe","func","token","subscribeOnce","unsubscribe","apply","arguments","clearAllSubscriptions","clearSubscriptions","m","indexOf","countSubscriptions","count","getSubscriptions","list","push","value","descendantTopicExists","isTopic","isToken","isFunction","result","t"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2010,2011,2012,2013,2014 Morgan Roderick http://roderick.dk\r\n * License: MIT - http://mrgnrdrck.mit-license.org\r\n *\r\n * https://github.com/mroderick/PubSubJS\r\n */\r\n\r\n(function (root, factory){\r\n    'use strict';\r\n\r\n    var PubSub = {};\r\n    root.PubSub = PubSub;\r\n\r\n    var define = root.define;\r\n\r\n    factory(PubSub);\r\n\r\n    // AMD support\r\n    if (typeof define === 'function' && define.amd){\r\n        define(function() { return PubSub; });\r\n\r\n        // CommonJS and Node.js module support\r\n    } else if (typeof exports === 'object'){\r\n        if (module !== undefined && module.exports) {\r\n            exports = module.exports = PubSub; // Node.js specific `module.exports`\r\n        }\r\n        exports.PubSub = PubSub; // CommonJS module 1.1.1 spec\r\n        module.exports = exports = PubSub; // CommonJS\r\n    }\r\n\r\n}(( typeof window === 'object' && window ) || this, function (PubSub){\r\n    'use strict';\r\n\r\n    var messages = {},\r\n        lastUid = -1;\r\n\r\n    function hasKeys(obj){\r\n        var key;\r\n\r\n        for (key in obj){\r\n            if ( obj.hasOwnProperty(key) ){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a function that throws the passed exception, for use as argument for setTimeout\r\n     * @alias throwException\r\n     * @function\r\n     * @param { Object } ex An Error object\r\n     */\r\n    function throwException( ex ){\r\n        return function reThrowException(){\r\n            throw ex;\r\n        };\r\n    }\r\n\r\n    function callSubscriberWithDelayedExceptions( subscriber, message, data ){\r\n        try {\r\n            subscriber( message, data );\r\n        } catch( ex ){\r\n            setTimeout( throwException( ex ), 0);\r\n        }\r\n    }\r\n\r\n    function callSubscriberWithImmediateExceptions( subscriber, message, data ){\r\n        subscriber( message, data );\r\n    }\r\n\r\n    function deliverMessage( originalMessage, matchedMessage, data, immediateExceptions ){\r\n        var subscribers = messages[matchedMessage],\r\n            callSubscriber = immediateExceptions ? callSubscriberWithImmediateExceptions : callSubscriberWithDelayedExceptions,\r\n            s;\r\n\r\n        if ( !messages.hasOwnProperty( matchedMessage ) ) {\r\n            return;\r\n        }\r\n\r\n        for (s in subscribers){\r\n            if ( subscribers.hasOwnProperty(s)){\r\n                callSubscriber( subscribers[s], originalMessage, data );\r\n            }\r\n        }\r\n    }\r\n\r\n    function createDeliveryFunction( message, data, immediateExceptions ){\r\n        return function deliverNamespaced(){\r\n            var topic = String( message ),\r\n                position = topic.lastIndexOf( '.' );\r\n\r\n            // deliver the message as it is now\r\n            deliverMessage(message, message, data, immediateExceptions);\r\n\r\n            // trim the hierarchy and deliver message to each level\r\n            while( position !== -1 ){\r\n                topic = topic.substr( 0, position );\r\n                position = topic.lastIndexOf('.');\r\n                deliverMessage( message, topic, data, immediateExceptions );\r\n            }\r\n        };\r\n    }\r\n\r\n    function messageHasSubscribers( message ){\r\n        var topic = String( message ),\r\n            found = Boolean(messages.hasOwnProperty( topic ) && hasKeys(messages[topic])),\r\n            position = topic.lastIndexOf( '.' );\r\n\r\n        while ( !found && position !== -1 ){\r\n            topic = topic.substr( 0, position );\r\n            position = topic.lastIndexOf( '.' );\r\n            found = Boolean(messages.hasOwnProperty( topic ) && hasKeys(messages[topic]));\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    function publish( message, data, sync, immediateExceptions ){\r\n        message = (typeof message === 'symbol') ? message.toString() : message;\r\n\r\n        var deliver = createDeliveryFunction( message, data, immediateExceptions ),\r\n            hasSubscribers = messageHasSubscribers( message );\r\n\r\n        if ( !hasSubscribers ){\r\n            return false;\r\n        }\r\n\r\n        if ( sync === true ){\r\n            deliver();\r\n        } else {\r\n            setTimeout( deliver, 0 );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Publishes the message, passing the data to it's subscribers\r\n     * @function\r\n     * @alias publish\r\n     * @param { String } message The message to publish\r\n     * @param {} data The data to pass to subscribers\r\n     * @return { Boolean }\r\n     */\r\n    PubSub.publish = function( message, data ){\r\n        return publish( message, data, false, PubSub.immediateExceptions );\r\n    };\r\n\r\n    /**\r\n     * Publishes the message synchronously, passing the data to it's subscribers\r\n     * @function\r\n     * @alias publishSync\r\n     * @param { String } message The message to publish\r\n     * @param {} data The data to pass to subscribers\r\n     * @return { Boolean }\r\n     */\r\n    PubSub.publishSync = function( message, data ){\r\n        return publish( message, data, true, PubSub.immediateExceptions );\r\n    };\r\n\r\n    /**\r\n     * Subscribes the passed function to the passed message. Every returned token is unique and should be stored if you need to unsubscribe\r\n     * @function\r\n     * @alias subscribe\r\n     * @param { String } message The message to subscribe to\r\n     * @param { Function } func The function to call when a new message is published\r\n     * @return { String }\r\n     */\r\n    PubSub.subscribe = function( message, func ){\r\n        if ( typeof func !== 'function'){\r\n            return false;\r\n        }\r\n\r\n        message = (typeof message === 'symbol') ? message.toString() : message;\r\n\r\n        // message is not registered yet\r\n        if ( !messages.hasOwnProperty( message ) ){\r\n            messages[message] = {};\r\n        }\r\n\r\n        // forcing token as String, to allow for future expansions without breaking usage\r\n        // and allow for easy use as key names for the 'messages' object\r\n        var token = 'uid_' + String(++lastUid);\r\n        messages[message][token] = func;\r\n        \r\n        // return token for unsubscribing\r\n        return token;\r\n    };\r\n\r\n    /**\r\n     * Subscribes the passed function to the passed message once\r\n     * @function\r\n     * @alias subscribeOnce\r\n     * @param { String } message The message to subscribe to\r\n     * @param { Function } func The function to call when a new message is published\r\n     * @return { PubSub }\r\n     */\r\n    PubSub.subscribeOnce = function( message, func ){\r\n        var token = PubSub.subscribe( message, function(){\r\n            // before func apply, unsubscribe message\r\n            PubSub.unsubscribe( token );\r\n            func.apply( this, arguments );\r\n        });\r\n        return PubSub;\r\n    };\r\n\r\n    /**\r\n     * Clears all subscriptions\r\n     * @function\r\n     * @public\r\n     * @alias clearAllSubscriptions\r\n     */\r\n    PubSub.clearAllSubscriptions = function clearAllSubscriptions(){\r\n        messages = {};\r\n    };\r\n\r\n    /**\r\n     * Clear subscriptions by the topic\r\n     * @function\r\n     * @public\r\n     * @alias clearAllSubscriptions\r\n     * @return { int }\r\n     */\r\n    PubSub.clearSubscriptions = function clearSubscriptions(topic){\r\n        var m;\r\n        for (m in messages){\r\n            if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0){\r\n                delete messages[m];\r\n            }\r\n        }\r\n    };\r\n\r\n    /** \r\n       Count subscriptions by the topic\r\n     * @function\r\n     * @public\r\n     * @alias countSubscriptions\r\n     * @return { Array }\r\n    */\r\n    PubSub.countSubscriptions = function countSubscriptions(topic){\r\n        var m;\r\n        var count = 0;\r\n        for (m in messages){\r\n            if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0){\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    };\r\n\r\n    \r\n    /** \r\n       Gets subscriptions by the topic\r\n     * @function\r\n     * @public\r\n     * @alias getSubscriptions\r\n    */\r\n    PubSub.getSubscriptions = function getSubscriptions(topic){\r\n        var m;\r\n        var list = [];\r\n        for (m in messages){\r\n            if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0){\r\n                list.push(m);\r\n            }\r\n        }\r\n        return list;\r\n    };\r\n\r\n    /**\r\n     * Removes subscriptions\r\n     *\r\n     * - When passed a token, removes a specific subscription.\r\n     *\r\n\t * - When passed a function, removes all subscriptions for that function\r\n     *\r\n\t * - When passed a topic, removes all subscriptions for that topic (hierarchy)\r\n     * @function\r\n     * @public\r\n     * @alias subscribeOnce\r\n     * @param { String | Function } value A token, function or topic to unsubscribe from\r\n     * @example // Unsubscribing with a token\r\n     * var token = PubSub.subscribe('mytopic', myFunc);\r\n     * PubSub.unsubscribe(token);\r\n     * @example // Unsubscribing with a function\r\n     * PubSub.unsubscribe(myFunc);\r\n     * @example // Unsubscribing from a topic\r\n     * PubSub.unsubscribe('mytopic');\r\n     */\r\n    PubSub.unsubscribe = function(value){\r\n        var descendantTopicExists = function(topic) {\r\n                var m;\r\n                for ( m in messages ){\r\n                    if ( messages.hasOwnProperty(m) && m.indexOf(topic) === 0 ){\r\n                        // a descendant of the topic exists:\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n            isTopic    = typeof value === 'string' && ( messages.hasOwnProperty(value) || descendantTopicExists(value) ),\r\n            isToken    = !isTopic && typeof value === 'string',\r\n            isFunction = typeof value === 'function',\r\n            result = false,\r\n            m, message, t;\r\n\r\n        if (isTopic){\r\n            PubSub.clearSubscriptions(value);\r\n            return;\r\n        }\r\n\r\n        for ( m in messages ){\r\n            if ( messages.hasOwnProperty( m ) ){\r\n                message = messages[m];\r\n\r\n                if ( isToken && message[value] ){\r\n                    delete message[value];\r\n                    result = value;\r\n                    // tokens are unique, so we can just stop here\r\n                    break;\r\n                }\r\n\r\n                if (isFunction) {\r\n                    for ( t in message ){\r\n                        if (message.hasOwnProperty(t) && message[t] === value){\r\n                            delete message[t];\r\n                            result = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n}));\r\n"]},"metadata":{},"sourceType":"script"}