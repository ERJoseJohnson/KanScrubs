{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose Johnson\\\\Desktop\\\\KanScrubs\\\\FRONTEND\\\\src\\\\App (2).js\";\nimport React from 'react';\nimport './App.css';\nimport Chatbox from \"./chat_ui/Chatbox\";\nimport \"tachyons\";\nimport Login_n from \"./login/Login_n\";\nimport axios from \"axios\";\nimport rainbowSDK from 'rainbow-web-sdk';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.onReady = () => {\n      var myRainbowLogin = this.state.userName; //\"JohnDoe@mymail.sutd.edu.sg\";       // Replace by your login\n\n      var myRainbowPassword = this.state.password; //\"IAmJohnDoes1!\"; // Replace by your password\n\n      var msg;\n      console.log('this is the username', this.state.userName);\n      console.log('this is the password', this.state.password);\n      console.log(myRainbowLogin);\n      console.log(myRainbowPassword); // The SDK for Web is ready to be used, so you can sign in\n\n      rainbowSDK.connection.signin(myRainbowLogin, myRainbowPassword).then(function (account) {\n        // Successfully signed to Rainbow and the SDK is started completely. Rainbow data can be retrieved.\n        let onNewMessageReceived = function (event) {\n          let message = event.detail.message;\n          let conversation = event.detail.conversation;\n          let messageContent = \"\";\n          console.log(message); // Acknowledge it\n\n          rainbowSDK.im.markMessageFromConversationAsRead(conversation, message); // Text message received\n\n          messageContent = message.data;\n          console.log(messageContent);\n          msg = messageContent; // var new_history = this.state.history;\n          // new_history.push({ user: \"admin\", message: messageContent });\n          // this.setState({ history: new_history });\n          // Send an answer\n          // rainbowSDK.im.sendMessageToConversation(conversation, messageContent + \" read!\");\n          // console.log(\"APSDOKAOPSDKPAOSKDP\");\n          // let jid = \"3ef04d45a9784a61bc1868a07ff9cf6d@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\"\n          // // let myContact = rainbowSDK.contacts.getContactByJID(\"85f5342e76c44c219eeff89d2ee49483@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\");\n          // // console.log(myContact);\n          // let myContact;\n          // rainbowSDK.contacts.searchByJid(jid).then((contact) => {\n          //   rainbowSDK.contacts.addToNetwork(contact).then((theContact) => {\n          //     myContact = theContact\n          //   }).then((err) => {\n          //     console.log(err);\n          //   })\n          // }).then((err) => {\n          //   console.log(err)\n          //   rainbowSDK.conversations.openConversationForContact(myContact).then((conversation) => {\n          //     rainbowSDK.im.sendMessageToConversation(conversation, \"It works!\");\n          //   }).catch((err) => {\n          //     console.log(err)\n          //   })\n          // })\n        };\n\n        document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, onNewMessageReceived);\n      }).catch(function (err) {\n        // An error occurs (e.g. bad credentials). Application could be informed that sign in has failed\n        console.log(\"ERROR\");\n        console.log(err);\n      });\n      var new_history = this.state.history;\n      new_history.push({\n        user: this.state.userName,\n        message: msg\n      });\n      this.setState({\n        history: new_history\n      });\n      this.setState({\n        loggedin: 1\n      });\n      this.render(); // Listen when the SDK is ready\n\n      document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady);\n    };\n\n    this.receiveMessage = event => {\n      // let onNewMessageReceived = function (event) {\n      let message = event.detail.message;\n      let conversation = event.detail.conversation;\n      let messageContent = \"\";\n      console.log(message); // Acknowledge it\n\n      rainbowSDK.im.markMessageFromConversationAsRead(conversation, message); // Text message received\n\n      messageContent = message.data;\n      console.log(messageContent);\n      var new_history = this.state.history;\n      new_history.push({\n        user: \"admin\",\n        message: messageContent\n      });\n      this.setState({\n        history: new_history\n      }); // };\n\n      document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, this.onNewMessageReceived);\n    };\n\n    this.onLoaded = () => {\n      console.log('[Hello World] :: On SDK Loaded !');\n      rainbowSDK.initialize('82246ae05a3611eabf7e77d14e87b936', 'OLt1Qpu7fsCDNvT0r42waj0l4EeLe1Wb2nox0vpWGrpuqg4uunxwztDbJFAJKfwD').then(() => {\n        console.log('[Hello World] :: Rainbow SDK is initialized!');\n      }).catch(err => {\n        console.log('[Hello World] :: Something went wrong with the SDK.', err);\n      });\n    };\n\n    this.updateHistory = event => {\n      // send message code\n      event.preventDefault();\n      this.setState({\n        stored_value: event.target[0].value\n      });\n    };\n\n    this.login = (username, password, queryType) => {\n      console.log(username, \"*********************************\");\n      this.state.userName = username; //this.setState({ userName: username });\n\n      this.setState({\n        password: password\n      });\n      this.setState({\n        queryType: queryType\n      });\n      console.log(username);\n      const customerCreds = {\n        username: username,\n        password: password,\n        queryType: queryType\n      }; // console.log(customerCreds);\n\n      let route = 'http://localhost:3001/login/'.concat(username);\n      console.log(route);\n      let stateOfReq = \"false\"; // while (stateOfReq == \"false\") {\n      //   axios.post(route, customerCreds)\n      //     .then((response) => {\n      //       console.log(response.data);\n      //       stateOfReq = response.data.success\n      //       let customerID = response.data.customer\n      //       let agentID = response.data.agent\n      //     }, (error) => {\n      //       console.log(error);\n      //     });\n      // }\n\n      document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady);\n      document.addEventListener(rainbowSDK.RAINBOW_ONLOADED, this.onLoaded);\n      rainbowSDK.start();\n      rainbowSDK.load(); //this.setState({ loggedin: 1 });\n\n      console.log(\"logged in \");\n    };\n\n    this.signout = () => {\n      window.location.reload(true);\n    };\n\n    this.doSomethingBeforeUnload = () => {\n      // Do something\n      window.alert(\"Are you sure you want to close ? \");\n    };\n\n    this.setupBeforeUnloadListener = () => {\n      window.addEventListener(\"beforeunload\", ev => {\n        ev.preventDefault();\n        ev.returnValue(\"are you sure you want to leave\");\n        return this.doSomethingBeforeUnload();\n      });\n    };\n\n    this.test = () => {\n      if (this.state.loggedin == 0) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          className: \"tc\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 11\n          }\n        }, this.state.message), /*#__PURE__*/React.createElement(Login_n, {\n          userInfo: this.state,\n          onSubmit: this.login,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Chatbox, {\n          history: this.state.history,\n          onMessage: this.updateHistory,\n          signOut: this.signout,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 29\n          }\n        })));\n      }\n    };\n\n    this.state = {\n      stored_value: \"Your Message will appear hear\",\n      loggedin: 0,\n      history: [],\n      userName: \"\",\n      password: \"\",\n      queryType: \"\",\n      message: \"\"\n    };\n  } // init rainbow sdk and set up listening\n\n\n  componentDidMount() {\n    // Activate the event listener\n    this.setupBeforeUnloadListener();\n  }\n\n  render() {\n    return this.test();\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/FRONTEND/src/App (2).js"],"names":["React","Chatbox","Login_n","axios","rainbowSDK","App","Component","constructor","onReady","myRainbowLogin","state","userName","myRainbowPassword","password","msg","console","log","connection","signin","then","account","onNewMessageReceived","event","message","detail","conversation","messageContent","im","markMessageFromConversationAsRead","data","document","addEventListener","RAINBOW_ONNEWIMMESSAGERECEIVED","catch","err","new_history","history","push","user","setState","loggedin","render","RAINBOW_ONREADY","receiveMessage","onLoaded","initialize","updateHistory","preventDefault","stored_value","target","value","login","username","queryType","customerCreds","route","concat","stateOfReq","RAINBOW_ONLOADED","start","load","signout","window","location","reload","doSomethingBeforeUnload","alert","setupBeforeUnloadListener","ev","returnValue","test","componentDidMount"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Chatbox from \"./chat_ui/Chatbox\";\r\nimport \"tachyons\";\r\nimport Login_n from \"./login/Login_n\";\r\nimport axios from \"axios\";\r\nimport rainbowSDK from 'rainbow-web-sdk';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      stored_value: \"Your Message will appear hear\",\r\n      loggedin: 0,\r\n      history: [],\r\n      userName: \"\",\r\n      password: \"\",\r\n      queryType: \"\",\r\n      message: \"\",\r\n    }\r\n\r\n\r\n  }\r\n\r\n  // init rainbow sdk and set up listening\r\n  onReady = () => {\r\n\r\n    var myRainbowLogin = this.state.userName; //\"JohnDoe@mymail.sutd.edu.sg\";       // Replace by your login\r\n    var myRainbowPassword = this.state.password; //\"IAmJohnDoes1!\"; // Replace by your password\r\n    var msg;\r\n    console.log('this is the username', this.state.userName)\r\n    console.log('this is the password', this.state.password)\r\n    console.log(myRainbowLogin)\r\n    console.log(myRainbowPassword)\r\n    // The SDK for Web is ready to be used, so you can sign in\r\n    rainbowSDK.connection.signin(myRainbowLogin, myRainbowPassword)\r\n      .then(function (account) {\r\n        // Successfully signed to Rainbow and the SDK is started completely. Rainbow data can be retrieved.\r\n        let onNewMessageReceived = function (event) {\r\n\r\n          let message = event.detail.message;\r\n          let conversation = event.detail.conversation;\r\n          let messageContent = \"\";\r\n\r\n          console.log(message)\r\n\r\n          // Acknowledge it\r\n          rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\r\n\r\n          // Text message received\r\n          messageContent = message.data;\r\n          console.log(messageContent)\r\n          msg = messageContent;\r\n\r\n\r\n          // var new_history = this.state.history;\r\n          // new_history.push({ user: \"admin\", message: messageContent });\r\n          // this.setState({ history: new_history });\r\n\r\n          // Send an answer\r\n          // rainbowSDK.im.sendMessageToConversation(conversation, messageContent + \" read!\");\r\n\r\n          // console.log(\"APSDOKAOPSDKPAOSKDP\");\r\n          // let jid = \"3ef04d45a9784a61bc1868a07ff9cf6d@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\"\r\n          // // let myContact = rainbowSDK.contacts.getContactByJID(\"85f5342e76c44c219eeff89d2ee49483@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\");\r\n          // // console.log(myContact);\r\n          // let myContact;\r\n          // rainbowSDK.contacts.searchByJid(jid).then((contact) => {\r\n          //   rainbowSDK.contacts.addToNetwork(contact).then((theContact) => {\r\n          //     myContact = theContact\r\n\r\n          //   }).then((err) => {\r\n          //     console.log(err);\r\n\r\n          //   })\r\n          // }).then((err) => {\r\n          //   console.log(err)\r\n          //   rainbowSDK.conversations.openConversationForContact(myContact).then((conversation) => {\r\n          //     rainbowSDK.im.sendMessageToConversation(conversation, \"It works!\");\r\n          //   }).catch((err) => {\r\n          //     console.log(err)\r\n          //   })\r\n          // })\r\n\r\n\r\n        };\r\n        document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, onNewMessageReceived)\r\n\r\n\r\n      })\r\n      .catch(function (err) {\r\n        // An error occurs (e.g. bad credentials). Application could be informed that sign in has failed\r\n        console.log(\"ERROR\");\r\n        console.log(err)\r\n      });\r\n    var new_history = this.state.history;\r\n    new_history.push({ user: this.state.userName, message: msg });\r\n    this.setState({ history: new_history });\r\n    this.setState({ loggedin: 1 });\r\n    this.render();\r\n    // Listen when the SDK is ready\r\n    document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady)\r\n  };\r\n\r\n  receiveMessage = (event) => {\r\n    // let onNewMessageReceived = function (event) {\r\n\r\n    let message = event.detail.message;\r\n    let conversation = event.detail.conversation;\r\n    let messageContent = \"\";\r\n\r\n    console.log(message)\r\n\r\n    // Acknowledge it\r\n    rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\r\n\r\n    // Text message received\r\n    messageContent = message.data;\r\n    console.log(messageContent)\r\n\r\n    var new_history = this.state.history;\r\n    new_history.push({ user: \"admin\", message: messageContent });\r\n    this.setState({ history: new_history });\r\n    // };\r\n\r\n    document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, this.onNewMessageReceived)\r\n  }\r\n  onLoaded = () => {\r\n    console.log('[Hello World] :: On SDK Loaded !');\r\n\r\n    rainbowSDK\r\n      .initialize('82246ae05a3611eabf7e77d14e87b936', 'OLt1Qpu7fsCDNvT0r42waj0l4EeLe1Wb2nox0vpWGrpuqg4uunxwztDbJFAJKfwD')\r\n      .then(() => {\r\n        console.log('[Hello World] :: Rainbow SDK is initialized!');\r\n      })\r\n      .catch(err => {\r\n        console.log('[Hello World] :: Something went wrong with the SDK.', err);\r\n      });\r\n  };\r\n  updateHistory = (event) => {\r\n    // send message code\r\n    event.preventDefault();\r\n    this.setState({ stored_value: event.target[0].value });\r\n  };\r\n\r\n  login = (username, password, queryType) => {\r\n    console.log(username, \"*********************************\")\r\n    this.state.userName = username;\r\n    //this.setState({ userName: username });\r\n    this.setState({ password: password });\r\n    this.setState({ queryType: queryType });\r\n    console.log(username);\r\n    const customerCreds = {\r\n      username: username,\r\n      password: password,\r\n      queryType: queryType\r\n    }\r\n    // console.log(customerCreds);\r\n    let route = 'http://localhost:3001/login/'.concat(username);\r\n    console.log(route);\r\n\r\n    let stateOfReq = \"false\";\r\n    // while (stateOfReq == \"false\") {\r\n\r\n    //   axios.post(route, customerCreds)\r\n    //     .then((response) => {\r\n    //       console.log(response.data);\r\n    //       stateOfReq = response.data.success\r\n    //       let customerID = response.data.customer\r\n    //       let agentID = response.data.agent\r\n    //     }, (error) => {\r\n    //       console.log(error);\r\n    //     });\r\n    // }\r\n\r\n    document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady);\r\n\r\n    document.addEventListener(rainbowSDK.RAINBOW_ONLOADED, this.onLoaded);\r\n    rainbowSDK.start();\r\n    rainbowSDK.load();\r\n\r\n\r\n    //this.setState({ loggedin: 1 });\r\n\r\n    console.log(\"logged in \")\r\n  };\r\n\r\n  signout = () => {\r\n    window.location.reload(true);\r\n  }\r\n\r\n  // Things to do before unloading/closing the tab\r\n  doSomethingBeforeUnload = () => {\r\n    // Do something\r\n    window.alert(\"Are you sure you want to close ? \")\r\n  }\r\n\r\n  // Setup the `beforeunload` event listener\r\n  setupBeforeUnloadListener = () => {\r\n    window.addEventListener(\"beforeunload\", (ev) => {\r\n      ev.preventDefault();\r\n\r\n      ev.returnValue(\"are you sure you want to leave\")\r\n      return this.doSomethingBeforeUnload();\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Activate the event listener\r\n    this.setupBeforeUnloadListener();\r\n  }\r\n\r\n\r\n\r\n  test = () => {\r\n    if (this.state.loggedin == 0) {\r\n      return (\r\n        <div>\r\n          <p className=\"tc\">{this.state.message}</p>\r\n          <Login_n userInfo={this.state} onSubmit={this.login} />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <div className=\"\"><Chatbox history={this.state.history} onMessage={this.updateHistory} signOut={this.signout} /></div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n\r\n      this.test()\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n"]},"metadata":{},"sourceType":"module"}