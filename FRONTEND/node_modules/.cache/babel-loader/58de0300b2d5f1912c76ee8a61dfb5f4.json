{"ast":null,"code":"var _jsxFileName = \"/mnt/d/SUTD/Term 5/50.003 ESC/nuked_project/KanScrubs/FRONTEND/src/App (2).js\";\nimport React from 'react';\nimport './App.css';\nimport Chatbox from \"./chat_ui/Chatbox\";\nimport \"tachyons\";\nimport Login_n from \"./login/Login_n\";\nimport axios from \"axios\";\nimport rainbowSDK from 'rainbow-web-sdk';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.onReady = () => {\n      var myRainbowLogin = this.state.userName; //\"JohnDoe@mymail.sutd.edu.sg\";       // Replace by your login\n\n      var myRainbowPassword = this.state.password; //\"IAmJohnDoes1!\"; // Replace by your password\n\n      var msg;\n      console.log('this is the username', this.state.userName);\n      console.log('this is the password', this.state.password);\n      console.log(myRainbowLogin);\n      console.log(myRainbowPassword); // The SDK for Web is ready to be used, so you can sign in\n\n      rainbowSDK.connection.signin(myRainbowLogin, myRainbowPassword).then(function (account) {\n        // Successfully signed to Rainbow and the SDK is started completely. Rainbow data can be retrieved.\n        let onNewMessageReceived = function (event) {\n          let message = event.detail.message;\n          let conversation = event.detail.conversation;\n          let messageContent = \"\";\n          console.log(message); // Acknowledge it\n\n          rainbowSDK.im.markMessageFromConversationAsRead(conversation, message); // Text message received\n\n          messageContent = message.data;\n          console.log(messageContent);\n          msg = messageContent; // var new_history = this.state.history;\n          // new_history.push({ user: \"admin\", message: messageContent });\n          // this.setState({ history: new_history });\n          // Send an answer\n          // rainbowSDK.im.sendMessageToConversation(conversation, messageContent + \" read!\");\n          // console.log(\"APSDOKAOPSDKPAOSKDP\");\n          // let jid = \"3ef04d45a9784a61bc1868a07ff9cf6d@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\"\n          // // let myContact = rainbowSDK.contacts.getContactByJID(\"85f5342e76c44c219eeff89d2ee49483@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\");\n          // // console.log(myContact);\n          // let myContact;\n          // rainbowSDK.contacts.searchByJid(jid).then((contact) => {\n          //   rainbowSDK.contacts.addToNetwork(contact).then((theContact) => {\n          //     myContact = theContact\n          //   }).then((err) => {\n          //     console.log(err);\n          //   })\n          // }).then((err) => {\n          //   console.log(err)\n          //   rainbowSDK.conversations.openConversationForContact(myContact).then((conversation) => {\n          //     rainbowSDK.im.sendMessageToConversation(conversation, \"It works!\");\n          //   }).catch((err) => {\n          //     console.log(err)\n          //   })\n          // })\n\n          console.log(\"I am here ******************************************\");\n          var new_history = this.state.history;\n          new_history.push({\n            user: this.state.userName,\n            message: msg\n          });\n          console.log(new_history);\n          this.setState({\n            history: new_history\n          });\n        };\n\n        document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, onNewMessageReceived);\n      }).catch(function (err) {\n        // An error occurs (e.g. bad credentials). Application could be informed that sign in has failed\n        console.log(\"ERROR\");\n        console.log(err);\n      }); // console.log(\"I am here ******************************************\")\n      // var new_history = this.state.history;\n      // new_history.push({ user: this.state.userName, message: msg });\n      // console.log(new_history);\n      // this.setState({ history: new_history });\n\n      this.setState({\n        loggedin: 1\n      }); // this.render();\n      // Listen when the SDK is ready\n      // document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady)\n    };\n\n    this.receiveMessage = function (event) {\n      // let onNewMessageReceived = function (event) {\n      let message = event.detail.message;\n      let conversation = event.detail.conversation;\n      let messageContent = \"\";\n      console.log(message); // Acknowledge it\n\n      rainbowSDK.im.markMessageFromConversationAsRead(conversation, message); // Text message received\n\n      messageContent = message.data;\n      console.log(messageContent);\n      var new_history = this.state.history;\n      new_history.push({\n        user: \"admin\",\n        message: messageContent\n      });\n      this.setState({\n        history: new_history\n      }); // };\n\n      document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, this.onNewMessageReceived);\n    };\n\n    this.onLoaded = () => {\n      console.log('[Hello World] :: On SDK Loaded !');\n      rainbowSDK.initialize('82246ae05a3611eabf7e77d14e87b936', 'OLt1Qpu7fsCDNvT0r42waj0l4EeLe1Wb2nox0vpWGrpuqg4uunxwztDbJFAJKfwD').then(() => {\n        console.log('[Hello World] :: Rainbow SDK is initialized!');\n      }).catch(err => {\n        console.log('[Hello World] :: Something went wrong with the SDK.', err);\n      });\n    };\n\n    this.updateHistory = event => {\n      // send message code\n      event.preventDefault();\n      this.setState({\n        stored_value: event.target[0].value\n      });\n    };\n\n    this.login = (username, password, queryType) => {\n      console.log(username, \"*********************************\");\n      this.state.userName = username; //this.setState({ userName: username });\n\n      this.setState({\n        password: password\n      });\n      this.setState({\n        queryType: queryType\n      });\n      console.log(username);\n      const customerCreds = {\n        username: username,\n        password: password,\n        queryType: queryType\n      }; // console.log(customerCreds);\n\n      let route = 'http://localhost:3001/login/'.concat(username);\n      console.log(route);\n      let stateOfReq = \"false\"; // while (stateOfReq == \"false\") {\n      //   axios.post(route, customerCreds)\n      //     .then((response) => {\n      //       console.log(response.data);\n      //       stateOfReq = response.data.success\n      //       let customerID = response.data.customer\n      //       let agentID = response.data.agent\n      //     }, (error) => {\n      //       console.log(error);\n      //     });\n      // }\n\n      document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady);\n      document.addEventListener(rainbowSDK.RAINBOW_ONLOADED, this.onLoaded);\n      rainbowSDK.start();\n      rainbowSDK.load(); //this.setState({ loggedin: 1 });\n\n      console.log(\"logged in \");\n    };\n\n    this.signout = () => {\n      window.location.reload(true);\n    };\n\n    this.doSomethingBeforeUnload = () => {\n      // Do something\n      window.alert(\"Are you sure you want to close ? \");\n    };\n\n    this.setupBeforeUnloadListener = () => {\n      window.addEventListener(\"beforeunload\", ev => {\n        ev.preventDefault();\n        ev.returnValue(\"are you sure you want to leave\");\n        return this.doSomethingBeforeUnload();\n      });\n    };\n\n    this.test = () => {\n      if (this.state.loggedin == 0) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          className: \"tc\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 11\n          }\n        }, this.state.message), /*#__PURE__*/React.createElement(Login_n, {\n          userInfo: this.state,\n          onSubmit: this.login,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Chatbox, {\n          history: this.state.history,\n          onMessage: this.updateHistory,\n          signOut: this.signout,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }\n        })));\n      }\n    };\n\n    this.state = {\n      stored_value: \"Your Message will appear hear\",\n      loggedin: 0,\n      history: [{\n        user: \"customer1\",\n        message: \"asdfasdf\"\n      }],\n      userName: \"\",\n      password: \"\",\n      queryType: \"\",\n      message: \"\"\n    };\n  } // init rainbow sdk and set up listening\n\n\n  componentDidMount() {\n    // Activate the event listener\n    this.setupBeforeUnloadListener();\n  }\n\n  render() {\n    return this.test();\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/mnt/d/SUTD/Term 5/50.003 ESC/nuked_project/KanScrubs/FRONTEND/src/App (2).js"],"names":["React","Chatbox","Login_n","axios","rainbowSDK","App","Component","constructor","onReady","myRainbowLogin","state","userName","myRainbowPassword","password","msg","console","log","connection","signin","then","account","onNewMessageReceived","event","message","detail","conversation","messageContent","im","markMessageFromConversationAsRead","data","new_history","history","push","user","setState","document","addEventListener","RAINBOW_ONNEWIMMESSAGERECEIVED","catch","err","loggedin","receiveMessage","onLoaded","initialize","updateHistory","preventDefault","stored_value","target","value","login","username","queryType","customerCreds","route","concat","stateOfReq","RAINBOW_ONREADY","RAINBOW_ONLOADED","start","load","signout","window","location","reload","doSomethingBeforeUnload","alert","setupBeforeUnloadListener","ev","returnValue","test","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Chatbox from \"./chat_ui/Chatbox\";\nimport \"tachyons\";\nimport Login_n from \"./login/Login_n\";\nimport axios from \"axios\";\nimport rainbowSDK from 'rainbow-web-sdk';\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stored_value: \"Your Message will appear hear\",\n      loggedin: 0,\n      history: [{ user: \"customer1\", message: \"asdfasdf\" }],\n      userName: \"\",\n      password: \"\",\n      queryType: \"\",\n      message: \"\",\n    }\n\n\n  }\n\n  // init rainbow sdk and set up listening\n  onReady = () => {\n\n    var myRainbowLogin = this.state.userName; //\"JohnDoe@mymail.sutd.edu.sg\";       // Replace by your login\n    var myRainbowPassword = this.state.password; //\"IAmJohnDoes1!\"; // Replace by your password\n    var msg;\n    console.log('this is the username', this.state.userName)\n    console.log('this is the password', this.state.password)\n    console.log(myRainbowLogin)\n    console.log(myRainbowPassword)\n    // The SDK for Web is ready to be used, so you can sign in\n    rainbowSDK.connection.signin(myRainbowLogin, myRainbowPassword)\n      .then(function (account) {\n        // Successfully signed to Rainbow and the SDK is started completely. Rainbow data can be retrieved.\n        let onNewMessageReceived = function (event) {\n\n          let message = event.detail.message;\n          let conversation = event.detail.conversation;\n          let messageContent = \"\";\n\n          console.log(message)\n\n          // Acknowledge it\n          rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\n\n          // Text message received\n          messageContent = message.data;\n          console.log(messageContent)\n          msg = messageContent;\n\n\n          // var new_history = this.state.history;\n          // new_history.push({ user: \"admin\", message: messageContent });\n          // this.setState({ history: new_history });\n\n          // Send an answer\n          // rainbowSDK.im.sendMessageToConversation(conversation, messageContent + \" read!\");\n\n          // console.log(\"APSDOKAOPSDKPAOSKDP\");\n          // let jid = \"3ef04d45a9784a61bc1868a07ff9cf6d@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\"\n          // // let myContact = rainbowSDK.contacts.getContactByJID(\"85f5342e76c44c219eeff89d2ee49483@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\");\n          // // console.log(myContact);\n          // let myContact;\n          // rainbowSDK.contacts.searchByJid(jid).then((contact) => {\n          //   rainbowSDK.contacts.addToNetwork(contact).then((theContact) => {\n          //     myContact = theContact\n\n          //   }).then((err) => {\n          //     console.log(err);\n\n          //   })\n          // }).then((err) => {\n          //   console.log(err)\n          //   rainbowSDK.conversations.openConversationForContact(myContact).then((conversation) => {\n          //     rainbowSDK.im.sendMessageToConversation(conversation, \"It works!\");\n          //   }).catch((err) => {\n          //     console.log(err)\n          //   })\n          // })\n          console.log(\"I am here ******************************************\")\n          var new_history = this.state.history;\n          new_history.push({ user: this.state.userName, message: msg });\n          console.log(new_history);\n          this.setState({ history: new_history });\n\n        };\n        document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, onNewMessageReceived)\n\n\n      })\n      .catch(function (err) {\n        // An error occurs (e.g. bad credentials). Application could be informed that sign in has failed\n        console.log(\"ERROR\");\n        console.log(err)\n      });\n    // console.log(\"I am here ******************************************\")\n    // var new_history = this.state.history;\n    // new_history.push({ user: this.state.userName, message: msg });\n    // console.log(new_history);\n    // this.setState({ history: new_history });\n    this.setState({ loggedin: 1 });\n    // this.render();\n    // Listen when the SDK is ready\n    // document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady)\n  };\n\n  receiveMessage = function (event) {\n    // let onNewMessageReceived = function (event) {\n\n    let message = event.detail.message;\n    let conversation = event.detail.conversation;\n    let messageContent = \"\";\n\n    console.log(message)\n\n    // Acknowledge it\n    rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\n\n    // Text message received\n    messageContent = message.data;\n    console.log(messageContent)\n\n    var new_history = this.state.history;\n    new_history.push({ user: \"admin\", message: messageContent });\n    this.setState({ history: new_history });\n    // };\n\n    document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, this.onNewMessageReceived)\n  }\n  onLoaded = () => {\n    console.log('[Hello World] :: On SDK Loaded !');\n\n    rainbowSDK\n      .initialize('82246ae05a3611eabf7e77d14e87b936', 'OLt1Qpu7fsCDNvT0r42waj0l4EeLe1Wb2nox0vpWGrpuqg4uunxwztDbJFAJKfwD')\n      .then(() => {\n        console.log('[Hello World] :: Rainbow SDK is initialized!');\n      })\n      .catch(err => {\n        console.log('[Hello World] :: Something went wrong with the SDK.', err);\n      });\n  };\n  updateHistory = (event) => {\n    // send message code\n    event.preventDefault();\n    this.setState({ stored_value: event.target[0].value });\n  };\n\n  login = (username, password, queryType) => {\n    console.log(username, \"*********************************\")\n    this.state.userName = username;\n    //this.setState({ userName: username });\n    this.setState({ password: password });\n    this.setState({ queryType: queryType });\n    console.log(username);\n    const customerCreds = {\n      username: username,\n      password: password,\n      queryType: queryType\n    }\n    // console.log(customerCreds);\n    let route = 'http://localhost:3001/login/'.concat(username);\n    console.log(route);\n\n    let stateOfReq = \"false\";\n    // while (stateOfReq == \"false\") {\n\n    //   axios.post(route, customerCreds)\n    //     .then((response) => {\n    //       console.log(response.data);\n    //       stateOfReq = response.data.success\n    //       let customerID = response.data.customer\n    //       let agentID = response.data.agent\n    //     }, (error) => {\n    //       console.log(error);\n    //     });\n    // }\n\n    document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady);\n\n    document.addEventListener(rainbowSDK.RAINBOW_ONLOADED, this.onLoaded);\n    rainbowSDK.start();\n    rainbowSDK.load();\n\n\n    //this.setState({ loggedin: 1 });\n\n    console.log(\"logged in \")\n  };\n\n  signout = () => {\n    window.location.reload(true);\n  }\n\n  // Things to do before unloading/closing the tab\n  doSomethingBeforeUnload = () => {\n    // Do something\n    window.alert(\"Are you sure you want to close ? \")\n  }\n\n  // Setup the `beforeunload` event listener\n  setupBeforeUnloadListener = () => {\n    window.addEventListener(\"beforeunload\", (ev) => {\n      ev.preventDefault();\n\n      ev.returnValue(\"are you sure you want to leave\")\n      return this.doSomethingBeforeUnload();\n    });\n  };\n\n  componentDidMount() {\n    // Activate the event listener\n    this.setupBeforeUnloadListener();\n  }\n\n\n\n  test = () => {\n    if (this.state.loggedin == 0) {\n      return (\n        <div>\n          <p className=\"tc\">{this.state.message}</p>\n          <Login_n userInfo={this.state} onSubmit={this.login} />\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <div className=\"\"><Chatbox history={this.state.history} onMessage={this.updateHistory} signOut={this.signout} /></div>\n        </div>\n      );\n    }\n\n  };\n\n\n  render() {\n    return (\n\n      this.test()\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}