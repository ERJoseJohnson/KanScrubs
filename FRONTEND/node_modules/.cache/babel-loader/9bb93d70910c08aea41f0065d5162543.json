{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose Johnson\\\\Desktop\\\\KanScrubs\\\\FRONTEND\\\\src\\\\App (2).js\";\nimport React from 'react';\nimport './App.css';\nimport Chatbox from \"./chat_ui/Chatbox\";\nimport \"tachyons\";\nimport Login_n from \"./login/Login_n\";\nimport axios from \"axios\";\nimport rainbowSDK from 'rainbow-web-sdk';\nimport MessageBox from \"./intermediate/MessageBox\";\nlet msg;\nlet prevMessage;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.onReady = () => {\n      var myRainbowLogin = this.state.userName; //\"JohnDoe@mymail.sutd.edu.sg\";       // Replace by your login\n\n      var myRainbowPassword = this.state.password; //\"IAmJohnDoes1!\"; // Replace by your password\n\n      console.log('this is the username', this.state.userName);\n      console.log('this is the password', this.state.password);\n      console.log(myRainbowLogin);\n      console.log(myRainbowPassword); // The SDK for Web is ready to be used, so you can sign in\n\n      rainbowSDK.connection.signin(myRainbowLogin, myRainbowPassword).then(function (account) {// Successfully signed to Rainbow and the SDK is started completely. Rainbow data can be retrieved.\n        // let onNewMessageReceived = function (event) {\n        //   let message = event.detail.message;\n        //   let conversation = event.detail.conversation;\n        //   let messageContent = \"\";\n        //   console.log(message)\n        //   // Acknowledge it\n        //   rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\n        //   // Text message received\n        //   messageContent = message.data;\n        //   console.log(messageContent)\n        //   msg = messageContent;\n        //   console.log(msg)\n        // var new_history = this.state.history;\n        // new_history.push({ user: \"admin\", message: messageContent });\n        // this.setState({ history: new_history });\n        // Send an answer\n        // rainbowSDK.im.sendMessageToConversation(conversation, messageContent + \" read!\");\n        // console.log(\"APSDOKAOPSDKPAOSKDP\");\n        // let jid = \"3ef04d45a9784a61bc1868a07ff9cf6d@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\"\n        // // let myContact = rainbowSDK.contacts.getContactByJID(\"85f5342e76c44c219eeff89d2ee49483@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\");\n        // // console.log(myContact);\n        // let myContact;\n        // rainbowSDK.contacts.searchByJid(jid).then((contact) => {\n        //   rainbowSDK.contacts.addToNetwork(contact).then((theContact) => {\n        //     myContact = theContact\n        //   }).then((err) => {\n        //     console.log(err);\n        //   })\n        // }).then((err) => {\n        //   console.log(err)\n        //   rainbowSDK.conversations.openConversationForContact(myContact).then((conversation) => {\n        //     rainbowSDK.im.sendMessageToConversation(conversation, \"It works!\");\n        //   }).catch((err) => {\n        //     console.log(err)\n        //   })\n        // })\n        // console.log(\"I am here ******************************************\")\n        // console.log(self.state)\n        // var new_history = self.state.history;\n        // new_history.push({ user: self.state.userName, message: msg });\n        // console.log(new_history);\n        // self.setState({ history: new_history });\n        // };\n        // document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, onNewMessageReceived)\n      }).catch(function (err) {\n        // An error occurs (e.g. bad credentials). Application could be informed that sign in has failed\n        //this.setState({ message: \"You entered the wrong credentials\" });\n        window.location.reload(true);\n        window.alert(\"You have entered invalid credentials. Please try again.\");\n        console.log(\"ERROR\");\n        console.log(err);\n      }); // console.log(\"I am here ******************************************\")\n      // var new_history = this.state.history;\n      // new_history.push({ user: this.state.userName, message: msg });\n      // console.log(new_history);\n      // this.setState({ history: new_history });\n      // this.setState({ loggedin: 1 });\n      // this.render();\n      // Listen when the SDK is ready\n      // document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady)\n    };\n\n    this.onLoaded = () => {\n      console.log('[Hello World] :: On SDK Loaded !');\n      rainbowSDK.initialize('82246ae05a3611eabf7e77d14e87b936', 'OLt1Qpu7fsCDNvT0r42waj0l4EeLe1Wb2nox0vpWGrpuqg4uunxwztDbJFAJKfwD').then(() => {\n        console.log('[Hello World] :: Rainbow SDK is initialized!');\n      }).catch(err => {\n        console.log('[Hello World] :: Something went wrong with the SDK.', err);\n      });\n    };\n\n    this.updateHistory = event => {\n      // send message code\n      event.preventDefault();\n      this.setState({\n        stored_value: event.target[0].value\n      });\n    };\n\n    this.login = (username, password, queryType) => {\n      //console.log(username, \"*********************************\")\n      if (username.length > 40 || password.length > 40 || username.includes(\"'\") || username.includes(\";\")) {\n        window.alert(\"Username or Password is invalid. Please do not include any special characters besides '@' and '.' !\");\n        window.location.reload();\n        return;\n      }\n\n      this.state.userName = username; //this.setState({ userName: username });\n\n      this.setState({\n        password: password\n      });\n      this.setState({\n        queryType: queryType\n      });\n      console.log(username);\n      const customerCreds = {\n        username: username,\n        password: password,\n        queryType: queryType\n      };\n      console.log('Customer cred', customerCreds);\n      let route = 'http://localhost:3001/login/'.concat(username);\n      console.log(route); // let stateOfReq = \"false\";\n      // while (stateOfReq == \"false\") {\n      // console.log(\"In the while loop\")\n\n      axios.post(route, customerCreds).then(response => {\n        console.log(response.data);\n        this.setState({\n          customerID: response.data.customer\n        });\n        this.setState({\n          agentJID: response.data.agent\n        });\n        stateOfReq = response.data.success;\n        let customerID = response.data.customer;\n        let agentJID = response.data.agent;\n      }, error => {\n        console.log(error);\n      });\n      console.log(stateOfReq);\n      console.log(\"#############################################\");\n      this.setState({\n        stateOfReq: stateOfReq\n      });\n      this.setState({\n        customerCreds: customerCreds\n      });\n      this.setState({\n        route: route\n      });\n\n      if (stateOfReq == 'true') {\n        // this.wait(stateOfReq, route, customerCreds);\n        //this.setState({ loggedin: 2 });\n        //window.location.reload(true);\n        console.log(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5\");\n        this.setState({\n          loggedin: 2\n        }); // changed\n\n        this.render();\n      } else if (stateOfReq == 'false') {\n        this.setState({\n          message: \"The credentials you entered were wrong ! Please reload and try again\"\n        });\n        this.setState({\n          loggedin: 1\n        });\n        this.render(); //this.setState({loggedin : 1})\n      } // }\n\n\n      document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady);\n      document.addEventListener(rainbowSDK.RAINBOW_ONLOADED, this.onLoaded);\n      rainbowSDK.start();\n      rainbowSDK.load(); //this.setState({ loggedin: 1 });\n\n      console.log(\"logged in \");\n    };\n\n    this.signout = () => {\n      // const customerCreds = {\n      //   username: username,\n      //   password: password,\n      //   queryType: queryType\n      // }\n      if (this.userName == \"\") {\n        window.location.reload(true);\n        return;\n      }\n\n      let route = 'http://localhost:3001/signout/' + this.state.userName;\n      axios.post(route, {\n        username: this.state.userName\n      }).then(response => {\n        console.log(response.data);\n      }, error => {\n        console.log(error);\n      });\n      window.location.reload(true);\n    };\n\n    this.doSomethingBeforeUnload = () => {\n      // Do something\n      window.alert(\"Are you sure you want to close ? \");\n    };\n\n    this.setupBeforeUnloadListener = () => {\n      window.addEventListener(\"beforeunload\", ev => {\n        ev.preventDefault();\n        ev.returnValue(\"are you sure you want to leave\");\n        return this.doSomethingBeforeUnload();\n      });\n    };\n\n    this.onNewMessageReceived = event => {\n      let message = event.detail.message;\n      let conversation = event.detail.conversation;\n      let messageContent = \"\";\n      console.log(message); // Acknowledge it\n\n      rainbowSDK.im.markMessageFromConversationAsRead(conversation, message); // Text message received\n\n      messageContent = message.data;\n      console.log(messageContent);\n      msg = messageContent;\n      console.log(msg);\n      var new_history = this.state.history;\n      new_history.push({\n        user: \"Agent\",\n        message: messageContent\n      });\n      this.setState({\n        history: new_history\n      });\n    };\n\n    this.wait = async (stat, route, customerCreds) => {\n      let stateOfReq = stat; //while (stateOfReq != 'true') {\n\n      console.log(stateOfReq);\n      axios.post(route, customerCreds).then(response => {\n        console.log(response.data);\n        this.setState({\n          customerID: response.data.customer\n        });\n        this.setState({\n          agentJID: response.data.agent\n        });\n        stateOfReq = response.data.success;\n        let customerID = response.data.customer;\n        let agentJID = response.data.agent;\n      }, error => {\n        console.log(error);\n      });\n\n      if (stateOfReq == 'true') {\n        this.setState({\n          loggedin: 2\n        });\n      } // this.render() ; \n      //}\n\n    };\n\n    this.test = () => {\n      if (this.state.loggedin == 0) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Login_n, {\n          userInfo: this.state,\n          onSubmit: this.login,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 11\n          }\n        }));\n      } else if (this.state.loggedin == 1) {\n        //console.log(\"************************\");\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(MessageBox, {\n          message: this.state.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 11\n          }\n        }));\n      } else if (this.state.loggedin == 2) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Chatbox, {\n          history: this.state.history,\n          onMessage: this.updateHistory,\n          signOut: this.signout,\n          agent: this.state.agentJID,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 29\n          }\n        })));\n      }\n    };\n\n    this.state = {\n      stored_value: \"Your Message will appear hear\",\n      loggedin: 0,\n      history: [{\n        user: \"Agent\",\n        message: \"How may I help you? 😊\"\n      }],\n      userName: \"\",\n      password: \"\",\n      queryType: \"\",\n      message: \"\",\n      agentJID: \"\",\n      customerID: \"\",\n      message: \" \",\n      //\"You have been loggedin successfully\",\n      route: null,\n      customerCreds: null,\n      stateOfReq: null\n    };\n  } // init rainbow sdk and set up listening\n\n\n  componentDidMount() {\n    // Activate the event listener\n    this.setupBeforeUnloadListener();\n    document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, this.onNewMessageReceived); // document.addEventListener(rainbowSDK.connection.RAINBOW_ONCONNECTIONSTATECHANGED, this.signout);\n  }\n\n  render() {\n    //this.compareMessage()\n    // if (this.state.loggedin == 1 && this.state.route != null && this.state.customerCreds != null && this.state.stateOfReq != null) {\n    //   this.wait(this.state.stateOfReq, this.state.route, this.state.customerCreds);\n    // }\n    return this.test();\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/FRONTEND/src/App (2).js"],"names":["React","Chatbox","Login_n","axios","rainbowSDK","MessageBox","msg","prevMessage","App","Component","constructor","onReady","myRainbowLogin","state","userName","myRainbowPassword","password","console","log","connection","signin","then","account","catch","err","window","location","reload","alert","onLoaded","initialize","updateHistory","event","preventDefault","setState","stored_value","target","value","login","username","queryType","length","includes","customerCreds","route","concat","post","response","data","customerID","customer","agentJID","agent","stateOfReq","success","error","loggedin","render","message","document","addEventListener","RAINBOW_ONREADY","RAINBOW_ONLOADED","start","load","signout","doSomethingBeforeUnload","setupBeforeUnloadListener","ev","returnValue","onNewMessageReceived","detail","conversation","messageContent","im","markMessageFromConversationAsRead","new_history","history","push","user","wait","stat","test","componentDidMount","RAINBOW_ONNEWIMMESSAGERECEIVED"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAO,UAAP;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AAEA,IAAIC,GAAJ;AACA,IAAIC,WAAJ;;AAEA,MAAMC,GAAN,SAAkBR,KAAK,CAACS,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAqBdC,OArBc,GAqBJ,MAAM;AAEd,UAAIC,cAAc,GAAG,KAAKC,KAAL,CAAWC,QAAhC,CAFc,CAE4B;;AAC1C,UAAIC,iBAAiB,GAAG,KAAKF,KAAL,CAAWG,QAAnC,CAHc,CAG+B;;AAE7CC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,KAAKL,KAAL,CAAWC,QAA/C;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,KAAKL,KAAL,CAAWG,QAA/C;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,cAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYH,iBAAZ,EARc,CASd;;AACAX,MAAAA,UAAU,CAACe,UAAX,CAAsBC,MAAtB,CAA6BR,cAA7B,EAA6CG,iBAA7C,EAEGM,IAFH,CAEQ,UAAUC,OAAV,EAAmB,CACvB;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGD,OA/DH,EAgEGC,KAhEH,CAgES,UAAUC,GAAV,EAAe;AACpB;AACA;AACAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACAF,QAAAA,MAAM,CAACG,KAAP,CAAa,yDAAb;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AAED,OAxEH,EAVc,CAmFd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAjHa;;AAAA,SA0IdK,QA1Ic,GA0IH,MAAM;AACfZ,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AAEAd,MAAAA,UAAU,CACP0B,UADH,CACc,kCADd,EACkD,kEADlD,EAEGT,IAFH,CAEQ,MAAM;AACVJ,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACD,OAJH,EAKGK,KALH,CAKSC,GAAG,IAAI;AACZP,QAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ,EAAmEM,GAAnE;AACD,OAPH;AAQD,KArJa;;AAAA,SAsJdO,aAtJc,GAsJGC,KAAD,IAAW;AACzB;AACAA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKC,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAEH,KAAK,CAACI,MAAN,CAAa,CAAb,EAAgBC;AAAhC,OAAd;AACD,KA1Ja;;AAAA,SA4JdC,KA5Jc,GA4JN,CAACC,QAAD,EAAWvB,QAAX,EAAqBwB,SAArB,KAAmC;AACzC;AACA,UAAID,QAAQ,CAACE,MAAT,GAAkB,EAAlB,IAAwBzB,QAAQ,CAACyB,MAAT,GAAkB,EAA1C,IAAgDF,QAAQ,CAACG,QAAT,CAAkB,GAAlB,CAAhD,IAA0EH,QAAQ,CAACG,QAAT,CAAkB,GAAlB,CAA9E,EAAsG;AACpGjB,QAAAA,MAAM,CAACG,KAAP,CAAa,qGAAb;AACAH,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACA;AACD;;AACD,WAAKd,KAAL,CAAWC,QAAX,GAAsByB,QAAtB,CAPyC,CAQzC;;AACA,WAAKL,QAAL,CAAc;AAAElB,QAAAA,QAAQ,EAAEA;AAAZ,OAAd;AACA,WAAKkB,QAAL,CAAc;AAAEM,QAAAA,SAAS,EAAEA;AAAb,OAAd;AACAvB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,QAAZ;AACA,YAAMI,aAAa,GAAG;AACpBJ,QAAAA,QAAQ,EAAEA,QADU;AAEpBvB,QAAAA,QAAQ,EAAEA,QAFU;AAGpBwB,QAAAA,SAAS,EAAEA;AAHS,OAAtB;AAKAvB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6ByB,aAA7B;AACA,UAAIC,KAAK,GAAG,+BAA+BC,MAA/B,CAAsCN,QAAtC,CAAZ;AACAtB,MAAAA,OAAO,CAACC,GAAR,CAAY0B,KAAZ,EAnByC,CAqBzC;AACA;AACA;;AACAzC,MAAAA,KAAK,CAAC2C,IAAN,CAAWF,KAAX,EAAkBD,aAAlB,EACGtB,IADH,CACS0B,QAAD,IAAc;AAClB9B,QAAAA,OAAO,CAACC,GAAR,CAAY6B,QAAQ,CAACC,IAArB;AACA,aAAKd,QAAL,CAAc;AAAEe,UAAAA,UAAU,EAAEF,QAAQ,CAACC,IAAT,CAAcE;AAA5B,SAAd;AACA,aAAKhB,QAAL,CAAc;AAAEiB,UAAAA,QAAQ,EAAEJ,QAAQ,CAACC,IAAT,CAAcI;AAA1B,SAAd;AACAC,QAAAA,UAAU,GAAGN,QAAQ,CAACC,IAAT,CAAcM,OAA3B;AACA,YAAIL,UAAU,GAAGF,QAAQ,CAACC,IAAT,CAAcE,QAA/B;AACA,YAAIC,QAAQ,GAAGJ,QAAQ,CAACC,IAAT,CAAcI,KAA7B;AAED,OATH,EASMG,KAAD,IAAW;AACZtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,KAAZ;AACD,OAXH;AAYAtC,MAAAA,OAAO,CAACC,GAAR,CAAYmC,UAAZ;AACApC,MAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACA,WAAKgB,QAAL,CAAc;AAAEmB,QAAAA,UAAU,EAAEA;AAAd,OAAd;AACA,WAAKnB,QAAL,CAAc;AAAES,QAAAA,aAAa,EAAEA;AAAjB,OAAd;AACA,WAAKT,QAAL,CAAc;AAAEU,QAAAA,KAAK,EAAEA;AAAT,OAAd;;AACA,UAAIS,UAAU,IAAI,MAAlB,EAA0B;AAExB;AACA;AACA;AACApC,QAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACA,aAAKgB,QAAL,CAAc;AAAEsB,UAAAA,QAAQ,EAAE;AAAZ,SAAd,EANwB,CAMQ;;AAChC,aAAKC,MAAL;AACD,OARD,MASK,IAAIJ,UAAU,IAAI,OAAlB,EAA2B;AAC9B,aAAKnB,QAAL,CAAc;AAAEwB,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,aAAKxB,QAAL,CAAc;AAAEsB,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACA,aAAKC,MAAL,GAH8B,CAI9B;AACD,OAvDwC,CAwDzC;;;AAEAE,MAAAA,QAAQ,CAACC,gBAAT,CAA0BxD,UAAU,CAACyD,eAArC,EAAsD,KAAKlD,OAA3D;AAEAgD,MAAAA,QAAQ,CAACC,gBAAT,CAA0BxD,UAAU,CAAC0D,gBAArC,EAAuD,KAAKjC,QAA5D;AACAzB,MAAAA,UAAU,CAAC2D,KAAX;AACA3D,MAAAA,UAAU,CAAC4D,IAAX,GA9DyC,CAiEzC;;AAEA/C,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD,KAhOa;;AAAA,SA8Od+C,OA9Oc,GA8OJ,MAAM;AACd;AACA;AACA;AACA;AACA;AACA,UAAI,KAAKnD,QAAL,IAAiB,EAArB,EAAyB;AACvBW,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACA;AAED;;AACD,UAAIiB,KAAK,GAAG,mCAAmC,KAAK/B,KAAL,CAAWC,QAA1D;AACAX,MAAAA,KAAK,CAAC2C,IAAN,CAAWF,KAAX,EAAkB;AAAEL,QAAAA,QAAQ,EAAE,KAAK1B,KAAL,CAAWC;AAAvB,OAAlB,EACGO,IADH,CACS0B,QAAD,IAAc;AAClB9B,QAAAA,OAAO,CAACC,GAAR,CAAY6B,QAAQ,CAACC,IAArB;AACD,OAHH,EAGMO,KAAD,IAAW;AACZtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,KAAZ;AACD,OALH;AAOA9B,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AAED,KAnQa;;AAAA,SAsQduC,uBAtQc,GAsQY,MAAM;AAC9B;AACAzC,MAAAA,MAAM,CAACG,KAAP,CAAa,mCAAb;AACD,KAzQa;;AAAA,SA4QduC,yBA5Qc,GA4Qc,MAAM;AAChC1C,MAAAA,MAAM,CAACmC,gBAAP,CAAwB,cAAxB,EAAyCQ,EAAD,IAAQ;AAC9CA,QAAAA,EAAE,CAACnC,cAAH;AAEAmC,QAAAA,EAAE,CAACC,WAAH,CAAe,gCAAf;AACA,eAAO,KAAKH,uBAAL,EAAP;AACD,OALD;AAMD,KAnRa;;AAAA,SAqRdI,oBArRc,GAqRUtC,KAAD,IAAW;AAEhC,UAAI0B,OAAO,GAAG1B,KAAK,CAACuC,MAAN,CAAab,OAA3B;AACA,UAAIc,YAAY,GAAGxC,KAAK,CAACuC,MAAN,CAAaC,YAAhC;AACA,UAAIC,cAAc,GAAG,EAArB;AAEAxD,MAAAA,OAAO,CAACC,GAAR,CAAYwC,OAAZ,EANgC,CAQhC;;AACAtD,MAAAA,UAAU,CAACsE,EAAX,CAAcC,iCAAd,CAAgDH,YAAhD,EAA8Dd,OAA9D,EATgC,CAWhC;;AACAe,MAAAA,cAAc,GAAGf,OAAO,CAACV,IAAzB;AACA/B,MAAAA,OAAO,CAACC,GAAR,CAAYuD,cAAZ;AACAnE,MAAAA,GAAG,GAAGmE,cAAN;AACAxD,MAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAZ;AACA,UAAIsE,WAAW,GAAG,KAAK/D,KAAL,CAAWgE,OAA7B;AACAD,MAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBrB,QAAAA,OAAO,EAAEe;AAA1B,OAAjB;AACA,WAAKvC,QAAL,CAAc;AAAE2C,QAAAA,OAAO,EAAED;AAAX,OAAd;AACD,KAxSa;;AAAA,SAmTdI,IAnTc,GAmTP,OAAOC,IAAP,EAAarC,KAAb,EAAoBD,aAApB,KAAsC;AAC3C,UAAIU,UAAU,GAAG4B,IAAjB,CAD2C,CAE3C;;AACAhE,MAAAA,OAAO,CAACC,GAAR,CAAYmC,UAAZ;AACAlD,MAAAA,KAAK,CAAC2C,IAAN,CAAWF,KAAX,EAAkBD,aAAlB,EACGtB,IADH,CACS0B,QAAD,IAAc;AAClB9B,QAAAA,OAAO,CAACC,GAAR,CAAY6B,QAAQ,CAACC,IAArB;AACA,aAAKd,QAAL,CAAc;AAAEe,UAAAA,UAAU,EAAEF,QAAQ,CAACC,IAAT,CAAcE;AAA5B,SAAd;AACA,aAAKhB,QAAL,CAAc;AAAEiB,UAAAA,QAAQ,EAAEJ,QAAQ,CAACC,IAAT,CAAcI;AAA1B,SAAd;AACAC,QAAAA,UAAU,GAAGN,QAAQ,CAACC,IAAT,CAAcM,OAA3B;AACA,YAAIL,UAAU,GAAGF,QAAQ,CAACC,IAAT,CAAcE,QAA/B;AACA,YAAIC,QAAQ,GAAGJ,QAAQ,CAACC,IAAT,CAAcI,KAA7B;AAED,OATH,EASMG,KAAD,IAAW;AACZtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,KAAZ;AACD,OAXH;;AAYA,UAAIF,UAAU,IAAI,MAAlB,EAA0B;AACxB,aAAKnB,QAAL,CAAc;AAAEsB,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACD,OAlB0C,CAmB3C;AACA;;AACD,KAxUa;;AAAA,SAyUd0B,IAzUc,GAyUP,MAAM;AACX,UAAI,KAAKrE,KAAL,CAAW2C,QAAX,IAAuB,CAA3B,EAA8B;AAC5B,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEE,oBAAC,OAAD;AAAS,UAAA,QAAQ,EAAE,KAAK3C,KAAxB;AAA+B,UAAA,QAAQ,EAAE,KAAKyB,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF;AAMD,OAPD,MAOO,IAAI,KAAKzB,KAAL,CAAW2C,QAAX,IAAuB,CAA3B,EAA8B;AACnC;AACA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAE,KAAK3C,KAAL,CAAW6C,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAKD,OAPM,MAQF,IAAI,KAAK7C,KAAL,CAAW2C,QAAX,IAAuB,CAA3B,EAA8B;AACjC,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAK,UAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkB,oBAAC,OAAD;AAAS,UAAA,OAAO,EAAE,KAAK3C,KAAL,CAAWgE,OAA7B;AAAsC,UAAA,SAAS,EAAE,KAAK9C,aAAtD;AAAqE,UAAA,OAAO,EAAE,KAAKkC,OAAnF;AAA4F,UAAA,KAAK,EAAE,KAAKpD,KAAL,CAAWsC,QAA9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAlB,CADF,CADF;AAKD;AAEF,KAjWa;;AAGZ,SAAKtC,KAAL,GAAa;AACXsB,MAAAA,YAAY,EAAE,+BADH;AAEXqB,MAAAA,QAAQ,EAAE,CAFC;AAGXqB,MAAAA,OAAO,EAAE,CAAC;AAAEE,QAAAA,IAAI,EAAE,OAAR;AAAiBrB,QAAAA,OAAO,EAAE;AAA1B,OAAD,CAHE;AAIX5C,MAAAA,QAAQ,EAAE,EAJC;AAKXE,MAAAA,QAAQ,EAAE,EALC;AAMXwB,MAAAA,SAAS,EAAE,EANA;AAOXkB,MAAAA,OAAO,EAAE,EAPE;AAQXP,MAAAA,QAAQ,EAAE,EARC;AASXF,MAAAA,UAAU,EAAE,EATD;AAUXS,MAAAA,OAAO,EAAE,GAVE;AAUG;AACdd,MAAAA,KAAK,EAAE,IAXI;AAYXD,MAAAA,aAAa,EAAE,IAZJ;AAaXU,MAAAA,UAAU,EAAE;AAbD,KAAb;AAeD,GAnB+B,CAqBhC;;;AAsRA8B,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKhB,yBAAL;AACAR,IAAAA,QAAQ,CAACC,gBAAT,CAA0BxD,UAAU,CAACsE,EAAX,CAAcU,8BAAxC,EAAwE,KAAKd,oBAA7E,EAHkB,CAIlB;AAED;;AAoDDb,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AAEA;AACA,WAEE,KAAKyB,IAAL,EAFF;AAID;;AA/W+B;;AAkXlC,eAAe1E,GAAf","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Chatbox from \"./chat_ui/Chatbox\";\r\nimport \"tachyons\";\r\nimport Login_n from \"./login/Login_n\";\r\nimport axios from \"axios\";\r\nimport rainbowSDK from 'rainbow-web-sdk';\r\nimport MessageBox from \"./intermediate/MessageBox\";\r\n\r\nlet msg;\r\nlet prevMessage;\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      stored_value: \"Your Message will appear hear\",\r\n      loggedin: 0,\r\n      history: [{ user: \"Agent\", message: \"How may I help you? 😊\" }],\r\n      userName: \"\",\r\n      password: \"\",\r\n      queryType: \"\",\r\n      message: \"\",\r\n      agentJID: \"\",\r\n      customerID: \"\",\r\n      message: \" \", //\"You have been loggedin successfully\",\r\n      route: null,\r\n      customerCreds: null,\r\n      stateOfReq: null,\r\n    }\r\n  }\r\n\r\n  // init rainbow sdk and set up listening\r\n  onReady = () => {\r\n\r\n    var myRainbowLogin = this.state.userName; //\"JohnDoe@mymail.sutd.edu.sg\";       // Replace by your login\r\n    var myRainbowPassword = this.state.password; //\"IAmJohnDoes1!\"; // Replace by your password\r\n\r\n    console.log('this is the username', this.state.userName)\r\n    console.log('this is the password', this.state.password)\r\n    console.log(myRainbowLogin)\r\n    console.log(myRainbowPassword)\r\n    // The SDK for Web is ready to be used, so you can sign in\r\n    rainbowSDK.connection.signin(myRainbowLogin, myRainbowPassword)\r\n\r\n      .then(function (account) {\r\n        // Successfully signed to Rainbow and the SDK is started completely. Rainbow data can be retrieved.\r\n\r\n        // let onNewMessageReceived = function (event) {\r\n\r\n        //   let message = event.detail.message;\r\n        //   let conversation = event.detail.conversation;\r\n        //   let messageContent = \"\";\r\n\r\n        //   console.log(message)\r\n\r\n        //   // Acknowledge it\r\n        //   rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\r\n\r\n        //   // Text message received\r\n        //   messageContent = message.data;\r\n        //   console.log(messageContent)\r\n        //   msg = messageContent;\r\n        //   console.log(msg)\r\n\r\n\r\n\r\n        // var new_history = this.state.history;\r\n        // new_history.push({ user: \"admin\", message: messageContent });\r\n        // this.setState({ history: new_history });\r\n\r\n        // Send an answer\r\n        // rainbowSDK.im.sendMessageToConversation(conversation, messageContent + \" read!\");\r\n\r\n        // console.log(\"APSDOKAOPSDKPAOSKDP\");\r\n        // let jid = \"3ef04d45a9784a61bc1868a07ff9cf6d@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\"\r\n        // // let myContact = rainbowSDK.contacts.getContactByJID(\"85f5342e76c44c219eeff89d2ee49483@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\");\r\n        // // console.log(myContact);\r\n        // let myContact;\r\n        // rainbowSDK.contacts.searchByJid(jid).then((contact) => {\r\n        //   rainbowSDK.contacts.addToNetwork(contact).then((theContact) => {\r\n        //     myContact = theContact\r\n\r\n        //   }).then((err) => {\r\n        //     console.log(err);\r\n\r\n        //   })\r\n        // }).then((err) => {\r\n        //   console.log(err)\r\n        //   rainbowSDK.conversations.openConversationForContact(myContact).then((conversation) => {\r\n        //     rainbowSDK.im.sendMessageToConversation(conversation, \"It works!\");\r\n        //   }).catch((err) => {\r\n        //     console.log(err)\r\n        //   })\r\n        // })\r\n        // console.log(\"I am here ******************************************\")\r\n        // console.log(self.state)\r\n        // var new_history = self.state.history;\r\n        // new_history.push({ user: self.state.userName, message: msg });\r\n        // console.log(new_history);\r\n        // self.setState({ history: new_history });\r\n\r\n        // };\r\n        // document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, onNewMessageReceived)\r\n\r\n\r\n      })\r\n      .catch(function (err) {\r\n        // An error occurs (e.g. bad credentials). Application could be informed that sign in has failed\r\n        //this.setState({ message: \"You entered the wrong credentials\" });\r\n        window.location.reload(true);\r\n        window.alert(\"You have entered invalid credentials. Please try again.\")\r\n        console.log(\"ERROR\");\r\n        console.log(err)\r\n\r\n      });\r\n    // console.log(\"I am here ******************************************\")\r\n    // var new_history = this.state.history;\r\n    // new_history.push({ user: this.state.userName, message: msg });\r\n    // console.log(new_history);\r\n    // this.setState({ history: new_history });\r\n    // this.setState({ loggedin: 1 });\r\n    // this.render();\r\n    // Listen when the SDK is ready\r\n    // document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady)\r\n  };\r\n\r\n  // receiveMessage = function (event) {\r\n  //   // let onNewMessageReceived = function (event) {\r\n\r\n  //   let message = event.detail.message;\r\n  //   let conversation = event.detail.conversation;\r\n  //   let messageContent = \"\";\r\n\r\n  //   console.log(message)\r\n\r\n  //   // Acknowledge it\r\n  //   rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\r\n\r\n  //   // Text message received\r\n  //   messageContent = message.data;\r\n  //   console.log(messageContent)\r\n\r\n  //   var new_history = this.state.history;\r\n  //   new_history.push({ user: \"Agent\", message: messageContent });\r\n  //   this.setState({ history: new_history });\r\n  //   // };\r\n\r\n  //   document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, this.onNewMessageReceived)\r\n  // }\r\n  onLoaded = () => {\r\n    console.log('[Hello World] :: On SDK Loaded !');\r\n\r\n    rainbowSDK\r\n      .initialize('82246ae05a3611eabf7e77d14e87b936', 'OLt1Qpu7fsCDNvT0r42waj0l4EeLe1Wb2nox0vpWGrpuqg4uunxwztDbJFAJKfwD')\r\n      .then(() => {\r\n        console.log('[Hello World] :: Rainbow SDK is initialized!');\r\n      })\r\n      .catch(err => {\r\n        console.log('[Hello World] :: Something went wrong with the SDK.', err);\r\n      });\r\n  };\r\n  updateHistory = (event) => {\r\n    // send message code\r\n    event.preventDefault();\r\n    this.setState({ stored_value: event.target[0].value });\r\n  };\r\n\r\n  login = (username, password, queryType) => {\r\n    //console.log(username, \"*********************************\")\r\n    if (username.length > 40 || password.length > 40 || username.includes(\"'\") || username.includes(\";\")) {\r\n      window.alert(\"Username or Password is invalid. Please do not include any special characters besides '@' and '.' !\");\r\n      window.location.reload();\r\n      return;\r\n    }\r\n    this.state.userName = username;\r\n    //this.setState({ userName: username });\r\n    this.setState({ password: password });\r\n    this.setState({ queryType: queryType });\r\n    console.log(username);\r\n    const customerCreds = {\r\n      username: username,\r\n      password: password,\r\n      queryType: queryType\r\n    }\r\n    console.log('Customer cred', customerCreds);\r\n    let route = 'http://localhost:3001/login/'.concat(username);\r\n    console.log(route);\r\n\r\n    // let stateOfReq = \"false\";\r\n    // while (stateOfReq == \"false\") {\r\n    // console.log(\"In the while loop\")\r\n    axios.post(route, customerCreds)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        this.setState({ customerID: response.data.customer });\r\n        this.setState({ agentJID: response.data.agent });\r\n        stateOfReq = response.data.success\r\n        let customerID = response.data.customer\r\n        let agentJID = response.data.agent\r\n\r\n      }, (error) => {\r\n        console.log(error);\r\n      });\r\n    console.log(stateOfReq);\r\n    console.log(\"#############################################\");\r\n    this.setState({ stateOfReq: stateOfReq });\r\n    this.setState({ customerCreds: customerCreds });\r\n    this.setState({ route: route });\r\n    if (stateOfReq == 'true') {\r\n\r\n      // this.wait(stateOfReq, route, customerCreds);\r\n      //this.setState({ loggedin: 2 });\r\n      //window.location.reload(true);\r\n      console.log(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5\");\r\n      this.setState({ loggedin: 2 }); // changed\r\n      this.render();\r\n    }\r\n    else if (stateOfReq == 'false') {\r\n      this.setState({ message: \"The credentials you entered were wrong ! Please reload and try again\" })\r\n      this.setState({ loggedin: 1 });\r\n      this.render();\r\n      //this.setState({loggedin : 1})\r\n    }\r\n    // }\r\n\r\n    document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady);\r\n\r\n    document.addEventListener(rainbowSDK.RAINBOW_ONLOADED, this.onLoaded);\r\n    rainbowSDK.start();\r\n    rainbowSDK.load();\r\n\r\n\r\n    //this.setState({ loggedin: 1 });\r\n\r\n    console.log(\"logged in \")\r\n  };\r\n\r\n  // compareMessage = () => {\r\n  //   if (msg != prevMessage) {\r\n  //     console.log(\"I am here ******************************************\")\r\n  //     var new_history = this.state.history;\r\n  //     new_history.push({ user: this.state.userName, message: msg });\r\n  //     console.log(new_history);\r\n  //     this.setState({ history: new_history });\r\n  //     prevMessage = msg\r\n  //     this.render()\r\n  //   }\r\n  // }\r\n\r\n  signout = () => {\r\n    // const customerCreds = {\r\n    //   username: username,\r\n    //   password: password,\r\n    //   queryType: queryType\r\n    // }\r\n    if (this.userName == \"\") {\r\n      window.location.reload(true);\r\n      return;\r\n\r\n    }\r\n    let route = 'http://localhost:3001/signout/' + this.state.userName\r\n    axios.post(route, { username: this.state.userName })\r\n      .then((response) => {\r\n        console.log(response.data)\r\n      }, (error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    window.location.reload(true);\r\n\r\n  }\r\n\r\n  // Things to do before unloading/closing the tab\r\n  doSomethingBeforeUnload = () => {\r\n    // Do something\r\n    window.alert(\"Are you sure you want to close ? \")\r\n  }\r\n\r\n  // Setup the `beforeunload` event listener\r\n  setupBeforeUnloadListener = () => {\r\n    window.addEventListener(\"beforeunload\", (ev) => {\r\n      ev.preventDefault();\r\n\r\n      ev.returnValue(\"are you sure you want to leave\")\r\n      return this.doSomethingBeforeUnload();\r\n    });\r\n  };\r\n\r\n  onNewMessageReceived = (event) => {\r\n\r\n    let message = event.detail.message;\r\n    let conversation = event.detail.conversation;\r\n    let messageContent = \"\";\r\n\r\n    console.log(message)\r\n\r\n    // Acknowledge it\r\n    rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\r\n\r\n    // Text message received\r\n    messageContent = message.data;\r\n    console.log(messageContent)\r\n    msg = messageContent;\r\n    console.log(msg)\r\n    var new_history = this.state.history;\r\n    new_history.push({ user: \"Agent\", message: messageContent });\r\n    this.setState({ history: new_history });\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Activate the event listener\r\n    this.setupBeforeUnloadListener();\r\n    document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, this.onNewMessageReceived);\r\n    // document.addEventListener(rainbowSDK.connection.RAINBOW_ONCONNECTIONSTATECHANGED, this.signout);\r\n\r\n  }\r\n\r\n\r\n  wait = async (stat, route, customerCreds) => {\r\n    let stateOfReq = stat;\r\n    //while (stateOfReq != 'true') {\r\n    console.log(stateOfReq);\r\n    axios.post(route, customerCreds)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        this.setState({ customerID: response.data.customer });\r\n        this.setState({ agentJID: response.data.agent });\r\n        stateOfReq = response.data.success\r\n        let customerID = response.data.customer\r\n        let agentJID = response.data.agent\r\n\r\n      }, (error) => {\r\n        console.log(error);\r\n      });\r\n    if (stateOfReq == 'true') {\r\n      this.setState({ loggedin: 2 });\r\n    }\r\n    // this.render() ; \r\n    //}\r\n  }\r\n  test = () => {\r\n    if (this.state.loggedin == 0) {\r\n      return (\r\n        <div>\r\n\r\n          <Login_n userInfo={this.state} onSubmit={this.login} />\r\n        </div>\r\n      );\r\n    } else if (this.state.loggedin == 1) {\r\n      //console.log(\"************************\");\r\n      return (\r\n        <div>\r\n          <MessageBox message={this.state.message} />\r\n        </div>\r\n      );\r\n    }\r\n    else if (this.state.loggedin == 2) {\r\n      return (\r\n        <div>\r\n          <div className=\"\"><Chatbox history={this.state.history} onMessage={this.updateHistory} signOut={this.signout} agent={this.state.agentJID} /></div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  };\r\n\r\n\r\n  render() {\r\n    //this.compareMessage()\r\n    // if (this.state.loggedin == 1 && this.state.route != null && this.state.customerCreds != null && this.state.stateOfReq != null) {\r\n    //   this.wait(this.state.stateOfReq, this.state.route, this.state.customerCreds);\r\n\r\n    // }\r\n    return (\r\n\r\n      this.test()\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n"]},"metadata":{},"sourceType":"module"}