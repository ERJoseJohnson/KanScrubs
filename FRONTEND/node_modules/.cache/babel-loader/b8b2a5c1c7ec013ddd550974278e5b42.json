{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose Johnson\\\\Desktop\\\\KanScrubs\\\\FRONTEND\\\\src\\\\App (2).js\";\nimport React from 'react';\nimport './App.css';\nimport Chatbox from \"./chat_ui/Chatbox\";\nimport \"tachyons\";\nimport Login_n from \"./login/Login_n\";\nimport axios from \"axios\";\nimport rainbowSDK from 'rainbow-web-sdk';\nlet msg;\nlet prevMessage;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.onReady = () => {\n      var myRainbowLogin = this.state.userName; //\"JohnDoe@mymail.sutd.edu.sg\";       // Replace by your login\n\n      var myRainbowPassword = this.state.password; //\"IAmJohnDoes1!\"; // Replace by your password\n\n      console.log('this is the username', this.state.userName);\n      console.log('this is the password', this.state.password);\n      console.log(myRainbowLogin);\n      console.log(myRainbowPassword); // The SDK for Web is ready to be used, so you can sign in\n\n      rainbowSDK.connection.signin(myRainbowLogin, myRainbowPassword).then(function (account) {\n        // Successfully signed to Rainbow and the SDK is started completely. Rainbow data can be retrieved.\n        var self = this; // let onNewMessageReceived = function (event) {\n        //   let message = event.detail.message;\n        //   let conversation = event.detail.conversation;\n        //   let messageContent = \"\";\n        //   console.log(message)\n        //   // Acknowledge it\n        //   rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\n        //   // Text message received\n        //   messageContent = message.data;\n        //   console.log(messageContent)\n        //   msg = messageContent;\n        //   console.log(msg)\n        // var new_history = this.state.history;\n        // new_history.push({ user: \"admin\", message: messageContent });\n        // this.setState({ history: new_history });\n        // Send an answer\n        // rainbowSDK.im.sendMessageToConversation(conversation, messageContent + \" read!\");\n        // console.log(\"APSDOKAOPSDKPAOSKDP\");\n        // let jid = \"3ef04d45a9784a61bc1868a07ff9cf6d@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\"\n        // // let myContact = rainbowSDK.contacts.getContactByJID(\"85f5342e76c44c219eeff89d2ee49483@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\");\n        // // console.log(myContact);\n        // let myContact;\n        // rainbowSDK.contacts.searchByJid(jid).then((contact) => {\n        //   rainbowSDK.contacts.addToNetwork(contact).then((theContact) => {\n        //     myContact = theContact\n        //   }).then((err) => {\n        //     console.log(err);\n        //   })\n        // }).then((err) => {\n        //   console.log(err)\n        //   rainbowSDK.conversations.openConversationForContact(myContact).then((conversation) => {\n        //     rainbowSDK.im.sendMessageToConversation(conversation, \"It works!\");\n        //   }).catch((err) => {\n        //     console.log(err)\n        //   })\n        // })\n        // console.log(\"I am here ******************************************\")\n        // console.log(self.state)\n        // var new_history = self.state.history;\n        // new_history.push({ user: self.state.userName, message: msg });\n        // console.log(new_history);\n        // self.setState({ history: new_history });\n        // };\n        // document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, onNewMessageReceived)\n      }).catch(function (err) {\n        // An error occurs (e.g. bad credentials). Application could be informed that sign in has failed\n        console.log(\"ERROR\");\n        console.log(err);\n      }); // console.log(\"I am here ******************************************\")\n      // var new_history = this.state.history;\n      // new_history.push({ user: this.state.userName, message: msg });\n      // console.log(new_history);\n      // this.setState({ history: new_history });\n\n      this.setState({\n        loggedin: 1\n      }); // this.render();\n      // Listen when the SDK is ready\n      // document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady)\n    };\n\n    this.onLoaded = () => {\n      console.log('[Hello World] :: On SDK Loaded !');\n      rainbowSDK.initialize('82246ae05a3611eabf7e77d14e87b936', 'OLt1Qpu7fsCDNvT0r42waj0l4EeLe1Wb2nox0vpWGrpuqg4uunxwztDbJFAJKfwD').then(() => {\n        console.log('[Hello World] :: Rainbow SDK is initialized!');\n      }).catch(err => {\n        console.log('[Hello World] :: Something went wrong with the SDK.', err);\n      });\n    };\n\n    this.updateHistory = event => {\n      // send message code\n      event.preventDefault();\n      this.setState({\n        stored_value: event.target[0].value\n      });\n    };\n\n    this.login = (username, password, queryType) => {\n      console.log(username, \"*********************************\");\n      this.state.userName = username; //this.setState({ userName: username });\n\n      this.setState({\n        password: password\n      });\n      this.setState({\n        queryType: queryType\n      });\n      console.log(username);\n      const customerCreds = {\n        username: username,\n        password: password,\n        queryType: queryType\n      }; // console.log(customerCreds);\n\n      let route = 'http://localhost:3001/login/'.concat(username);\n      console.log(route);\n      let stateOfReq = \"false\"; // while (stateOfReq == \"false\") {\n      //   axios.post(route, customerCreds)\n      //     .then((response) => {\n      //       console.log(response.data);\n      //       stateOfReq = response.data.success\n      //       let customerID = response.data.customer\n      //       let agentID = response.data.agent\n      //     }, (error) => {\n      //       console.log(error);\n      //     });\n      // }\n\n      document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady);\n      document.addEventListener(rainbowSDK.RAINBOW_ONLOADED, this.onLoaded);\n      rainbowSDK.start();\n      rainbowSDK.load(); //this.setState({ loggedin: 1 });\n\n      console.log(\"logged in \");\n    };\n\n    this.signout = () => {\n      window.location.reload(true);\n    };\n\n    this.doSomethingBeforeUnload = () => {\n      // Do something\n      window.alert(\"Are you sure you want to close ? \");\n    };\n\n    this.setupBeforeUnloadListener = () => {\n      window.addEventListener(\"beforeunload\", ev => {\n        ev.preventDefault();\n        ev.returnValue(\"are you sure you want to leave\");\n        return this.doSomethingBeforeUnload();\n      });\n    };\n\n    this.onNewMessageReceived = event => {\n      let message = event.detail.message;\n      let conversation = event.detail.conversation;\n      let messageContent = \"\";\n      console.log(message); // Acknowledge it\n\n      rainbowSDK.im.markMessageFromConversationAsRead(conversation, message); // Text message received\n\n      messageContent = message.data;\n      console.log(messageContent);\n      msg = messageContent;\n      console.log(msg);\n      var new_history = this.state.history;\n      new_history.push({\n        user: \"Agent\",\n        message: messageContent\n      });\n      this.setState({\n        history: new_history\n      });\n    };\n\n    this.test = () => {\n      if (this.state.loggedin == 0) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          className: \"tc\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 11\n          }\n        }, this.state.message), /*#__PURE__*/React.createElement(Login_n, {\n          userInfo: this.state,\n          onSubmit: this.login,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Chatbox, {\n          history: this.state.history,\n          onMessage: this.updateHistory,\n          signOut: this.signout,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 29\n          }\n        })));\n      }\n    };\n\n    this.state = {\n      stored_value: \"Your Message will appear hear\",\n      loggedin: 0,\n      history: [{\n        user: \"Agent\",\n        message: \"How may I help you? ðŸ˜Š\"\n      }],\n      userName: \"\",\n      password: \"\",\n      queryType: \"\",\n      message: \"\"\n    };\n  } // init rainbow sdk and set up listening\n\n\n  componentDidMount() {\n    // Activate the event listener\n    this.setupBeforeUnloadListener();\n    document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, this.onNewMessageReceived);\n  }\n\n  render() {\n    //this.compareMessage()\n    return this.test();\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/FRONTEND/src/App (2).js"],"names":["React","Chatbox","Login_n","axios","rainbowSDK","msg","prevMessage","App","Component","constructor","onReady","myRainbowLogin","state","userName","myRainbowPassword","password","console","log","connection","signin","then","account","self","catch","err","setState","loggedin","onLoaded","initialize","updateHistory","event","preventDefault","stored_value","target","value","login","username","queryType","customerCreds","route","concat","stateOfReq","document","addEventListener","RAINBOW_ONREADY","RAINBOW_ONLOADED","start","load","signout","window","location","reload","doSomethingBeforeUnload","alert","setupBeforeUnloadListener","ev","returnValue","onNewMessageReceived","message","detail","conversation","messageContent","im","markMessageFromConversationAsRead","data","new_history","history","push","user","test","componentDidMount","RAINBOW_ONNEWIMMESSAGERECEIVED","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Chatbox from \"./chat_ui/Chatbox\";\r\nimport \"tachyons\";\r\nimport Login_n from \"./login/Login_n\";\r\nimport axios from \"axios\";\r\nimport rainbowSDK from 'rainbow-web-sdk';\r\n\r\nlet msg;\r\nlet prevMessage;\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      stored_value: \"Your Message will appear hear\",\r\n      loggedin: 0,\r\n      history: [{ user: \"Agent\", message: \"How may I help you? ðŸ˜Š\" }],\r\n      userName: \"\",\r\n      password: \"\",\r\n      queryType: \"\",\r\n      message: \"\",\r\n    }\r\n\r\n\r\n  }\r\n\r\n  // init rainbow sdk and set up listening\r\n  onReady = () => {\r\n\r\n    var myRainbowLogin = this.state.userName; //\"JohnDoe@mymail.sutd.edu.sg\";       // Replace by your login\r\n    var myRainbowPassword = this.state.password; //\"IAmJohnDoes1!\"; // Replace by your password\r\n\r\n    console.log('this is the username', this.state.userName)\r\n    console.log('this is the password', this.state.password)\r\n    console.log(myRainbowLogin)\r\n    console.log(myRainbowPassword)\r\n    // The SDK for Web is ready to be used, so you can sign in\r\n    rainbowSDK.connection.signin(myRainbowLogin, myRainbowPassword)\r\n      .then(function (account) {\r\n        // Successfully signed to Rainbow and the SDK is started completely. Rainbow data can be retrieved.\r\n        var self = this;\r\n        // let onNewMessageReceived = function (event) {\r\n\r\n        //   let message = event.detail.message;\r\n        //   let conversation = event.detail.conversation;\r\n        //   let messageContent = \"\";\r\n\r\n        //   console.log(message)\r\n\r\n        //   // Acknowledge it\r\n        //   rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\r\n\r\n        //   // Text message received\r\n        //   messageContent = message.data;\r\n        //   console.log(messageContent)\r\n        //   msg = messageContent;\r\n        //   console.log(msg)\r\n\r\n\r\n\r\n        // var new_history = this.state.history;\r\n        // new_history.push({ user: \"admin\", message: messageContent });\r\n        // this.setState({ history: new_history });\r\n\r\n        // Send an answer\r\n        // rainbowSDK.im.sendMessageToConversation(conversation, messageContent + \" read!\");\r\n\r\n        // console.log(\"APSDOKAOPSDKPAOSKDP\");\r\n        // let jid = \"3ef04d45a9784a61bc1868a07ff9cf6d@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\"\r\n        // // let myContact = rainbowSDK.contacts.getContactByJID(\"85f5342e76c44c219eeff89d2ee49483@sandbox-all-in-one-rbx-prod-1.rainbow.sbg\");\r\n        // // console.log(myContact);\r\n        // let myContact;\r\n        // rainbowSDK.contacts.searchByJid(jid).then((contact) => {\r\n        //   rainbowSDK.contacts.addToNetwork(contact).then((theContact) => {\r\n        //     myContact = theContact\r\n\r\n        //   }).then((err) => {\r\n        //     console.log(err);\r\n\r\n        //   })\r\n        // }).then((err) => {\r\n        //   console.log(err)\r\n        //   rainbowSDK.conversations.openConversationForContact(myContact).then((conversation) => {\r\n        //     rainbowSDK.im.sendMessageToConversation(conversation, \"It works!\");\r\n        //   }).catch((err) => {\r\n        //     console.log(err)\r\n        //   })\r\n        // })\r\n        // console.log(\"I am here ******************************************\")\r\n        // console.log(self.state)\r\n        // var new_history = self.state.history;\r\n        // new_history.push({ user: self.state.userName, message: msg });\r\n        // console.log(new_history);\r\n        // self.setState({ history: new_history });\r\n\r\n        // };\r\n        // document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, onNewMessageReceived)\r\n\r\n\r\n      })\r\n      .catch(function (err) {\r\n        // An error occurs (e.g. bad credentials). Application could be informed that sign in has failed\r\n        console.log(\"ERROR\");\r\n        console.log(err)\r\n      });\r\n    // console.log(\"I am here ******************************************\")\r\n    // var new_history = this.state.history;\r\n    // new_history.push({ user: this.state.userName, message: msg });\r\n    // console.log(new_history);\r\n    // this.setState({ history: new_history });\r\n    this.setState({ loggedin: 1 });\r\n    // this.render();\r\n    // Listen when the SDK is ready\r\n    // document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady)\r\n  };\r\n\r\n  // receiveMessage = function (event) {\r\n  //   // let onNewMessageReceived = function (event) {\r\n\r\n  //   let message = event.detail.message;\r\n  //   let conversation = event.detail.conversation;\r\n  //   let messageContent = \"\";\r\n\r\n  //   console.log(message)\r\n\r\n  //   // Acknowledge it\r\n  //   rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\r\n\r\n  //   // Text message received\r\n  //   messageContent = message.data;\r\n  //   console.log(messageContent)\r\n\r\n  //   var new_history = this.state.history;\r\n  //   new_history.push({ user: \"Agent\", message: messageContent });\r\n  //   this.setState({ history: new_history });\r\n  //   // };\r\n\r\n  //   document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, this.onNewMessageReceived)\r\n  // }\r\n  onLoaded = () => {\r\n    console.log('[Hello World] :: On SDK Loaded !');\r\n\r\n    rainbowSDK\r\n      .initialize('82246ae05a3611eabf7e77d14e87b936', 'OLt1Qpu7fsCDNvT0r42waj0l4EeLe1Wb2nox0vpWGrpuqg4uunxwztDbJFAJKfwD')\r\n      .then(() => {\r\n        console.log('[Hello World] :: Rainbow SDK is initialized!');\r\n      })\r\n      .catch(err => {\r\n        console.log('[Hello World] :: Something went wrong with the SDK.', err);\r\n      });\r\n  };\r\n  updateHistory = (event) => {\r\n    // send message code\r\n    event.preventDefault();\r\n    this.setState({ stored_value: event.target[0].value });\r\n  };\r\n\r\n  login = (username, password, queryType) => {\r\n    console.log(username, \"*********************************\")\r\n    this.state.userName = username;\r\n    //this.setState({ userName: username });\r\n    this.setState({ password: password });\r\n    this.setState({ queryType: queryType });\r\n    console.log(username);\r\n    const customerCreds = {\r\n      username: username,\r\n      password: password,\r\n      queryType: queryType\r\n    }\r\n    // console.log(customerCreds);\r\n    let route = 'http://localhost:3001/login/'.concat(username);\r\n    console.log(route);\r\n\r\n    let stateOfReq = \"false\";\r\n    // while (stateOfReq == \"false\") {\r\n\r\n    //   axios.post(route, customerCreds)\r\n    //     .then((response) => {\r\n    //       console.log(response.data);\r\n    //       stateOfReq = response.data.success\r\n    //       let customerID = response.data.customer\r\n    //       let agentID = response.data.agent\r\n    //     }, (error) => {\r\n    //       console.log(error);\r\n    //     });\r\n    // }\r\n\r\n    document.addEventListener(rainbowSDK.RAINBOW_ONREADY, this.onReady);\r\n\r\n    document.addEventListener(rainbowSDK.RAINBOW_ONLOADED, this.onLoaded);\r\n    rainbowSDK.start();\r\n    rainbowSDK.load();\r\n\r\n\r\n    //this.setState({ loggedin: 1 });\r\n\r\n    console.log(\"logged in \")\r\n  };\r\n\r\n  // compareMessage = () => {\r\n  //   if (msg != prevMessage) {\r\n  //     console.log(\"I am here ******************************************\")\r\n  //     var new_history = this.state.history;\r\n  //     new_history.push({ user: this.state.userName, message: msg });\r\n  //     console.log(new_history);\r\n  //     this.setState({ history: new_history });\r\n  //     prevMessage = msg\r\n  //     this.render()\r\n  //   }\r\n  // }\r\n\r\n  signout = () => {\r\n    window.location.reload(true);\r\n  }\r\n\r\n  // Things to do before unloading/closing the tab\r\n  doSomethingBeforeUnload = () => {\r\n    // Do something\r\n    window.alert(\"Are you sure you want to close ? \")\r\n  }\r\n\r\n  // Setup the `beforeunload` event listener\r\n  setupBeforeUnloadListener = () => {\r\n    window.addEventListener(\"beforeunload\", (ev) => {\r\n      ev.preventDefault();\r\n\r\n      ev.returnValue(\"are you sure you want to leave\")\r\n      return this.doSomethingBeforeUnload();\r\n    });\r\n  };\r\n\r\n  onNewMessageReceived = (event) => {\r\n\r\n    let message = event.detail.message;\r\n    let conversation = event.detail.conversation;\r\n    let messageContent = \"\";\r\n\r\n    console.log(message)\r\n\r\n    // Acknowledge it\r\n    rainbowSDK.im.markMessageFromConversationAsRead(conversation, message);\r\n\r\n    // Text message received\r\n    messageContent = message.data;\r\n    console.log(messageContent)\r\n    msg = messageContent;\r\n    console.log(msg)\r\n    var new_history = this.state.history;\r\n    new_history.push({ user: \"Agent\", message: messageContent });\r\n    this.setState({ history: new_history });\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Activate the event listener\r\n    this.setupBeforeUnloadListener();\r\n    document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, this.onNewMessageReceived)\r\n\r\n  }\r\n\r\n\r\n\r\n  test = () => {\r\n    if (this.state.loggedin == 0) {\r\n      return (\r\n        <div>\r\n          <p className=\"tc\">{this.state.message}</p>\r\n          <Login_n userInfo={this.state} onSubmit={this.login} />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <div className=\"\"><Chatbox history={this.state.history} onMessage={this.updateHistory} signOut={this.signout} /></div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  };\r\n\r\n\r\n  render() {\r\n    //this.compareMessage()\r\n    return (\r\n\r\n      this.test()\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n"]},"metadata":{},"sourceType":"module"}