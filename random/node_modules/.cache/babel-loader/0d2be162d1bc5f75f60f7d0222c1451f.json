{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar Writable = require('readable-stream/writable');\n\nvar _require = require('triple-beam'),\n    LEVEL = _require.LEVEL;\n/**\r\n * Constructor function for the TransportStream. This is the base prototype\r\n * that all `winston >= 3` transports should inherit from.\r\n * @param {Object} options - Options for this TransportStream instance\r\n * @param {String} options.level - Highest level according to RFC5424.\r\n * @param {Boolean} options.handleExceptions - If true, info with\r\n * { exception: true } will be written.\r\n * @param {Function} options.log - Custom log function for simple Transport\r\n * creation\r\n * @param {Function} options.close - Called on \"unpipe\" from parent.\r\n */\n\n\nvar TransportStream = module.exports = function TransportStream() {\n  var _this = this;\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  Writable.call(this, {\n    objectMode: true,\n    highWaterMark: options.highWaterMark\n  });\n  this.format = options.format;\n  this.level = options.level;\n  this.handleExceptions = options.handleExceptions;\n  this.silent = options.silent;\n  if (options.log) this.log = options.log;\n  if (options.logv) this.logv = options.logv;\n  if (options.close) this.close = options.close; // Get the levels from the source we are piped from.\n\n  this.once('pipe', function (logger) {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    _this.levels = logger.levels;\n    _this.parent = logger;\n  }); // If and/or when the transport is removed from this instance\n\n  this.once('unpipe', function (src) {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    if (src === _this.parent) {\n      _this.parent = null;\n\n      if (_this.close) {\n        _this.close();\n      }\n    }\n  });\n};\n/*\r\n * Inherit from Writeable using Node.js built-ins\r\n */\n\n\nutil.inherits(TransportStream, Writable);\n/**\r\n * Writes the info object to our transport instance.\r\n * @param {mixed} info - TODO: add param description.\r\n * @param {mixed} enc - TODO: add param description.\r\n * @param {function} callback - TODO: add param description.\r\n * @returns {undefined}\r\n * @private\r\n */\n\nTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || info.exception === true && !this.handleExceptions) {\n    return callback(null);\n  } // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream. We always\n  // prefer any explicit level set on the Transport itself falling back to\n  // any level set on the parent.\n\n\n  var level = this.level || this.parent && this.parent.level;\n\n  if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    if (info && !this.format) {\n      return this.log(info, callback);\n    }\n\n    var errState = void 0;\n    var transformed = void 0; // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n\n    try {\n      transformed = this.format.transform(Object.assign({}, info), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      callback();\n      if (errState) throw errState;\n      return;\n    }\n\n    return this.log(transformed, callback);\n  }\n\n  return callback(null);\n};\n/**\r\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\r\n * instance after performing any necessary filtering.\r\n * @param {mixed} chunks - TODO: add params description.\r\n * @param {function} callback - TODO: add params description.\r\n * @returns {mixed} - TODO: add returns description.\r\n * @private\r\n */\n\n\nTransportStream.prototype._writev = function _writev(chunks, callback) {\n  if (this.logv) {\n    var infos = chunks.filter(this._accept, this);\n\n    if (!infos.length) {\n      return callback(null);\n    } // Remark (indexzero): from a performance perspective if Transport\n    // implementers do choose to implement logv should we make it their\n    // responsibility to invoke their format?\n\n\n    return this.logv(infos, callback);\n  }\n\n  for (var i = 0; i < chunks.length; i++) {\n    if (!this._accept(chunks[i])) continue;\n\n    if (chunks[i].chunk && !this.format) {\n      this.log(chunks[i].chunk, chunks[i].callback);\n      continue;\n    }\n\n    var errState = void 0;\n    var transformed = void 0; // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n\n    try {\n      transformed = this.format.transform(Object.assign({}, chunks[i].chunk), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      chunks[i].callback();\n\n      if (errState) {\n        // eslint-disable-next-line callback-return\n        callback(null);\n        throw errState;\n      }\n    } else {\n      this.log(transformed, chunks[i].callback);\n    }\n  }\n\n  return callback(null);\n};\n/**\r\n * Predicate function that returns true if the specfied `info` on the\r\n * WriteReq, `write`, should be passed down into the derived\r\n * TransportStream's I/O via `.log(info, callback)`.\r\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\r\n * representing the log message.\r\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\r\n * logged.\r\n */\n\n\nTransportStream.prototype._accept = function _accept(write) {\n  var info = write.chunk;\n\n  if (this.silent) {\n    return false;\n  } // We always prefer any explicit level set on the Transport itself\n  // falling back to any level set on the parent.\n\n\n  var level = this.level || this.parent && this.parent.level; // Immediately check the average case: log level filtering.\n\n  if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    // Ensure the info object is valid based on `{ exception }`:\n    // 1. { handleExceptions: true }: all `info` objects are valid\n    // 2. { exception: false }: accepted by all transports.\n    if (this.handleExceptions || info.exception !== true) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\r\n * _nop is short for \"No operation\"\r\n * @returns {Boolean} Intentionally false.\r\n */\n\n\nTransportStream.prototype._nop = function _nop() {\n  // eslint-disable-next-line no-undefined\n  return void undefined;\n};","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/winston-transport/dist/index.js"],"names":["util","require","Writable","_require","LEVEL","TransportStream","module","exports","_this","options","arguments","length","undefined","call","objectMode","highWaterMark","format","level","handleExceptions","silent","log","logv","close","once","logger","levels","parent","src","inherits","prototype","_write","info","enc","callback","exception","errState","transformed","transform","Object","assign","err","_writev","chunks","infos","filter","_accept","i","chunk","write","_nop"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar util = require('util');\r\nvar Writable = require('readable-stream/writable');\r\n\r\nvar _require = require('triple-beam'),\r\n    LEVEL = _require.LEVEL;\r\n\r\n/**\r\n * Constructor function for the TransportStream. This is the base prototype\r\n * that all `winston >= 3` transports should inherit from.\r\n * @param {Object} options - Options for this TransportStream instance\r\n * @param {String} options.level - Highest level according to RFC5424.\r\n * @param {Boolean} options.handleExceptions - If true, info with\r\n * { exception: true } will be written.\r\n * @param {Function} options.log - Custom log function for simple Transport\r\n * creation\r\n * @param {Function} options.close - Called on \"unpipe\" from parent.\r\n */\r\n\r\n\r\nvar TransportStream = module.exports = function TransportStream() {\r\n  var _this = this;\r\n\r\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n  Writable.call(this, { objectMode: true, highWaterMark: options.highWaterMark });\r\n\r\n  this.format = options.format;\r\n  this.level = options.level;\r\n  this.handleExceptions = options.handleExceptions;\r\n  this.silent = options.silent;\r\n\r\n  if (options.log) this.log = options.log;\r\n  if (options.logv) this.logv = options.logv;\r\n  if (options.close) this.close = options.close;\r\n\r\n  // Get the levels from the source we are piped from.\r\n  this.once('pipe', function (logger) {\r\n    // Remark (indexzero): this bookkeeping can only support multiple\r\n    // Logger parents with the same `levels`. This comes into play in\r\n    // the `winston.Container` code in which `container.add` takes\r\n    // a fully realized set of options with pre-constructed TransportStreams.\r\n    _this.levels = logger.levels;\r\n    _this.parent = logger;\r\n  });\r\n\r\n  // If and/or when the transport is removed from this instance\r\n  this.once('unpipe', function (src) {\r\n    // Remark (indexzero): this bookkeeping can only support multiple\r\n    // Logger parents with the same `levels`. This comes into play in\r\n    // the `winston.Container` code in which `container.add` takes\r\n    // a fully realized set of options with pre-constructed TransportStreams.\r\n    if (src === _this.parent) {\r\n      _this.parent = null;\r\n      if (_this.close) {\r\n        _this.close();\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n/*\r\n * Inherit from Writeable using Node.js built-ins\r\n */\r\nutil.inherits(TransportStream, Writable);\r\n\r\n/**\r\n * Writes the info object to our transport instance.\r\n * @param {mixed} info - TODO: add param description.\r\n * @param {mixed} enc - TODO: add param description.\r\n * @param {function} callback - TODO: add param description.\r\n * @returns {undefined}\r\n * @private\r\n */\r\nTransportStream.prototype._write = function _write(info, enc, callback) {\r\n  if (this.silent || info.exception === true && !this.handleExceptions) {\r\n    return callback(null);\r\n  }\r\n\r\n  // Remark: This has to be handled in the base transport now because we\r\n  // cannot conditionally write to our pipe targets as stream. We always\r\n  // prefer any explicit level set on the Transport itself falling back to\r\n  // any level set on the parent.\r\n  var level = this.level || this.parent && this.parent.level;\r\n\r\n  if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\r\n    if (info && !this.format) {\r\n      return this.log(info, callback);\r\n    }\r\n\r\n    var errState = void 0;\r\n    var transformed = void 0;\r\n\r\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\r\n    // guarantee that the streams callback is invoked so that we can continue flowing.\r\n    try {\r\n      transformed = this.format.transform(Object.assign({}, info), this.format.options);\r\n    } catch (err) {\r\n      errState = err;\r\n    }\r\n\r\n    if (errState || !transformed) {\r\n      // eslint-disable-next-line callback-return\r\n      callback();\r\n      if (errState) throw errState;\r\n      return;\r\n    }\r\n\r\n    return this.log(transformed, callback);\r\n  }\r\n\r\n  return callback(null);\r\n};\r\n\r\n/**\r\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\r\n * instance after performing any necessary filtering.\r\n * @param {mixed} chunks - TODO: add params description.\r\n * @param {function} callback - TODO: add params description.\r\n * @returns {mixed} - TODO: add returns description.\r\n * @private\r\n */\r\nTransportStream.prototype._writev = function _writev(chunks, callback) {\r\n  if (this.logv) {\r\n    var infos = chunks.filter(this._accept, this);\r\n    if (!infos.length) {\r\n      return callback(null);\r\n    }\r\n\r\n    // Remark (indexzero): from a performance perspective if Transport\r\n    // implementers do choose to implement logv should we make it their\r\n    // responsibility to invoke their format?\r\n    return this.logv(infos, callback);\r\n  }\r\n\r\n  for (var i = 0; i < chunks.length; i++) {\r\n    if (!this._accept(chunks[i])) continue;\r\n\r\n    if (chunks[i].chunk && !this.format) {\r\n      this.log(chunks[i].chunk, chunks[i].callback);\r\n      continue;\r\n    }\r\n\r\n    var errState = void 0;\r\n    var transformed = void 0;\r\n\r\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\r\n    // guarantee that the streams callback is invoked so that we can continue flowing.\r\n    try {\r\n      transformed = this.format.transform(Object.assign({}, chunks[i].chunk), this.format.options);\r\n    } catch (err) {\r\n      errState = err;\r\n    }\r\n\r\n    if (errState || !transformed) {\r\n      // eslint-disable-next-line callback-return\r\n      chunks[i].callback();\r\n      if (errState) {\r\n        // eslint-disable-next-line callback-return\r\n        callback(null);\r\n        throw errState;\r\n      }\r\n    } else {\r\n      this.log(transformed, chunks[i].callback);\r\n    }\r\n  }\r\n\r\n  return callback(null);\r\n};\r\n\r\n/**\r\n * Predicate function that returns true if the specfied `info` on the\r\n * WriteReq, `write`, should be passed down into the derived\r\n * TransportStream's I/O via `.log(info, callback)`.\r\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\r\n * representing the log message.\r\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\r\n * logged.\r\n */\r\nTransportStream.prototype._accept = function _accept(write) {\r\n  var info = write.chunk;\r\n  if (this.silent) {\r\n    return false;\r\n  }\r\n\r\n  // We always prefer any explicit level set on the Transport itself\r\n  // falling back to any level set on the parent.\r\n  var level = this.level || this.parent && this.parent.level;\r\n\r\n  // Immediately check the average case: log level filtering.\r\n  if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {\r\n    // Ensure the info object is valid based on `{ exception }`:\r\n    // 1. { handleExceptions: true }: all `info` objects are valid\r\n    // 2. { exception: false }: accepted by all transports.\r\n    if (this.handleExceptions || info.exception !== true) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/**\r\n * _nop is short for \"No operation\"\r\n * @returns {Boolean} Intentionally false.\r\n */\r\nTransportStream.prototype._nop = function _nop() {\r\n  // eslint-disable-next-line no-undefined\r\n  return void undefined;\r\n};"]},"metadata":{},"sourceType":"script"}