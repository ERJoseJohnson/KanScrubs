{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ErrorManager_1 = require(\"./ErrorManager\");\n\nconst events_1 = require(\"events\");\n\nconst LOG_ID = \"EVENTS - \";\nlet EventEmitterClass = events_1.EventEmitter;\n/*\r\n// @ class  Emitter EventEmitter class extended to log the event names and parameters.\r\nclass Emitter extends events_1.EventEmitter {\r\n    constructor(_logger) {\r\n        super();\r\n        let that = this;\r\n        this._logger = _logger;\r\n    }\r\n    emit(type, ...args) {\r\n        let that = this;\r\n        try {\r\n            that._logger.log(\"internal\", LOG_ID + \"EventEmitter(emit) event \", that._logger.colors.eventsEmitter(type));\r\n        }\r\n        catch (e) {\r\n            that._logger.log(\"error\", LOG_ID + \"EventEmitter(emit) Catch Error !!! error : \", e);\r\n        }\r\n        return super.emit(type, ...args);\r\n    }\r\n    on(event, listener) {\r\n        let params = [];\r\n        let that = this;\r\n        let listenerWithLog = (...args) => {\r\n            try {\r\n                if (args.length === 0) {\r\n                    that._logger.log(\"internal\", LOG_ID + \"EventEmitter(on) event \", that._logger.colors.eventsEmitter(event));\r\n                }\r\n                let iter = 0;\r\n                [...params] = args;\r\n                params.forEach((dataIter) => {\r\n                    //console.log(\"EVENT dataIter : \", dataIter);\r\n                    //that._logger.log(\"internal\", LOG_ID + \"EventEmitter(on) param \", iter++, \" for event \", that._logger.colors.events(eventName), \" data : \", dataIter);\r\n                    let data = that._logger.argumentsToString([\"\", dataIter]);\r\n                    //console.log(\"EVENT data : \", data);\r\n                    that._logger.log(\"internal\", LOG_ID + \"EventEmitter(on) param \", iter++, \" for event \", that._logger.colors.eventsEmitter(event), \" data : \", that._logger.colors.data(data));\r\n                });\r\n            }\r\n            catch (e) {\r\n                that._logger.log(\"error\", LOG_ID + \"EventEmitter(on) Catch Error !!! error : \", e);\r\n            }\r\n            return listener(...args);\r\n        };\r\n        super.on(event, listenerWithLog);\r\n        return this;\r\n    }\r\n}\r\n// */\n\n/*\r\n/*\r\n\r\n// The comment is removed at grunt build so the default EventEmitter is used when delivered.\r\n\r\n// */\n\nclass Emitter extends EventEmitterClass {\n  constructor(props) {\n    super();\n  }\n\n} // */\n\n/**\r\n * @class\r\n * @name Events\r\n * @description\r\n *      This module fires every events that come from Rainbow.<br/>\r\n *      To receive them, you need to subscribe individually to each of the following events<br/>\r\n * @fires Events#rainbow_onrainbowversionwarning\r\n * @fires Events#rainbow_onmessageserverreceiptreceived\r\n * @fires Events#rainbow_onmessagereceiptreceived\r\n * @fires Events#rainbow_onmessagereceiptreadreceived\r\n * @fires Events#rainbow_onmessagereceived\r\n * @fires Events#rainbow_onsendmessagefailed\r\n * @fires Events#rainbow_oncontactpresencechanged\r\n * @fires Events#rainbow_onpresencechanged\r\n * @fires Events#rainbow_onconversationremoved\r\n * @fires Events#rainbow_onconversationchanged\r\n * @fires Events#rainbow_onallmessagedremovedfromconversationreceived\r\n * @fires Events#rainbow_onchatstate\r\n * @fires Events#rainbow_oncontactinformationchanged\r\n * @fires Events#rainbow_onuserinvitereceived\r\n * @fires Events#rainbow_onuserinviteaccepted\r\n * @fires Events#rainbow_onuserinvitecanceled\r\n * @fires Events#rainbow_onbubbleaffiliationchanged\r\n * @fires Events#rainbow_onbubbleownaffiliationchanged\r\n * @fires Events#rainbow_onbubbleinvitationreceived\r\n * @fires Events#rainbow_onbubblecustomDatachanged\r\n * @fires Events#rainbow_onbubbletopicchanged\r\n * @fires Events#rainbow_onbubbleprivilegechanged\r\n * @fires Events#rainbow_onbubbleavatarchanged\r\n * @fires Events#rainbow_onbubblenamechanged\r\n * @fires Events#rainbow_ongroupcreated\r\n * @fires Events#rainbow_ongroupdeleted\r\n * @fires Events#rainbow_ongroupupdated\r\n * @fires Events#rainbow_onuseraddedingroup\r\n * @fires Events#rainbow_onuserremovedfromgroup\r\n * @fires Events#rainbow_onstarted\r\n * @fires Events#rainbow_onstopped\r\n * @fires Events#rainbow_onready\r\n * @fires Events#rainbow_onerror\r\n * @fires Events#rainbow_onconnected\r\n * @fires Events#rainbow_onconnectionerror\r\n * @fires Events#rainbow_ondisconnected\r\n * @fires Events#rainbow_onreconnecting\r\n * @fires Events#rainbow_onfailed\r\n * @fires Events#rainbow_oncallupdated\r\n * @fires Events#rainbow_onconferenced\r\n * @fires Events#rainbow_ontelephonystatuschanged\r\n * @fires Events#rainbow_onnomadicstatusevent\r\n * @fires Events#rainbow_onvoicemessageupdated\r\n * @fires Events#rainbow_oncallforwarded\r\n * @fires Events#rainbow_onchannelmessagereceived\r\n * @fires Events#rainbow_onchannelmessagedeletedreceived\r\n * @fires Events#rainbow_onprofilefeatureupdated\r\n * @fires Events#rainbow_onfilecreated\r\n * @fires Events#rainbow_onfileupdated\r\n * @fires Events#rainbow_onfiledeleted\r\n * @fires Events#rainbow_onthumbnailcreated\r\n * @fires Events#rainbow_onchannelupdated\r\n * @fires Events#rainbow_onchannelusersubscription\r\n * @fires Events#rainbow_onmediapropose\r\n * @fires Events#rainbow_oncalllogupdated\r\n * @fires Events#rainbow_oncalllogackupdated\r\n * @fires Events#rainbow_onfavoritecreated\r\n * @fires Events#rainbow_onfavoritedeleted\r\n*/\n\n\nclass Events {\n  constructor(_logger, _filterCallback) {\n    let that = this;\n    this._logger = _logger;\n    this._filterCallback = _filterCallback;\n    this._evReceiver = new Emitter(this._logger);\n    this._evPublisher = new events_1.EventEmitter();\n    /*\r\n    this._evReceiver.on('evt_internal_on*', function(...args: any[]) {\r\n        let event;\r\n        let params;\r\n        let that = this;\r\n        [event, ...params] = args;\r\n          let eventName = this.event;\r\n          that._logger.log(\"internal\", LOG_ID + \"(evt_internal_on*) receive event \" + that._logger.colors.events(eventName.toString()));\r\n        //console.log(this.event, value1, value2);\r\n    });\r\n     */\n\n    this._evReceiver.on(\"evt_internal_onreceipt\", function (receipt) {\n      if (_filterCallback && _filterCallback(receipt.fromJid)) {\n        that._logger.log(\"warn\", `${LOG_ID} filtering event evt_internal_onreceipt for jid: ${receipt.fromJid}`);\n\n        return;\n      }\n\n      if (receipt.entity === \"server\") {\n        /**\r\n         * @public\r\n         * @event Events#rainbow_onmessageserverreceiptreceived\r\n         * @param {Object} receipt The receipt received by the server\r\n         * @param {string} receipt.event The type of receipt. Can be `read` or `received`. Should be `received` in that case\r\n         * @param {string} receipt.entity The entity who sent the receipt. Can be `server` or `client`. Should be `server` in that case\r\n         * @param {string} receipt.type The type of the message. Can be `chat` or `groupchat`.\r\n         * @param {string} receipt.id The id of the message sent (linked to that receipt)\r\n         * @memberof Events\r\n         * @description\r\n         *      Fired when the message has been received by the server\r\n         */\n        that.publishEvent(\"messageserverreceiptreceived\", receipt);\n      } else {\n        if (receipt.event === \"received\") {\n          /**\r\n           * @public\r\n           * @event Events#rainbow_onmessagereceiptreceived\r\n           * @param {Object} receipt The receipt received by the server\r\n           * @param {string} receipt.event The type of receipt. Can be `read` or `received`. Should be `received` in that case\r\n           * @param {string} receipt.entity The entity who sent the receipt. Can be `server` or `client`. Should be `client` in that case\r\n           * @param {string} receipt.type The type of the message. Can be `chat` or `groupchat`\r\n           * @param {string} receipt.id The id of the message sent (linked to that receipt)\r\n           * @param {string} receipt.fromJid The Bare JID of the recipient who sent this receipt,\r\n           * @param {string} receipt.resource The resource JID of the recipient who sent this receipt\r\n           * @description\r\n           *      Fired when the message has been received by the recipient\r\n           */\n          that.publishEvent(\"messagereceiptreceived\", receipt);\n        } else {\n          /**\r\n           * @public\r\n           * @event Events#rainbow_onmessagereceiptreadreceived\r\n           * @param {Object} receipt The receipt received by the server\r\n           * @param {string} receipt.event The type of receipt. Can be `read` or `received`. Should be `read` in that case\r\n           * @param {string} receipt.entity The entity who sent the receipt. Can be `server` or `client`. Should be `client` in that case\r\n           * @param {string} receipt.type The type of the message. Can be `chat` or `groupchat`\r\n           * @param {string} receipt.id The id of the message sent (linked to that receipt)\r\n           * @param {string} receipt.fromJid The Bare JID of the recipient who sent this receipt,\r\n           * @param {string} receipt.resource The resource JID of the recipient who sent this receipt\r\n           * @description\r\n           *      Fired when the message has been read by the recipient\r\n           */\n          that.publishEvent(\"messagereceiptreadreceived\", receipt);\n        }\n      }\n    });\n\n    this._evReceiver.on(\"evt_internal_onmessagereceived\", function (message) {\n      if (_filterCallback && _filterCallback(message.fromJid)) {\n        that._logger.log(\"warn\", `${LOG_ID} filtering event rainbow_onmessagereceived for jid: ${message.fromJid}`);\n\n        return;\n      }\n      /**\r\n       * @event Events#rainbow_onmessagereceived\r\n       * @public\r\n       * @param {Message} message The message received\r\n       * @description\r\n       *      Fired when a chat message is received (in a one-to-one conversation or in a Bubble conversation)\r\n       */\n\n\n      that.publishEvent(\"messagereceived\", message);\n    });\n\n    this._evReceiver.on(\"evt_internal_onsendmessagefailed\", function (message) {\n      /**\r\n       * @event Events#rainbow_onsendmessagefailed\r\n       * @public\r\n       * @param { Message } message The message which failed to be sent.\r\n       * @description\r\n       *      Fired when a chat message with no-store attribut sent has failed.\r\n       */\n      that.publishEvent(\"sendmessagefailed\", message);\n    });\n\n    this._evReceiver.on(\"evt_internal_onrainbowversionwarning\", function (data) {\n      /**\r\n       * @event Events#rainbow_onrainbowversionwarning\r\n       * @public\r\n       * @param { Object } data The warning object about the curent SDK version which is not the latest one provided on npmjs.com.\r\n       * @param { string } data.label The label warning.\r\n       * @param { string } data.currentPackage The curent SDK version used.\r\n       * @param { string } data.latestPublishedPackage The latest one provided on npmjs.com.\r\n       * @description\r\n       *      Fired when a chat message with no-store attribut sent has failed.\r\n       */\n      that.publishEvent(\"rainbowversionwarning\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_onrosterpresencechanged\", function (contact) {\n      /**\r\n       * @event Events#rainbow_oncontactpresencechanged\r\n       * @public\r\n       * @param { Contact } contact The contact\r\n       * @description\r\n       *      Fired when the presence of a contact changes\r\n       */\n      that.publishEvent(\"contactpresencechanged\", contact);\n    });\n\n    this._evReceiver.on(\"evt_internal_presencechanged\", function (presence) {\n      /**\r\n       * @event Events#rainbow_onpresencechanged\r\n       * @public\r\n       * @param {Object} presence The presence object updated (jid, status, message, stamp)\r\n       * @description\r\n       *      This event is fired when the presence of the connected user changes <br/>\r\n       *      status may be <br/>\r\n       *          + \"unknow\",<br/>\r\n       *          + \"online\" (with message \"\" | \"mode=auto\"),<br/>\r\n       *          + \"away\" (with message \"\" ),<br/>\r\n       *          + \"xa\" (with message \"\"| \"away\"),<br/>\r\n       *          + \"dnd\" (with message \"\" | \"audio\" | \"video\" | \"sharing\" | \"presentation\")<br/>\r\n       *      This event is also a confirmation from the server that the new presence value has been set\r\n       */\n      that.publishEvent(\"presencechanged\", presence);\n    });\n\n    this._evReceiver.on(\"evt_internal_conversationdeleted\", function (conversation) {\n      /**\r\n       * @public\r\n       * @event Events#rainbow_onconversationremoved\r\n       * @param { Object } conversation The conversation object\r\n       * @param { String } conversation.conversationId Conversation identifier\r\n       * @description\r\n       *      This event is fired when a conversation has been removed\r\n       */\n      that.publishEvent(\"conversationremoved\", conversation);\n    });\n\n    this._evReceiver.on(\"evt_internal_conversationupdated\", function (conversation) {\n      /**\r\n       * @public\r\n       * @event Events#rainbow_onconversationchanged\r\n       * @param { Conversation } conversation The conversation\r\n       * @description\r\n       *      This event is fired when a conversation has changed\r\n       */\n      that.publishEvent(\"conversationchanged\", conversation);\n    });\n\n    this._evReceiver.on(\"evt_internal_allmessagedremovedfromconversationreceived\", function (conversation) {\n      /**\r\n       * @public\r\n       * @event Events#rainbow_onallmessagedremovedfromconversationreceived\r\n       * @param { Conversation } conversation The conversation where the messages as all been removed.\r\n       * @description\r\n       *      This event is fired when a conversation has changed\r\n       */\n      that.publishEvent(\"allmessagedremovedfromconversationreceived\", conversation);\n    });\n\n    this._evReceiver.on(\"evt_internal_chatstate\", function (chatstate) {\n      /**\r\n       * @public\r\n       * @event Events#rainbow_onchatstate\r\n       * @param { Object } chatstate The chatstate\r\n       * @description\r\n       *      This event is fired when a chatstate event occurs\r\n       */\n      that.publishEvent(\"chatstate\", chatstate);\n    });\n\n    this._evReceiver.on(\"evt_internal_contactinformationchanged\", function (contact) {\n      /**\r\n       * @public\r\n       * @event Events#rainbow_oncontactinformationchanged\r\n       * @param { Contact } contact The contact\r\n       * @description\r\n       *      This event is fired when a conversation has been removed\r\n       */\n      that.publishEvent(\"contactinformationchanged\", contact);\n    });\n\n    this._evReceiver.on(\"evt_internal_userinvitereceived\", function (invitation) {\n      /**\r\n       * @public\r\n       * @event Events#rainbow_onuserinvitereceived\r\n       * @param { Invitation } invitation The invitation received\r\n       * @description\r\n       *      Fired when an user invitation is received\r\n       */\n      that.publishEvent(\"userinvitereceived\", invitation);\n    });\n\n    this._evReceiver.on(\"evt_internal_userinviteaccepted\", function (invitation) {\n      /**\r\n       * @event Events#rainbow_onuserinviteaccepted\r\n       * @public\r\n       * @param { Invitation } invitation The invitation accepted\r\n       * @description\r\n       *      Fired when an user invitation is accepted\r\n       */\n      that.publishEvent(\"userinviteaccepted\", invitation);\n    });\n\n    this._evReceiver.on(\"evt_internal_userinvitecanceled\", function (invitation) {\n      /**\r\n       * @public\r\n       * @event Events#rainbow_onuserinvitecanceled\r\n       * @param { Invitation } invitation The invitation canceled\r\n       * @description\r\n       *      Fired when an user invitation is canceled\r\n       */\n      that.publishEvent(\"userinvitecanceled\", invitation);\n    });\n\n    this._evReceiver.on(\"evt_internal_affiliationdetailschanged\", function (bubble) {\n      /**\r\n       * @event Events#rainbow_onbubbleaffiliationchanged\r\n       * @public\r\n       * @param { Bubble } bubble The bubble updated\r\n       * @description\r\n       *      Fired when a user changes his affiliation with a bubble\r\n       */\n      that.publishEvent(\"bubbleaffiliationchanged\", bubble);\n    });\n\n    this._evReceiver.on(\"evt_internal_bubblepresencechanged\", function (bubble) {\n      /**\r\n       * @public\r\n       * @event Events#rainbow_onbubblepresencechanged\r\n       * @param { Bubble } bubble The bubble updated\r\n       * @description\r\n       *      Fired when a presence changes is a user connected bubble\r\n       */\n      that.publishEvent(\"bubblepresencechanged\", bubble);\n    });\n\n    this._evReceiver.on(\"evt_internal_ownaffiliationdetailschanged\", function (bubble) {\n      /**\r\n       * @public\r\n       * @event Events#rainbow_onbubbleownaffiliationchanged\r\n       * @param { Bubble } bubble The bubble updated\r\n       * @description\r\n       *      Fired when a user changes the user connected affiliation with a bubble\r\n       */\n      that.publishEvent(\"bubbleownaffiliationchanged\", bubble);\n    });\n\n    this._evReceiver.on(\"evt_internal_bubbledeleted\", function (bubble) {\n      /**\r\n       * @public\r\n       * @event Events#rainbow_onbubbledeleted\r\n       * @param { Bubble } bubble The bubble deleted\r\n       * @description\r\n       *      Fired when a user deletes a bubble the user is affiliated to\r\n       */\n      that.publishEvent(\"bubbledeleted\", bubble);\n    });\n\n    this._evReceiver.on(\"evt_internal_invitationdetailsreceived\", function (bubble) {\n      try {\n        if (bubble && bubble.users) {\n          bubble.users.forEach(user => {\n            if (user && user.jid_im === that._core._rest.loggedInUser.jid_im && user.status === \"accepted\") {\n              // this._core._xmpp.sendInitialBubblePresence(bubble.jid);\n              //that._core.bubbles._sendInitialBubblePresence(bubble);\n              that._core._presence.sendInitialBubblePresence(bubble);\n            }\n          });\n        }\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(publishEvent) CATCH Error when evt_internal_invitationdetailsreceived received : \", err);\n      }\n      /**\r\n       * @event Events#rainbow_onbubbleinvitationreceived\r\n       * @public\r\n       * @param { Bubble } bubble The invitation bubble\r\n       * @description\r\n       *      Fired when an invitation to join a bubble is received\r\n       */\n\n\n      that.publishEvent(\"bubbleinvitationreceived\", bubble);\n    });\n\n    this._evReceiver.on(\"evt_internal_bubblecustomDatachanged\", function (bubble) {\n      /**\r\n       * @event Events#rainbow_onbubblecustomdatachanged\r\n       * @public\r\n       * @param { Bubble } bubble The bubble updated with the new custom data set\r\n       * @description\r\n       *      Fired when the custom data of a bubble has changed\r\n       */\n      that.publishEvent(\"bubblecustomdatachanged\", bubble);\n    });\n\n    this._evReceiver.on(\"evt_internal_bubbletopicchanged\", function (bubble) {\n      /**\r\n       * @event Events#rainbow_onbubbletopicchanged\r\n       * @public\r\n       * @param { Bubble } bubble The bubble updated with the new topic set\r\n       * @description\r\n       *      Fired when the topic of a bubble has changed\r\n       */\n      that.publishEvent(\"bubbletopicchanged\", bubble);\n    });\n\n    this._evReceiver.on(\"evt_internal_bubbleprivilegechanged\", function (bubble) {\n      /**\r\n       * @event Events#rainbow_onbubbleprivilegechanged\r\n       * @public\r\n       * @param { {Bubble, String} } bubble The bubble updated with the new privilege set\r\n       *          privilege The privilege updated (Can be moderator, user, owner)\r\n       * @description\r\n       *      Fired when the privilage of a bubble has changed\r\n       */\n      that.publishEvent(\"bubbleprivilegechanged\", bubble);\n    });\n\n    this._evReceiver.on(\"evt_internal_bubbleavatarchanged\", function (bubble) {\n      /**\r\n       * @event Events#rainbow_onbubbleavatarchanged\r\n       * @public\r\n       * @param { Bubble } bubble The bubble updated with a new avatar\r\n       * @description\r\n       *      Fired when the avatar of a bubble has changed\r\n       */\n      that.publishEvent(\"bubbleavatarchanged\", bubble);\n    });\n\n    this._evReceiver.on(\"evt_internal_bubblenamechanged\", function (bubble) {\n      /**\r\n       * @event Events#rainbow_onbubblenamechanged\r\n       * @public\r\n       * @param { Bubble } bubble The bubble updated with the new name set\r\n       * @description\r\n       *      Fired when the name of a bubble has changed\r\n       */\n      that.publishEvent(\"bubblenamechanged\", bubble);\n    });\n\n    this._evReceiver.on(\"evt_internal_groupcreated\", function (group) {\n      /**\r\n       * @event Events#rainbow_ongroupcreated\r\n       * @public\r\n       * @param { Group } group The created group\r\n       * @description\r\n       *      Fired when a group is created\r\n       */\n      that.publishEvent(\"groupcreated\", group);\n    });\n\n    this._evReceiver.on(\"evt_internal_groupdeleted\", function (group) {\n      /**\r\n       * @event Events#rainbow_ongroupdeleted\r\n       * @public\r\n       * @param { Group } group The deleted group\r\n       * @description\r\n       *      Fired when a group is deleted\r\n       */\n      that.publishEvent(\"groupdeleted\", group);\n    });\n\n    this._evReceiver.on(\"evt_internal_groupupdated\", function (group) {\n      /**\r\n       * @event Events#rainbow_ongroupupdated\r\n       * @public\r\n       * @param { Group } group The updated group\r\n       * @description\r\n       *      Fired when a group is updated\r\n       */\n      that.publishEvent(\"groupupdated\", group);\n    });\n\n    this._evReceiver.on(\"evt_internal_useraddedingroup\", function (group, contact) {\n      /**\r\n       * @event Events#rainbow_onuseraddedingroup\r\n       * @public\r\n       * @param { Group } group The group where the user is added\r\n       * @param { Contact} contact The user added\r\n       * @description\r\n       *      Fired when a user is added in a group\r\n       */\n      that.publishEvent(\"useraddedingroup\", group, contact);\n    });\n\n    this._evReceiver.on(\"evt_internal_userremovedfromgroup\", function (group, contact) {\n      /**\r\n       * @event Events#rainbow_onuserremovedfromgroup\r\n       * @public\r\n       * @param { Group } group The group where the user is removed\r\n       * @param { Contact} contact The user removed\r\n       * @description\r\n       *      Fired when a user is removed from a group\r\n       */\n      that.publishEvent(\"userremovedfromgroup\", group, contact);\n    });\n\n    this._evReceiver.on(\"evt_internal_channelmessagereceived\", function (message) {\n      /**\r\n       * @event Events#rainbow_onchannelmessagereceived\r\n       * @public\r\n       * @param { ChannelMessage } message The message received\r\n       * @description\r\n       *      Fired when a message is received from a channel\r\n       */\n      that.publishEvent(\"channelmessagereceived\", message);\n    });\n\n    this._evReceiver.on(\"evt_internal_channelmessagedeletedreceived\", function (message) {\n      /**\r\n       * @event Events#rainbow_onchannelmessagedeletedreceived\r\n       * @public\r\n       * @param { messageId } message The id of the deleted message received\r\n       * @description\r\n       *      Fired when a message is received from a channel\r\n       */\n      that.publishEvent(\"channelmessagedeletedreceived\", message);\n    });\n\n    this._evReceiver.on(\"evt_internal_profilefeatureupdated\", function () {\n      /**\r\n       * @event Events#rainbow_onprofilefeatureupdated\r\n       * @public\r\n       * @param\r\n       * @description\r\n       *      Fired when a profile feature updated event is received\r\n       */\n      that.publishEvent(\"profilefeatureupdated\");\n    });\n\n    this._evReceiver.on(\"evt_internal_callupdated\", function (data) {\n      /**\r\n       * @event Events#rainbow_oncallupdated\r\n       * @public\r\n       * @param { data }\r\n       * @description\r\n       *      Fired when a call event is received\r\n       */\n      if (data && data.status) {\n        //that.publishEvent(\"callupdated_\" + data.status.value, data);\n        let eventName = \"evt_internal_callupdated_\" + data.status.value;\n\n        that._logger.log(\"internal\", LOG_ID + \"(publishEvent) FOR AFTERBUILD TESTS : INTERNAL event \", that._logger.colors.events(eventName), \" data : \", that._logger.colors.data(data));\n\n        that._evPublisher.emit(eventName, data);\n      }\n\n      that.publishEvent(\"callupdated\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_conferenced\", function (data) {\n      /**\r\n       * @event Events#rainbow_onconferenced\r\n       * @public\r\n       * @param { data }\r\n       * @description\r\n       *      Fired when a conference event is received\r\n       */\n      that.publishEvent(\"conferenced\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_telephonystatuschanged\", function (data) {\n      /**\r\n       * @event Events#rainbow_ontelephonystatuschanged\r\n       * @public\r\n       * @param { data }\r\n       * @description\r\n       *      Fired when status of the telephony service event is received\r\n       */\n      that.publishEvent(\"telephonystatuschanged\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_nomadicstatusevent\", function (data) {\n      /**\r\n       * @event Events#rainbow_onnomadicstatusevent\r\n       * @public\r\n       * @param { data }\r\n       * @description\r\n       *      Fired for nomadic of the telephony event\r\n       */\n      that.publishEvent(\"nomadicstatusevent\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_voicemessageupdated\", function (data) {\n      /**\r\n       * @event Events#rainbow_onvoicemessageupdated\r\n       * @public\r\n       * @param { data }\r\n       * @description\r\n       *      Fired when a voice message updated event is received\r\n       */\n      that.publishEvent(\"voicemessageupdated\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_callforwarded\", function (data) {\n      /**\r\n       * @event Events#rainbow_oncallforwarded\r\n       * @public\r\n       * @param { data }\r\n       * @description\r\n       *      Fired when a call forwarded event is received\r\n       */\n      that.publishEvent(\"callforwarded\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_filecreated\", function (data) {\n      /**\r\n       * @event Events#rainbow_onfilecreated\r\n       * @public\r\n       * @param { data }\r\n       * @description\r\n       *      Fired when a file created event is received\r\n       */\n      that.publishEvent(\"filecreated\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_fileupdated\", function (data) {\n      /**\r\n       * @event Events#rainbow_onfileupdated\r\n       * @public\r\n       * @param { data }\r\n       * @description\r\n       *      Fired when a file updated event is received\r\n       */\n      that.publishEvent(\"fileupdated\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_filedeleted\", function (data) {\n      /**\r\n       * @event Events#rainbow_onfiledeleted\r\n       * @public\r\n       * @param { data }\r\n       * @description\r\n       *      Fired when a file deleted event is received\r\n       */\n      that.publishEvent(\"filedeleted\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_thumbnailcreated\", function (data) {\n      /**\r\n       * @event Events#rainbow_onthumbnailcreated\r\n       * @public\r\n       * @param { data }\r\n       * @description\r\n       *      Fired when a thumbnail created event is received\r\n       */\n      that.publishEvent(\"thumbnailcreated\", data);\n    });\n    /************************* Channels **********************/\n\n\n    this._evReceiver.on(\"evt_internal_channelupdated\", function (data) {\n      /**\r\n       * @event Events#rainbow_onchannelupdated\r\n       * @public\r\n       * @param { String } id The id of the channel\r\n       * @param { Number } kind The kind of change (ADD: 0, UPDATE: 1, REMOVE: 2, SUBSCRIBE: 4, UNSUBSCRIBE: 5)\r\n       * @description\r\n       *      Fired when a channel update event is received\r\n       */\n      that.publishEvent(\"channelupdated\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_channelusersubscription\", function (data) {\n      /**\r\n       * @event Events#rainbow_onchannelusersubscription\r\n       * @public\r\n       * @param { String } id The id of the channel\r\n       * @param { String } userId The id of the user\r\n       * @param { Number } kind The kind of change (SUBSCRIBE: 4, UNSUBSCRIBE: 5)\r\n       * @description\r\n       *      Fired when a user channel subscription event is received\r\n       */\n      that.publishEvent(\"channelusersubscription\", data);\n    }); // ****************** CALLLOGS *********************\n\n\n    this._evReceiver.on(\"evt_internal_propose\", function (data) {\n      /**\r\n       * @event Events#rainbow_onmediapropose\r\n       * @public\r\n       * @param { Object } infos about the proposed for media :\r\n       *  { Contact } infos about the contact who proposed for media\r\n       *  { media } infos about media for the proposed event.\r\n       * @description\r\n       *      Fired when received an event of propose for media.\r\n       */\n      that.publishEvent(\"mediapropose\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_calllogupdated\", function (data) {\n      /**\r\n       * @event Events#rainbow_oncalllogupdated\r\n       * @public\r\n       * @param { Object } calllogs The callogs of the user\r\n       * @description\r\n       *      Fired when the calllog is updated\r\n       */\n      that.publishEvent(\"calllogupdated\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_calllogackupdated\", function (data) {\n      /**\r\n       * @event Events#rainbow_oncalllogackupdated\r\n       * @public\r\n       * @param { Object } id The calllog of the user\r\n       * @description\r\n       *      Fired when the number of ack of calllog changes\r\n       */\n      that.publishEvent(\"calllogackupdated\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_favoritecreated\", function (data) {\n      /**\r\n       * @event Events#rainbow_onfavoritecreated\r\n       * @public\r\n       * @param { Favorite } favorite The favorite created\r\n       * @description\r\n       *      Fired when a favorite is added to the loggued in user.\r\n       */\n      that.publishEvent(\"favoritecreated\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_favoritedeleted\", function (data) {\n      /**\r\n       * @event Events#rainbow_onfavoritedeleted\r\n       * @public\r\n       * @param { Favorite } favorite The favorite deleted\r\n       * @description\r\n       *      Fired when a favorite is suppressed to the loggued in user.\r\n       */\n      that.publishEvent(\"favoritedeleted\", data);\n    });\n\n    this._evReceiver.on(\"evt_internal_xmpperror\", function (data) {\n      /**\r\n       * @event Events#rainbow_onxmpperror\r\n       * @public\r\n       * @param { Object } error xmpp received.\r\n       * @description\r\n       *      Fired when an XMPP Error events happens.\r\n       */\n      that.publishEvent(\"xmpperror\", data);\n    });\n  }\n\n  get iee() {\n    return this._evReceiver;\n  }\n\n  get eee() {\n    return this._evPublisher;\n  }\n  /**\r\n   * @method on\r\n   * @public\r\n   * @memberof Events\r\n   * @instance\r\n   * @param {string} event The event name to subscribe\r\n   * @param {function} callback The function called when the even is fired\r\n   * @return {Object} The events instance to be able to chain subscriptions\r\n   * @description\r\n   *      Subscribe to an event\r\n   */\n\n\n  on(event, callback) {\n    return this._evPublisher.on(event, callback);\n  }\n  /**\r\n   * @method once\r\n   * @public\r\n   * @memberof Events\r\n   * @instance\r\n   * @param {string} event The event name to subscribe\r\n   * @param {function} callback The function called when the even is fired\r\n   * @return {Object} The events instance to be able to chain subscriptions\r\n   * @description\r\n   *      Subscribe to an event only one time (fired only the first time)\r\n   */\n\n\n  once(event, callback) {\n    return this._evPublisher.once(event, callback);\n  }\n\n  publish(event, data) {\n    let info = data || ErrorManager_1.ErrorManager.getErrorManager().OK;\n    /**\r\n     * @event Events#rainbow_onstarted\r\n     * @public\r\n     * @param { Object } status The event status\r\n     * @description\r\n     *      Fired when the SDK has successfully started (not yet signed in)\r\n     */\n\n    /**\r\n     * @event Events#rainbow_onstopped\r\n     * @public\r\n     * @param { Object } status The event status\r\n     * @description\r\n     *      Fired when the SDK has been successfully stopped (all services have been stopped)\r\n     */\n\n    /**\r\n     * @event Events#rainbow_onconnected\r\n     * @public\r\n     * @param { Object } status The event status\r\n     * @description\r\n     *      Fired when the connection is successfull with Rainbow (signin complete)\r\n     */\n\n    /**\r\n     * @event Events#rainbow_onconnectionerror\r\n     * @public\r\n     * @param { Object } status The event status\r\n     * @description\r\n     *      Fired when the connection can't be done with Rainbow (ie. issue on sign-in)\r\n     */\n\n    /**\r\n     * @event Events#rainbow_ondisconnected\r\n     * @public\r\n     * @param { Object } status The event status\r\n     * @description\r\n     *      Fired when the SDK lost the connection with Rainbow\r\n     */\n\n    /**\r\n     * @event Events#rainbow_onreconnecting\r\n     * @public\r\n     * @param { Object } status The event status\r\n     * @description\r\n     *      Fired when the SDK tries to reconnect\r\n     */\n\n    /**\r\n     * @event Events#rainbow_onfailed\r\n     * @public\r\n     * @param { Object } status The event status\r\n     * @description\r\n     *      Fired when the SDK didn't succeed to reconnect and stop trying\r\n     */\n\n    /**\r\n     * @event Events#rainbow_onready\r\n     * @public\r\n     * @param { Object } status The event status\r\n     * @description\r\n     *      Fired when the SDK is connected to Rainbow and ready to be used\r\n     */\n\n    /**\r\n     * @event Events#rainbow_onerror\r\n     * @public\r\n     * @param {Object} error The error received\r\n     * @description\r\n     *      Fired when something goes wrong (ie: bad 'configurations' parameter...). Used by application to stop, start the sdk again.\r\n     */\n    //this._logger.log(\"info\", LOG_ID + \"(publish) event \" + this._logger.colors.events(\"rainbow_on\" + event) + \" : \", info);\n    //this._evPublisher.emit(\"rainbow_on\" + event, info);\n\n    this.publishEvent(event, info);\n  }\n  /**\r\n   * @method publishEvent\r\n   * @private\r\n   * @memberof Events\r\n   * @instance\r\n   * @param {...*} args all arguments for the event\r\n   * @return nothing\r\n   * @description\r\n   *      Add \"rainbow_on\" prefix to event name, print it human readable, and raises it.\r\n   */\n\n\n  publishEvent(...args) {\n    let event;\n    let params;\n    let that = this;\n    [event, ...params] = args;\n    let eventName = \"rainbow_on\" + event;\n\n    that._logger.log(\"info\", LOG_ID + \"(publishEvent) event \" + that._logger.colors.events(eventName));\n\n    let iter = 0;\n    params.forEach(dataIter => {\n      //console.log(\"EVENT dataIter : \", dataIter);\n      //that._logger.log(\"internal\", LOG_ID + \"(publishEvent) param \", iter++, \" for event \", that._logger.colors.events(eventName), \" data : \", dataIter);\n      let data = that._logger.argumentsToString([\"\", dataIter]); //console.log(\"EVENT data : \", data);\n\n\n      that._logger.log(\"internal\", LOG_ID + \"(publishEvent) param \", iter++, \" for event \", that._logger.colors.events(eventName), \" data : \", that._logger.colors.data(data));\n    });\n\n    this._evPublisher.emit(eventName, ...params);\n  }\n\n  setCore(_core) {\n    this._core = _core;\n  }\n\n}\n\nexports.Events = Events;\nmodule.exports.Events = Events;","map":{"version":3,"sources":["../../src/lib/common/Events.ts"],"names":[],"mappings":"AAAA;;;;;;AAKA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAIA,MAAM,MAAM,GAAG,WAAf;AACA,IAAI,iBAAiB,GAAG,QAAA,CAAA,YAAxB;AAEC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDD;;;;;;;;;;;;EAaK;;AAGL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA,MAAM,MAAN,CAAY;AAOR,EAAA,WAAA,CAAa,OAAb,EAA+B,eAA/B,EAAyD;AACrD,QAAI,IAAI,GAAG,IAAX;AAEA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,eAAL,GAAuB,eAAvB;AAEA,SAAK,WAAL,GAAmB,IAAI,OAAJ,CAAY,KAAK,OAAjB,CAAnB;AAEA,SAAK,YAAL,GAAoB,IAAI,QAAA,CAAA,YAAJ,EAApB;AAEA;;;;;;;;;;;;AAcA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,wBAApB,EAA8C,UAAS,OAAT,EAAgB;AAC1D,UAAI,eAAe,IAAI,eAAe,CAAC,OAAO,CAAC,OAAT,CAAtC,EAAyD;AACrD,QAAA,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,MAAjB,EAAyB,GAAG,MAAM,oDAAoD,OAAO,CAAC,OAAO,EAArG;;AACA;AACH;;AACD,UAAI,OAAO,CAAC,MAAR,KAAmB,QAAvB,EAAiC;AAC7B;;;;;;;;;;;;AAYA,QAAA,IAAI,CAAC,YAAL,CAAkB,8BAAlB,EAAkD,OAAlD;AACH,OAdD,MAeK;AACD,YAAI,OAAO,CAAC,KAAR,KAAkB,UAAtB,EAAkC;AAC9B;;;;;;;;;;;;;AAaA,UAAA,IAAI,CAAC,YAAL,CAAkB,wBAAlB,EAA4C,OAA5C;AACH,SAfD,MAgBK;AACD;;;;;;;;;;;;;AAaA,UAAA,IAAI,CAAC,YAAL,CAAkB,4BAAlB,EAAgD,OAAhD;AACH;AACJ;AACJ,KAtDD;;AAwDA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,gCAApB,EAAsD,UAAS,OAAT,EAAgB;AAClE,UAAI,eAAe,IAAI,eAAe,CAAC,OAAO,CAAC,OAAT,CAAtC,EAAyD;AACrD,QAAA,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,MAAjB,EAAyB,GAAG,MAAM,uDAAuD,OAAO,CAAC,OAAO,EAAxG;;AACA;AACH;AAED;;;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,iBAAlB,EAAqC,OAArC;AACH,KAdD;;AAgBA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,kCAApB,EAAwD,UAAS,OAAT,EAAgB;AACpE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,mBAAlB,EAAuC,OAAvC;AACH,KATD;;AAUN,SAAK,WAAL,CAAiB,EAAjB,CAAoB,sCAApB,EAA4D,UAAS,IAAT,EAAa;AAC/D;;;;;;;;;;AAUA,MAAA,IAAI,CAAC,YAAL,CAAkB,uBAAlB,EAA2C,IAA3C;AACH,KAZP;;AAcM,SAAK,WAAL,CAAiB,EAAjB,CAAoB,sCAApB,EAA4D,UAAS,OAAT,EAAgB;AAExE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,wBAAlB,EAA4C,OAA5C;AACH,KAVD;;AAYA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,8BAApB,EAAoD,UAAS,QAAT,EAAiB;AAEjE;;;;;;;;;;;;;;AAcA,MAAA,IAAI,CAAC,YAAL,CAAkB,iBAAlB,EAAqC,QAArC;AACH,KAjBD;;AAmBA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,kCAApB,EAAwD,UAAS,YAAT,EAAqB;AAEzE;;;;;;;;AAQA,MAAA,IAAI,CAAC,YAAL,CAAkB,qBAAlB,EAAyC,YAAzC;AACH,KAXD;;AAaA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,kCAApB,EAAwD,UAAS,YAAT,EAAqB;AAEzE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,qBAAlB,EAAyC,YAAzC;AACH,KAVD;;AAYA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,yDAApB,EAA+E,UAAS,YAAT,EAAqB;AAEhG;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,4CAAlB,EAAgE,YAAhE;AACH,KAVD;;AAYA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,wBAApB,EAA8C,UAAS,SAAT,EAAkB;AAE5D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,WAAlB,EAA+B,SAA/B;AACH,KAVD;;AAYA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,wCAApB,EAA8D,UAAS,OAAT,EAAgB;AAE1E;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,2BAAlB,EAA+C,OAA/C;AACH,KAVD;;AAYA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,iCAApB,EAAuD,UAAS,UAAT,EAAmB;AACtE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,oBAAlB,EAAwC,UAAxC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,iCAApB,EAAuD,UAAS,UAAT,EAAmB;AACtE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,oBAAlB,EAAwC,UAAxC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,iCAApB,EAAuD,UAAS,UAAT,EAAmB;AACtE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,oBAAlB,EAAwC,UAAxC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,wCAApB,EAA8D,UAAS,MAAT,EAAe;AACzE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,0BAAlB,EAA8C,MAA9C;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,oCAApB,EAA0D,UAAS,MAAT,EAAe;AACrE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,uBAAlB,EAA2C,MAA3C;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,2CAApB,EAAiE,UAAS,MAAT,EAAe;AAC5E;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,6BAAlB,EAAiD,MAAjD;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,4BAApB,EAAkD,UAAS,MAAT,EAAe;AAC7D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,eAAlB,EAAmC,MAAnC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,wCAApB,EAA8D,UAAS,MAAT,EAAe;AACzE,UAAI;AACA,YAAI,MAAM,IAAI,MAAM,CAAC,KAArB,EAA4B;AACxB,UAAA,MAAM,CAAC,KAAP,CAAa,OAAb,CAAsB,IAAD,IAAS;AAC1B,gBAAI,IAAI,IAAI,IAAI,CAAC,MAAL,KAAgB,IAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,YAAjB,CAA8B,MAAtD,IAAgE,IAAI,CAAC,MAAL,KAAgB,UAApF,EAAgG;AAC5F;AACA;AACA,cAAA,IAAI,CAAC,KAAL,CAAW,SAAX,CAAqB,yBAArB,CAA+C,MAA/C;AACH;AACJ,WAND;AAOH;AACJ,OAVD,CAUE,OAAO,GAAP,EAAY;AACV,QAAA,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,eAAjB,EAAkC,MAAM,GAAG,oFAA3C,EAAiI,GAAjI;AACH;AACD;;;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,0BAAlB,EAA8C,MAA9C;AACH,KAtBD;;AAwBA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,sCAApB,EAA4D,UAAS,MAAT,EAAe;AACvE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,yBAAlB,EAA6C,MAA7C;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,iCAApB,EAAuD,UAAS,MAAT,EAAe;AAClE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,oBAAlB,EAAwC,MAAxC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,qCAApB,EAA2D,UAAS,MAAT,EAAe;AACtE;;;;;;;;AAQA,MAAA,IAAI,CAAC,YAAL,CAAkB,wBAAlB,EAA4C,MAA5C;AACH,KAVD;;AAYA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,kCAApB,EAAwD,UAAS,MAAT,EAAe;AACnE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,qBAAlB,EAAyC,MAAzC;AACH,KATD;;AAYA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,gCAApB,EAAsD,UAAS,MAAT,EAAe;AACjE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,mBAAlB,EAAuC,MAAvC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,2BAApB,EAAiD,UAAS,KAAT,EAAc;AAC3D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,cAAlB,EAAkC,KAAlC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,2BAApB,EAAiD,UAAS,KAAT,EAAc;AAC3D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,cAAlB,EAAkC,KAAlC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,2BAApB,EAAiD,UAAS,KAAT,EAAc;AAC3D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,cAAlB,EAAkC,KAAlC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,+BAApB,EAAqD,UAAS,KAAT,EAAgB,OAAhB,EAAuB;AACxE;;;;;;;;AAQA,MAAA,IAAI,CAAC,YAAL,CAAkB,kBAAlB,EAAsC,KAAtC,EAA6C,OAA7C;AACH,KAVD;;AAYA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,mCAApB,EAAyD,UAAS,KAAT,EAAgB,OAAhB,EAAuB;AAC5E;;;;;;;;AAQA,MAAA,IAAI,CAAC,YAAL,CAAkB,sBAAlB,EAA0C,KAA1C,EAAiD,OAAjD;AACH,KAVD;;AAYA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,qCAApB,EAA2D,UAAS,OAAT,EAAgB;AACvE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,wBAAlB,EAA4C,OAA5C;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,4CAApB,EAAkE,UAAS,OAAT,EAAgB;AAC9E;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,+BAAlB,EAAmD,OAAnD;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,oCAApB,EAA0D,YAAA;AACtD;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,uBAAlB;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,0BAApB,EAAgD,UAAU,IAAV,EAAc;AAC1D;;;;;;;AAOA,UAAI,IAAI,IAAI,IAAI,CAAC,MAAjB,EAAyB;AACrB;AACA,YAAI,SAAS,GAAG,8BAA8B,IAAI,CAAC,MAAL,CAAY,KAA1D;;AACA,QAAA,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,UAAjB,EAA6B,MAAM,GAAG,uDAAtC,EAA+F,IAAI,CAAC,OAAL,CAAa,MAAb,CAAoB,MAApB,CAA2B,SAA3B,CAA/F,EAAsI,UAAtI,EAAkJ,IAAI,CAAC,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,IAAzB,CAAlJ;;AACA,QAAA,IAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,SAAvB,EAAkC,IAAlC;AACH;;AACD,MAAA,IAAI,CAAC,YAAL,CAAkB,aAAlB,EAAiC,IAAjC;AACH,KAfD;;AAiBA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,0BAApB,EAAgD,UAAU,IAAV,EAAc;AAC1D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,aAAlB,EAAiC,IAAjC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,qCAApB,EAA2D,UAAU,IAAV,EAAc;AACrE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,wBAAlB,EAA4C,IAA5C;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,iCAApB,EAAuD,UAAU,IAAV,EAAc;AACjE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,oBAAlB,EAAwC,IAAxC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,kCAApB,EAAwD,UAAU,IAAV,EAAc;AAClE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,qBAAlB,EAAyC,IAAzC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,4BAApB,EAAkD,UAAU,IAAV,EAAc;AAC5D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,eAAlB,EAAmC,IAAnC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,0BAApB,EAAgD,UAAU,IAAV,EAAc;AAC1D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,aAAlB,EAAiC,IAAjC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,0BAApB,EAAgD,UAAU,IAAV,EAAc;AAC1D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,aAAlB,EAAiC,IAAjC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,0BAApB,EAAgD,UAAU,IAAV,EAAc;AAC1D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,aAAlB,EAAiC,IAAjC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,+BAApB,EAAqD,UAAU,IAAV,EAAc;AAC/D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,kBAAlB,EAAsC,IAAtC;AACH,KATD;AAWA;;;AAEA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,6BAApB,EAAmD,UAAU,IAAV,EAAc;AAC7D;;;;;;;;AAQA,MAAA,IAAI,CAAC,YAAL,CAAkB,gBAAlB,EAAoC,IAApC;AACH,KAVD;;AAYA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,sCAApB,EAA4D,UAAU,IAAV,EAAc;AACtE;;;;;;;;;AASA,MAAA,IAAI,CAAC,YAAL,CAAkB,yBAAlB,EAA6C,IAA7C;AACH,KAXD,EA9kBqD,CA2lBrD;;;AAEA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,sBAApB,EAA4C,UAAU,IAAV,EAAc;AACtD;;;;;;;;;AASA,MAAA,IAAI,CAAC,YAAL,CAAkB,cAAlB,EAAkC,IAAlC;AACH,KAXD;;AAaA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,6BAApB,EAAmD,UAAU,IAAV,EAAc;AAC7D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,gBAAlB,EAAoC,IAApC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,gCAApB,EAAsD,UAAU,IAAV,EAAc;AAChE;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,mBAAlB,EAAuC,IAAvC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,8BAApB,EAAoD,UAAU,IAAV,EAAc;AAC9D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,iBAAlB,EAAqC,IAArC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,8BAApB,EAAoD,UAAU,IAAV,EAAc;AAC9D;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,iBAAlB,EAAqC,IAArC;AACH,KATD;;AAWA,SAAK,WAAL,CAAiB,EAAjB,CAAoB,wBAApB,EAA8C,UAAU,IAAV,EAAc;AACxD;;;;;;;AAOA,MAAA,IAAI,CAAC,YAAL,CAAkB,WAAlB,EAA+B,IAA/B;AACH,KATD;AAWH;;AAED,MAAI,GAAJ,GAAO;AACH,WAAO,KAAK,WAAZ;AACH;;AAED,MAAI,GAAJ,GAAO;AACH,WAAO,KAAK,YAAZ;AACH;AAED;;;;;;;;;;;;;AAWA,EAAA,EAAE,CAAC,KAAD,EAAQ,QAAR,EAAgB;AACd,WAAO,KAAK,YAAL,CAAkB,EAAlB,CAAqB,KAArB,EAA4B,QAA5B,CAAP;AACH;AAED;;;;;;;;;;;;;AAWA,EAAA,IAAI,CAAC,KAAD,EAAgB,QAAhB,EAAoD;AACpD,WAAO,KAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAvB,EAA8B,QAA9B,CAAP;AACH;;AAED,EAAA,OAAO,CAAC,KAAD,EAAgB,IAAhB,EAA0B;AAE7B,QAAI,IAAI,GAAG,IAAI,IAAI,cAAA,CAAA,YAAA,CAAa,eAAb,GAA+B,EAAlD;AAEA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;AAQA;AACA;;AACA,SAAK,YAAL,CAAkB,KAAlB,EAAyB,IAAzB;AACH;AAED;;;;;;;;;;;;AAUA,EAAA,YAAY,CAAC,GAAG,IAAJ,EAAe;AACvB,QAAI,KAAJ;AACA,QAAI,MAAJ;AACA,QAAI,IAAI,GAAG,IAAX;AACA,KAAC,KAAD,EAAQ,GAAG,MAAX,IAAqB,IAArB;AAEA,QAAI,SAAS,GAAE,eAAe,KAA9B;;AAEA,IAAA,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,MAAjB,EAAyB,MAAM,GAAG,uBAAT,GAAmC,IAAI,CAAC,OAAL,CAAa,MAAb,CAAoB,MAApB,CAA2B,SAA3B,CAA5D;;AACA,QAAI,IAAI,GAAG,CAAX;AACA,IAAA,MAAM,CAAC,OAAP,CAAgB,QAAD,IAAa;AACxB;AACA;AACA,UAAI,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,iBAAb,CAA+B,CAAC,EAAD,EAAK,QAAL,CAA/B,CAAX,CAHwB,CAIxB;;;AACA,MAAA,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,UAAjB,EAA6B,MAAM,GAAG,uBAAtC,EAA+D,IAAI,EAAnE,EAAuE,aAAvE,EAAsF,IAAI,CAAC,OAAL,CAAa,MAAb,CAAoB,MAApB,CAA2B,SAA3B,CAAtF,EAA6H,UAA7H,EAAyI,IAAI,CAAC,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,IAAzB,CAAzI;AAEH,KAPD;;AASA,SAAK,YAAL,CAAkB,IAAlB,CAAuB,SAAvB,EAAkC,GAAG,MAArC;AACH;;AAED,EAAA,OAAO,CAAC,KAAD,EAAa;AAChB,SAAK,KAAL,GAAa,KAAb;AACH;;AAn0BO;;AAu0BJ,OAAA,CAAA,MAAA,GAAA,MAAA;AADR,MAAM,CAAC,OAAP,CAAe,MAAf,GAAwB,MAAxB","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ErrorManager_1 = require(\"./ErrorManager\");\r\nconst events_1 = require(\"events\");\r\nconst LOG_ID = \"EVENTS - \";\r\nlet EventEmitterClass = events_1.EventEmitter;\r\n/*\r\n// @ class  Emitter EventEmitter class extended to log the event names and parameters.\r\nclass Emitter extends events_1.EventEmitter {\r\n    constructor(_logger) {\r\n        super();\r\n        let that = this;\r\n        this._logger = _logger;\r\n    }\r\n    emit(type, ...args) {\r\n        let that = this;\r\n        try {\r\n            that._logger.log(\"internal\", LOG_ID + \"EventEmitter(emit) event \", that._logger.colors.eventsEmitter(type));\r\n        }\r\n        catch (e) {\r\n            that._logger.log(\"error\", LOG_ID + \"EventEmitter(emit) Catch Error !!! error : \", e);\r\n        }\r\n        return super.emit(type, ...args);\r\n    }\r\n    on(event, listener) {\r\n        let params = [];\r\n        let that = this;\r\n        let listenerWithLog = (...args) => {\r\n            try {\r\n                if (args.length === 0) {\r\n                    that._logger.log(\"internal\", LOG_ID + \"EventEmitter(on) event \", that._logger.colors.eventsEmitter(event));\r\n                }\r\n                let iter = 0;\r\n                [...params] = args;\r\n                params.forEach((dataIter) => {\r\n                    //console.log(\"EVENT dataIter : \", dataIter);\r\n                    //that._logger.log(\"internal\", LOG_ID + \"EventEmitter(on) param \", iter++, \" for event \", that._logger.colors.events(eventName), \" data : \", dataIter);\r\n                    let data = that._logger.argumentsToString([\"\", dataIter]);\r\n                    //console.log(\"EVENT data : \", data);\r\n                    that._logger.log(\"internal\", LOG_ID + \"EventEmitter(on) param \", iter++, \" for event \", that._logger.colors.eventsEmitter(event), \" data : \", that._logger.colors.data(data));\r\n                });\r\n            }\r\n            catch (e) {\r\n                that._logger.log(\"error\", LOG_ID + \"EventEmitter(on) Catch Error !!! error : \", e);\r\n            }\r\n            return listener(...args);\r\n        };\r\n        super.on(event, listenerWithLog);\r\n        return this;\r\n    }\r\n}\r\n// */\r\n/*\r\n/*\r\n\r\n// The comment is removed at grunt build so the default EventEmitter is used when delivered.\r\n\r\n// */\r\n\r\nclass Emitter extends EventEmitterClass{\r\n    constructor(props) {\r\n        super();\r\n    }\r\n}\r\n// */\r\n/**\r\n * @class\r\n * @name Events\r\n * @description\r\n *      This module fires every events that come from Rainbow.<br/>\r\n *      To receive them, you need to subscribe individually to each of the following events<br/>\r\n * @fires Events#rainbow_onrainbowversionwarning\r\n * @fires Events#rainbow_onmessageserverreceiptreceived\r\n * @fires Events#rainbow_onmessagereceiptreceived\r\n * @fires Events#rainbow_onmessagereceiptreadreceived\r\n * @fires Events#rainbow_onmessagereceived\r\n * @fires Events#rainbow_onsendmessagefailed\r\n * @fires Events#rainbow_oncontactpresencechanged\r\n * @fires Events#rainbow_onpresencechanged\r\n * @fires Events#rainbow_onconversationremoved\r\n * @fires Events#rainbow_onconversationchanged\r\n * @fires Events#rainbow_onallmessagedremovedfromconversationreceived\r\n * @fires Events#rainbow_onchatstate\r\n * @fires Events#rainbow_oncontactinformationchanged\r\n * @fires Events#rainbow_onuserinvitereceived\r\n * @fires Events#rainbow_onuserinviteaccepted\r\n * @fires Events#rainbow_onuserinvitecanceled\r\n * @fires Events#rainbow_onbubbleaffiliationchanged\r\n * @fires Events#rainbow_onbubbleownaffiliationchanged\r\n * @fires Events#rainbow_onbubbleinvitationreceived\r\n * @fires Events#rainbow_onbubblecustomDatachanged\r\n * @fires Events#rainbow_onbubbletopicchanged\r\n * @fires Events#rainbow_onbubbleprivilegechanged\r\n * @fires Events#rainbow_onbubbleavatarchanged\r\n * @fires Events#rainbow_onbubblenamechanged\r\n * @fires Events#rainbow_ongroupcreated\r\n * @fires Events#rainbow_ongroupdeleted\r\n * @fires Events#rainbow_ongroupupdated\r\n * @fires Events#rainbow_onuseraddedingroup\r\n * @fires Events#rainbow_onuserremovedfromgroup\r\n * @fires Events#rainbow_onstarted\r\n * @fires Events#rainbow_onstopped\r\n * @fires Events#rainbow_onready\r\n * @fires Events#rainbow_onerror\r\n * @fires Events#rainbow_onconnected\r\n * @fires Events#rainbow_onconnectionerror\r\n * @fires Events#rainbow_ondisconnected\r\n * @fires Events#rainbow_onreconnecting\r\n * @fires Events#rainbow_onfailed\r\n * @fires Events#rainbow_oncallupdated\r\n * @fires Events#rainbow_onconferenced\r\n * @fires Events#rainbow_ontelephonystatuschanged\r\n * @fires Events#rainbow_onnomadicstatusevent\r\n * @fires Events#rainbow_onvoicemessageupdated\r\n * @fires Events#rainbow_oncallforwarded\r\n * @fires Events#rainbow_onchannelmessagereceived\r\n * @fires Events#rainbow_onchannelmessagedeletedreceived\r\n * @fires Events#rainbow_onprofilefeatureupdated\r\n * @fires Events#rainbow_onfilecreated\r\n * @fires Events#rainbow_onfileupdated\r\n * @fires Events#rainbow_onfiledeleted\r\n * @fires Events#rainbow_onthumbnailcreated\r\n * @fires Events#rainbow_onchannelupdated\r\n * @fires Events#rainbow_onchannelusersubscription\r\n * @fires Events#rainbow_onmediapropose\r\n * @fires Events#rainbow_oncalllogupdated\r\n * @fires Events#rainbow_oncalllogackupdated\r\n * @fires Events#rainbow_onfavoritecreated\r\n * @fires Events#rainbow_onfavoritedeleted\r\n*/\r\nclass Events {\r\n    constructor(_logger, _filterCallback) {\r\n        let that = this;\r\n        this._logger = _logger;\r\n        this._filterCallback = _filterCallback;\r\n        this._evReceiver = new Emitter(this._logger);\r\n        this._evPublisher = new events_1.EventEmitter();\r\n        /*\r\n        this._evReceiver.on('evt_internal_on*', function(...args: any[]) {\r\n            let event;\r\n            let params;\r\n            let that = this;\r\n            [event, ...params] = args;\r\n\r\n            let eventName = this.event;\r\n\r\n            that._logger.log(\"internal\", LOG_ID + \"(evt_internal_on*) receive event \" + that._logger.colors.events(eventName.toString()));\r\n            //console.log(this.event, value1, value2);\r\n        });\r\n         */\r\n        this._evReceiver.on(\"evt_internal_onreceipt\", function (receipt) {\r\n            if (_filterCallback && _filterCallback(receipt.fromJid)) {\r\n                that._logger.log(\"warn\", `${LOG_ID} filtering event evt_internal_onreceipt for jid: ${receipt.fromJid}`);\r\n                return;\r\n            }\r\n            if (receipt.entity === \"server\") {\r\n                /**\r\n                 * @public\r\n                 * @event Events#rainbow_onmessageserverreceiptreceived\r\n                 * @param {Object} receipt The receipt received by the server\r\n                 * @param {string} receipt.event The type of receipt. Can be `read` or `received`. Should be `received` in that case\r\n                 * @param {string} receipt.entity The entity who sent the receipt. Can be `server` or `client`. Should be `server` in that case\r\n                 * @param {string} receipt.type The type of the message. Can be `chat` or `groupchat`.\r\n                 * @param {string} receipt.id The id of the message sent (linked to that receipt)\r\n                 * @memberof Events\r\n                 * @description\r\n                 *      Fired when the message has been received by the server\r\n                 */\r\n                that.publishEvent(\"messageserverreceiptreceived\", receipt);\r\n            }\r\n            else {\r\n                if (receipt.event === \"received\") {\r\n                    /**\r\n                     * @public\r\n                     * @event Events#rainbow_onmessagereceiptreceived\r\n                     * @param {Object} receipt The receipt received by the server\r\n                     * @param {string} receipt.event The type of receipt. Can be `read` or `received`. Should be `received` in that case\r\n                     * @param {string} receipt.entity The entity who sent the receipt. Can be `server` or `client`. Should be `client` in that case\r\n                     * @param {string} receipt.type The type of the message. Can be `chat` or `groupchat`\r\n                     * @param {string} receipt.id The id of the message sent (linked to that receipt)\r\n                     * @param {string} receipt.fromJid The Bare JID of the recipient who sent this receipt,\r\n                     * @param {string} receipt.resource The resource JID of the recipient who sent this receipt\r\n                     * @description\r\n                     *      Fired when the message has been received by the recipient\r\n                     */\r\n                    that.publishEvent(\"messagereceiptreceived\", receipt);\r\n                }\r\n                else {\r\n                    /**\r\n                     * @public\r\n                     * @event Events#rainbow_onmessagereceiptreadreceived\r\n                     * @param {Object} receipt The receipt received by the server\r\n                     * @param {string} receipt.event The type of receipt. Can be `read` or `received`. Should be `read` in that case\r\n                     * @param {string} receipt.entity The entity who sent the receipt. Can be `server` or `client`. Should be `client` in that case\r\n                     * @param {string} receipt.type The type of the message. Can be `chat` or `groupchat`\r\n                     * @param {string} receipt.id The id of the message sent (linked to that receipt)\r\n                     * @param {string} receipt.fromJid The Bare JID of the recipient who sent this receipt,\r\n                     * @param {string} receipt.resource The resource JID of the recipient who sent this receipt\r\n                     * @description\r\n                     *      Fired when the message has been read by the recipient\r\n                     */\r\n                    that.publishEvent(\"messagereceiptreadreceived\", receipt);\r\n                }\r\n            }\r\n        });\r\n        this._evReceiver.on(\"evt_internal_onmessagereceived\", function (message) {\r\n            if (_filterCallback && _filterCallback(message.fromJid)) {\r\n                that._logger.log(\"warn\", `${LOG_ID} filtering event rainbow_onmessagereceived for jid: ${message.fromJid}`);\r\n                return;\r\n            }\r\n            /**\r\n             * @event Events#rainbow_onmessagereceived\r\n             * @public\r\n             * @param {Message} message The message received\r\n             * @description\r\n             *      Fired when a chat message is received (in a one-to-one conversation or in a Bubble conversation)\r\n             */\r\n            that.publishEvent(\"messagereceived\", message);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_onsendmessagefailed\", function (message) {\r\n            /**\r\n             * @event Events#rainbow_onsendmessagefailed\r\n             * @public\r\n             * @param { Message } message The message which failed to be sent.\r\n             * @description\r\n             *      Fired when a chat message with no-store attribut sent has failed.\r\n             */\r\n            that.publishEvent(\"sendmessagefailed\", message);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_onrainbowversionwarning\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onrainbowversionwarning\r\n             * @public\r\n             * @param { Object } data The warning object about the curent SDK version which is not the latest one provided on npmjs.com.\r\n             * @param { string } data.label The label warning.\r\n             * @param { string } data.currentPackage The curent SDK version used.\r\n             * @param { string } data.latestPublishedPackage The latest one provided on npmjs.com.\r\n             * @description\r\n             *      Fired when a chat message with no-store attribut sent has failed.\r\n             */\r\n            that.publishEvent(\"rainbowversionwarning\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_onrosterpresencechanged\", function (contact) {\r\n            /**\r\n             * @event Events#rainbow_oncontactpresencechanged\r\n             * @public\r\n             * @param { Contact } contact The contact\r\n             * @description\r\n             *      Fired when the presence of a contact changes\r\n             */\r\n            that.publishEvent(\"contactpresencechanged\", contact);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_presencechanged\", function (presence) {\r\n            /**\r\n             * @event Events#rainbow_onpresencechanged\r\n             * @public\r\n             * @param {Object} presence The presence object updated (jid, status, message, stamp)\r\n             * @description\r\n             *      This event is fired when the presence of the connected user changes <br/>\r\n             *      status may be <br/>\r\n             *          + \"unknow\",<br/>\r\n             *          + \"online\" (with message \"\" | \"mode=auto\"),<br/>\r\n             *          + \"away\" (with message \"\" ),<br/>\r\n             *          + \"xa\" (with message \"\"| \"away\"),<br/>\r\n             *          + \"dnd\" (with message \"\" | \"audio\" | \"video\" | \"sharing\" | \"presentation\")<br/>\r\n             *      This event is also a confirmation from the server that the new presence value has been set\r\n             */\r\n            that.publishEvent(\"presencechanged\", presence);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_conversationdeleted\", function (conversation) {\r\n            /**\r\n             * @public\r\n             * @event Events#rainbow_onconversationremoved\r\n             * @param { Object } conversation The conversation object\r\n             * @param { String } conversation.conversationId Conversation identifier\r\n             * @description\r\n             *      This event is fired when a conversation has been removed\r\n             */\r\n            that.publishEvent(\"conversationremoved\", conversation);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_conversationupdated\", function (conversation) {\r\n            /**\r\n             * @public\r\n             * @event Events#rainbow_onconversationchanged\r\n             * @param { Conversation } conversation The conversation\r\n             * @description\r\n             *      This event is fired when a conversation has changed\r\n             */\r\n            that.publishEvent(\"conversationchanged\", conversation);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_allmessagedremovedfromconversationreceived\", function (conversation) {\r\n            /**\r\n             * @public\r\n             * @event Events#rainbow_onallmessagedremovedfromconversationreceived\r\n             * @param { Conversation } conversation The conversation where the messages as all been removed.\r\n             * @description\r\n             *      This event is fired when a conversation has changed\r\n             */\r\n            that.publishEvent(\"allmessagedremovedfromconversationreceived\", conversation);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_chatstate\", function (chatstate) {\r\n            /**\r\n             * @public\r\n             * @event Events#rainbow_onchatstate\r\n             * @param { Object } chatstate The chatstate\r\n             * @description\r\n             *      This event is fired when a chatstate event occurs\r\n             */\r\n            that.publishEvent(\"chatstate\", chatstate);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_contactinformationchanged\", function (contact) {\r\n            /**\r\n             * @public\r\n             * @event Events#rainbow_oncontactinformationchanged\r\n             * @param { Contact } contact The contact\r\n             * @description\r\n             *      This event is fired when a conversation has been removed\r\n             */\r\n            that.publishEvent(\"contactinformationchanged\", contact);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_userinvitereceived\", function (invitation) {\r\n            /**\r\n             * @public\r\n             * @event Events#rainbow_onuserinvitereceived\r\n             * @param { Invitation } invitation The invitation received\r\n             * @description\r\n             *      Fired when an user invitation is received\r\n             */\r\n            that.publishEvent(\"userinvitereceived\", invitation);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_userinviteaccepted\", function (invitation) {\r\n            /**\r\n             * @event Events#rainbow_onuserinviteaccepted\r\n             * @public\r\n             * @param { Invitation } invitation The invitation accepted\r\n             * @description\r\n             *      Fired when an user invitation is accepted\r\n             */\r\n            that.publishEvent(\"userinviteaccepted\", invitation);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_userinvitecanceled\", function (invitation) {\r\n            /**\r\n             * @public\r\n             * @event Events#rainbow_onuserinvitecanceled\r\n             * @param { Invitation } invitation The invitation canceled\r\n             * @description\r\n             *      Fired when an user invitation is canceled\r\n             */\r\n            that.publishEvent(\"userinvitecanceled\", invitation);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_affiliationdetailschanged\", function (bubble) {\r\n            /**\r\n             * @event Events#rainbow_onbubbleaffiliationchanged\r\n             * @public\r\n             * @param { Bubble } bubble The bubble updated\r\n             * @description\r\n             *      Fired when a user changes his affiliation with a bubble\r\n             */\r\n            that.publishEvent(\"bubbleaffiliationchanged\", bubble);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_bubblepresencechanged\", function (bubble) {\r\n            /**\r\n             * @public\r\n             * @event Events#rainbow_onbubblepresencechanged\r\n             * @param { Bubble } bubble The bubble updated\r\n             * @description\r\n             *      Fired when a presence changes is a user connected bubble\r\n             */\r\n            that.publishEvent(\"bubblepresencechanged\", bubble);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_ownaffiliationdetailschanged\", function (bubble) {\r\n            /**\r\n             * @public\r\n             * @event Events#rainbow_onbubbleownaffiliationchanged\r\n             * @param { Bubble } bubble The bubble updated\r\n             * @description\r\n             *      Fired when a user changes the user connected affiliation with a bubble\r\n             */\r\n            that.publishEvent(\"bubbleownaffiliationchanged\", bubble);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_bubbledeleted\", function (bubble) {\r\n            /**\r\n             * @public\r\n             * @event Events#rainbow_onbubbledeleted\r\n             * @param { Bubble } bubble The bubble deleted\r\n             * @description\r\n             *      Fired when a user deletes a bubble the user is affiliated to\r\n             */\r\n            that.publishEvent(\"bubbledeleted\", bubble);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_invitationdetailsreceived\", function (bubble) {\r\n            try {\r\n                if (bubble && bubble.users) {\r\n                    bubble.users.forEach((user) => {\r\n                        if (user && user.jid_im === that._core._rest.loggedInUser.jid_im && user.status === \"accepted\") {\r\n                            // this._core._xmpp.sendInitialBubblePresence(bubble.jid);\r\n                            //that._core.bubbles._sendInitialBubblePresence(bubble);\r\n                            that._core._presence.sendInitialBubblePresence(bubble);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(publishEvent) CATCH Error when evt_internal_invitationdetailsreceived received : \", err);\r\n            }\r\n            /**\r\n             * @event Events#rainbow_onbubbleinvitationreceived\r\n             * @public\r\n             * @param { Bubble } bubble The invitation bubble\r\n             * @description\r\n             *      Fired when an invitation to join a bubble is received\r\n             */\r\n            that.publishEvent(\"bubbleinvitationreceived\", bubble);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_bubblecustomDatachanged\", function (bubble) {\r\n            /**\r\n             * @event Events#rainbow_onbubblecustomdatachanged\r\n             * @public\r\n             * @param { Bubble } bubble The bubble updated with the new custom data set\r\n             * @description\r\n             *      Fired when the custom data of a bubble has changed\r\n             */\r\n            that.publishEvent(\"bubblecustomdatachanged\", bubble);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_bubbletopicchanged\", function (bubble) {\r\n            /**\r\n             * @event Events#rainbow_onbubbletopicchanged\r\n             * @public\r\n             * @param { Bubble } bubble The bubble updated with the new topic set\r\n             * @description\r\n             *      Fired when the topic of a bubble has changed\r\n             */\r\n            that.publishEvent(\"bubbletopicchanged\", bubble);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_bubbleprivilegechanged\", function (bubble) {\r\n            /**\r\n             * @event Events#rainbow_onbubbleprivilegechanged\r\n             * @public\r\n             * @param { {Bubble, String} } bubble The bubble updated with the new privilege set\r\n             *          privilege The privilege updated (Can be moderator, user, owner)\r\n             * @description\r\n             *      Fired when the privilage of a bubble has changed\r\n             */\r\n            that.publishEvent(\"bubbleprivilegechanged\", bubble);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_bubbleavatarchanged\", function (bubble) {\r\n            /**\r\n             * @event Events#rainbow_onbubbleavatarchanged\r\n             * @public\r\n             * @param { Bubble } bubble The bubble updated with a new avatar\r\n             * @description\r\n             *      Fired when the avatar of a bubble has changed\r\n             */\r\n            that.publishEvent(\"bubbleavatarchanged\", bubble);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_bubblenamechanged\", function (bubble) {\r\n            /**\r\n             * @event Events#rainbow_onbubblenamechanged\r\n             * @public\r\n             * @param { Bubble } bubble The bubble updated with the new name set\r\n             * @description\r\n             *      Fired when the name of a bubble has changed\r\n             */\r\n            that.publishEvent(\"bubblenamechanged\", bubble);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_groupcreated\", function (group) {\r\n            /**\r\n             * @event Events#rainbow_ongroupcreated\r\n             * @public\r\n             * @param { Group } group The created group\r\n             * @description\r\n             *      Fired when a group is created\r\n             */\r\n            that.publishEvent(\"groupcreated\", group);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_groupdeleted\", function (group) {\r\n            /**\r\n             * @event Events#rainbow_ongroupdeleted\r\n             * @public\r\n             * @param { Group } group The deleted group\r\n             * @description\r\n             *      Fired when a group is deleted\r\n             */\r\n            that.publishEvent(\"groupdeleted\", group);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_groupupdated\", function (group) {\r\n            /**\r\n             * @event Events#rainbow_ongroupupdated\r\n             * @public\r\n             * @param { Group } group The updated group\r\n             * @description\r\n             *      Fired when a group is updated\r\n             */\r\n            that.publishEvent(\"groupupdated\", group);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_useraddedingroup\", function (group, contact) {\r\n            /**\r\n             * @event Events#rainbow_onuseraddedingroup\r\n             * @public\r\n             * @param { Group } group The group where the user is added\r\n             * @param { Contact} contact The user added\r\n             * @description\r\n             *      Fired when a user is added in a group\r\n             */\r\n            that.publishEvent(\"useraddedingroup\", group, contact);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_userremovedfromgroup\", function (group, contact) {\r\n            /**\r\n             * @event Events#rainbow_onuserremovedfromgroup\r\n             * @public\r\n             * @param { Group } group The group where the user is removed\r\n             * @param { Contact} contact The user removed\r\n             * @description\r\n             *      Fired when a user is removed from a group\r\n             */\r\n            that.publishEvent(\"userremovedfromgroup\", group, contact);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_channelmessagereceived\", function (message) {\r\n            /**\r\n             * @event Events#rainbow_onchannelmessagereceived\r\n             * @public\r\n             * @param { ChannelMessage } message The message received\r\n             * @description\r\n             *      Fired when a message is received from a channel\r\n             */\r\n            that.publishEvent(\"channelmessagereceived\", message);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_channelmessagedeletedreceived\", function (message) {\r\n            /**\r\n             * @event Events#rainbow_onchannelmessagedeletedreceived\r\n             * @public\r\n             * @param { messageId } message The id of the deleted message received\r\n             * @description\r\n             *      Fired when a message is received from a channel\r\n             */\r\n            that.publishEvent(\"channelmessagedeletedreceived\", message);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_profilefeatureupdated\", function () {\r\n            /**\r\n             * @event Events#rainbow_onprofilefeatureupdated\r\n             * @public\r\n             * @param\r\n             * @description\r\n             *      Fired when a profile feature updated event is received\r\n             */\r\n            that.publishEvent(\"profilefeatureupdated\");\r\n        });\r\n        this._evReceiver.on(\"evt_internal_callupdated\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_oncallupdated\r\n             * @public\r\n             * @param { data }\r\n             * @description\r\n             *      Fired when a call event is received\r\n             */\r\n            if (data && data.status) {\r\n                //that.publishEvent(\"callupdated_\" + data.status.value, data);\r\n                let eventName = \"evt_internal_callupdated_\" + data.status.value;\r\n                that._logger.log(\"internal\", LOG_ID + \"(publishEvent) FOR AFTERBUILD TESTS : INTERNAL event \", that._logger.colors.events(eventName), \" data : \", that._logger.colors.data(data));\r\n                that._evPublisher.emit(eventName, data);\r\n            }\r\n            that.publishEvent(\"callupdated\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_conferenced\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onconferenced\r\n             * @public\r\n             * @param { data }\r\n             * @description\r\n             *      Fired when a conference event is received\r\n             */\r\n            that.publishEvent(\"conferenced\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_telephonystatuschanged\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_ontelephonystatuschanged\r\n             * @public\r\n             * @param { data }\r\n             * @description\r\n             *      Fired when status of the telephony service event is received\r\n             */\r\n            that.publishEvent(\"telephonystatuschanged\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_nomadicstatusevent\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onnomadicstatusevent\r\n             * @public\r\n             * @param { data }\r\n             * @description\r\n             *      Fired for nomadic of the telephony event\r\n             */\r\n            that.publishEvent(\"nomadicstatusevent\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_voicemessageupdated\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onvoicemessageupdated\r\n             * @public\r\n             * @param { data }\r\n             * @description\r\n             *      Fired when a voice message updated event is received\r\n             */\r\n            that.publishEvent(\"voicemessageupdated\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_callforwarded\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_oncallforwarded\r\n             * @public\r\n             * @param { data }\r\n             * @description\r\n             *      Fired when a call forwarded event is received\r\n             */\r\n            that.publishEvent(\"callforwarded\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_filecreated\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onfilecreated\r\n             * @public\r\n             * @param { data }\r\n             * @description\r\n             *      Fired when a file created event is received\r\n             */\r\n            that.publishEvent(\"filecreated\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_fileupdated\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onfileupdated\r\n             * @public\r\n             * @param { data }\r\n             * @description\r\n             *      Fired when a file updated event is received\r\n             */\r\n            that.publishEvent(\"fileupdated\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_filedeleted\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onfiledeleted\r\n             * @public\r\n             * @param { data }\r\n             * @description\r\n             *      Fired when a file deleted event is received\r\n             */\r\n            that.publishEvent(\"filedeleted\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_thumbnailcreated\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onthumbnailcreated\r\n             * @public\r\n             * @param { data }\r\n             * @description\r\n             *      Fired when a thumbnail created event is received\r\n             */\r\n            that.publishEvent(\"thumbnailcreated\", data);\r\n        });\r\n        /************************* Channels **********************/\r\n        this._evReceiver.on(\"evt_internal_channelupdated\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onchannelupdated\r\n             * @public\r\n             * @param { String } id The id of the channel\r\n             * @param { Number } kind The kind of change (ADD: 0, UPDATE: 1, REMOVE: 2, SUBSCRIBE: 4, UNSUBSCRIBE: 5)\r\n             * @description\r\n             *      Fired when a channel update event is received\r\n             */\r\n            that.publishEvent(\"channelupdated\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_channelusersubscription\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onchannelusersubscription\r\n             * @public\r\n             * @param { String } id The id of the channel\r\n             * @param { String } userId The id of the user\r\n             * @param { Number } kind The kind of change (SUBSCRIBE: 4, UNSUBSCRIBE: 5)\r\n             * @description\r\n             *      Fired when a user channel subscription event is received\r\n             */\r\n            that.publishEvent(\"channelusersubscription\", data);\r\n        });\r\n        // ****************** CALLLOGS *********************\r\n        this._evReceiver.on(\"evt_internal_propose\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onmediapropose\r\n             * @public\r\n             * @param { Object } infos about the proposed for media :\r\n             *  { Contact } infos about the contact who proposed for media\r\n             *  { media } infos about media for the proposed event.\r\n             * @description\r\n             *      Fired when received an event of propose for media.\r\n             */\r\n            that.publishEvent(\"mediapropose\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_calllogupdated\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_oncalllogupdated\r\n             * @public\r\n             * @param { Object } calllogs The callogs of the user\r\n             * @description\r\n             *      Fired when the calllog is updated\r\n             */\r\n            that.publishEvent(\"calllogupdated\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_calllogackupdated\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_oncalllogackupdated\r\n             * @public\r\n             * @param { Object } id The calllog of the user\r\n             * @description\r\n             *      Fired when the number of ack of calllog changes\r\n             */\r\n            that.publishEvent(\"calllogackupdated\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_favoritecreated\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onfavoritecreated\r\n             * @public\r\n             * @param { Favorite } favorite The favorite created\r\n             * @description\r\n             *      Fired when a favorite is added to the loggued in user.\r\n             */\r\n            that.publishEvent(\"favoritecreated\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_favoritedeleted\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onfavoritedeleted\r\n             * @public\r\n             * @param { Favorite } favorite The favorite deleted\r\n             * @description\r\n             *      Fired when a favorite is suppressed to the loggued in user.\r\n             */\r\n            that.publishEvent(\"favoritedeleted\", data);\r\n        });\r\n        this._evReceiver.on(\"evt_internal_xmpperror\", function (data) {\r\n            /**\r\n             * @event Events#rainbow_onxmpperror\r\n             * @public\r\n             * @param { Object } error xmpp received.\r\n             * @description\r\n             *      Fired when an XMPP Error events happens.\r\n             */\r\n            that.publishEvent(\"xmpperror\", data);\r\n        });\r\n    }\r\n    get iee() {\r\n        return this._evReceiver;\r\n    }\r\n    get eee() {\r\n        return this._evPublisher;\r\n    }\r\n    /**\r\n     * @method on\r\n     * @public\r\n     * @memberof Events\r\n     * @instance\r\n     * @param {string} event The event name to subscribe\r\n     * @param {function} callback The function called when the even is fired\r\n     * @return {Object} The events instance to be able to chain subscriptions\r\n     * @description\r\n     *      Subscribe to an event\r\n     */\r\n    on(event, callback) {\r\n        return this._evPublisher.on(event, callback);\r\n    }\r\n    /**\r\n     * @method once\r\n     * @public\r\n     * @memberof Events\r\n     * @instance\r\n     * @param {string} event The event name to subscribe\r\n     * @param {function} callback The function called when the even is fired\r\n     * @return {Object} The events instance to be able to chain subscriptions\r\n     * @description\r\n     *      Subscribe to an event only one time (fired only the first time)\r\n     */\r\n    once(event, callback) {\r\n        return this._evPublisher.once(event, callback);\r\n    }\r\n    publish(event, data) {\r\n        let info = data || ErrorManager_1.ErrorManager.getErrorManager().OK;\r\n        /**\r\n         * @event Events#rainbow_onstarted\r\n         * @public\r\n         * @param { Object } status The event status\r\n         * @description\r\n         *      Fired when the SDK has successfully started (not yet signed in)\r\n         */\r\n        /**\r\n         * @event Events#rainbow_onstopped\r\n         * @public\r\n         * @param { Object } status The event status\r\n         * @description\r\n         *      Fired when the SDK has been successfully stopped (all services have been stopped)\r\n         */\r\n        /**\r\n         * @event Events#rainbow_onconnected\r\n         * @public\r\n         * @param { Object } status The event status\r\n         * @description\r\n         *      Fired when the connection is successfull with Rainbow (signin complete)\r\n         */\r\n        /**\r\n         * @event Events#rainbow_onconnectionerror\r\n         * @public\r\n         * @param { Object } status The event status\r\n         * @description\r\n         *      Fired when the connection can't be done with Rainbow (ie. issue on sign-in)\r\n         */\r\n        /**\r\n         * @event Events#rainbow_ondisconnected\r\n         * @public\r\n         * @param { Object } status The event status\r\n         * @description\r\n         *      Fired when the SDK lost the connection with Rainbow\r\n         */\r\n        /**\r\n         * @event Events#rainbow_onreconnecting\r\n         * @public\r\n         * @param { Object } status The event status\r\n         * @description\r\n         *      Fired when the SDK tries to reconnect\r\n         */\r\n        /**\r\n         * @event Events#rainbow_onfailed\r\n         * @public\r\n         * @param { Object } status The event status\r\n         * @description\r\n         *      Fired when the SDK didn't succeed to reconnect and stop trying\r\n         */\r\n        /**\r\n         * @event Events#rainbow_onready\r\n         * @public\r\n         * @param { Object } status The event status\r\n         * @description\r\n         *      Fired when the SDK is connected to Rainbow and ready to be used\r\n         */\r\n        /**\r\n         * @event Events#rainbow_onerror\r\n         * @public\r\n         * @param {Object} error The error received\r\n         * @description\r\n         *      Fired when something goes wrong (ie: bad 'configurations' parameter...). Used by application to stop, start the sdk again.\r\n         */\r\n        //this._logger.log(\"info\", LOG_ID + \"(publish) event \" + this._logger.colors.events(\"rainbow_on\" + event) + \" : \", info);\r\n        //this._evPublisher.emit(\"rainbow_on\" + event, info);\r\n        this.publishEvent(event, info);\r\n    }\r\n    /**\r\n     * @method publishEvent\r\n     * @private\r\n     * @memberof Events\r\n     * @instance\r\n     * @param {...*} args all arguments for the event\r\n     * @return nothing\r\n     * @description\r\n     *      Add \"rainbow_on\" prefix to event name, print it human readable, and raises it.\r\n     */\r\n    publishEvent(...args) {\r\n        let event;\r\n        let params;\r\n        let that = this;\r\n        [event, ...params] = args;\r\n        let eventName = \"rainbow_on\" + event;\r\n        that._logger.log(\"info\", LOG_ID + \"(publishEvent) event \" + that._logger.colors.events(eventName));\r\n        let iter = 0;\r\n        params.forEach((dataIter) => {\r\n            //console.log(\"EVENT dataIter : \", dataIter);\r\n            //that._logger.log(\"internal\", LOG_ID + \"(publishEvent) param \", iter++, \" for event \", that._logger.colors.events(eventName), \" data : \", dataIter);\r\n            let data = that._logger.argumentsToString([\"\", dataIter]);\r\n            //console.log(\"EVENT data : \", data);\r\n            that._logger.log(\"internal\", LOG_ID + \"(publishEvent) param \", iter++, \" for event \", that._logger.colors.events(eventName), \" data : \", that._logger.colors.data(data));\r\n        });\r\n        this._evPublisher.emit(eventName, ...params);\r\n    }\r\n    setCore(_core) {\r\n        this._core = _core;\r\n    }\r\n}\r\nexports.Events = Events;\r\nmodule.exports.Events = Events;\r\n//# sourceMappingURL=Events.js.map"]},"metadata":{},"sourceType":"script"}