{"ast":null,"code":"'use strict';\n\nconst Connection = require('@xmpp/connection');\n\nclass Client extends Connection {\n  constructor(options) {\n    super(options);\n    this.transports = [];\n  }\n\n  send(element, ...args) {\n    return this.Transport.prototype.send.call(this, element, ...args);\n  }\n\n  _findTransport(service) {\n    return this.transports.find(Transport => {\n      try {\n        return Transport.prototype.socketParameters(service) !== undefined; // eslint-disable-next-line no-unused-vars\n      } catch (err) {\n        return false;\n      }\n    });\n  }\n\n  connect(service) {\n    const Transport = this._findTransport(service);\n\n    if (!Transport) {\n      throw new Error('No compatible connection method found.');\n    }\n\n    this.Transport = Transport;\n    this.Socket = Transport.prototype.Socket;\n    this.Parser = Transport.prototype.Parser;\n    return super.connect(service);\n  }\n\n  socketParameters(...args) {\n    return this.Transport.prototype.socketParameters(...args);\n  }\n\n  header(...args) {\n    return this.Transport.prototype.header(...args);\n  }\n\n  headerElement(...args) {\n    return this.Transport.prototype.headerElement(...args);\n  }\n\n  footer(...args) {\n    return this.Transport.prototype.footer(...args);\n  }\n\n  footerElement(...args) {\n    return this.Transport.prototype.footerElement(...args);\n  }\n\n}\n\nClient.prototype.NS = 'jabber:client';\nmodule.exports = Client;","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/@xmpp/client-core/lib/Client.js"],"names":["Connection","require","Client","constructor","options","transports","send","element","args","Transport","prototype","call","_findTransport","service","find","socketParameters","undefined","err","connect","Error","Socket","Parser","header","headerElement","footer","footerElement","NS","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,kBAAD,CAA1B;;AAEA,MAAMC,MAAN,SAAqBF,UAArB,CAAgC;AAC9BG,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACD;;AAEDC,EAAAA,IAAI,CAACC,OAAD,EAAU,GAAGC,IAAb,EAAmB;AACrB,WAAO,KAAKC,SAAL,CAAeC,SAAf,CAAyBJ,IAAzB,CAA8BK,IAA9B,CAAmC,IAAnC,EAAyCJ,OAAzC,EAAkD,GAAGC,IAArD,CAAP;AACD;;AAEDI,EAAAA,cAAc,CAACC,OAAD,EAAU;AACtB,WAAO,KAAKR,UAAL,CAAgBS,IAAhB,CAAqBL,SAAS,IAAI;AACvC,UAAI;AACF,eAAOA,SAAS,CAACC,SAAV,CAAoBK,gBAApB,CAAqCF,OAArC,MAAkDG,SAAzD,CADE,CAEF;AACD,OAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,eAAO,KAAP;AACD;AACF,KAPM,CAAP;AAQD;;AAEDC,EAAAA,OAAO,CAACL,OAAD,EAAU;AACf,UAAMJ,SAAS,GAAG,KAAKG,cAAL,CAAoBC,OAApB,CAAlB;;AAEA,QAAI,CAACJ,SAAL,EAAgB;AACd,YAAM,IAAIU,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,SAAKV,SAAL,GAAiBA,SAAjB;AACA,SAAKW,MAAL,GAAcX,SAAS,CAACC,SAAV,CAAoBU,MAAlC;AACA,SAAKC,MAAL,GAAcZ,SAAS,CAACC,SAAV,CAAoBW,MAAlC;AAEA,WAAO,MAAMH,OAAN,CAAcL,OAAd,CAAP;AACD;;AAEDE,EAAAA,gBAAgB,CAAC,GAAGP,IAAJ,EAAU;AACxB,WAAO,KAAKC,SAAL,CAAeC,SAAf,CAAyBK,gBAAzB,CAA0C,GAAGP,IAA7C,CAAP;AACD;;AAEDc,EAAAA,MAAM,CAAC,GAAGd,IAAJ,EAAU;AACd,WAAO,KAAKC,SAAL,CAAeC,SAAf,CAAyBY,MAAzB,CAAgC,GAAGd,IAAnC,CAAP;AACD;;AAEDe,EAAAA,aAAa,CAAC,GAAGf,IAAJ,EAAU;AACrB,WAAO,KAAKC,SAAL,CAAeC,SAAf,CAAyBa,aAAzB,CAAuC,GAAGf,IAA1C,CAAP;AACD;;AAEDgB,EAAAA,MAAM,CAAC,GAAGhB,IAAJ,EAAU;AACd,WAAO,KAAKC,SAAL,CAAeC,SAAf,CAAyBc,MAAzB,CAAgC,GAAGhB,IAAnC,CAAP;AACD;;AAEDiB,EAAAA,aAAa,CAAC,GAAGjB,IAAJ,EAAU;AACrB,WAAO,KAAKC,SAAL,CAAeC,SAAf,CAAyBe,aAAzB,CAAuC,GAAGjB,IAA1C,CAAP;AACD;;AArD6B;;AAwDhCN,MAAM,CAACQ,SAAP,CAAiBgB,EAAjB,GAAsB,eAAtB;AAEAC,MAAM,CAACC,OAAP,GAAiB1B,MAAjB","sourcesContent":["'use strict'\r\n\r\nconst Connection = require('@xmpp/connection')\r\n\r\nclass Client extends Connection {\r\n  constructor(options) {\r\n    super(options)\r\n    this.transports = []\r\n  }\r\n\r\n  send(element, ...args) {\r\n    return this.Transport.prototype.send.call(this, element, ...args)\r\n  }\r\n\r\n  _findTransport(service) {\r\n    return this.transports.find(Transport => {\r\n      try {\r\n        return Transport.prototype.socketParameters(service) !== undefined\r\n        // eslint-disable-next-line no-unused-vars\r\n      } catch (err) {\r\n        return false\r\n      }\r\n    })\r\n  }\r\n\r\n  connect(service) {\r\n    const Transport = this._findTransport(service)\r\n\r\n    if (!Transport) {\r\n      throw new Error('No compatible connection method found.')\r\n    }\r\n\r\n    this.Transport = Transport\r\n    this.Socket = Transport.prototype.Socket\r\n    this.Parser = Transport.prototype.Parser\r\n\r\n    return super.connect(service)\r\n  }\r\n\r\n  socketParameters(...args) {\r\n    return this.Transport.prototype.socketParameters(...args)\r\n  }\r\n\r\n  header(...args) {\r\n    return this.Transport.prototype.header(...args)\r\n  }\r\n\r\n  headerElement(...args) {\r\n    return this.Transport.prototype.headerElement(...args)\r\n  }\r\n\r\n  footer(...args) {\r\n    return this.Transport.prototype.footer(...args)\r\n  }\r\n\r\n  footerElement(...args) {\r\n    return this.Transport.prototype.footerElement(...args)\r\n  }\r\n}\r\n\r\nClient.prototype.NS = 'jabber:client'\r\n\r\nmodule.exports = Client\r\n"]},"metadata":{},"sourceType":"script"}