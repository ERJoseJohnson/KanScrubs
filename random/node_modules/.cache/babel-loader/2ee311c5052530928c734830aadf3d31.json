{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Utils_1 = require(\"../common/Utils\");\n\nconst LOG_ID = \"SETT/SVCE - \";\nlet Settings =\n/**\n * @module\n * @private\n * @name Settings\n * @version 1.67.1 \n * @description\n *      This module manages the settings of the connected user.\n *      <br><br>\n *      The main methods proposed in that module allow to: <br>\n *      - Get user settings\n *      - Update user settings\n */\nclass Settings {\n  constructor(_eventEmitter, _logger, _startConfig) {\n    this.ready = false;\n    this._startConfig = _startConfig;\n    this._xmpp = null;\n    this._rest = null;\n    this._s2s = null;\n    this._options = {};\n    this._useXMPP = false;\n    this._useS2S = false;\n    this._eventEmitter = _eventEmitter;\n    this._logger = _logger; // this.RAINBOW_PRESENCE_ONLINE = \"online\";\n    // this.RAINBOW_PRESENCE_DONOTDISTURB = \"dnd\";\n    // this.RAINBOW_PRESENCE_AWAY = \"away\";\n    // this.RAINBOW_PRESENCE_INVISIBLE = \"invisible\";\n\n    this.ready = false;\n  }\n\n  get startConfig() {\n    return this._startConfig;\n  }\n\n  start(_options, _core) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._xmpp = _core._xmpp;\n        that._rest = _core._rest;\n        that._options = _options;\n        that._s2s = _core._s2s;\n        that._useXMPP = that._options.useXMPP;\n        that._useS2S = that._options.useS2S;\n        that.ready = true;\n        resolve();\n      } catch (err) {\n        return reject();\n      }\n    });\n  }\n\n  stop() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._xmpp = null;\n        that._rest = null;\n        that.ready = false;\n        resolve();\n      } catch (err) {\n        return reject();\n      }\n    });\n  }\n  /**\n   * @private\n   * @method getUserSettings\n   * @instance\n   * @description\n   *  Get current User Settings\n   * @return {Promise<UserSettings>} A promise containing the result\n   */\n\n\n  getUserSettings() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that._rest.getUserSettings().then(settings => {\n        that._logger.log(\"info\", LOG_ID + \"(getUserSettings) get successfully\");\n\n        resolve(settings);\n      }).catch(function (err) {\n        that._logger.log(\"error\", LOG_ID + \"(getUserSettings) error.\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(getUserSettings) error : \", err);\n\n        return reject(err);\n      });\n    });\n  }\n  /**\n   * @private\n   * @method updateUserSettings\n   * @instance\n   * @description\n   *  Update current User Settings\n   * @return {Promise<Settings, ErrorManager>} A promise containing the result\n   */\n\n\n  updateUserSettings(settings) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      // Check validity\n      that._rest.updateUserSettings(settings).then(newSettings => {\n        that._logger.log(\"info\", LOG_ID + \"(updateUserSettings) get successfully\");\n\n        resolve(newSettings);\n      }).catch(err => {\n        that._logger.log(\"error\", LOG_ID + \"(updateUserSettings) error.\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(updateUserSettings) error : \", err);\n\n        return reject(err);\n      });\n    });\n  }\n\n};\nSettings = __decorate([Utils_1.logEntryExit(LOG_ID), Utils_1.isStarted([])\n/**\n * @module\n * @private\n * @name Settings\n * @version 1.67.1 \n * @description\n *      This module manages the settings of the connected user.\n *      <br><br>\n *      The main methods proposed in that module allow to: <br>\n *      - Get user settings\n *      - Update user settings\n */\n], Settings);\nexports.SettingsService = Settings;\nmodule.exports.SettingsService = Settings;","map":{"version":3,"sources":["../../src/lib/services/SettingsService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils_1 = require(\"../common/Utils\");\nconst LOG_ID = \"SETT/SVCE - \";\nlet Settings = \n/**\n * @module\n * @private\n * @name Settings\n * @version 1.67.1 \n * @description\n *      This module manages the settings of the connected user.\n *      <br><br>\n *      The main methods proposed in that module allow to: <br>\n *      - Get user settings\n *      - Update user settings\n */\nclass Settings {\n    constructor(_eventEmitter, _logger, _startConfig) {\n        this.ready = false;\n        this._startConfig = _startConfig;\n        this._xmpp = null;\n        this._rest = null;\n        this._s2s = null;\n        this._options = {};\n        this._useXMPP = false;\n        this._useS2S = false;\n        this._eventEmitter = _eventEmitter;\n        this._logger = _logger;\n        // this.RAINBOW_PRESENCE_ONLINE = \"online\";\n        // this.RAINBOW_PRESENCE_DONOTDISTURB = \"dnd\";\n        // this.RAINBOW_PRESENCE_AWAY = \"away\";\n        // this.RAINBOW_PRESENCE_INVISIBLE = \"invisible\";\n        this.ready = false;\n    }\n    get startConfig() {\n        return this._startConfig;\n    }\n    start(_options, _core) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                that._xmpp = _core._xmpp;\n                that._rest = _core._rest;\n                that._options = _options;\n                that._s2s = _core._s2s;\n                that._useXMPP = that._options.useXMPP;\n                that._useS2S = that._options.useS2S;\n                that.ready = true;\n                resolve();\n            }\n            catch (err) {\n                return reject();\n            }\n        });\n    }\n    stop() {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                that._xmpp = null;\n                that._rest = null;\n                that.ready = false;\n                resolve();\n            }\n            catch (err) {\n                return reject();\n            }\n        });\n    }\n    /**\n     * @private\n     * @method getUserSettings\n     * @instance\n     * @description\n     *  Get current User Settings\n     * @return {Promise<UserSettings>} A promise containing the result\n     */\n    getUserSettings() {\n        let that = this;\n        return new Promise((resolve, reject) => {\n            that._rest.getUserSettings().then((settings) => {\n                that._logger.log(\"info\", LOG_ID + \"(getUserSettings) get successfully\");\n                resolve(settings);\n            }).catch(function (err) {\n                that._logger.log(\"error\", LOG_ID + \"(getUserSettings) error.\");\n                that._logger.log(\"internalerror\", LOG_ID + \"(getUserSettings) error : \", err);\n                return reject(err);\n            });\n        });\n    }\n    /**\n     * @private\n     * @method updateUserSettings\n     * @instance\n     * @description\n     *  Update current User Settings\n     * @return {Promise<Settings, ErrorManager>} A promise containing the result\n     */\n    updateUserSettings(settings) {\n        let that = this;\n        return new Promise((resolve, reject) => {\n            // Check validity\n            that._rest.updateUserSettings(settings).then((newSettings) => {\n                that._logger.log(\"info\", LOG_ID + \"(updateUserSettings) get successfully\");\n                resolve(newSettings);\n            })\n                .catch((err) => {\n                that._logger.log(\"error\", LOG_ID + \"(updateUserSettings) error.\");\n                that._logger.log(\"internalerror\", LOG_ID + \"(updateUserSettings) error : \", err);\n                return reject(err);\n            });\n        });\n    }\n};\nSettings = __decorate([\n    Utils_1.logEntryExit(LOG_ID),\n    Utils_1.isStarted([])\n    /**\n     * @module\n     * @private\n     * @name Settings\n     * @version 1.67.1 \n     * @description\n     *      This module manages the settings of the connected user.\n     *      <br><br>\n     *      The main methods proposed in that module allow to: <br>\n     *      - Get user settings\n     *      - Update user settings\n     */\n], Settings);\nexports.SettingsService = Settings;\nmodule.exports.SettingsService = Settings;\n//# sourceMappingURL=SettingsService.js.map"]},"metadata":{},"sourceType":"script"}