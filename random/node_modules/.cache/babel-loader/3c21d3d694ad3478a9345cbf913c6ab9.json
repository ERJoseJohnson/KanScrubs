{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @class\r\n * @public\r\n * @name Channel\r\n * @description\r\n * This class is used to represent a channel\r\n */\n\nclass Channel {\n  /**\r\n   * @this Channel\r\n   */\n  constructor(_name, _id, _visibility, _topic, _creatorId, _companyId, _creationDate, _users_count, _lastAvatarUpdateDate, _subscribed, _type, _invited, _category, _mode, _subscribers_count, _serverURL, _max_items = 0, _max_payload_size = 0, _pageIndex = 0, _isLoading = false, _complete = false, _users = [], _publishersRetreived = false, _loaded = false, _avatar, _userRole = 'none', _messageRetrieved = false, _messages = [], _deleted = false) {\n    this.subscribed = false;\n    this.type = \"SIMPLE\";\n    this.invited = false;\n    this.serverURL = \"\";\n    this.pageIndex = 0;\n    this.isLoading = false;\n    this.complete = false;\n    this.users = [];\n    this.publishersRetreived = false;\n    this.loaded = false;\n    this.userRole = 'none';\n    this.messageRetrieved = false;\n    this.messages = [];\n    this.deleted = false;\n    /**\r\n     * @public\r\n     * @property {string} name channel name\r\n     *\r\n     */\n\n    this.name = _name;\n    /**\r\n     * @public\r\n     * @property {string} id channel unique identifier\r\n     *\r\n     */\n\n    this.id = _id;\n    /**\r\n     * @public\r\n     * @property {string} visibility channel type/visibility<br/>\r\n     * \t\t\"private\" : a « Pub » channel, only the owner may publish messages.<br/>\r\n     * \t\t\t\t\tManaged by owner, the only one who can add or remove users in a private channels.<br/>\r\n     * \t\t\t\t\tCan't be found by search.<br/>\r\n     * \t\t\"company\" : « PubSub » channel (company users may join/leave)\r\n     * \t\t\t\t\tMay be found by search for users in the same company.<br/>\r\n     * \t\t\"public\"  : « PubSub » public channel.\r\n     * \t\t\t\t\tOnly allowed users may create a \"public\" channel.\r\n     * \t\t\t\t\tMay be found by search for all users.<br/>\r\n     *\r\n     */\n\n    this.visibility = _visibility;\n    /**\r\n     * @public\r\n     * @property {string} topic channel topic\r\n     *\r\n     */\n\n    this.topic = _topic;\n    /**\r\n     * @public\r\n     * @property {string} creatorId the creator rainbow user id\r\n     *\r\n     */\n\n    this.creatorId = _creatorId;\n    /**\r\n     * @public\r\n     * @property {string} companyId the channel rainbow company id\r\n     *\r\n     */\n\n    this.companyId = _companyId;\n    /**\r\n     * @public\r\n     * @property {Date} creationDate creation date of the channel (read only, set automatically during creation)\r\n     *\r\n     */\n\n    this.creationDate = _creationDate;\n    /**\r\n     * @public\r\n     * @property {string} type type of role of the user : owner / member / publisher\r\n     *\r\n     */\n\n    this.type = _type;\n    /**\r\n     * @public\r\n     * @property {number} users_count The number of users in the channel\r\n     *\r\n     */\n\n    this.users_count = _users_count;\n    /**\r\n     * @public\r\n     * @property {number} subscribers_count The number of subscribers in the channel\r\n     *\r\n     */\n\n    this.subscribers_count = _subscribers_count;\n    /**\r\n     @public\r\n     * @property {string} category the category channel\r\n     *\r\n     */\n\n    this.category = _category;\n    /**\r\n     @public\r\n     * @property {string} mode the category mode\r\n     *\r\n     */\n\n    this.mode = _mode;\n    this.max_items = _max_items;\n    this.max_payload_size = _max_payload_size;\n    this.serverURL = _serverURL;\n    this.lastAvatarUpdateDate = _lastAvatarUpdateDate;\n    let timestamp = this.lastAvatarUpdateDate ? \"&ts=\" + new Date(this.lastAvatarUpdateDate).getTime() : \"\";\n    this.avatar = this.serverURL + \"/api/channel-avatar/\" + _id + \"?size=256\" + timestamp;\n\n    if (_subscribed !== undefined) {\n      this.subscribed = _subscribed;\n    }\n\n    if (_type !== undefined) {\n      this.userRole = _type;\n    }\n\n    if (_invited !== undefined) {\n      this.invited = _invited;\n    }\n\n    if (!this.mode) {\n      switch (this.visibility) {\n        case \"company\":\n          this.mode = \"company_public\";\n          break;\n\n        case \"public\":\n          this.mode = \"all_public\";\n          break;\n\n        case \"private\":\n          this.mode = \"company_private\";\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.deleted = _deleted;\n  }\n\n  isNotMember() {\n    return this.userRole = \"none\";\n  }\n\n  isOwner() {\n    return this.userRole === \"owner\";\n  }\n\n  isPublisher() {\n    return this.subscribed && (this.userRole === \"owner\" || this.userRole === \"publisher\");\n  }\n\n  isMember() {\n    return this.userRole === \"member\";\n  }\n\n  getAvatarSrc() {\n    return this.lastAvatarUpdateDate ? this.avatar : \"/resources/skins/rainbow/images/channels/default_channel_avatar.png\";\n  }\n  /**\r\n   * @function\r\n   * @public\r\n   * @name updateChannel\r\n   * @description\r\n   * This method is used to update a channel from data object\r\n   */\n\n\n  updateChannel(data) {\n    let that = this;\n\n    if (data) {\n      let channelproperties = Object.getOwnPropertyNames(that); //console.log(\"updateChannel update Channel with : \", data[\"id\"]);\n\n      Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\n        //console.log(val + \" -> \" + data[val]);\n        if (channelproperties.find(el => {\n          return val == el;\n        })) {\n          //console.log(\"WARNING : One property of the parameter of updateChannel method is not present in the Bubble class : \", val, \" -> \", data[val]);\n          that[val] = data[val];\n        } else {\n          //console.log(\"WARNING : One property of the parameter of updateChannel method is not present in the Channel class can not update Channel with : \", val, \" -> \", data[val]);\n          console.log(\"WARNING : One property of the parameter of updateChannel method is not present in the Channel class can not update Channel with : \");\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\r\n   * @function\r\n   * @public\r\n   * @name ChannelFactory\r\n   * @description\r\n   * This method is used to create a channel from data object\r\n   */\n\n\n  static ChannelFactory() {\n    return (data, serverURL) => {\n      let channel = new Channel(data.name, data.id, data.visibility, data.topic, data.creatorId, data.companyId, data.creationDate, data.users_count, data.lastAvatarUpdateDate, data.subscribed, data.type, data.invited, data.category, data.mode, data.subscribers_count, serverURL, data.max_items, data.max_payload_size, data.pageIndex, data.isLoading, data.complete, data.users, data.publishersRetreived, data.loaded, data.avatar, data.userRole, data.messageRetrieved, data.messages, data.deleted);\n\n      if (data) {\n        let channelproperties = Object.getOwnPropertyNames(channel);\n        Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\n          //console.log(val + \" -> \" + data[val]);\n          if (!channelproperties.find(el => {\n            return val == el;\n          })) {\n            //console.log(\"WARNING : One property of the parameter of ChannelFactory method is not present in the Channel class : \", val, \" -> \", data[val]);\n            console.log(\"WARNING : One property of the parameter of ChannelFactory method is not present in the Channel class : \", val);\n          }\n        });\n      }\n\n      return channel;\n    };\n  }\n\n}\n\nexports.Channel = Channel;\nmodule.exports.Channel = Channel;","map":{"version":3,"sources":["../../../src/lib/common/models/Channel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @class\r\n * @public\r\n * @name Channel\r\n * @description\r\n * This class is used to represent a channel\r\n */\r\nclass Channel {\r\n    /**\r\n     * @this Channel\r\n     */\r\n    constructor(_name, _id, _visibility, _topic, _creatorId, _companyId, _creationDate, _users_count, _lastAvatarUpdateDate, _subscribed, _type, _invited, _category, _mode, _subscribers_count, _serverURL, _max_items = 0, _max_payload_size = 0, _pageIndex = 0, _isLoading = false, _complete = false, _users = [], _publishersRetreived = false, _loaded = false, _avatar, _userRole = 'none', _messageRetrieved = false, _messages = [], _deleted = false) {\r\n        this.subscribed = false;\r\n        this.type = \"SIMPLE\";\r\n        this.invited = false;\r\n        this.serverURL = \"\";\r\n        this.pageIndex = 0;\r\n        this.isLoading = false;\r\n        this.complete = false;\r\n        this.users = [];\r\n        this.publishersRetreived = false;\r\n        this.loaded = false;\r\n        this.userRole = 'none';\r\n        this.messageRetrieved = false;\r\n        this.messages = [];\r\n        this.deleted = false;\r\n        /**\r\n         * @public\r\n         * @property {string} name channel name\r\n         *\r\n         */\r\n        this.name = _name;\r\n        /**\r\n         * @public\r\n         * @property {string} id channel unique identifier\r\n         *\r\n         */\r\n        this.id = _id;\r\n        /**\r\n         * @public\r\n         * @property {string} visibility channel type/visibility<br/>\r\n         * \t\t\"private\" : a « Pub » channel, only the owner may publish messages.<br/>\r\n         * \t\t\t\t\tManaged by owner, the only one who can add or remove users in a private channels.<br/>\r\n         * \t\t\t\t\tCan't be found by search.<br/>\r\n         * \t\t\"company\" : « PubSub » channel (company users may join/leave)\r\n         * \t\t\t\t\tMay be found by search for users in the same company.<br/>\r\n         * \t\t\"public\"  : « PubSub » public channel.\r\n         * \t\t\t\t\tOnly allowed users may create a \"public\" channel.\r\n         * \t\t\t\t\tMay be found by search for all users.<br/>\r\n         *\r\n         */\r\n        this.visibility = _visibility;\r\n        /**\r\n         * @public\r\n         * @property {string} topic channel topic\r\n         *\r\n         */\r\n        this.topic = _topic;\r\n        /**\r\n         * @public\r\n         * @property {string} creatorId the creator rainbow user id\r\n         *\r\n         */\r\n        this.creatorId = _creatorId;\r\n        /**\r\n         * @public\r\n         * @property {string} companyId the channel rainbow company id\r\n         *\r\n         */\r\n        this.companyId = _companyId;\r\n        /**\r\n         * @public\r\n         * @property {Date} creationDate creation date of the channel (read only, set automatically during creation)\r\n         *\r\n         */\r\n        this.creationDate = _creationDate;\r\n        /**\r\n         * @public\r\n         * @property {string} type type of role of the user : owner / member / publisher\r\n         *\r\n         */\r\n        this.type = _type;\r\n        /**\r\n         * @public\r\n         * @property {number} users_count The number of users in the channel\r\n         *\r\n         */\r\n        this.users_count = _users_count;\r\n        /**\r\n         * @public\r\n         * @property {number} subscribers_count The number of subscribers in the channel\r\n         *\r\n         */\r\n        this.subscribers_count = _subscribers_count;\r\n        /**\r\n         @public\r\n         * @property {string} category the category channel\r\n         *\r\n         */\r\n        this.category = _category;\r\n        /**\r\n         @public\r\n         * @property {string} mode the category mode\r\n         *\r\n         */\r\n        this.mode = _mode;\r\n        this.max_items = _max_items;\r\n        this.max_payload_size = _max_payload_size;\r\n        this.serverURL = _serverURL;\r\n        this.lastAvatarUpdateDate = _lastAvatarUpdateDate;\r\n        let timestamp = this.lastAvatarUpdateDate ? \"&ts=\" + new Date(this.lastAvatarUpdateDate).getTime() : \"\";\r\n        this.avatar = this.serverURL + \"/api/channel-avatar/\" + _id + \"?size=256\" + timestamp;\r\n        if (_subscribed !== undefined) {\r\n            this.subscribed = _subscribed;\r\n        }\r\n        if (_type !== undefined) {\r\n            this.userRole = _type;\r\n        }\r\n        if (_invited !== undefined) {\r\n            this.invited = _invited;\r\n        }\r\n        if (!this.mode) {\r\n            switch (this.visibility) {\r\n                case \"company\":\r\n                    this.mode = \"company_public\";\r\n                    break;\r\n                case \"public\":\r\n                    this.mode = \"all_public\";\r\n                    break;\r\n                case \"private\":\r\n                    this.mode = \"company_private\";\r\n                    break;\r\n                default: break;\r\n            }\r\n        }\r\n        this.deleted = _deleted;\r\n    }\r\n    isNotMember() { return (this.userRole = \"none\"); }\r\n    isOwner() { return (this.userRole === \"owner\"); }\r\n    isPublisher() { return (this.subscribed && (this.userRole === \"owner\" || this.userRole === \"publisher\")); }\r\n    isMember() { return this.userRole === \"member\"; }\r\n    getAvatarSrc() { return (this.lastAvatarUpdateDate) ? this.avatar : \"/resources/skins/rainbow/images/channels/default_channel_avatar.png\"; }\r\n    /**\r\n     * @function\r\n     * @public\r\n     * @name updateChannel\r\n     * @description\r\n     * This method is used to update a channel from data object\r\n     */\r\n    updateChannel(data) {\r\n        let that = this;\r\n        if (data) {\r\n            let channelproperties = Object.getOwnPropertyNames(that);\r\n            //console.log(\"updateChannel update Channel with : \", data[\"id\"]);\r\n            Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\r\n                //console.log(val + \" -> \" + data[val]);\r\n                if (channelproperties.find((el) => { return val == el; })) {\r\n                    //console.log(\"WARNING : One property of the parameter of updateChannel method is not present in the Bubble class : \", val, \" -> \", data[val]);\r\n                    that[val] = data[val];\r\n                }\r\n                else {\r\n                    //console.log(\"WARNING : One property of the parameter of updateChannel method is not present in the Channel class can not update Channel with : \", val, \" -> \", data[val]);\r\n                    console.log(\"WARNING : One property of the parameter of updateChannel method is not present in the Channel class can not update Channel with : \");\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @function\r\n     * @public\r\n     * @name ChannelFactory\r\n     * @description\r\n     * This method is used to create a channel from data object\r\n     */\r\n    static ChannelFactory() {\r\n        return (data, serverURL) => {\r\n            let channel = new Channel(data.name, data.id, data.visibility, data.topic, data.creatorId, data.companyId, data.creationDate, data.users_count, data.lastAvatarUpdateDate, data.subscribed, data.type, data.invited, data.category, data.mode, data.subscribers_count, serverURL, data.max_items, data.max_payload_size, data.pageIndex, data.isLoading, data.complete, data.users, data.publishersRetreived, data.loaded, data.avatar, data.userRole, data.messageRetrieved, data.messages, data.deleted);\r\n            if (data) {\r\n                let channelproperties = Object.getOwnPropertyNames(channel);\r\n                Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\r\n                    //console.log(val + \" -> \" + data[val]);\r\n                    if (!channelproperties.find((el) => { return val == el; })) {\r\n                        //console.log(\"WARNING : One property of the parameter of ChannelFactory method is not present in the Channel class : \", val, \" -> \", data[val]);\r\n                        console.log(\"WARNING : One property of the parameter of ChannelFactory method is not present in the Channel class : \", val);\r\n                    }\r\n                });\r\n            }\r\n            return channel;\r\n        };\r\n    }\r\n}\r\nexports.Channel = Channel;\r\nmodule.exports.Channel = Channel;\r\n//# sourceMappingURL=Channel.js.map"]},"metadata":{},"sourceType":"script"}