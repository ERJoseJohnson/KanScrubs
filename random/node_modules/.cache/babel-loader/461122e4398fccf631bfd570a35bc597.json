{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Utils_1 = require(\"../common/Utils\");\n\nconst PubSub = require(\"pubsub-js\");\n\nconst calllogEventHandler_1 = require(\"../connection/XMPPServiceHandler/calllogEventHandler\");\n\nconst Utils_2 = require(\"../common/Utils\");\n\nconst LOG_ID = \"CALLLOG/SVCE - \";\n\nfunction CallLogsBean() {\n  return {\n    \"callLogs\": [],\n    \"orderByNameCallLogs\": [],\n    \"orderByDateCallLogs\": [],\n    \"orderByNameCallLogsBruts\": [],\n    \"orderByDateCallLogsBruts\": [],\n    \"simplifiedCallLogs\": [],\n    \"numberMissedCalls\": 0,\n    \"lastTimestamp\": 0\n  };\n}\n\nlet CallLogService =\n/**\n* @module\n* @name CallsLog\n * @version 1.67.1 \n* @public\n* @description\n*      This service allow to get the call log and manage it. <br><br>\n*      The main methods and events proposed in that service allow to: <br>\n*      - Get all calls log <br/>\n*      - Delete one or all calls log <br/>\n*      - Mark calls as read / unread <br/>\n*/\nclass CallLogService {\n  // $q, $log, $rootScope, $interval, contactService, xmppService, CallLog, orderByFilter, profileService, $injector, telephonyService, webrtcGatewayService\n  constructor(_eventEmitter, logger, _startConfig) {\n    this.ready = false;\n    /*********************************************************/\n\n    /**                 LIFECYCLE STUFF                     **/\n\n    /*********************************************************/\n\n    this._startConfig = _startConfig; //let that = this;\n\n    this._eventEmitter = _eventEmitter;\n    this.logger = logger;\n    this._xmpp = null;\n    this._rest = null;\n    this._s2s = null;\n    this._options = {};\n    this._useXMPP = false;\n    this._useS2S = false;\n    this.started = false;\n    this._initialized = false;\n    this.ready = false;\n    /*this.callLogs = [];\n    this.orderByNameCallLogs = [];\n    this.orderByDateCallLogs = [];\n    this.orderByDateCallLogsBruts = [];\n    this.simplifiedCallLogs = []; // */\n\n    this.calllogs = CallLogsBean();\n    this.callLogHandlerRef = null;\n    this.callLogMessageAckRef = null;\n    this.callLogNotificationRef = null; //        this.numberMissedCalls = 0;\n    //        this.lastTimestamp = null;\n\n    this.callLogsHistory = [];\n    this.telephonyCallLog = {};\n    this.telephonyCallLogHistory = {};\n    this.deferedObject = null;\n    this.callLogComplete = false;\n    this.callLogIndex = -1;\n\n    this._eventEmitter.on(\"evt_internal_calllogupdated\", this.onCallLogUpdated.bind(this));\n\n    this._eventEmitter.on(\"evt_internal_calllogackupdated\", this.onCallLogAckReceived.bind(this));\n  }\n\n  get startConfig() {\n    return this._startConfig;\n  }\n\n  start(_options, _core) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      that._xmpp = _core._xmpp;\n      that._rest = _core._rest;\n      that._contacts = _core.contacts;\n      that._profiles = _core.profiles;\n      that._telephony = _core.telephony;\n      that._options = _options;\n      that._s2s = _core._s2s;\n      that._useXMPP = that._options.useXMPP;\n      that._useS2S = that._options.useS2S;\n      this.calllogHandlerToken = [];\n      that.logger.log(\"info\", LOG_ID + \" \");\n      that.logger.log(\"info\", LOG_ID + \"[start] === STARTING ===\");\n      this.attachHandlers();\n      this.ready = true;\n    });\n  }\n\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      that.logger.log(\"info\", LOG_ID + \"[stop] Stopping\"); //remove all saved call logs\n\n      this.started = false;\n      this._initialized = false; //this.callLogs = [];\n      //this.callLogsPromises = [];\n\n      this.callLogHandlerRef = null;\n      this.callLogMessageAckRef = null;\n      this.calllogs = CallLogsBean();\n      this.telephonyCallLog = {};\n      this.telephonyCallLogHistory = {};\n      this.callLogComplete = false;\n      this.callLogIndex = -1;\n      this.callLogsHistory = [];\n      that._xmpp = null;\n      that._rest = null;\n      that._contacts = null;\n      that._profiles = null;\n      delete that._calllogEventHandler;\n      that._calllogEventHandler = null;\n\n      if (that.calllogHandlerToken) {\n        that.calllogHandlerToken.forEach(token => PubSub.unsubscribe(token));\n      }\n\n      that.calllogHandlerToken = [];\n      this.ready = false;\n      that.logger.log(\"info\", LOG_ID + \"[stop] Stopped\");\n    });\n  }\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this; //that._eventEmitter.on(\"rainbow_oncalllogupdated\", that.onIqCallLogNotificationReceived.bind(that));\n\n      yield Utils_1.setTimeoutPromised(3000).then(() => {\n        let startDate = new Date();\n        that.getCallLogHistoryPage().then(() => {\n          // @ts-ignore\n          let duration = new Date() - startDate;\n          let startDuration = Math.round(duration);\n          that.logger.log(\"info\", LOG_ID + \" callLogService start duration : \", startDuration);\n          that.logger.log(\"info\", LOG_ID + \"[start] === STARTED (\" + startDuration + \" ms) ===\");\n          that.started = true;\n        }).catch(error => {\n          that.logger.log(\"error\", LOG_ID + \"[start] === STARTING FAILURE ===\");\n          that.logger.log(\"internalerror\", LOG_ID + \"[start] === STARTING FAILURE === : \", error);\n        });\n      });\n    });\n  }\n\n  attachHandlers() {\n    let that = this;\n    that.logger.log(\"info\", LOG_ID + \"(attachHandlers)\");\n    that._calllogEventHandler = new calllogEventHandler_1.CallLogEventHandler(that._xmpp, that, that._contacts, that._profiles, that._telephony);\n    that.calllogHandlerToken = [PubSub.subscribe(that._xmpp.hash + \".\" + that._calllogEventHandler.IQ_CALLLOG, that._calllogEventHandler.onIqCallLogReceived), PubSub.subscribe(that._xmpp.hash + \".\" + that._calllogEventHandler.CALLLOG_ACK, that._calllogEventHandler.onCallLogAckReceived), PubSub.subscribe(that._xmpp.hash + \".\" + that._calllogEventHandler.IQ_CALLOG_NOTIFICATION, that._calllogEventHandler.onIqCallLogNotificationReceived)];\n    /*\n    //if reconnection, update the call-logs\n    if (that.started && that.lastTimestamp) {\n        $interval(function () {\n            that.getCallLogHistoryPage(that.lastTimestamp);\n        }, 1000, 1, true);\n    }\n    // */\n  }\n  /*********************************************************/\n\n  /**       MAM REQUESTS                                  **/\n\n  /*********************************************************/\n\n\n  getCallLogHistoryPage(useAfter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      that.logger.log(\"info\", LOG_ID + \"(getCallLogHistoryPage)\");\n\n      if (that._useXMPP) {\n        return yield that._xmpp.sendGetCallLogHistoryPage(useAfter);\n      }\n\n      if (that._useS2S) {\n        return Promise.resolve();\n      }\n    });\n  }\n  /*********************************************************/\n\n  /**                     API                             **/\n\n  /*********************************************************/\n\n  /**\n   * @public\n   * @method getAll\n   * @instance\n   * @description\n   *    Get all calls log history for the connected user\n   * @return {CallLog[]} An array of call log entry\n   */\n\n\n  getAll() {\n    let that = this;\n    that.calllogs = this._calllogEventHandler.orderCallLogsFunction();\n    let callLogs = that.getSimplifiedCallLogs(); // as duration is \"h[H] mm[m] ss[s]\" in rb, switch it back to ms ...\n\n    for (let i = 0; i < callLogs.length; i++) {\n      let durationMs = 0;\n      let hmmss = callLogs[i].duration;\n\n      if (hmmss && typeof hmmss === \"string\" && hmmss.match(/^(?:(?:([01]?\\d|2[0-3])h )?([0-5]?\\d)m )?([0-5]?\\ds)$/)) {\n        // Remove h, m and s\n        hmmss = hmmss.replace(/[hms]/g, \"\"); // split it at the \"space\", also reverse it to get seconds then minutes then hours\n\n        let parts = hmmss.split(' ').reverse();\n\n        for (let j = 0; j < parts.length; j++) {\n          durationMs += parts[j] * Math.pow(60, j);\n        }\n\n        callLogs[i].duration = durationMs * 1000;\n      }\n    }\n\n    return callLogs;\n  }\n  /**\n   * @public\n   * @method getMissedCallLogCounter\n   * @instance\n   * @description\n   *    Get the number of call missed (state === \"missed\" && direction === \"incoming\")\n   * @return {Number} The number of call missed\n   */\n\n\n  getMissedCallLogCounter() {\n    let that = this;\n    let num = 0;\n    that.calllogs.callLogs.forEach(function (callLog) {\n      if (!callLog.read && callLog.state === \"missed\" && callLog.direction === \"incoming\") {\n        that.logger.log(\"info\", LOG_ID + \"(getMissedCallLogCounter) iter : \", num, \", callLog : \", callLog);\n        num++;\n      }\n    });\n    return num;\n  }\n\n  /**\n   * @public\n   * @method deleteOneCallLog\n   * @instance\n   * @description\n   *    Delete a call log from it's id<br/>\n   *    You have to listen to event `rainbow_oncalllogupdated` to know when the action is finished\n   * @param {String} id The call log id to remove\n   * @return Nothing\n   */\n  deleteOneCallLog(id) {\n    let that = this;\n    that.logger.log(\"info\", LOG_ID + \"(deleteOneCallLog) id : \", id);\n    return that._xmpp.deleteOneCallLog(id);\n  }\n  /**\n   * @public\n   * @method deleteCallLogsForContact\n   * @instance\n   * @description\n   *    Delete all calls log items associated to a contact's given jid<br/>\n   *    You have to listen to event `rainbow_oncalllogupdated` to know when the action is finished\n   * @param {String} jid The call log id to remove\n   * @return Nothing\n   */\n\n\n  deleteCallLogsForContact(jid) {\n    let that = this;\n    that.logger.log(\"info\", LOG_ID + \"(deleteCallLogsForContact) jid : \", jid);\n    return that._xmpp.deleteCallLogsForContact(jid);\n  }\n  /**\n   * @public\n   * @method deleteAllCallLogs\n   * @instance\n   * @description\n   *    Delete all call logs history<br/>\n   *    You have to listen to event `rainbow_oncalllogupdated` to know when the action is finished\n   * @return Nothing\n   */\n\n\n  deleteAllCallLogs() {\n    let that = this;\n    that.logger.log(\"info\", LOG_ID + \"(deleteAllCallLogs)\");\n    return that._xmpp.deleteAllCallLogs();\n  }\n  /**\n   * @public\n   * @method markCallLogAsRead\n   * @instance\n   * @description\n   *    Mark a call log item as read<br/>\n   *    You have to listen to event `rainbow_oncalllogackupdated` to know when the action is finished\n   * @param {String} id The call log id\n   * @return Nothing\n   */\n\n\n  markCallLogAsRead(id) {\n    let that = this;\n    that.logger.log(\"info\", LOG_ID + \"(markCallLogAsRead) id : \", id);\n    return that._xmpp.markCallLogAsRead(id);\n  }\n  /**\n   * @public\n   * @method markAllCallsLogsAsRead\n   * @instance\n   * @description\n   *    Mark all call log items as read<br/>\n   *    You have to listen to event `rainbow_oncalllogackupdated` to know when the action is finished\n   * @return Nothing\n   */\n\n\n  markAllCallsLogsAsRead() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      that.logger.log(\"info\", LOG_ID + \"(markAllCallsLogsAsRead) \");\n      that.logger.log(\"internal\", LOG_ID + \"(markAllCallsLogsAsRead) that.calllogs.callLogs : \", that.calllogs.callLogs);\n      yield that._xmpp.markAllCallsLogsAsRead(that.calllogs.callLogs);\n    });\n  }\n  /**\n   * @public\n   * @method isInitialized\n   * @instance\n   * @description\n   *    Check if the call log history has been received from Rainbow\n   *    A false answer means that the call logs have not yet been retrieved from the server.\n   * @return {Boolean} True if the call logs have been retrieved. False elsewhere.\n   */\n\n\n  isInitialized() {\n    return this._initialized;\n  }\n  /*********************************************************/\n\n  /**                  EVENT HANDLERS                     **/\n\n  /*********************************************************/\n\n\n  onCallLogUpdated(calllogs) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.calllogs = calllogs;\n      this._initialized = true;\n    });\n  }\n\n  onCallLogAckReceived(calllogs) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.calllogs = calllogs;\n      this._initialized = true;\n    });\n  }\n  /*async onIqCallLogNotificationReceived(calllogs) {\n      this.calllogs = calllogs ;\n  } // */\n\n  /*********************************************************/\n\n  /**                  HELPER FUNCTIONS                   **/\n\n  /*********************************************************/\n\n\n  getOrderByNameCallLogs() {\n    let that = this;\n    return that.calllogs.orderByNameCallLogs;\n  }\n\n  getOrderByDateCallLogs() {\n    let that = this;\n\n    if (that.calllogs.orderByDateCallLogs.length !== 0) {\n      that.calllogs.orderByDateCallLogs[0].isLatestCall = true; //update the latest callLog to show its subject next to the contact name.\n\n      if (that.calllogs.orderByDateCallLogs[1]) {\n        that.calllogs.orderByDateCallLogs[1].isLatestCall = false;\n      }\n    }\n\n    return that.calllogs.orderByDateCallLogs;\n  }\n\n  getOrderByNameCallLogsBruts() {\n    let that = this;\n    return that.calllogs.orderByNameCallLogsBruts;\n  }\n\n  getOrderByDateCallLogsBruts() {\n    let that = this;\n    return that.calllogs.orderByDateCallLogsBruts;\n  } //call logs where the contact is replaced by his JID or telephone number\n\n\n  getSimplifiedCallLogs() {\n    let that = this;\n    return that.calllogs.simplifiedCallLogs;\n  }\n\n  getNumberMissedCalls() {\n    let that = this;\n    return that.calllogs.numberMissedCalls;\n  }\n\n  resetCallLogs() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      that.logger.log(\"info\", LOG_ID + \"[resetCallLogs] resetCallLogs\");\n      that.calllogs = CallLogsBean();\n      yield this._calllogEventHandler.resetCallLogs();\n      yield that.getCallLogHistoryPage();\n    });\n  }\n\n};\nCallLogService = __decorate([Utils_1.logEntryExit(LOG_ID), Utils_2.isStarted([])\n/**\n* @module\n* @name CallsLog\n * @version 1.67.1 \n* @public\n* @description\n*      This service allow to get the call log and manage it. <br><br>\n*      The main methods and events proposed in that service allow to: <br>\n*      - Get all calls log <br/>\n*      - Delete one or all calls log <br/>\n*      - Mark calls as read / unread <br/>\n*/\n], CallLogService);\nexports.CallLogService = CallLogService;\nmodule.exports.CallLogService = CallLogService;","map":{"version":3,"sources":["../../src/lib/services/CallLogService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils_1 = require(\"../common/Utils\");\nconst PubSub = require(\"pubsub-js\");\nconst calllogEventHandler_1 = require(\"../connection/XMPPServiceHandler/calllogEventHandler\");\nconst Utils_2 = require(\"../common/Utils\");\nconst LOG_ID = \"CALLLOG/SVCE - \";\nfunction CallLogsBean() {\n    return {\n        \"callLogs\": [],\n        \"orderByNameCallLogs\": [],\n        \"orderByDateCallLogs\": [],\n        \"orderByNameCallLogsBruts\": [],\n        \"orderByDateCallLogsBruts\": [],\n        \"simplifiedCallLogs\": [],\n        \"numberMissedCalls\": 0,\n        \"lastTimestamp\": 0\n    };\n}\nlet CallLogService = \n/**\n* @module\n* @name CallsLog\n * @version 1.67.1 \n* @public\n* @description\n*      This service allow to get the call log and manage it. <br><br>\n*      The main methods and events proposed in that service allow to: <br>\n*      - Get all calls log <br/>\n*      - Delete one or all calls log <br/>\n*      - Mark calls as read / unread <br/>\n*/\nclass CallLogService {\n    // $q, $log, $rootScope, $interval, contactService, xmppService, CallLog, orderByFilter, profileService, $injector, telephonyService, webrtcGatewayService\n    constructor(_eventEmitter, logger, _startConfig) {\n        this.ready = false;\n        /*********************************************************/\n        /**                 LIFECYCLE STUFF                     **/\n        /*********************************************************/\n        this._startConfig = _startConfig;\n        //let that = this;\n        this._eventEmitter = _eventEmitter;\n        this.logger = logger;\n        this._xmpp = null;\n        this._rest = null;\n        this._s2s = null;\n        this._options = {};\n        this._useXMPP = false;\n        this._useS2S = false;\n        this.started = false;\n        this._initialized = false;\n        this.ready = false;\n        /*this.callLogs = [];\n        this.orderByNameCallLogs = [];\n        this.orderByDateCallLogs = [];\n        this.orderByDateCallLogsBruts = [];\n        this.simplifiedCallLogs = []; // */\n        this.calllogs = CallLogsBean();\n        this.callLogHandlerRef = null;\n        this.callLogMessageAckRef = null;\n        this.callLogNotificationRef = null;\n        //        this.numberMissedCalls = 0;\n        //        this.lastTimestamp = null;\n        this.callLogsHistory = [];\n        this.telephonyCallLog = {};\n        this.telephonyCallLogHistory = {};\n        this.deferedObject = null;\n        this.callLogComplete = false;\n        this.callLogIndex = -1;\n        this._eventEmitter.on(\"evt_internal_calllogupdated\", this.onCallLogUpdated.bind(this));\n        this._eventEmitter.on(\"evt_internal_calllogackupdated\", this.onCallLogAckReceived.bind(this));\n    }\n    get startConfig() {\n        return this._startConfig;\n    }\n    start(_options, _core) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            that._xmpp = _core._xmpp;\n            that._rest = _core._rest;\n            that._contacts = _core.contacts;\n            that._profiles = _core.profiles;\n            that._telephony = _core.telephony;\n            that._options = _options;\n            that._s2s = _core._s2s;\n            that._useXMPP = that._options.useXMPP;\n            that._useS2S = that._options.useS2S;\n            this.calllogHandlerToken = [];\n            that.logger.log(\"info\", LOG_ID + \" \");\n            that.logger.log(\"info\", LOG_ID + \"[start] === STARTING ===\");\n            this.attachHandlers();\n            this.ready = true;\n        });\n    }\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            that.logger.log(\"info\", LOG_ID + \"[stop] Stopping\");\n            //remove all saved call logs\n            this.started = false;\n            this._initialized = false;\n            //this.callLogs = [];\n            //this.callLogsPromises = [];\n            this.callLogHandlerRef = null;\n            this.callLogMessageAckRef = null;\n            this.calllogs = CallLogsBean();\n            this.telephonyCallLog = {};\n            this.telephonyCallLogHistory = {};\n            this.callLogComplete = false;\n            this.callLogIndex = -1;\n            this.callLogsHistory = [];\n            that._xmpp = null;\n            that._rest = null;\n            that._contacts = null;\n            that._profiles = null;\n            delete that._calllogEventHandler;\n            that._calllogEventHandler = null;\n            if (that.calllogHandlerToken) {\n                that.calllogHandlerToken.forEach((token) => PubSub.unsubscribe(token));\n            }\n            that.calllogHandlerToken = [];\n            this.ready = false;\n            that.logger.log(\"info\", LOG_ID + \"[stop] Stopped\");\n        });\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            //that._eventEmitter.on(\"rainbow_oncalllogupdated\", that.onIqCallLogNotificationReceived.bind(that));\n            yield Utils_1.setTimeoutPromised(3000).then(() => {\n                let startDate = new Date();\n                that.getCallLogHistoryPage()\n                    .then(() => {\n                    // @ts-ignore\n                    let duration = new Date() - startDate;\n                    let startDuration = Math.round(duration);\n                    that.logger.log(\"info\", LOG_ID + \" callLogService start duration : \", startDuration);\n                    that.logger.log(\"info\", LOG_ID + \"[start] === STARTED (\" + startDuration + \" ms) ===\");\n                    that.started = true;\n                })\n                    .catch((error) => {\n                    that.logger.log(\"error\", LOG_ID + \"[start] === STARTING FAILURE ===\");\n                    that.logger.log(\"internalerror\", LOG_ID + \"[start] === STARTING FAILURE === : \", error);\n                });\n            });\n        });\n    }\n    attachHandlers() {\n        let that = this;\n        that.logger.log(\"info\", LOG_ID + \"(attachHandlers)\");\n        that._calllogEventHandler = new calllogEventHandler_1.CallLogEventHandler(that._xmpp, that, that._contacts, that._profiles, that._telephony);\n        that.calllogHandlerToken = [\n            PubSub.subscribe(that._xmpp.hash + \".\" + that._calllogEventHandler.IQ_CALLLOG, that._calllogEventHandler.onIqCallLogReceived),\n            PubSub.subscribe(that._xmpp.hash + \".\" + that._calllogEventHandler.CALLLOG_ACK, that._calllogEventHandler.onCallLogAckReceived),\n            PubSub.subscribe(that._xmpp.hash + \".\" + that._calllogEventHandler.IQ_CALLOG_NOTIFICATION, that._calllogEventHandler.onIqCallLogNotificationReceived)\n        ];\n        /*\n        //if reconnection, update the call-logs\n        if (that.started && that.lastTimestamp) {\n            $interval(function () {\n                that.getCallLogHistoryPage(that.lastTimestamp);\n            }, 1000, 1, true);\n        }\n        // */\n    }\n    /*********************************************************/\n    /**       MAM REQUESTS                                  **/\n    /*********************************************************/\n    getCallLogHistoryPage(useAfter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            that.logger.log(\"info\", LOG_ID + \"(getCallLogHistoryPage)\");\n            if (that._useXMPP) {\n                return yield that._xmpp.sendGetCallLogHistoryPage(useAfter);\n            }\n            if (that._useS2S) {\n                return Promise.resolve();\n            }\n        });\n    }\n    /*********************************************************/\n    /**                     API                             **/\n    /*********************************************************/\n    /**\n     * @public\n     * @method getAll\n     * @instance\n     * @description\n     *    Get all calls log history for the connected user\n     * @return {CallLog[]} An array of call log entry\n     */\n    getAll() {\n        let that = this;\n        that.calllogs = this._calllogEventHandler.orderCallLogsFunction();\n        let callLogs = that.getSimplifiedCallLogs();\n        // as duration is \"h[H] mm[m] ss[s]\" in rb, switch it back to ms ...\n        for (let i = 0; i < callLogs.length; i++) {\n            let durationMs = 0;\n            let hmmss = callLogs[i].duration;\n            if (hmmss && (typeof hmmss === \"string\") && hmmss.match(/^(?:(?:([01]?\\d|2[0-3])h )?([0-5]?\\d)m )?([0-5]?\\ds)$/)) {\n                // Remove h, m and s\n                hmmss = hmmss.replace(/[hms]/g, \"\");\n                // split it at the \"space\", also reverse it to get seconds then minutes then hours\n                let parts = hmmss.split(' ').reverse();\n                for (let j = 0; j < parts.length; j++) {\n                    durationMs += parts[j] * Math.pow(60, j);\n                }\n                callLogs[i].duration = durationMs * 1000;\n            }\n        }\n        return callLogs;\n    }\n    /**\n     * @public\n     * @method getMissedCallLogCounter\n     * @instance\n     * @description\n     *    Get the number of call missed (state === \"missed\" && direction === \"incoming\")\n     * @return {Number} The number of call missed\n     */\n    getMissedCallLogCounter() {\n        let that = this;\n        let num = 0;\n        that.calllogs.callLogs.forEach(function (callLog) {\n            if (!callLog.read && callLog.state === \"missed\" && callLog.direction === \"incoming\") {\n                that.logger.log(\"info\", LOG_ID + \"(getMissedCallLogCounter) iter : \", num, \", callLog : \", callLog);\n                num++;\n            }\n        });\n        return num;\n    }\n    ;\n    /**\n     * @public\n     * @method deleteOneCallLog\n     * @instance\n     * @description\n     *    Delete a call log from it's id<br/>\n     *    You have to listen to event `rainbow_oncalllogupdated` to know when the action is finished\n     * @param {String} id The call log id to remove\n     * @return Nothing\n     */\n    deleteOneCallLog(id) {\n        let that = this;\n        that.logger.log(\"info\", LOG_ID + \"(deleteOneCallLog) id : \", id);\n        return that._xmpp.deleteOneCallLog(id);\n    }\n    /**\n     * @public\n     * @method deleteCallLogsForContact\n     * @instance\n     * @description\n     *    Delete all calls log items associated to a contact's given jid<br/>\n     *    You have to listen to event `rainbow_oncalllogupdated` to know when the action is finished\n     * @param {String} jid The call log id to remove\n     * @return Nothing\n     */\n    deleteCallLogsForContact(jid) {\n        let that = this;\n        that.logger.log(\"info\", LOG_ID + \"(deleteCallLogsForContact) jid : \", jid);\n        return that._xmpp.deleteCallLogsForContact(jid);\n    }\n    /**\n     * @public\n     * @method deleteAllCallLogs\n     * @instance\n     * @description\n     *    Delete all call logs history<br/>\n     *    You have to listen to event `rainbow_oncalllogupdated` to know when the action is finished\n     * @return Nothing\n     */\n    deleteAllCallLogs() {\n        let that = this;\n        that.logger.log(\"info\", LOG_ID + \"(deleteAllCallLogs)\");\n        return that._xmpp.deleteAllCallLogs();\n    }\n    /**\n     * @public\n     * @method markCallLogAsRead\n     * @instance\n     * @description\n     *    Mark a call log item as read<br/>\n     *    You have to listen to event `rainbow_oncalllogackupdated` to know when the action is finished\n     * @param {String} id The call log id\n     * @return Nothing\n     */\n    markCallLogAsRead(id) {\n        let that = this;\n        that.logger.log(\"info\", LOG_ID + \"(markCallLogAsRead) id : \", id);\n        return that._xmpp.markCallLogAsRead(id);\n    }\n    /**\n     * @public\n     * @method markAllCallsLogsAsRead\n     * @instance\n     * @description\n     *    Mark all call log items as read<br/>\n     *    You have to listen to event `rainbow_oncalllogackupdated` to know when the action is finished\n     * @return Nothing\n     */\n    markAllCallsLogsAsRead() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            that.logger.log(\"info\", LOG_ID + \"(markAllCallsLogsAsRead) \");\n            that.logger.log(\"internal\", LOG_ID + \"(markAllCallsLogsAsRead) that.calllogs.callLogs : \", that.calllogs.callLogs);\n            yield that._xmpp.markAllCallsLogsAsRead(that.calllogs.callLogs);\n        });\n    }\n    /**\n     * @public\n     * @method isInitialized\n     * @instance\n     * @description\n     *    Check if the call log history has been received from Rainbow\n     *    A false answer means that the call logs have not yet been retrieved from the server.\n     * @return {Boolean} True if the call logs have been retrieved. False elsewhere.\n     */\n    isInitialized() {\n        return this._initialized;\n    }\n    /*********************************************************/\n    /**                  EVENT HANDLERS                     **/\n    /*********************************************************/\n    onCallLogUpdated(calllogs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.calllogs = calllogs;\n            this._initialized = true;\n        });\n    }\n    onCallLogAckReceived(calllogs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.calllogs = calllogs;\n            this._initialized = true;\n        });\n    }\n    /*async onIqCallLogNotificationReceived(calllogs) {\n        this.calllogs = calllogs ;\n    } // */\n    /*********************************************************/\n    /**                  HELPER FUNCTIONS                   **/\n    /*********************************************************/\n    getOrderByNameCallLogs() {\n        let that = this;\n        return that.calllogs.orderByNameCallLogs;\n    }\n    getOrderByDateCallLogs() {\n        let that = this;\n        if (that.calllogs.orderByDateCallLogs.length !== 0) {\n            that.calllogs.orderByDateCallLogs[0].isLatestCall = true; //update the latest callLog to show its subject next to the contact name.\n            if (that.calllogs.orderByDateCallLogs[1]) {\n                that.calllogs.orderByDateCallLogs[1].isLatestCall = false;\n            }\n        }\n        return that.calllogs.orderByDateCallLogs;\n    }\n    getOrderByNameCallLogsBruts() {\n        let that = this;\n        return that.calllogs.orderByNameCallLogsBruts;\n    }\n    getOrderByDateCallLogsBruts() {\n        let that = this;\n        return that.calllogs.orderByDateCallLogsBruts;\n    }\n    //call logs where the contact is replaced by his JID or telephone number\n    getSimplifiedCallLogs() {\n        let that = this;\n        return that.calllogs.simplifiedCallLogs;\n    }\n    getNumberMissedCalls() {\n        let that = this;\n        return that.calllogs.numberMissedCalls;\n    }\n    resetCallLogs() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            that.logger.log(\"info\", LOG_ID + \"[resetCallLogs] resetCallLogs\");\n            that.calllogs = CallLogsBean();\n            yield this._calllogEventHandler.resetCallLogs();\n            yield that.getCallLogHistoryPage();\n        });\n    }\n};\nCallLogService = __decorate([\n    Utils_1.logEntryExit(LOG_ID),\n    Utils_2.isStarted([])\n    /**\n    * @module\n    * @name CallsLog\n     * @version 1.67.1 \n    * @public\n    * @description\n    *      This service allow to get the call log and manage it. <br><br>\n    *      The main methods and events proposed in that service allow to: <br>\n    *      - Get all calls log <br/>\n    *      - Delete one or all calls log <br/>\n    *      - Mark calls as read / unread <br/>\n    */\n], CallLogService);\nexports.CallLogService = CallLogService;\nmodule.exports.CallLogService = CallLogService;\n//# sourceMappingURL=CallLogService.js.map"]},"metadata":{},"sourceType":"script"}