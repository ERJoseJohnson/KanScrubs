{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\n\nconst Utils_1 = require(\"../common/Utils\");\n\nconst LOG_ID = \"GROUPS/SVCE - \";\nlet GroupsService =\n/**\n * @module\n * @name GroupsService\n * @version 1.67.1 \n * @public\n * @description\n *\t\tThis service manages groups which allow to create his own lists of contacts.\n *\t\t<br><br>\n *\t\tThe main methods proposed in that module allow to: <br>\n *\t\t- Get all groups of the user\n *\t\t- Create a new group\n *\t\t- Delete an existing group\n *\t\t- Add a contact in a group\n *\t\t- Remove a contact from a group\n */\nclass GroupsService {\n  constructor(_eventEmitter, _logger, _startConfig) {\n    this.ready = false;\n    this._startConfig = _startConfig;\n    this._xmpp = null;\n    this._rest = null;\n    this._s2s = null;\n    this._options = {};\n    this._useXMPP = false;\n    this._useS2S = false;\n    this._groups = null;\n    this._eventEmitter = _eventEmitter;\n    this._logger = _logger;\n\n    this._eventEmitter.on(\"evt_internal_hdle_groupcreated\", this._onGroupCreated.bind(this));\n\n    this._eventEmitter.on(\"evt_internal_hdle_groupdeleted\", this._onGroupDeleted.bind(this));\n\n    this._eventEmitter.on(\"evt_internal_hdle_groupupdated\", this._onGroupUpdated.bind(this));\n\n    this._eventEmitter.on(\"evt_internal_hdle_useraddedingroup\", this._onUserAddedInGroup.bind(this));\n\n    this._eventEmitter.on(\"evt_internal_hdle_userremovedfromgroup\", this._onUserRemovedFromGroup.bind(this));\n\n    this.ready = false;\n  }\n\n  get startConfig() {\n    return this._startConfig;\n  }\n\n  start(_options, _core) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._xmpp = _core._xmpp;\n        that._rest = _core._rest;\n        that._options = _options;\n        that._s2s = _core._s2s;\n        that._useXMPP = that._options.useXMPP;\n        that._useS2S = that._options.useS2S;\n        that._groups = [];\n        /*\n                         that._eventEmitter.removeListener(\"evt_internal_groupcreated\", that._onGroupCreated);\n                         that._eventEmitter.removeListener(\"evt_internal_groupdeleted\", that._onGroupDeleted);\n                         that._eventEmitter.removeListener(\"evt_internal_groupupdated\", that._onGroupUpdated);\n                         that._eventEmitter.removeListener(\"evt_internal_useraddedingroup\", that._onUserAddedInGroup);\n                         that._eventEmitter.removeListener(\"evt_internal_userremovedfromgroup\", that._onUserRemovedFromGroup);\n        \n                         that._eventEmitter.on(\"evt_internal_groupcreated\", that._onGroupCreated.bind(that));\n                        that._eventEmitter.on(\"evt_internal_groupdeleted\", that._onGroupDeleted.bind(that));\n                        that._eventEmitter.on(\"evt_internal_groupupdated\", that._onGroupUpdated.bind(that));\n                        that._eventEmitter.on(\"evt_internal_useraddedingroup\", that._onUserAddedInGroup.bind(that));\n                        that._eventEmitter.on(\"evt_internal_userremovedfromgroup\", that._onUserRemovedFromGroup.bind(that));\n        */\n\n        that.ready = true;\n        resolve();\n      } catch (err) {\n        return reject();\n      }\n    });\n  }\n\n  stop() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._xmpp = null;\n        that._rest = null;\n        that._groups = null;\n        /*\n                        that._eventEmitter.removeListener(\"evt_internal_groupcreated\", that._onGroupCreated);\n                        that._eventEmitter.removeListener(\"evt_internal_groupdeleted\", that._onGroupDeleted);\n                        that._eventEmitter.removeListener(\"evt_internal_groupupdated\", that._onGroupUpdated);\n                        that._eventEmitter.removeListener(\"evt_internal_useraddedingroup\", that._onUserAddedInGroup);\n                        that._eventEmitter.removeListener(\"evt_internal_userremovedfromgroup\", that._onUserRemovedFromGroup);\n        */\n\n        that.ready = false;\n        resolve();\n      } catch (err) {\n        return reject(err);\n      }\n    });\n  }\n  /**\n  * @public\n  * @method createGroup\n  * @instance\n  * @param {string} name The name of the group to create\n  * @param {string} comment The comment of the group to create\n  * @param {boolean} isFavorite If true, the group is flagged as favorite\n  * @description\n  *      Create a new group\n  * @async\n  * @return {Promise<Object, ErrorManager>}\n  * @fulfil {Group} - Created group object or an error object depending on the result\n  * @category async\n  */\n\n\n  createGroup(name, comment, isFavorite) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (typeof isFavorite === \"undefined\") {\n        isFavorite = false;\n      }\n\n      if (!name) {\n        that._logger.log(\"warn\", LOG_ID + \"(createGroup) bad or empty 'name' parameter\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(createGroup) bad or empty 'name' parameter : \", name);\n\n        return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n      }\n\n      that._rest.createGroup(name, comment, isFavorite).then(group => {\n        that._logger.log(\"debug\", LOG_ID + \"(createGroup) creation successfull\");\n\n        that._groups.push(group);\n\n        resolve(group);\n      }, err => {\n        that._logger.log(\"error\", LOG_ID + \"(createGroup) error\");\n\n        return reject(err);\n      });\n    });\n  }\n  /**\n  * @public\n  * @method deleteGroup\n  * @instance\n  * @param {Object} group The group to delete\n  * @description\n  * \t\tDelete an owned group\n  * @async\n  * @return {Promise<Object, ErrorManager>}\n  * @fulfil {Group} - Deleted group object or an error object depending on the result\n  * @category async\n  */\n\n\n  deleteGroup(group) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (!group) {\n        that._logger.log(\"warn\", LOG_ID + \"(deleteGroup) bad or empty 'group' parameter.\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(deleteGroup) bad or empty 'group' parameter : \", group);\n\n        return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n      }\n\n      that._rest.deleteGroup(group.id).then(function () {\n        let foundIndex = that._groups.findIndex(el => {\n          return el.id === group.id;\n        });\n\n        if (foundIndex > -1) {\n          let groupDeleted = that._groups.splice(foundIndex, 1);\n\n          that._logger.log(\"info\", LOG_ID + \"(deleteGroup) delete \" + groupDeleted.length + \" group successfully\");\n\n          resolve(groupDeleted[0]);\n        } else {\n          resolve(null);\n        }\n      }).catch(function (err) {\n        that._logger.log(\"error\", LOG_ID + \"(deleteGroup) error\");\n\n        return reject(err);\n      });\n    });\n  }\n  /**\n   * @public\n   * @method deleteAllGroups\n   * @instance\n   * @description\n   *    Delete all existing owned groups <br/>\n   *    Return a promise\n   * @return {Object} Nothing or an error object depending on the result\n   */\n\n\n  deleteAllGroups() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      const promiseQueue = [];\n      const groups = that.getAll();\n\n      if (!Array.isArray(groups) || groups && groups.length === 0) {\n        return resolve({\n          code: 0,\n          label: 'OK'\n        });\n      }\n\n      groups.forEach(group => {\n        promiseQueue.push(that.deleteGroup(group).catch(() => {}));\n      });\n      Promise.all(promiseQueue).then(() => {\n        that._logger.log(\"info\", LOG_ID + \"[deleteAllGroups] :: All groups deleted successfully\");\n\n        return resolve({\n          code: 0,\n          label: 'OK'\n        });\n      }).catch(err => {\n        that._logger.log(\"error\", LOG_ID + \"[deleteAllGroups] :: Error when deleting all groups\");\n\n        return reject(err);\n      });\n    });\n  }\n  /**\n   * @public\n   * @method updateGroupName\n   * @instance\n   * @param {Object} group The group to update\n   * @param {string} name The new name of the group\n   * @description\n   * \t\tUpdate the name of a group\n   * @async\n   * @return {Promise<Object, ErrorManager>}\n   * @fulfil {Group} - Updated group object or an error object depending on the result\n   * @category async\n   */\n\n\n  updateGroupName(group, name) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (!group || !name) {\n        if (!group) {\n          that._logger.log(\"warn\", LOG_ID + \"(updateGroupName) bad or empty 'group' parameter\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(updateGroupName) bad or empty 'group' parameter : \", group);\n        }\n\n        if (!name) {\n          that._logger.log(\"warn\", LOG_ID + \"(updateGroupName) bad or empty 'name' parameter.\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(updateGroupName) bad or empty 'name' parameter : \", name);\n        }\n\n        return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n      } else if (group.name === name) {\n        that._logger.log(\"debug\", LOG_ID + \"(updateGroupName) name of group is already defined, nothing is done\");\n\n        resolve(group);\n      } else {\n        that._rest.updateGroupName(group.id, name).then(group => {\n          let foundIndex = that._groups.findIndex(el => {\n            return el.id === group.id;\n          });\n\n          if (foundIndex > -1) {\n            that._groups[foundIndex].name = group.name;\n\n            that._logger.log(\"internal\", LOG_ID + \"(updateGroupName) update name to \" + group.name + \" of group with id \" + group.id + \" successfully\");\n\n            resolve(that._groups[foundIndex]);\n          } else {\n            resolve(null);\n          }\n        }).catch(function (err) {\n          that._logger.log(\"error\", LOG_ID + \"(updateGroupName) error\");\n\n          return reject(err);\n        });\n      }\n    });\n  }\n  /**\n   * @private\n   * @description\n   *      Internal method\n   */\n\n\n  getGroups() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that._rest.getGroups().then(listOfGroups => {\n        let promises = [];\n        listOfGroups.forEach(group => {\n          promises.push(new Promise(function (res, rej) {\n            that._rest.getGroup(group.id).then(groupWithUsersInformation => {\n              res(groupWithUsersInformation);\n            }, err => {\n              return rej(err);\n            });\n          }));\n        });\n        Promise.all(promises).then(groups => {\n          that._groups = groups;\n\n          that._logger.log(\"info\", LOG_ID + \"(getGroups) get successfully\");\n\n          resolve(that._groups);\n        }, err => {\n          return reject(err);\n        });\n      }, err => {\n        that._logger.log(\"error\", LOG_ID + \"(getGroups) Error.\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(getGroups) Error : \", err);\n\n        return reject(err);\n      });\n    });\n  }\n  /**\n  * @public\n  * @method setGroupAsFavorite\n  * @since 1.67.0\n  * @instance\n  * @param {Object} group The group\n  * @description\n  * \t\tSet a group as a favorite one of the curent loggued in user.\n  * @async\n  * @return {Promise<Object, ErrorManager>}\n  * @fulfil {Group} - Updated group or an error object depending on the result\n  * @category async\n  */\n\n\n  setGroupAsFavorite(group) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (!group) {\n        that._logger.log(\"warn\", LOG_ID + \"(setGroupAsFavorite) bad or empty 'group' parameter.\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(setGroupAsFavorite) bad or empty 'group' parameter : \", group);\n\n        reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n        return;\n      }\n\n      that._logger.log(\"internal\", LOG_ID + \"(setGroupAsFavorite) param group : \", group);\n\n      that._rest.setFavoriteGroup(group, true).then(groupRetrieved => {\n        that._logger.log(\"debug\", LOG_ID + \"(setGroupAsFavorite) set favorite group successfull\");\n\n        that._logger.log(\"internal\", LOG_ID + \"(setGroupAsFavorite) set favorite group successfull, group : \", groupRetrieved);\n\n        resolve(groupRetrieved);\n      }, err => {\n        return reject(err);\n      });\n    });\n  }\n  /**\n   * @public\n   * @method unsetGroupAsFavorite\n   * @since 1.67.0\n   * @instance\n   * @param {Object} group The group\n   * @description\n   * \t\tRemove the favorite state of a group of the curent loggued in user.\n   * @async\n   * @return {Promise<Object, ErrorManager>}\n   * @fulfil {Group} - Updated group or an error object depending on the result\n   * @category async\n   */\n\n\n  unsetGroupAsFavorite(group) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (!group) {\n        that._logger.log(\"warn\", LOG_ID + \"(unsetGroupAsFavorite) bad or empty 'group' parameter.\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(unsetGroupAsFavorite) bad or empty 'group' parameter : \", group);\n\n        reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n        return;\n      }\n\n      that._logger.log(\"internal\", LOG_ID + \"(unsetGroupAsFavorite) param group : \", group);\n\n      that._rest.setFavoriteGroup(group, false).then(groupRetrieved => {\n        that._logger.log(\"debug\", LOG_ID + \"(unsetGroupAsFavorite) unset favorite group successfull\");\n\n        that._logger.log(\"internal\", LOG_ID + \"(unsetGroupAsFavorite) unset favorite group successfull, group : \", groupRetrieved);\n\n        resolve(groupRetrieved);\n      }, err => {\n        return reject(err);\n      });\n    });\n  }\n  /**\n   * @public\n   * @method addUserInGroup\n   * @instance\n   * @param {Contact} contact The user to add in group\n   * @param {Object} group The group\n   * @description\n   * \t\tAdd a contact in a group\n   * @async\n   * @return {Promise<Object, ErrorManager>}\n   * @fulfil {Group} - Updated group with the new contact added or an error object depending on the result\n   * @category async\n   */\n\n\n  addUserInGroup(contact, group) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!contact) {\n          that._logger.log(\"warn\", LOG_ID + \"(addUserInGroup) bad or empty 'contact' parameter.\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(addUserInGroup) bad or empty 'contact' parameter : \", contact);\n\n          return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n        } else if (!group) {\n          that._logger.log(\"warn\", LOG_ID + \"(addUserInGroup) bad or empty 'group' parameter.\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(addUserInGroup) bad or empty 'group' parameter : \", group);\n\n          return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n        }\n\n        that._logger.log(\"internal\", LOG_ID + \"(addUserInGroup) contact : \", contact, \", group : \", group);\n\n        let contactIndex = group.users.findIndex(user => user.id === contact.id);\n\n        if (contactIndex === -1) {\n          yield that._rest.addUserInGroup(contact.id, group.id).then(groupUpdated => __awaiter(this, void 0, void 0, function* () {\n            yield that._rest.getGroup(groupUpdated.id).then(groupRetrieved => {\n              let foundIndex = that._groups.findIndex(groupItem => groupItem.id === groupRetrieved.id);\n\n              that._groups[foundIndex] = groupRetrieved;\n              resolve(groupRetrieved);\n            }, err => {\n              return reject(err);\n            });\n          }), err => {\n            that._logger.log(\"error\", LOG_ID + \"(addUserInGroup) error.\");\n\n            that._logger.log(\"internalerror\", LOG_ID + \"(addUserInGroup) error : \", err);\n\n            return reject(err);\n          });\n        } else {\n          that._logger.log(\"warn\", LOG_ID + \"(addUserInGroup) User is already a member of the group\");\n\n          return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n        }\n      });\n    });\n  }\n  /**\n  * @public\n  * @method removeUserFromGroup\n  * @instance\n  * @param {Contact} contact The user to remove from the group\n  * @param {Object} group The destination group\n  * @description\n  *\t\tRemove a contact from a group\n  * @async\n  * @return {Promise<Object, ErrorManager>}\n  * @fulfil {Group} - Updated group without the removed contact or an error object depending on the result\n  * @category async\n  */\n\n\n  removeUserFromGroup(contact, group) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!contact) {\n          that._logger.log(\"warn\", LOG_ID + \"(removeUserFromGroup) bad or empty 'contact' parameter.\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(removeUserFromGroup) bad or empty 'contact' parameter : \", contact);\n\n          return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n        } else if (!group) {\n          that._logger.log(\"warn\", LOG_ID + \"(removeUserFromGroup) bad or empty 'group' parameter.\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(removeUserFromGroup) bad or empty 'group' parameter : \", group);\n\n          return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n        }\n\n        that._logger.log(\"internal\", LOG_ID + \"(removeUserFromGroup) contact : \", contact, \", group : \", group);\n\n        let contactIndex = group.users.findIndex(user => user.id == contact.id);\n\n        if (contactIndex > -1) {\n          yield that._rest.removeUserFromGroup(contact.id, group.id).then(group => __awaiter(this, void 0, void 0, function* () {\n            yield that._rest.getGroup(group.id).then(group => {\n              let foundIndex = that._groups.findIndex(groupItem => groupItem.id === group.id);\n\n              that._groups[foundIndex] = group;\n              resolve(group);\n            }, err => {\n              return reject(err);\n            });\n          }), err => {\n            that._logger.log(\"error\", LOG_ID + \"(removeUserFromGroup) error\");\n\n            return reject(err);\n          });\n        } else {\n          that._logger.log(\"warn\", LOG_ID + \"(removeUserFromGroup) contact not found in that group\");\n\n          resolve(group);\n        }\n      });\n    });\n  }\n  /**\n   * @public\n   * @method getAll\n   * @instance\n   * @return {Array} The list of existing groups with following fields: id, name, comment, isFavorite, owner, creationDate, array of users in the group\n   * @description\n   *  Return the list of existing groups\n   */\n\n\n  getAll() {\n    return this._groups;\n  }\n  /**\n   * @public\n   * @method getFavoriteGroups\n   * @instance\n   * @return {Array} The list of favorite groups with following fields: id, name, comment, isFavorite, owner, creationDate, array of users in the group\n   * @description\n   *  Return the list of favorite groups\n   */\n\n\n  getFavoriteGroups() {\n    return this._groups.filter(group => {\n      return group.isFavorite;\n    });\n  }\n  /**\n   * @public\n   * @method getGroupById\n   * @instance\n   * @param {String} group Id of the group to found\n   * @return {Object} The group found if exist or undefined\n   * @description\n   *  Return a group by its id\n   */\n\n\n  getGroupById(id) {\n    return this._groups.find(group => {\n      return group.id === id;\n    });\n  }\n  /**\n   * @public\n   * @method getGroupByName\n   * @instance\n   * @param {String} name Name of the group to found\n   * @return {Object} The group found if exist or undefined\n   * @description\n   *  Return a group by its id\n   */\n\n\n  getGroupByName(name) {\n    return this._groups.find(group => {\n      return group.name === name;\n    });\n  }\n  /**\n   * @private\n   * @method _onGroupCreated\n   * @instance\n   * @param {Object} data Contains the groupId of the created group\n   * @description\n   *\t\tMethod called when a group is created\n   */\n\n\n  _onGroupCreated(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      yield this._rest.getGroup(data.groupId).then(groupCreated => {\n        //that._logger.log(\"internal\", LOG_ID + \"(_onGroupCreated) Group created : \", groupCreated.name);\n        let foundIndex = that._groups.findIndex(groupItem => groupItem.id === groupCreated.id);\n\n        if (foundIndex > -1) {\n          that._groups[foundIndex] = groupCreated;\n        } else {\n          that._groups.push(groupCreated);\n        }\n\n        that._eventEmitter.emit(\"evt_internal_groupcreated\", groupCreated);\n      });\n    });\n  }\n  /**\n   * @private\n   * @method _onGroupDeleted\n   * @instance\n   * @param {Object} data Contains the groupId of the deleted group\n   * @description\n   *\t\tMethod called when a group is deleted\n   */\n\n\n  _onGroupDeleted(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      let foundIndex = that._groups.findIndex(el => {\n        return el.id === data.groupId;\n      });\n\n      if (foundIndex > -1) {\n        let groupDeleted = that._groups.splice(foundIndex, 1); //that._logger.log(\"internal\", LOG_ID + \"(_onGroupDeleted) Group deleted : \", groupDeleted[0].name);\n\n\n        that._eventEmitter.emit(\"evt_internal_groupdeleted\", groupDeleted[0]);\n      } else {\n        that._eventEmitter.emit(\"evt_internal_groupdeleted\", null);\n      }\n    });\n  }\n  /**\n   * @private\n   * @method _onGroupUpdated\n   * @instance\n   * @param {Object} data Contains the groupId of the updated group\n   * @description\n   *\t\tMethod called when a group is updated (name, comment, isFavorite)\n   */\n\n\n  _onGroupUpdated(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      yield this._rest.getGroup(data.groupId).then(groupUpdated => {\n        //that._logger.log(\"internal\", LOG_ID + \"(_onGroupUpdated) Group updated\", groupUpdated.name);\n        let foundIndex = that._groups.findIndex(groupItem => groupItem.id === groupUpdated.id);\n\n        if (foundIndex > -1) {\n          that._groups[foundIndex] = groupUpdated;\n        } else {\n          that._groups.push(groupUpdated);\n        }\n\n        that._eventEmitter.emit(\"evt_internal_groupupdated\", groupUpdated);\n      });\n    });\n  }\n  /**\n   * @private\n   * @method _onUserAddedInGroup\n   * @instance\n   * @param {Object} data Contains the groupId and the userId\n   * @description\n   *\t\tMethod called when a user is added to a group\n   */\n\n\n  _onUserAddedInGroup(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      yield this._rest.getGroup(data.groupId).then(groupUpdated => {\n        //that._logger.log(\"internal\", LOG_ID + \"(_onUserAddedInGroup) User added in group\", groupUpdated.name);\n        let foundIndex = that._groups.findIndex(groupItem => groupItem.id === groupUpdated.id);\n\n        if (foundIndex > -1) {\n          that._groups[foundIndex] = groupUpdated;\n        } else {\n          that._groups.push(groupUpdated);\n        }\n\n        let contactAddedIndex = groupUpdated.users.findIndex(userItem => userItem.id === data.userId);\n        let contact = groupUpdated.users[contactAddedIndex];\n\n        that._eventEmitter.emit(\"evt_internal_useraddedingroup\", groupUpdated, contact);\n      });\n    });\n  }\n  /**\n   * @private\n   * @method _onUserRemovedFromGroup\n   * @instance\n   * @param {Object} data Contains the groupId and the userId\n   * @description\n   *\t\tMethod called when a user is removed from a group\n   */\n\n\n  _onUserRemovedFromGroup(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      yield this._rest.getGroup(data.groupId).then(groupUpdated => {\n        //that._logger.log(\"internal\", LOG_ID + \"(_onUserRemovedFromGroup) User removed from group\", groupUpdated.name);\n        let foundIndex = that._groups.findIndex(groupItem => groupItem.id === groupUpdated.id);\n\n        let contact = null;\n\n        if (foundIndex > -1) {\n          let contactRemovedIndex = that._groups[foundIndex].users.findIndex(userItem => userItem.id === data.userId);\n\n          contact = that._groups[foundIndex].users[contactRemovedIndex];\n          that._groups[foundIndex] = groupUpdated;\n        } else {\n          that._groups.push(groupUpdated);\n        }\n\n        that._eventEmitter.emit(\"evt_internal_userremovedfromgroup\", groupUpdated, contact);\n      });\n    });\n  }\n\n};\nGroupsService = __decorate([Utils_1.logEntryExit(LOG_ID), Utils_1.isStarted([])\n/**\n * @module\n * @name GroupsService\n * @version 1.67.1 \n * @public\n * @description\n *\t\tThis service manages groups which allow to create his own lists of contacts.\n *\t\t<br><br>\n *\t\tThe main methods proposed in that module allow to: <br>\n *\t\t- Get all groups of the user\n *\t\t- Create a new group\n *\t\t- Delete an existing group\n *\t\t- Add a contact in a group\n *\t\t- Remove a contact from a group\n */\n], GroupsService);\nexports.GroupsService = GroupsService;\nmodule.exports.GroupsService = GroupsService;","map":{"version":3,"sources":["../../src/lib/services/GroupsService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\nconst Utils_1 = require(\"../common/Utils\");\nconst LOG_ID = \"GROUPS/SVCE - \";\nlet GroupsService = \n/**\n * @module\n * @name GroupsService\n * @version 1.67.1 \n * @public\n * @description\n *\t\tThis service manages groups which allow to create his own lists of contacts.\n *\t\t<br><br>\n *\t\tThe main methods proposed in that module allow to: <br>\n *\t\t- Get all groups of the user\n *\t\t- Create a new group\n *\t\t- Delete an existing group\n *\t\t- Add a contact in a group\n *\t\t- Remove a contact from a group\n */\nclass GroupsService {\n    constructor(_eventEmitter, _logger, _startConfig) {\n        this.ready = false;\n        this._startConfig = _startConfig;\n        this._xmpp = null;\n        this._rest = null;\n        this._s2s = null;\n        this._options = {};\n        this._useXMPP = false;\n        this._useS2S = false;\n        this._groups = null;\n        this._eventEmitter = _eventEmitter;\n        this._logger = _logger;\n        this._eventEmitter.on(\"evt_internal_hdle_groupcreated\", this._onGroupCreated.bind(this));\n        this._eventEmitter.on(\"evt_internal_hdle_groupdeleted\", this._onGroupDeleted.bind(this));\n        this._eventEmitter.on(\"evt_internal_hdle_groupupdated\", this._onGroupUpdated.bind(this));\n        this._eventEmitter.on(\"evt_internal_hdle_useraddedingroup\", this._onUserAddedInGroup.bind(this));\n        this._eventEmitter.on(\"evt_internal_hdle_userremovedfromgroup\", this._onUserRemovedFromGroup.bind(this));\n        this.ready = false;\n    }\n    get startConfig() {\n        return this._startConfig;\n    }\n    start(_options, _core) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                that._xmpp = _core._xmpp;\n                that._rest = _core._rest;\n                that._options = _options;\n                that._s2s = _core._s2s;\n                that._useXMPP = that._options.useXMPP;\n                that._useS2S = that._options.useS2S;\n                that._groups = [];\n                /*\n                                 that._eventEmitter.removeListener(\"evt_internal_groupcreated\", that._onGroupCreated);\n                                 that._eventEmitter.removeListener(\"evt_internal_groupdeleted\", that._onGroupDeleted);\n                                 that._eventEmitter.removeListener(\"evt_internal_groupupdated\", that._onGroupUpdated);\n                                 that._eventEmitter.removeListener(\"evt_internal_useraddedingroup\", that._onUserAddedInGroup);\n                                 that._eventEmitter.removeListener(\"evt_internal_userremovedfromgroup\", that._onUserRemovedFromGroup);\n                \n                                 that._eventEmitter.on(\"evt_internal_groupcreated\", that._onGroupCreated.bind(that));\n                                that._eventEmitter.on(\"evt_internal_groupdeleted\", that._onGroupDeleted.bind(that));\n                                that._eventEmitter.on(\"evt_internal_groupupdated\", that._onGroupUpdated.bind(that));\n                                that._eventEmitter.on(\"evt_internal_useraddedingroup\", that._onUserAddedInGroup.bind(that));\n                                that._eventEmitter.on(\"evt_internal_userremovedfromgroup\", that._onUserRemovedFromGroup.bind(that));\n                */\n                that.ready = true;\n                resolve();\n            }\n            catch (err) {\n                return reject();\n            }\n        });\n    }\n    stop() {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                that._xmpp = null;\n                that._rest = null;\n                that._groups = null;\n                /*\n                                that._eventEmitter.removeListener(\"evt_internal_groupcreated\", that._onGroupCreated);\n                                that._eventEmitter.removeListener(\"evt_internal_groupdeleted\", that._onGroupDeleted);\n                                that._eventEmitter.removeListener(\"evt_internal_groupupdated\", that._onGroupUpdated);\n                                that._eventEmitter.removeListener(\"evt_internal_useraddedingroup\", that._onUserAddedInGroup);\n                                that._eventEmitter.removeListener(\"evt_internal_userremovedfromgroup\", that._onUserRemovedFromGroup);\n                */\n                that.ready = false;\n                resolve();\n            }\n            catch (err) {\n                return reject(err);\n            }\n        });\n    }\n    /**\n    * @public\n    * @method createGroup\n    * @instance\n    * @param {string} name The name of the group to create\n    * @param {string} comment The comment of the group to create\n    * @param {boolean} isFavorite If true, the group is flagged as favorite\n    * @description\n    *      Create a new group\n    * @async\n    * @return {Promise<Object, ErrorManager>}\n    * @fulfil {Group} - Created group object or an error object depending on the result\n    * @category async\n    */\n    createGroup(name, comment, isFavorite) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            if (typeof isFavorite === \"undefined\") {\n                isFavorite = false;\n            }\n            if (!name) {\n                that._logger.log(\"warn\", LOG_ID + \"(createGroup) bad or empty 'name' parameter\");\n                that._logger.log(\"internalerror\", LOG_ID + \"(createGroup) bad or empty 'name' parameter : \", name);\n                return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n            }\n            that._rest.createGroup(name, comment, isFavorite).then(group => {\n                that._logger.log(\"debug\", LOG_ID + \"(createGroup) creation successfull\");\n                that._groups.push(group);\n                resolve(group);\n            }, err => {\n                that._logger.log(\"error\", LOG_ID + \"(createGroup) error\");\n                return reject(err);\n            });\n        });\n    }\n    /**\n    * @public\n    * @method deleteGroup\n    * @instance\n    * @param {Object} group The group to delete\n    * @description\n    * \t\tDelete an owned group\n    * @async\n    * @return {Promise<Object, ErrorManager>}\n    * @fulfil {Group} - Deleted group object or an error object depending on the result\n    * @category async\n    */\n    deleteGroup(group) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            if (!group) {\n                that._logger.log(\"warn\", LOG_ID + \"(deleteGroup) bad or empty 'group' parameter.\");\n                that._logger.log(\"internalerror\", LOG_ID + \"(deleteGroup) bad or empty 'group' parameter : \", group);\n                return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n            }\n            that._rest.deleteGroup(group.id).then(function () {\n                let foundIndex = that._groups.findIndex(el => {\n                    return el.id === group.id;\n                });\n                if (foundIndex > -1) {\n                    let groupDeleted = that._groups.splice(foundIndex, 1);\n                    that._logger.log(\"info\", LOG_ID + \"(deleteGroup) delete \" + groupDeleted.length + \" group successfully\");\n                    resolve(groupDeleted[0]);\n                }\n                else {\n                    resolve(null);\n                }\n            }).catch(function (err) {\n                that._logger.log(\"error\", LOG_ID + \"(deleteGroup) error\");\n                return reject(err);\n            });\n        });\n    }\n    /**\n     * @public\n     * @method deleteAllGroups\n     * @instance\n     * @description\n     *    Delete all existing owned groups <br/>\n     *    Return a promise\n     * @return {Object} Nothing or an error object depending on the result\n     */\n    deleteAllGroups() {\n        let that = this;\n        return new Promise((resolve, reject) => {\n            const promiseQueue = [];\n            const groups = that.getAll();\n            if (!Array.isArray(groups) || (groups && groups.length === 0)) {\n                return resolve({\n                    code: 0,\n                    label: 'OK'\n                });\n            }\n            groups.forEach(group => {\n                promiseQueue.push(that.deleteGroup(group).catch(() => { }));\n            });\n            Promise.all(promiseQueue)\n                .then(() => {\n                that._logger.log(\"info\", LOG_ID + \"[deleteAllGroups] :: All groups deleted successfully\");\n                return resolve({\n                    code: 0,\n                    label: 'OK'\n                });\n            })\n                .catch(err => {\n                that._logger.log(\"error\", LOG_ID + \"[deleteAllGroups] :: Error when deleting all groups\");\n                return reject(err);\n            });\n        });\n    }\n    /**\n     * @public\n     * @method updateGroupName\n     * @instance\n     * @param {Object} group The group to update\n     * @param {string} name The new name of the group\n     * @description\n     * \t\tUpdate the name of a group\n     * @async\n     * @return {Promise<Object, ErrorManager>}\n     * @fulfil {Group} - Updated group object or an error object depending on the result\n     * @category async\n     */\n    updateGroupName(group, name) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            if (!group || !name) {\n                if (!group) {\n                    that._logger.log(\"warn\", LOG_ID + \"(updateGroupName) bad or empty 'group' parameter\");\n                    that._logger.log(\"internalerror\", LOG_ID + \"(updateGroupName) bad or empty 'group' parameter : \", group);\n                }\n                if (!name) {\n                    that._logger.log(\"warn\", LOG_ID + \"(updateGroupName) bad or empty 'name' parameter.\");\n                    that._logger.log(\"internalerror\", LOG_ID + \"(updateGroupName) bad or empty 'name' parameter : \", name);\n                }\n                return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n            }\n            else if (group.name === name) {\n                that._logger.log(\"debug\", LOG_ID + \"(updateGroupName) name of group is already defined, nothing is done\");\n                resolve(group);\n            }\n            else {\n                that._rest.updateGroupName(group.id, name).then((group) => {\n                    let foundIndex = that._groups.findIndex(el => {\n                        return el.id === group.id;\n                    });\n                    if (foundIndex > -1) {\n                        that._groups[foundIndex].name = group.name;\n                        that._logger.log(\"internal\", LOG_ID + \"(updateGroupName) update name to \" + group.name + \" of group with id \" + group.id + \" successfully\");\n                        resolve(that._groups[foundIndex]);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                }).catch(function (err) {\n                    that._logger.log(\"error\", LOG_ID + \"(updateGroupName) error\");\n                    return reject(err);\n                });\n            }\n        });\n    }\n    /**\n     * @private\n     * @description\n     *      Internal method\n     */\n    getGroups() {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            that._rest.getGroups().then((listOfGroups) => {\n                let promises = [];\n                listOfGroups.forEach((group) => {\n                    promises.push(new Promise(function (res, rej) {\n                        that._rest.getGroup(group.id).then(groupWithUsersInformation => {\n                            res(groupWithUsersInformation);\n                        }, err => {\n                            return rej(err);\n                        });\n                    }));\n                });\n                Promise.all(promises).then(groups => {\n                    that._groups = groups;\n                    that._logger.log(\"info\", LOG_ID + \"(getGroups) get successfully\");\n                    resolve(that._groups);\n                }, err => {\n                    return reject(err);\n                });\n            }, err => {\n                that._logger.log(\"error\", LOG_ID + \"(getGroups) Error.\");\n                that._logger.log(\"internalerror\", LOG_ID + \"(getGroups) Error : \", err);\n                return reject(err);\n            });\n        });\n    }\n    /**\n    * @public\n    * @method setGroupAsFavorite\n    * @since 1.67.0\n    * @instance\n    * @param {Object} group The group\n    * @description\n    * \t\tSet a group as a favorite one of the curent loggued in user.\n    * @async\n    * @return {Promise<Object, ErrorManager>}\n    * @fulfil {Group} - Updated group or an error object depending on the result\n    * @category async\n    */\n    setGroupAsFavorite(group) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            if (!group) {\n                that._logger.log(\"warn\", LOG_ID + \"(setGroupAsFavorite) bad or empty 'group' parameter.\");\n                that._logger.log(\"internalerror\", LOG_ID + \"(setGroupAsFavorite) bad or empty 'group' parameter : \", group);\n                reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n                return;\n            }\n            that._logger.log(\"internal\", LOG_ID + \"(setGroupAsFavorite) param group : \", group);\n            that._rest.setFavoriteGroup(group, true).then((groupRetrieved) => {\n                that._logger.log(\"debug\", LOG_ID + \"(setGroupAsFavorite) set favorite group successfull\");\n                that._logger.log(\"internal\", LOG_ID + \"(setGroupAsFavorite) set favorite group successfull, group : \", groupRetrieved);\n                resolve(groupRetrieved);\n            }, err => {\n                return reject(err);\n            });\n        });\n    }\n    /**\n     * @public\n     * @method unsetGroupAsFavorite\n     * @since 1.67.0\n     * @instance\n     * @param {Object} group The group\n     * @description\n     * \t\tRemove the favorite state of a group of the curent loggued in user.\n     * @async\n     * @return {Promise<Object, ErrorManager>}\n     * @fulfil {Group} - Updated group or an error object depending on the result\n     * @category async\n     */\n    unsetGroupAsFavorite(group) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            if (!group) {\n                that._logger.log(\"warn\", LOG_ID + \"(unsetGroupAsFavorite) bad or empty 'group' parameter.\");\n                that._logger.log(\"internalerror\", LOG_ID + \"(unsetGroupAsFavorite) bad or empty 'group' parameter : \", group);\n                reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n                return;\n            }\n            that._logger.log(\"internal\", LOG_ID + \"(unsetGroupAsFavorite) param group : \", group);\n            that._rest.setFavoriteGroup(group, false).then((groupRetrieved) => {\n                that._logger.log(\"debug\", LOG_ID + \"(unsetGroupAsFavorite) unset favorite group successfull\");\n                that._logger.log(\"internal\", LOG_ID + \"(unsetGroupAsFavorite) unset favorite group successfull, group : \", groupRetrieved);\n                resolve(groupRetrieved);\n            }, err => {\n                return reject(err);\n            });\n        });\n    }\n    /**\n     * @public\n     * @method addUserInGroup\n     * @instance\n     * @param {Contact} contact The user to add in group\n     * @param {Object} group The group\n     * @description\n     * \t\tAdd a contact in a group\n     * @async\n     * @return {Promise<Object, ErrorManager>}\n     * @fulfil {Group} - Updated group with the new contact added or an error object depending on the result\n     * @category async\n     */\n    addUserInGroup(contact, group) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!contact) {\n                    that._logger.log(\"warn\", LOG_ID + \"(addUserInGroup) bad or empty 'contact' parameter.\");\n                    that._logger.log(\"internalerror\", LOG_ID + \"(addUserInGroup) bad or empty 'contact' parameter : \", contact);\n                    return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n                }\n                else if (!group) {\n                    that._logger.log(\"warn\", LOG_ID + \"(addUserInGroup) bad or empty 'group' parameter.\");\n                    that._logger.log(\"internalerror\", LOG_ID + \"(addUserInGroup) bad or empty 'group' parameter : \", group);\n                    return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n                }\n                that._logger.log(\"internal\", LOG_ID + \"(addUserInGroup) contact : \", contact, \", group : \", group);\n                let contactIndex = group.users.findIndex(user => user.id === contact.id);\n                if (contactIndex === -1) {\n                    yield that._rest.addUserInGroup(contact.id, group.id).then((groupUpdated) => __awaiter(this, void 0, void 0, function* () {\n                        yield that._rest.getGroup(groupUpdated.id).then((groupRetrieved) => {\n                            let foundIndex = that._groups.findIndex(groupItem => groupItem.id === groupRetrieved.id);\n                            that._groups[foundIndex] = groupRetrieved;\n                            resolve(groupRetrieved);\n                        }, err => {\n                            return reject(err);\n                        });\n                    }), err => {\n                        that._logger.log(\"error\", LOG_ID + \"(addUserInGroup) error.\");\n                        that._logger.log(\"internalerror\", LOG_ID + \"(addUserInGroup) error : \", err);\n                        return reject(err);\n                    });\n                }\n                else {\n                    that._logger.log(\"warn\", LOG_ID + \"(addUserInGroup) User is already a member of the group\");\n                    return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n                }\n            });\n        });\n    }\n    /**\n    * @public\n    * @method removeUserFromGroup\n    * @instance\n    * @param {Contact} contact The user to remove from the group\n    * @param {Object} group The destination group\n    * @description\n    *\t\tRemove a contact from a group\n    * @async\n    * @return {Promise<Object, ErrorManager>}\n    * @fulfil {Group} - Updated group without the removed contact or an error object depending on the result\n    * @category async\n    */\n    removeUserFromGroup(contact, group) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!contact) {\n                    that._logger.log(\"warn\", LOG_ID + \"(removeUserFromGroup) bad or empty 'contact' parameter.\");\n                    that._logger.log(\"internalerror\", LOG_ID + \"(removeUserFromGroup) bad or empty 'contact' parameter : \", contact);\n                    return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n                }\n                else if (!group) {\n                    that._logger.log(\"warn\", LOG_ID + \"(removeUserFromGroup) bad or empty 'group' parameter.\");\n                    that._logger.log(\"internalerror\", LOG_ID + \"(removeUserFromGroup) bad or empty 'group' parameter : \", group);\n                    return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n                }\n                that._logger.log(\"internal\", LOG_ID + \"(removeUserFromGroup) contact : \", contact, \", group : \", group);\n                let contactIndex = group.users.findIndex(user => user.id == contact.id);\n                if (contactIndex > -1) {\n                    yield that._rest.removeUserFromGroup(contact.id, group.id).then((group) => __awaiter(this, void 0, void 0, function* () {\n                        yield that._rest.getGroup(group.id).then((group) => {\n                            let foundIndex = that._groups.findIndex(groupItem => groupItem.id === group.id);\n                            that._groups[foundIndex] = group;\n                            resolve(group);\n                        }, err => {\n                            return reject(err);\n                        });\n                    }), err => {\n                        that._logger.log(\"error\", LOG_ID + \"(removeUserFromGroup) error\");\n                        return reject(err);\n                    });\n                }\n                else {\n                    that._logger.log(\"warn\", LOG_ID + \"(removeUserFromGroup) contact not found in that group\");\n                    resolve(group);\n                }\n            });\n        });\n    }\n    /**\n     * @public\n     * @method getAll\n     * @instance\n     * @return {Array} The list of existing groups with following fields: id, name, comment, isFavorite, owner, creationDate, array of users in the group\n     * @description\n     *  Return the list of existing groups\n     */\n    getAll() {\n        return this._groups;\n    }\n    /**\n     * @public\n     * @method getFavoriteGroups\n     * @instance\n     * @return {Array} The list of favorite groups with following fields: id, name, comment, isFavorite, owner, creationDate, array of users in the group\n     * @description\n     *  Return the list of favorite groups\n     */\n    getFavoriteGroups() {\n        return this._groups.filter((group) => {\n            return group.isFavorite;\n        });\n    }\n    /**\n     * @public\n     * @method getGroupById\n     * @instance\n     * @param {String} group Id of the group to found\n     * @return {Object} The group found if exist or undefined\n     * @description\n     *  Return a group by its id\n     */\n    getGroupById(id) {\n        return this._groups.find((group) => {\n            return group.id === id;\n        });\n    }\n    /**\n     * @public\n     * @method getGroupByName\n     * @instance\n     * @param {String} name Name of the group to found\n     * @return {Object} The group found if exist or undefined\n     * @description\n     *  Return a group by its id\n     */\n    getGroupByName(name) {\n        return this._groups.find((group) => {\n            return group.name === name;\n        });\n    }\n    /**\n     * @private\n     * @method _onGroupCreated\n     * @instance\n     * @param {Object} data Contains the groupId of the created group\n     * @description\n     *\t\tMethod called when a group is created\n     */\n    _onGroupCreated(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            yield this._rest.getGroup(data.groupId).then((groupCreated) => {\n                //that._logger.log(\"internal\", LOG_ID + \"(_onGroupCreated) Group created : \", groupCreated.name);\n                let foundIndex = that._groups.findIndex(groupItem => groupItem.id === groupCreated.id);\n                if (foundIndex > -1) {\n                    that._groups[foundIndex] = groupCreated;\n                }\n                else {\n                    that._groups.push(groupCreated);\n                }\n                that._eventEmitter.emit(\"evt_internal_groupcreated\", groupCreated);\n            });\n        });\n    }\n    /**\n     * @private\n     * @method _onGroupDeleted\n     * @instance\n     * @param {Object} data Contains the groupId of the deleted group\n     * @description\n     *\t\tMethod called when a group is deleted\n     */\n    _onGroupDeleted(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            let foundIndex = that._groups.findIndex(el => {\n                return el.id === data.groupId;\n            });\n            if (foundIndex > -1) {\n                let groupDeleted = that._groups.splice(foundIndex, 1);\n                //that._logger.log(\"internal\", LOG_ID + \"(_onGroupDeleted) Group deleted : \", groupDeleted[0].name);\n                that._eventEmitter.emit(\"evt_internal_groupdeleted\", groupDeleted[0]);\n            }\n            else {\n                that._eventEmitter.emit(\"evt_internal_groupdeleted\", null);\n            }\n        });\n    }\n    /**\n     * @private\n     * @method _onGroupUpdated\n     * @instance\n     * @param {Object} data Contains the groupId of the updated group\n     * @description\n     *\t\tMethod called when a group is updated (name, comment, isFavorite)\n     */\n    _onGroupUpdated(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            yield this._rest.getGroup(data.groupId).then((groupUpdated) => {\n                //that._logger.log(\"internal\", LOG_ID + \"(_onGroupUpdated) Group updated\", groupUpdated.name);\n                let foundIndex = that._groups.findIndex(groupItem => groupItem.id === groupUpdated.id);\n                if (foundIndex > -1) {\n                    that._groups[foundIndex] = groupUpdated;\n                }\n                else {\n                    that._groups.push(groupUpdated);\n                }\n                that._eventEmitter.emit(\"evt_internal_groupupdated\", groupUpdated);\n            });\n        });\n    }\n    /**\n     * @private\n     * @method _onUserAddedInGroup\n     * @instance\n     * @param {Object} data Contains the groupId and the userId\n     * @description\n     *\t\tMethod called when a user is added to a group\n     */\n    _onUserAddedInGroup(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            yield this._rest.getGroup(data.groupId).then((groupUpdated) => {\n                //that._logger.log(\"internal\", LOG_ID + \"(_onUserAddedInGroup) User added in group\", groupUpdated.name);\n                let foundIndex = that._groups.findIndex(groupItem => groupItem.id === groupUpdated.id);\n                if (foundIndex > -1) {\n                    that._groups[foundIndex] = groupUpdated;\n                }\n                else {\n                    that._groups.push(groupUpdated);\n                }\n                let contactAddedIndex = groupUpdated.users.findIndex(userItem => userItem.id === data.userId);\n                let contact = groupUpdated.users[contactAddedIndex];\n                that._eventEmitter.emit(\"evt_internal_useraddedingroup\", groupUpdated, contact);\n            });\n        });\n    }\n    /**\n     * @private\n     * @method _onUserRemovedFromGroup\n     * @instance\n     * @param {Object} data Contains the groupId and the userId\n     * @description\n     *\t\tMethod called when a user is removed from a group\n     */\n    _onUserRemovedFromGroup(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            yield this._rest.getGroup(data.groupId).then((groupUpdated) => {\n                //that._logger.log(\"internal\", LOG_ID + \"(_onUserRemovedFromGroup) User removed from group\", groupUpdated.name);\n                let foundIndex = that._groups.findIndex(groupItem => groupItem.id === groupUpdated.id);\n                let contact = null;\n                if (foundIndex > -1) {\n                    let contactRemovedIndex = that._groups[foundIndex].users.findIndex(userItem => userItem.id === data.userId);\n                    contact = that._groups[foundIndex].users[contactRemovedIndex];\n                    that._groups[foundIndex] = groupUpdated;\n                }\n                else {\n                    that._groups.push(groupUpdated);\n                }\n                that._eventEmitter.emit(\"evt_internal_userremovedfromgroup\", groupUpdated, contact);\n            });\n        });\n    }\n};\nGroupsService = __decorate([\n    Utils_1.logEntryExit(LOG_ID),\n    Utils_1.isStarted([])\n    /**\n     * @module\n     * @name GroupsService\n     * @version 1.67.1 \n     * @public\n     * @description\n     *\t\tThis service manages groups which allow to create his own lists of contacts.\n     *\t\t<br><br>\n     *\t\tThe main methods proposed in that module allow to: <br>\n     *\t\t- Get all groups of the user\n     *\t\t- Create a new group\n     *\t\t- Delete an existing group\n     *\t\t- Add a contact in a group\n     *\t\t- Remove a contact from a group\n     */\n], GroupsService);\nexports.GroupsService = GroupsService;\nmodule.exports.GroupsService = GroupsService;\n//# sourceMappingURL=GroupsService.js.map"]},"metadata":{},"sourceType":"script"}