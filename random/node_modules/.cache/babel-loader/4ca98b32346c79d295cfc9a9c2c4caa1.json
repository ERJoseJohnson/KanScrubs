{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @class\r\n * @name Message\r\n * @description\r\n *      This class is used to represent a message in a conversation <br/>\r\n *      A message is exchanged when discussing in One-to-One or in a Bubble.\r\n */\n\nclass Message {\n  constructor(id, type, date, from, side, data, status, fileId, isMarkdown, subject, attention1 = false) {\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} id The ID of the Message\r\n     * @instance\r\n     */\n    this.id = id;\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} fromJid The JID (without the resource) of the user who sent this Message. Can be the identity of a user or a user inside a Bubble\r\n     * @instance\r\n     */\n\n    this.fromJid = from && from.jid_im;\n    /**\r\n     * @public\r\n     * @property {Side} side The message originator\r\n     * @instance\r\n     * @readonly\r\n     */\n\n    this.side = side;\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} resource The resource of the user who sent this message\r\n     * @instance\r\n     */\n\n    this.resource = \"\";\n    /**\r\n     * @public\r\n     * @property {Date} date The creation date of the message\r\n     * @instance\r\n     * @readonly\r\n     */\n\n    this.date = date;\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} toJid The JID of the recipient of this message\r\n     * @instance\r\n     */\n\n    this.toJid = \"\";\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} type The type of the message. Can be `chat` or `groupchat`\r\n     * @instance\r\n     */\n\n    this.type = type;\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} content The content of this message (text)\r\n     * @instance\r\n     */\n\n    this.content = data;\n    /**\r\n     * @private\r\n     * @instance\r\n     * @readonly\r\n     */\n\n    this.status = status;\n    /**\r\n     * @public\r\n     * @property {ReceiptStatus} receiptStatus The state of the receipt\r\n     * @instance\r\n     * @readonly\r\n     */\n\n    this.receiptStatus = Message.ReceiptStatus.NONE;\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} lang The language of the content for this  Message (if specified)\r\n     * @instance\r\n     */\n\n    this.lang = \"\";\n    /**\r\n     * @public\r\n     * @property {string} fileId An attached file Id (if exists)\r\n     * @instance\r\n     * @readonly\r\n     */\n\n    this.fileId = fileId;\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {Boolean} cc True if the message is a carbon-copy (duplicated message due to several resources used)\r\n     * @instance\r\n     */\n\n    this.cc = false;\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} cctype The Carbon-copy type. Can be `sent` or `received`\r\n     * @instance\r\n     */\n\n    this.cctype = \"sent\";\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {Boolean} isEvent True if the message is an event (a specific admin message in Bubble - should not be considered as text message)\r\n     * @instance\r\n     */\n\n    this.isEvent = false;\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} event Contains the name of the event (only filled if isEvent=true)\r\n     * @instance\r\n     */\n\n    this.event = \"\";\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {Object[]} alternativeContent The list of alternative contents\r\n     * @property {String} alternativeContent.message The alternative message content\r\n     * @property {String} alternativeContent.type The alternative message content-type\r\n     * @instance\r\n     */\n\n    this.alternativeContent = null;\n    /**\r\n     * @public\r\n     * @property {boolean} isMarkdown If the message is a markdown type message\r\n     * @readonly\r\n     */\n\n    this.isMarkdown = isMarkdown;\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} subject The subject of the message (if provided)\r\n     * @instance\r\n     */\n\n    this.subject = subject;\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {Object} oob The description of an attached file to the message (if provided)\r\n     * @property {String} oob.url The file URL\r\n     * @property {String} oob.mime The file mime-type\r\n     * @property {String} oob.filename The file name\r\n     * @property {Number} oob.filesize The file size\r\n     * @instance\r\n     */\n\n    this.oob = null;\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} fromBubbleJid The JID of the bubble that received the message. (Only for `groupchat` message)\r\n     * @instance\r\n     */\n\n    this.fromBubbleJid = \"\";\n    /**\r\n     * @public\r\n     * @readonly\r\n     * @property {string} fromBubbleUserJid The JID of the user who send the message without the JID of the Bubble. (Only for `groupchat` message)\r\n     * @instance\r\n     */\n\n    this.fromBubbleUserJid = null;\n    /**\r\n     * @public\r\n     * @property {object} attention Boolean to indicate if the current logged user is mentionned in the message.\r\n     * @readonly\r\n     * @instance\r\n     */\n\n    this.attention = attention1;\n  }\n  /**\r\n   * @private\r\n   * @method\r\n   * @instance\r\n   */\n\n\n  static create(id, date, from, side, data, status, isMarkdown, subject) {\n    // convert emojione from unicode to short\n    //let message = $filter(\"emojiUnicodeToShort\")(data);\n    const message = data; //return new Message(id, Message.Type.CHAT, date, from, side, message, status, null, isMarkdown, subject);\n\n    return Message.MessageFactory()({\n      id,\n      type: Message.Type.CHAT,\n      date,\n      from,\n      side,\n      data: message,\n      status,\n      fileId: null,\n      isMarkdown,\n      subject\n    });\n  }\n  /**\r\n   * @private\r\n   * @method\r\n   * @instance\r\n   */\n\n\n  static createFileSharingMessage(id, date, from, side, data, status, fileId) {\n    // convert emojione from unicode to short\n    let message = data; //return new Message(id, Message.Type.FS, date, from, side, message, status, fileId);\n\n    return Message.MessageFactory()({\n      id,\n      type: Message.Type.FS,\n      date,\n      from,\n      side,\n      data: message,\n      status,\n      fileId\n    });\n  }\n  /**\r\n   * @private\r\n   * @method\r\n   * @instance\r\n   */\n\n\n  static createWebRTCMessage(id, date, from, side, data, status) {\n    //return new Message(id, Message.Type.WEBRTC, date, from, side, data, status);\n    return Message.MessageFactory()({\n      id,\n      type: Message.Type.WEBRTC,\n      date,\n      from,\n      side,\n      data,\n      status\n    });\n  }\n  /**\r\n   * @private\r\n   * @method\r\n   * @instance\r\n   */\n\n\n  static createFTMessage(id, date, from, side, data, status, fileTransfer) {\n    //let message = new Message(id, Message.Type.FT, date, from, side, data, status);\n    let message = Message.MessageFactory()({\n      id,\n      type: Message.Type.FT,\n      date,\n      from,\n      side,\n      data,\n      status\n    });\n    message.fileTransfer = fileTransfer;\n    return message;\n  }\n  /**\r\n   * @private\r\n   * @method\r\n   * @instance\r\n   */\n\n\n  static createBubbleAdminMessage(id, date, from, type) {\n    let data = type + \"MsgRoom\";\n    let side = Message.Side.ADMIN; //let message = Message.create(id, date, from, side, data, false);\n\n    let message = Message.MessageFactory()({\n      id,\n      date,\n      from,\n      side,\n      data,\n      status: false\n    });\n    return message;\n  }\n  /**\r\n   * @private\r\n   * @method\r\n   * @instance\r\n   */\n\n\n  static createRecordingAdminMessage(id, date, from, type, cmd) {\n    let data = type + \"Recording\";\n\n    if (cmd) {\n      data = data + cmd;\n    }\n\n    let side = Message.Side.ADMIN; //let message = new Message(id, Message.Type.RECORDING, date, from, side, data, false);\n\n    let message = Message.MessageFactory()({\n      id,\n      type: Message.Type.RECORDING,\n      date,\n      from,\n      side,\n      data,\n      status: false\n    });\n    return message;\n  }\n  /**\r\n   * Method extract fileId part of URL\r\n   *\r\n   * @private\r\n   * @param {string} url\r\n   * @returns {string}\r\n   *\r\n   * @memberof Conversation\r\n   */\n\n\n  static extractFileIdFromUrl(url) {\n    let parts = url.split(\"/\");\n    let fileDescriptorId = parts.pop() || parts.pop();\n    return fileDescriptorId;\n  }\n\n  updateBubble(data) {\n    let that = this;\n\n    if (data) {\n      let bubbleproperties = Object.getOwnPropertyNames(that); //console.log(\"updateBubble update Bubble with : \", data[\"id\"]);\n\n      Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\n        //console.log(val + \" -> \" + data[val]);\n        if (bubbleproperties.find(el => {\n          return val == el;\n        })) {\n          //console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class : \", val, \" -> \", data[val]);\n          that[val] = data[val];\n        } else {\n          //console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class can not update Bubble with : \", val, \" -> \", data[val]);\n          console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class can not update Bubble with : \");\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\r\n   * @function\r\n   * @public\r\n   * @name MessageFactory\r\n   * @description\r\n   * This class is used to create a message from data object\r\n   */\n\n\n  static MessageFactory() {\n    //constructor(id, type, date, from, side, data, status, fileId?, isMarkdown?, subject?) {\n    return data => {\n      let message = new Message(data.id, data.type, data.date, data.from, data.side, data.data, data.status, data.fileId, data.isMarkdown, data.subject, data.attention);\n\n      if (data) {\n        let bubbleproperties = Object.getOwnPropertyNames(message);\n        Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\n          //console.log(val + \" -> \" + data[val]);\n          if (!bubbleproperties.find(el => {\n            return val == el;\n          })) {\n            //console.log(\"WARNING : One property of the parameter of MessageFactory method is not present in the Bubble class : \", val, \" -> \", data[val]);\n            // from become fromJid and data become content\n            if (val != \"from\" && val != \"data\") {\n              console.log(\"WARNING : One property of the parameter of MessageFactory method is not present in the Message class : \", val);\n            }\n          }\n        });\n      }\n\n      return message;\n    };\n  }\n\n}\n\nexports.Message = Message;\n/*static ReceiptStatus: any;\r\nstatic Type: any;\r\nstatic Side: any;\r\nstatic ReceiptStatusText: string[];\r\n// */\n\n/**\r\n * @public\r\n * @enum {number}\r\n * @readonly\r\n */\n\nMessage.Type = {\n  /** A chat message */\n  CHAT: {\n    key: 0,\n    value: \"Chat\"\n  },\n\n  /** A file message */\n  FILE: {\n    key: 1,\n    value: \"File\"\n  },\n\n  /** A file message */\n  FS: {\n    key: 2,\n    value: \"FileSharing\"\n  },\n\n  /** A WebRTC message */\n  WEBRTC: {\n    key: 3,\n    value: \"WebRTC CAll\"\n  },\n\n  /** A Recording message */\n  RECORDING: {\n    key: 4,\n    value: \"Recording\"\n  }\n};\n/**\r\n * @public\r\n * @enum {number}\r\n * @readonly\r\n */\n\nMessage.ReceiptStatus = {\n  /** No receipt received yet */\n  NONE: 0,\n\n  /** No receipt received after a while (The server doesn't answer) */\n  ERROR: 1,\n\n  /** Receipt in progress */\n  IN_PROGRESS: 2,\n\n  /** The server has confirmed the reception of the message */\n  SENT: 3,\n\n  /** The message has been received but not read */\n  UNREAD: 4,\n\n  /** The message has been read */\n  READ: 5\n};\n/**\r\n * @public\r\n * @enum {string}\r\n * @readonly\r\n */\n\nMessage.Side = {\n  /** Message is from a recipient */\n  LEFT: \"L\",\n\n  /** Message is from me */\n  RIGHT: \"R\",\n\n  /** Specific admin message */\n  ADMIN: \"ADMIN\"\n};\n/**\r\n * @private\r\n */\n\nMessage.ReceiptStatusText = [\"none\", \"ko\", \"inProgress\", \"sent\", \"received\", \"read\"];\nmodule.exports.Message = Message;","map":{"version":3,"sources":["../../../src/lib/common/models/Message.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @class\r\n * @name Message\r\n * @description\r\n *      This class is used to represent a message in a conversation <br/>\r\n *      A message is exchanged when discussing in One-to-One or in a Bubble.\r\n */\r\nclass Message {\r\n    constructor(id, type, date, from, side, data, status, fileId, isMarkdown, subject, attention1 = false) {\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} id The ID of the Message\r\n         * @instance\r\n         */\r\n        this.id = id;\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} fromJid The JID (without the resource) of the user who sent this Message. Can be the identity of a user or a user inside a Bubble\r\n         * @instance\r\n         */\r\n        this.fromJid = from && from.jid_im;\r\n        /**\r\n         * @public\r\n         * @property {Side} side The message originator\r\n         * @instance\r\n         * @readonly\r\n         */\r\n        this.side = side;\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} resource The resource of the user who sent this message\r\n         * @instance\r\n         */\r\n        this.resource = \"\";\r\n        /**\r\n         * @public\r\n         * @property {Date} date The creation date of the message\r\n         * @instance\r\n         * @readonly\r\n         */\r\n        this.date = date;\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} toJid The JID of the recipient of this message\r\n         * @instance\r\n         */\r\n        this.toJid = \"\";\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} type The type of the message. Can be `chat` or `groupchat`\r\n         * @instance\r\n         */\r\n        this.type = type;\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} content The content of this message (text)\r\n         * @instance\r\n         */\r\n        this.content = data;\r\n        /**\r\n         * @private\r\n         * @instance\r\n         * @readonly\r\n         */\r\n        this.status = status;\r\n        /**\r\n         * @public\r\n         * @property {ReceiptStatus} receiptStatus The state of the receipt\r\n         * @instance\r\n         * @readonly\r\n         */\r\n        this.receiptStatus = Message.ReceiptStatus.NONE;\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} lang The language of the content for this  Message (if specified)\r\n         * @instance\r\n         */\r\n        this.lang = \"\";\r\n        /**\r\n         * @public\r\n         * @property {string} fileId An attached file Id (if exists)\r\n         * @instance\r\n         * @readonly\r\n         */\r\n        this.fileId = fileId;\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {Boolean} cc True if the message is a carbon-copy (duplicated message due to several resources used)\r\n         * @instance\r\n         */\r\n        this.cc = false;\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} cctype The Carbon-copy type. Can be `sent` or `received`\r\n         * @instance\r\n         */\r\n        this.cctype = \"sent\";\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {Boolean} isEvent True if the message is an event (a specific admin message in Bubble - should not be considered as text message)\r\n         * @instance\r\n         */\r\n        this.isEvent = false;\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} event Contains the name of the event (only filled if isEvent=true)\r\n         * @instance\r\n         */\r\n        this.event = \"\";\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {Object[]} alternativeContent The list of alternative contents\r\n         * @property {String} alternativeContent.message The alternative message content\r\n         * @property {String} alternativeContent.type The alternative message content-type\r\n         * @instance\r\n         */\r\n        this.alternativeContent = null;\r\n        /**\r\n         * @public\r\n         * @property {boolean} isMarkdown If the message is a markdown type message\r\n         * @readonly\r\n         */\r\n        this.isMarkdown = isMarkdown;\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} subject The subject of the message (if provided)\r\n         * @instance\r\n         */\r\n        this.subject = subject;\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {Object} oob The description of an attached file to the message (if provided)\r\n         * @property {String} oob.url The file URL\r\n         * @property {String} oob.mime The file mime-type\r\n         * @property {String} oob.filename The file name\r\n         * @property {Number} oob.filesize The file size\r\n         * @instance\r\n         */\r\n        this.oob = null;\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} fromBubbleJid The JID of the bubble that received the message. (Only for `groupchat` message)\r\n         * @instance\r\n         */\r\n        this.fromBubbleJid = \"\";\r\n        /**\r\n         * @public\r\n         * @readonly\r\n         * @property {string} fromBubbleUserJid The JID of the user who send the message without the JID of the Bubble. (Only for `groupchat` message)\r\n         * @instance\r\n         */\r\n        this.fromBubbleUserJid = null;\r\n        /**\r\n         * @public\r\n         * @property {object} attention Boolean to indicate if the current logged user is mentionned in the message.\r\n         * @readonly\r\n         * @instance\r\n         */\r\n        this.attention = attention1;\r\n    }\r\n    /**\r\n     * @private\r\n     * @method\r\n     * @instance\r\n     */\r\n    static create(id, date, from, side, data, status, isMarkdown, subject) {\r\n        // convert emojione from unicode to short\r\n        //let message = $filter(\"emojiUnicodeToShort\")(data);\r\n        const message = data;\r\n        //return new Message(id, Message.Type.CHAT, date, from, side, message, status, null, isMarkdown, subject);\r\n        return Message.MessageFactory()({\r\n            id,\r\n            type: Message.Type.CHAT,\r\n            date,\r\n            from,\r\n            side,\r\n            data: message,\r\n            status,\r\n            fileId: null,\r\n            isMarkdown,\r\n            subject\r\n        });\r\n    }\r\n    /**\r\n     * @private\r\n     * @method\r\n     * @instance\r\n     */\r\n    static createFileSharingMessage(id, date, from, side, data, status, fileId) {\r\n        // convert emojione from unicode to short\r\n        let message = data;\r\n        //return new Message(id, Message.Type.FS, date, from, side, message, status, fileId);\r\n        return Message.MessageFactory()({ id, type: Message.Type.FS, date, from, side, data: message, status, fileId });\r\n    }\r\n    /**\r\n     * @private\r\n     * @method\r\n     * @instance\r\n     */\r\n    static createWebRTCMessage(id, date, from, side, data, status) {\r\n        //return new Message(id, Message.Type.WEBRTC, date, from, side, data, status);\r\n        return Message.MessageFactory()({ id, type: Message.Type.WEBRTC, date, from, side, data, status });\r\n    }\r\n    /**\r\n     * @private\r\n     * @method\r\n     * @instance\r\n     */\r\n    static createFTMessage(id, date, from, side, data, status, fileTransfer) {\r\n        //let message = new Message(id, Message.Type.FT, date, from, side, data, status);\r\n        let message = Message.MessageFactory()({ id, type: Message.Type.FT, date, from, side, data, status });\r\n        message.fileTransfer = fileTransfer;\r\n        return message;\r\n    }\r\n    /**\r\n     * @private\r\n     * @method\r\n     * @instance\r\n     */\r\n    static createBubbleAdminMessage(id, date, from, type) {\r\n        let data = type + \"MsgRoom\";\r\n        let side = Message.Side.ADMIN;\r\n        //let message = Message.create(id, date, from, side, data, false);\r\n        let message = Message.MessageFactory()({ id, date, from, side, data, status: false });\r\n        return message;\r\n    }\r\n    /**\r\n     * @private\r\n     * @method\r\n     * @instance\r\n     */\r\n    static createRecordingAdminMessage(id, date, from, type, cmd) {\r\n        let data = type + \"Recording\";\r\n        if (cmd) {\r\n            data = data + cmd;\r\n        }\r\n        let side = Message.Side.ADMIN;\r\n        //let message = new Message(id, Message.Type.RECORDING, date, from, side, data, false);\r\n        let message = Message.MessageFactory()({\r\n            id,\r\n            type: Message.Type.RECORDING,\r\n            date,\r\n            from,\r\n            side,\r\n            data,\r\n            status: false\r\n        });\r\n        return message;\r\n    }\r\n    /**\r\n     * Method extract fileId part of URL\r\n     *\r\n     * @private\r\n     * @param {string} url\r\n     * @returns {string}\r\n     *\r\n     * @memberof Conversation\r\n     */\r\n    static extractFileIdFromUrl(url) {\r\n        let parts = url.split(\"/\");\r\n        let fileDescriptorId = parts.pop() || parts.pop();\r\n        return fileDescriptorId;\r\n    }\r\n    updateBubble(data) {\r\n        let that = this;\r\n        if (data) {\r\n            let bubbleproperties = Object.getOwnPropertyNames(that);\r\n            //console.log(\"updateBubble update Bubble with : \", data[\"id\"]);\r\n            Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\r\n                //console.log(val + \" -> \" + data[val]);\r\n                if (bubbleproperties.find((el) => {\r\n                    return val == el;\r\n                })) {\r\n                    //console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class : \", val, \" -> \", data[val]);\r\n                    that[val] = data[val];\r\n                }\r\n                else {\r\n                    //console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class can not update Bubble with : \", val, \" -> \", data[val]);\r\n                    console.log(\"WARNING : One property of the parameter of BubbleFactory method is not present in the Bubble class can not update Bubble with : \");\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @function\r\n     * @public\r\n     * @name MessageFactory\r\n     * @description\r\n     * This class is used to create a message from data object\r\n     */\r\n    static MessageFactory() {\r\n        //constructor(id, type, date, from, side, data, status, fileId?, isMarkdown?, subject?) {\r\n        return (data) => {\r\n            let message = new Message(data.id, data.type, data.date, data.from, data.side, data.data, data.status, data.fileId, data.isMarkdown, data.subject, data.attention);\r\n            if (data) {\r\n                let bubbleproperties = Object.getOwnPropertyNames(message);\r\n                Object.getOwnPropertyNames(data).forEach((val, idx, array) => {\r\n                    //console.log(val + \" -> \" + data[val]);\r\n                    if (!bubbleproperties.find((el) => {\r\n                        return val == el;\r\n                    })) {\r\n                        //console.log(\"WARNING : One property of the parameter of MessageFactory method is not present in the Bubble class : \", val, \" -> \", data[val]);\r\n                        // from become fromJid and data become content\r\n                        if (val != \"from\" && val != \"data\") {\r\n                            console.log(\"WARNING : One property of the parameter of MessageFactory method is not present in the Message class : \", val);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            return message;\r\n        };\r\n    }\r\n}\r\nexports.Message = Message;\r\n/*static ReceiptStatus: any;\r\nstatic Type: any;\r\nstatic Side: any;\r\nstatic ReceiptStatusText: string[];\r\n// */\r\n/**\r\n * @public\r\n * @enum {number}\r\n * @readonly\r\n */\r\nMessage.Type = {\r\n    /** A chat message */\r\n    CHAT: {\r\n        key: 0,\r\n        value: \"Chat\"\r\n    },\r\n    /** A file message */\r\n    FILE: {\r\n        key: 1,\r\n        value: \"File\"\r\n    },\r\n    /** A file message */\r\n    FS: {\r\n        key: 2,\r\n        value: \"FileSharing\"\r\n    },\r\n    /** A WebRTC message */\r\n    WEBRTC: {\r\n        key: 3,\r\n        value: \"WebRTC CAll\"\r\n    },\r\n    /** A Recording message */\r\n    RECORDING: {\r\n        key: 4,\r\n        value: \"Recording\"\r\n    }\r\n};\r\n/**\r\n * @public\r\n * @enum {number}\r\n * @readonly\r\n */\r\nMessage.ReceiptStatus = {\r\n    /** No receipt received yet */\r\n    NONE: 0,\r\n    /** No receipt received after a while (The server doesn't answer) */\r\n    ERROR: 1,\r\n    /** Receipt in progress */\r\n    IN_PROGRESS: 2,\r\n    /** The server has confirmed the reception of the message */\r\n    SENT: 3,\r\n    /** The message has been received but not read */\r\n    UNREAD: 4,\r\n    /** The message has been read */\r\n    READ: 5\r\n};\r\n/**\r\n * @public\r\n * @enum {string}\r\n * @readonly\r\n */\r\nMessage.Side = {\r\n    /** Message is from a recipient */\r\n    LEFT: \"L\",\r\n    /** Message is from me */\r\n    RIGHT: \"R\",\r\n    /** Specific admin message */\r\n    ADMIN: \"ADMIN\"\r\n};\r\n/**\r\n * @private\r\n */\r\nMessage.ReceiptStatusText = [\r\n    \"none\",\r\n    \"ko\",\r\n    \"inProgress\",\r\n    \"sent\",\r\n    \"received\",\r\n    \"read\"\r\n];\r\nmodule.exports.Message = Message;\r\n//# sourceMappingURL=Message.js.map"]},"metadata":{},"sourceType":"script"}