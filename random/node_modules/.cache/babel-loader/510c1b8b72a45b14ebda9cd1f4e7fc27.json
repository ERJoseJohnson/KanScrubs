{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nlet FileViewerType = {\n  \"USER\": \"user\",\n  \"ROOM\": \"room\"\n};\n/*\ninterface IFileViewer {\n    viewerId: string;\n    type: FileViewerType;\n    contact: any;\n}\n// */\n\n/**\n * @public\n * @class\n * @name FileViewer\n * @description\n *      This class is used to represent a File Viewer who is the list of persons (individual or a bubble) that can access (download) the file.\n */\n\nclass FileViewer\n/* implements IFileViewer */\n{\n  /*    public viewerId: string;\n      public type: FileViewerType;\n      public contact: any;\n      private _avatarSrc: any;\n  */\n\n  /**\n   * @this FileViewer\n   */\n  constructor(viewerId\n  /*: string */\n  , type\n  /*: FileViewerType */\n  , contact\n  /*: any */\n  , _contactService\n  /*: any = null*/\n  ) {\n    this.contactService = _contactService;\n    /**\n     * @public\n     * @property {String} viewerId The id of the viewer\n     * @readonly\n     */\n\n    this.viewerId = viewerId;\n    /**\n     * @public\n     * @property {string} type The type of viewer: 'user' for a contact or 'room' for a bubble\n     * @readonly\n     */\n\n    this.type = type;\n    /**\n     * @public\n     * @property {Contact} contact The contact\n     * @readonly\n     */\n\n    this.contact = contact;\n    this._avatarSrc = null;\n  }\n\n  get avatarSrc() {\n    if (this.contact) {\n      this._avatarSrc = this.contact.avatar.src;\n    } else {\n      this._avatarSrc = null;\n      this.contactService.getContactByDBId(this.viewerId).then(contact => {\n        this.contact = contact;\n        this._avatarSrc = this.contact.avatar.src;\n      });\n    }\n\n    return this._avatarSrc;\n  }\n\n}\n\nexports.FileViewer = FileViewer;\n/*\nfunction FileViewerFactory() {\n    return (data: any): FileViewer[] => {\n        let viewers: FileViewer[] = [];\n        for (let viewerData of data) {\n            viewers.push(new FileViewer(viewerData.viewerId, viewerData.type, viewerData.contact, viewerData.contactService));\n        }\n        return viewers;\n    };\n}\n// */\n\nfunction FileViewerElementFactory(viewerId, type, contact, contactService) {\n  //return (viewerId, type, contact, contactService): FileViewer => {\n  return new FileViewer(viewerId, type, contact, contactService); //};\n}\n\nexports.FileViewerElementFactory = FileViewerElementFactory;\nmodule.exports.FileViewer = FileViewer;\nmodule.exports.FileViewerElementFactory = FileViewerElementFactory;","map":{"version":3,"sources":["../../../src/lib/common/models/FileViewer.ts"],"names":[],"mappings":"AAAA;;;;;AAGA,IAAI,cAAc,GAAG;AACjB,UAAS,MADQ;AAEjB,UAAS;AAFQ,CAArB;AAKA;;;;;;;;AAOA;;;;;;;;AAOA,MAAM;AAAW;AAA4B;AAO7C;;;;;;AAKI;;;AAGA,EAAA,WAAA,CACI;AAAQ;AADZ,IAEI;AAAI;AAFR,IAGI;AAAO;AAHX,IAII;AAAe;AAJnB,IAImC;AAC/B,SAAK,cAAL,GAAsB,eAAtB;AACA;;;;;;AAKA,SAAK,QAAL,GAAgB,QAAhB;AAEA;;;;;;AAKA,SAAK,IAAL,GAAY,IAAZ;AAEA;;;;;;AAKA,SAAK,OAAL,GAAe,OAAf;AAEA,SAAK,UAAL,GAAkB,IAAlB;AACH;;AAED,MAAI,SAAJ,GAAa;AACT,QAAI,KAAK,OAAT,EAAkB;AAAE,WAAK,UAAL,GAAkB,KAAK,OAAL,CAAa,MAAb,CAAoB,GAAtC;AAA4C,KAAhE,MACK;AACD,WAAK,UAAL,GAAkB,IAAlB;AACA,WAAK,cAAL,CAAoB,gBAApB,CAAqC,KAAK,QAA1C,EACK,IADL,CACW,OAAD,IAAY;AACd,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,UAAL,GAAkB,KAAK,OAAL,CAAa,MAAb,CAAoB,GAAtC;AACH,OAJL;AAKH;;AACD,WAAO,KAAK,UAAZ;AACH;;AAxDwC;;AA+EX,OAAA,CAAA,UAAA,GAAA,UAAA;AApBlC;;;;;;;;;;;;AAYA,SAAS,wBAAT,CAAkC,QAAlC,EAA4C,IAA5C,EAAkD,OAAlD,EAA2D,cAA3D,EAAyE;AACrE;AACI,SAAO,IAAI,UAAJ,CAAe,QAAf,EAAyB,IAAzB,EAA+B,OAA/B,EAAwC,cAAxC,CAAP,CAFiE,CAGrE;AACH;;AAIO,OAAA,CAAA,wBAAA,GAAA,wBAAA;AAFR,MAAM,CAAC,OAAP,CAAe,UAAf,GAA4B,UAA5B;AACA,MAAM,CAAC,OAAP,CAAe,wBAAf,GAA0C,wBAA1C","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet FileViewerType = {\n    \"USER\": \"user\",\n    \"ROOM\": \"room\"\n};\n/*\ninterface IFileViewer {\n    viewerId: string;\n    type: FileViewerType;\n    contact: any;\n}\n// */\n/**\n * @public\n * @class\n * @name FileViewer\n * @description\n *      This class is used to represent a File Viewer who is the list of persons (individual or a bubble) that can access (download) the file.\n */\nclass FileViewer /* implements IFileViewer */ {\n    /*    public viewerId: string;\n        public type: FileViewerType;\n        public contact: any;\n        private _avatarSrc: any;\n    */\n    /**\n     * @this FileViewer\n     */\n    constructor(viewerId /*: string */, type /*: FileViewerType */, contact /*: any */, _contactService /*: any = null*/) {\n        this.contactService = _contactService;\n        /**\n         * @public\n         * @property {String} viewerId The id of the viewer\n         * @readonly\n         */\n        this.viewerId = viewerId;\n        /**\n         * @public\n         * @property {string} type The type of viewer: 'user' for a contact or 'room' for a bubble\n         * @readonly\n         */\n        this.type = type;\n        /**\n         * @public\n         * @property {Contact} contact The contact\n         * @readonly\n         */\n        this.contact = contact;\n        this._avatarSrc = null;\n    }\n    get avatarSrc() {\n        if (this.contact) {\n            this._avatarSrc = this.contact.avatar.src;\n        }\n        else {\n            this._avatarSrc = null;\n            this.contactService.getContactByDBId(this.viewerId)\n                .then((contact) => {\n                this.contact = contact;\n                this._avatarSrc = this.contact.avatar.src;\n            });\n        }\n        return this._avatarSrc;\n    }\n}\nexports.FileViewer = FileViewer;\n/*\nfunction FileViewerFactory() {\n    return (data: any): FileViewer[] => {\n        let viewers: FileViewer[] = [];\n        for (let viewerData of data) {\n            viewers.push(new FileViewer(viewerData.viewerId, viewerData.type, viewerData.contact, viewerData.contactService));\n        }\n        return viewers;\n    };\n}\n// */\nfunction FileViewerElementFactory(viewerId, type, contact, contactService) {\n    //return (viewerId, type, contact, contactService): FileViewer => {\n    return new FileViewer(viewerId, type, contact, contactService);\n    //};\n}\nexports.FileViewerElementFactory = FileViewerElementFactory;\nmodule.exports.FileViewer = FileViewer;\nmodule.exports.FileViewerElementFactory = FileViewerElementFactory;\n//# sourceMappingURL=FileViewer.js.map"]},"metadata":{},"sourceType":"script"}