{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst jwt = require(\"jwt-decode\");\n\nconst btoa = require(\"btoa\");\n\nconst CryptoJS = require(\"crypto-js\");\n\nconst backoff = require(\"backoff\");\n\nconst Utils_js_1 = require(\"../common/Utils.js\");\n\nconst Utils_js_2 = require(\"../common/Utils.js\");\n\nconst RESTTelephony_1 = require(\"./RestServices/RESTTelephony\");\n\nlet packageVersion = require(\"../../package.json\");\n\nconst RECONNECT_INITIAL_DELAY = 2000;\nconst RECONNECT_MAX_DELAY = 60000;\n/*\r\nvar getRequestHeader;\r\nvar getRequestHeaderWithRange;\r\nvar getLoginHeader;\r\nvar getDefaultHeader;\r\n// */\n\nconst LOG_ID = \"REST - \";\nlet RESTService = class RESTService {\n  constructor(_credentials, _application, _isOfficialRainbow, evtEmitter, _logger) {\n    /// Conference\n    this.MEDIATYPE = {\n      WEBRTC: \"webrtc\",\n      WEBRTCSHARINGONLY: \"webrtcSharingOnly\"\n    };\n    let that = this;\n    let self = this;\n    this.http = null;\n    this.account = null;\n    this.app = null;\n    this.token = null;\n    this.renewTokenInterval = null;\n    this.auth = btoa(_credentials.login + \":\" + _credentials.password);\n    this._credentials = _credentials;\n    this._application = _application;\n    this.loginEmail = _credentials.login;\n    this.eventEmitter = evtEmitter;\n    this.logger = _logger;\n    this.currentAttempt = 0;\n    this.attempt_succeeded_callback = undefined;\n    this.attempt_failed_callback = undefined;\n    this.attempt_promise_resolver = {\n      resolve: undefined,\n      reject: undefined\n    };\n    this._isOfficialRainbow = _isOfficialRainbow;\n    this.maxAttemptToReconnect = 50;\n    this.fibonacciStrategy = new backoff.FibonacciStrategy({\n      randomisationFactor: 0.4,\n      initialDelay: RECONNECT_INITIAL_DELAY,\n      maxDelay: RECONNECT_MAX_DELAY\n    });\n    this.reconnectDelay = this.fibonacciStrategy.getInitialDelay();\n    this.restTelephony = new RESTTelephony_1.RESTTelephony(evtEmitter, _logger);\n\n    this.getRequestHeader = accept => {\n      let headers = {\n        \"Authorization\": \"Bearer \" + that.token,\n        \"Accept\": accept || \"application/json\"\n      };\n      return headers;\n    };\n\n    this.getRequestHeaderWithRange = (accept, range) => {\n      let header = this.getRequestHeader(accept);\n      header.Range = range;\n      return header;\n    };\n\n    this.getPostHeader = contentType => {\n      let header = this.getRequestHeader();\n      let type = contentType || \"application/json\";\n      header[\"Content-Type\"] = type;\n      return header;\n    };\n\n    this.getPostHeaderWithRange = (accept, initialSize, minRange, maxRange) => {\n      let header = this.getRequestHeader(accept); // Content-Range: bytes 0-1048575/2960156\n      //header[\"Content-Range\"] = \"bytes \" + minRange + \"-\" + maxRange + \"/\" + initialSize;\n\n      return header;\n    };\n\n    this.getLoginHeader = (auth, password) => {\n      let headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Basic \" + (auth || that.auth),\n        \"x-rainbow-client\": \"sdk_node\",\n        \"x-rainbow-client-version\": packageVersion.version\n      };\n      let toEncrypt = that._application.appSecret + (password || that._credentials.password); //that.logger.log(\"debug\", LOG_ID + \"toEncrypt : \" + toEncrypt);\n\n      let encrypted = CryptoJS.SHA256(toEncrypt).toString(); //that.logger.log(\"debug\", LOG_ID + \"encrypted : \" + encrypted);\n\n      let base64 = btoa(that._application.appID + ':' + encrypted); //that.logger.log(\"debug\", LOG_ID + \"base64 : \" + base64);\n\n      if (that._application.appSecret && base64 && base64.length) {\n        headers[\"x-rainbow-app-auth\"] = \"Basic \" + base64 || \"\";\n      }\n\n      return headers;\n    };\n\n    this.getDefaultHeader = () => {\n      return {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      };\n    };\n  }\n\n  get userId() {\n    return this.account ? this.account.id : \"\";\n  }\n\n  get loggedInUser() {\n    return this.account;\n  }\n\n  start(http) {\n    let that = this;\n    that.http = http;\n    return that.restTelephony.start(that.http).then(() => {\n      that.logger.log(\"internal\", LOG_ID + \"(start) email used\", that.loginEmail);\n    });\n  }\n\n  stop() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.signout().then(() => {\n        that.logger.log(\"debug\", LOG_ID + \"(stop) Successfully stopped\");\n        resolve();\n      }).catch(err => {\n        return reject(err);\n      });\n    });\n  }\n\n  signin(token) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this; // Login by the token provided in parameter.\n\n      if (token) {\n        try {\n          that.logger.log(\"internal\", LOG_ID + \"(signin) with token : \", token, \" : \", that.getLoginHeader());\n          let decodedtoken = jwt(token);\n          let JSON = {\n            \"loggedInUser\": decodedtoken.user,\n            \"loggedInApplication\": decodedtoken.app,\n            \"token\": token\n          };\n          that.account = JSON.loggedInUser;\n          that.app = JSON.loggedInApplication;\n          that.token = JSON.token;\n          let loggedInUser = yield that.getContactInformationByLoginEmail(decodedtoken.user.loginEmail).then(contactsFromServeur => __awaiter(this, void 0, void 0, function* () {\n            if (contactsFromServeur && contactsFromServeur.length > 0) {\n              let contact = null;\n              that.logger.log(\"info\", LOG_ID + \"(signin) contact found on server, get full infos.\");\n              let _contactFromServer = contactsFromServeur[0];\n\n              if (_contactFromServer) {\n                // The contact is not found by email in the that.contacts tab, so it need to be find on server to get or update it.\n                return yield that.getContactInformationByID(_contactFromServer.id).then(_contactInformation => {\n                  that.logger.log(\"internal\", LOG_ID + \"(signin) contact full infos : \", _contactInformation);\n                  return _contactInformation;\n                });\n              }\n            }\n          }));\n          that.account = JSON.loggedInUser = loggedInUser;\n          that.logger.log(\"debug\", LOG_ID + \"(signin) token signin, welcome \" + that.account.id + \"!\");\n          that.logger.log(\"internal\", LOG_ID + \"(signin) user information \", that.account);\n          that.logger.log(\"internal\", LOG_ID + \"(signin) application information : \", that.app);\n          return Promise.resolve(JSON);\n        } catch (err) {\n          that.logger.log(\"debug\", LOG_ID + \"(signin) CATCH Error !!! error : \", err);\n          return Promise.reject(err);\n        }\n      } // If no token is provided, then signin with user/pwd credentials.\n\n\n      return new Promise(function (resolve, reject) {\n        that.http.get(\"/api/rainbow/authentication/v1.0/login\", that.getLoginHeader(), undefined).then(function (JSON) {\n          that.account = JSON.loggedInUser;\n          that.app = JSON.loggedInApplication;\n          that.token = JSON.token;\n          that.logger.log(\"internal\", LOG_ID + \"(signin) welcome \" + that.account.displayName + \"!\"); //that.logger.log(\"debug\", LOG_ID + \"(signin) user information \", that.account);\n\n          that.logger.log(\"internal\", LOG_ID + \"(signin) application information : \", that.app);\n          resolve(JSON);\n        }).catch(function (err) {\n          that.logger.log(\"error\", LOG_ID, \"(signin) ErrorManager during REST signin\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(signin) ErrorManager during REST signin : \", err);\n          return reject(err);\n        });\n      });\n    });\n  }\n\n  setconnectionS2SInfo(_connectionS2SInfo) {\n    this.connectionS2SInfo = _connectionS2SInfo;\n  }\n\n  askTokenOnBehalf(loginEmail, password) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let auth = btoa(loginEmail + \":\" + password);\n      that.http.get(\"/api/rainbow/authentication/v1.0/login\", that.getLoginHeader(auth, password), undefined).then(function (JSON) {\n        that.logger.log(\"internal\", LOG_ID + \"(askTokenOnBehalf) successfully received token for \", JSON.loggedInUser.id, \" !\");\n        resolve(JSON);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(askTokenOnBehalf) Error requesting a token\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(askTokenOnBehalf) Error requesting a token : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  signout() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (that.http) {\n        that.http.get(\"/api/rainbow/authentication/v1.0/logout\", that.getRequestHeader(), undefined).then(function (JSON) {\n          that.account = null;\n          that.token = null;\n          that.renewTokenInterval = null;\n          that.logger.log(\"info\", LOG_ID + \"(signout) Successfully signed-out!\");\n          resolve(JSON);\n        }).catch(function (err) {\n          that.logger.log(\"error\", LOG_ID, \"error at signout\");\n          that.logger.log(\"internalerror\", LOG_ID, \"error at signout : \", err);\n          return reject(err);\n        });\n      } else {\n        that.logger.log(\"warn\", LOG_ID + \"(signout) seems to be already signed-out!\");\n        resolve(null);\n      }\n    });\n  }\n\n  startTokenSurvey() {\n    let that = this;\n    let decodedToken = jwt(that.token);\n    that.logger.log(\"debug\", LOG_ID + \"(startTokenSurvey) - token\");\n    that.logger.log(\"info\", LOG_ID + \"(startTokenSurvey) - token, exp : \", decodedToken.exp, \", iat : \", decodedToken.iat);\n    that.logger.log(\"internal\", LOG_ID + \"(startTokenSurvey) - token, decodedToken : \", decodedToken);\n    let halfExpirationDate = (decodedToken.exp - decodedToken.iat) / 2 + decodedToken.iat;\n    let tokenExpirationTimestamp = halfExpirationDate * 1000;\n    let expirationDate = new Date(tokenExpirationTimestamp);\n    let currentDate = new Date();\n    let currentTimestamp = currentDate.valueOf();\n    let tokenExpirationDuration = tokenExpirationTimestamp - currentTimestamp;\n\n    if (tokenExpirationDuration < 0) {\n      that.logger.log(\"warn\", LOG_ID + \"(startTokenSurvey) auth token has already expired, re-new it immediately\");\n\n      that._renewAuthToken();\n    } else if (tokenExpirationDuration < 300000) {\n      that.logger.log(\"warn\", LOG_ID + \"(startTokenSurvey) auth token will expire in less 5 minutes, re-new it immediately\");\n\n      that._renewAuthToken();\n    } else {\n      let usedExpirationDuration = tokenExpirationDuration - 3600000; // Refresh 1 hour before the token expiration - negative values are well treated by settimeout\n\n      that.logger.log(\"info\", LOG_ID + \"(startTokenSurvey) start token survey (expirationDate: \" + expirationDate + \" currentDate:\" + currentDate + \" tokenExpirationDuration: \" + tokenExpirationDuration + \"ms usedExpirationDuration: \" + usedExpirationDuration + \"ms)\");\n\n      if (that.renewTokenInterval) {\n        that.logger.log(\"info\", LOG_ID + \"(startTokenSurvey) remove timer\");\n        clearTimeout(that.renewTokenInterval);\n      }\n\n      that.logger.log(\"info\", LOG_ID + \"(startTokenSurvey) start a new timer for renewing token in \", usedExpirationDuration, \" ms\");\n      that.renewTokenInterval = setTimeout(function () {\n        that._renewAuthToken();\n      }, usedExpirationDuration);\n    }\n  }\n\n  _renewAuthToken() {\n    let that = this;\n    that.http.get(\"/api/rainbow/authentication/v1.0/renew\", that.getRequestHeader(), undefined).then(function (JSON) {\n      that.logger.log(\"info\", LOG_ID + \"(_renewAuthToken) renew authentication token success\");\n      that.token = JSON.token;\n      that.logger.log(\"internal\", LOG_ID + \"(_renewAuthToken) new token received\", that.token);\n      that.eventEmitter.emit(\"rainbow_tokenrenewed\");\n    }).catch(function (err) {\n      that.logger.log(\"error\", LOG_ID, \"(_renewAuthToken) renew authentication token failure\");\n      that.logger.log(\"internalerror\", LOG_ID, \"(_renewAuthToken) renew authentication token failure : \", err);\n      clearTimeout(that.renewTokenInterval);\n      that.renewTokenInterval = null;\n      that.eventEmitter.emit(\"rainbow_tokenexpired\");\n    });\n  } // Contacts API\n\n\n  getContacts() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/enduser/v1.0/users/networks?format=full\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getContacts) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getContacts) received \" + json.total + \" contacts\");\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getContacts) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getContacts) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getContactInformationByJID(jid) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (!jid) {\n        that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByJID) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(getContactInformationByJID) No jid provided\");\n        resolve(null);\n      } else {\n        // Remove resource from jid\n        let jidBare = jid;\n\n        if (jid.includes(\"/\")) {\n          jidBare = jid.substr(0, jid.lastIndexOf(\"/\"));\n        }\n\n        that.http.get(\"/api/rainbow/enduser/v1.0/users/jids/\" + encodeURIComponent(jidBare), that.getRequestHeader(), undefined).then(function (json) {\n          that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByJID) successfull\");\n          that.logger.log(\"internal\", LOG_ID + \"(getContactInformationByJID) REST contact received \", json.data);\n          resolve(json.data);\n        }).catch(function (err) {\n          that.logger.log(\"error\", LOG_ID, \"(getContactInformationByJID) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(getContactInformationByJID) error : \", err);\n\n          if (err && err.code === 404) {\n            resolve(null);\n          } else {\n            return reject(err);\n          }\n        });\n      }\n    });\n  }\n\n  getContactInformationByID(id) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (!id) {\n        that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByID) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(getContactInformationByID) No id provided\");\n        resolve(null);\n      } else {\n        that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + encodeURIComponent(id) + \"?format=full\", that.getRequestHeader(), undefined).then(function (json) {\n          that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByID) successfull\");\n          that.logger.log(\"internal\", LOG_ID + \"(getContactInformationByID) REST contact received \", json.data);\n          resolve(json.data);\n        }).catch(function (err) {\n          that.logger.log(\"error\", LOG_ID, \"(getContactInformationByID) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(getContactInformationByID) error : \", err);\n\n          if (err && err.code === 404) {\n            resolve(null);\n          } else {\n            return reject(err);\n          }\n        });\n      }\n    });\n  }\n\n  getContactInformationByLoginEmail(email) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (!email) {\n        that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByLoginEmail) failed\");\n        that.logger.log(\"info\", LOG_ID + \"(getContactInformationByLoginEmail) No email provided\");\n        resolve(null);\n      } else {\n        //that.logger.log(\"internal\", LOG_ID + \"(getContactInformationByLoginEmail) with params : \", { \"loginEmail\": email });\n        that.http.post(\"/api/rainbow/enduser/v1.0/users/loginEmails\", that.getRequestHeader(), {\n          \"loginEmail\": email\n        }, undefined).then(function (json) {\n          that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByLoginEmail) successfull\");\n          that.logger.log(\"internal\", LOG_ID + \"(getContactInformationByLoginEmail) REST contact received \", json.data);\n          resolve(json.data);\n        }).catch(function (err) {\n          that.logger.log(\"error\", LOG_ID, \"(getContactInformationByLoginEmail) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(getContactInformationByLoginEmail) error : \", err);\n          return reject(err);\n        });\n      }\n    });\n  }\n\n  getServerFavorites() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      //that.logger.log(\"internal\", LOG_ID + \"(getContactInformationByLoginEmail) with params : \", { \"loginEmail\": email });\n      that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.userId + \"/favorites\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getServerFavorites) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getServerFavorites) REST result : \", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getServerFavorites) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getServerFavorites) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  addServerFavorite(peerId, type) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      return new Promise(function (resolve, reject) {\n        if (!peerId) {\n          that.logger.log(\"debug\", LOG_ID + \"(addServerFavorite) failed\");\n          that.logger.log(\"info\", LOG_ID + \"(addServerFavorite) No peerId provided\");\n          resolve(null);\n        } else {\n          let data = {\n            peerId,\n            type\n          };\n          that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.userId + \"/favorites\", that.getRequestHeader(), data, undefined).then(function (json) {\n            that.logger.log(\"debug\", LOG_ID + \"(addServerFavorite) successfull\");\n            that.logger.log(\"internal\", LOG_ID + \"(addServerFavorite) REST result : \", json.data);\n            resolve(json.data);\n          }).catch(function (err) {\n            that.logger.log(\"error\", LOG_ID, \"(addServerFavorite) error\");\n            that.logger.log(\"internalerror\", LOG_ID, \"(addServerFavorite) error : \", err);\n            return reject(err);\n          });\n        }\n      });\n      /*\r\n      let that = this;\r\n      try {\r\n          let url = `${config.restServerUrl}/api/rainbow/enduser/v1.0/users/${this.contactService.userContact.dbId}/favorites`;\r\n          let data = { peerId, type };\r\n          await this.$http({ method: \"POST\", url, headers: this.authService.getRequestHeader(), data });\r\n                that._logger.log(\"debug\", LOG_ID +`[favoriteService] addServerFavorite(${peerId}, ${type}) -- SUCCESS`);\r\n      }\r\n      catch (error) {\r\n          let errorMessage = `addServerFavorite(${peerId}, ${type}) -- FAILURE -- ${error.message}`;\r\n          that._logger.log(\"error\", LOG_ID + `[favoriteService] ${errorMessage}`);\r\n          throw new Error(errorMessage);\r\n      }\r\n             */\n    });\n  }\n\n  removeServerFavorite(favoriteId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      return new Promise(function (resolve, reject) {\n        if (!favoriteId) {\n          that.logger.log(\"debug\", LOG_ID + \"(removeServerFavorite) failed\");\n          that.logger.log(\"info\", LOG_ID + \"(removeServerFavorite) No favoriteId provided\");\n          resolve(null);\n        } else {\n          that.http.delete(\"/api/rainbow/enduser/v1.0/users/\" + that.userId + \"/favorites/\" + favoriteId, that.getRequestHeader()).then(function (json) {\n            that.logger.log(\"debug\", LOG_ID + \"(removeServerFavorite) successfull\");\n            that.logger.log(\"internal\", LOG_ID + \"(removeServerFavorite) REST result : \", json.data);\n            resolve(json.data);\n          }).catch(function (err) {\n            that.logger.log(\"error\", LOG_ID, \"(removeServerFavorite) error\");\n            that.logger.log(\"internalerror\", LOG_ID, \"(removeServerFavorite) error : \", err);\n            return reject(err);\n          });\n        }\n      });\n      /*\r\n                 let url = `${config.restServerUrl}/api/rainbow/enduser/v1.0/users/${this.contactService.userContact.dbId}/favorites/${favoriteId}`;\r\n                 await this.$http({ method: \"DELETE\", url: url, headers: this.authService.getRequestHeader() });\r\n                  */\n    });\n  }\n  /**\r\n   * ACCEPT INVITATION\r\n   * Used by SDK (public)\r\n   * Warning when modifying this method\r\n   */\n\n\n  acceptInvitation(invitation) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.logger.log(\"internal\", LOG_ID + \"(acceptInvitation) invitation : \", invitation);\n      that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + invitation.invitedUserId + \"/invitations/\" + invitation.id + \"/accept\", that.getRequestHeader(), {}, undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(acceptInvitation) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(acceptInvitation) REST invitation received \", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(acceptInvitation) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(acceptInvitation) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  /**\r\n   * DECLINE INVITATION\r\n   * Used by SDK (public)\r\n   * Warning when modifying this method\r\n   */\n  declineInvitation(invitation) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.logger.log(\"internal\", LOG_ID + \"(declineInvitation) invitation : \", invitation);\n      that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + invitation.invitedUserId + \"/invitations/\" + invitation.id + \"/decline\", that.getRequestHeader(), {}, undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(declineInvitation) successfull\");\n        resolve();\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(declineInvitation) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(declineInvitation) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  /**\r\n   * SEND INVITATION\r\n   * Used by SDK (public)\r\n   * Warning when modifying this method\r\n   */\n  joinContactInvitation(contact) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.logger.log(\"internal\", LOG_ID + \"(joinContactInvitation) contact : \", contact);\n      that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations\", that.getRequestHeader(), {\n        \"invitedUserId\": contact.id\n      }, undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(joinContactInvitation) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(joinContactInvitation) REST invitation received \", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(joinContactInvitation) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(joinContactInvitation) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  joinContacts(contact, contactIds, presence) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.post(\"/api/rainbow/admin/v1.0/users/\" + contact.id + \"/networks\", that.getRequestHeader(), {\n        \"users\": contactIds,\n        \"presence\": Boolean(presence)\n      }, undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(joinContacts) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(joinContacts) REST invitation received \", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(joinContacts) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(joinContacts) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getInvitationById(invitationId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (!invitationId) {\n        that.logger.log(\"debug\", LOG_ID + \"(getInvitationById) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(getInvitationById) No id provided\");\n        resolve(null);\n      } else {\n        that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/\" + invitationId, that.getRequestHeader(), undefined).then(function (json) {\n          that.logger.log(\"debug\", LOG_ID + \"(getInvitationById) successfull\");\n          that.logger.log(\"internal\", LOG_ID + \"(getInvitationById) REST invitation received \", json.data);\n          resolve(json.data);\n        }).catch(function (err) {\n          that.logger.log(\"error\", LOG_ID, \"(getInvitationById) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(getInvitationById) error : \", err);\n          return reject(err);\n        });\n      }\n    });\n  }\n\n  getGroups() {\n    let that = this;\n\n    let getSetOfGroups = function (page, max, groups) {\n      return new Promise((resolve, reject) => {\n        that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups?format=full&offset=\" + page + \"&limit=\" + max, that.getRequestHeader(), undefined).then(function (json) {\n          groups = groups.concat(json.data);\n          that.logger.log(\"internal\", LOG_ID + \"(getGroups) retrieved \" + json.data.length + \" groups, total \" + groups.length + \", existing \" + json.total);\n          resolve({\n            groups: groups,\n            finished: groups.length === json.total\n          });\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    };\n\n    let getAllGroups = function (page, limit, groups) {\n      return new Promise((resolve, reject) => {\n        getSetOfGroups(page, limit, groups).then(json => {\n          if (json.finished) {\n            that.logger.log(\"info\", LOG_ID + \"(getGroups) getSetOfGroups no need to loop again. All groups retrieve...\");\n            return resolve(json.groups);\n          }\n\n          page += limit;\n          that.logger.log(\"internal\", LOG_ID + \"(getGroups) getSetOfGroups need another loop to get more groups... [\" + json.groups.length + \"]\");\n          getAllGroups(page, limit, json.groups).then(allGroups => {\n            resolve(allGroups);\n          }).catch(err => {\n            return reject(err);\n          });\n        }).catch(err => {\n          return reject(err);\n        });\n      });\n    };\n\n    return new Promise(function (resolve, reject) {\n      let page = 0;\n      let limit = 100;\n      getAllGroups(page, limit, []).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(getGroups) getAllGroups successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getGroups) getAllGroups received \" + json.length + \" groups\");\n        resolve(json);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(getGroups) getAllGroups error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getGroups) getAllGroups error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getGroup(groupId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId, that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(getGroup) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getGroup) REST get group information\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getGroup) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getGroup) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  setFavoriteGroup(group, favorite) {\n    /*\r\n    Request URL: https://vberder.openrainbow.org/api/rainbow/enduser/v1.0/users/5bbdc3ae2cf496c07dd8912f/groups/5e3d39e1cbc6187d74aee06c\r\n    Request Method: PUT\r\n    {name: \"GroupTest\", comment: \"descgroup\", isFavorite: true}\r\n     */\n    let that = this; //  let data = { \"name\": group.name, \"comment\": group.comment, \"isFavorite\": group.isFavorite }\n\n    let data = {\n      isFavorite: favorite\n    };\n    let groupId = group.id;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId, that.getRequestHeader(), data, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(setFavoriteGroup) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(setFavoriteGroup) REST set group favorite information : \", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(setFavoriteGroup) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(setFavoriteGroup) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  createGroup(name, comment, isFavorite) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups\", that.getRequestHeader(), {\n        name: name,\n        comment: comment,\n        isFavorite: isFavorite\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(createGroup) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(createGroup) REST group created\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(createGroup) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(createGroup) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  deleteGroup(groupId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.delete(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId, that.getRequestHeader()).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(deleteGroup) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(deleteGroup) REST delete group\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(deleteGroup) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(deleteGroup) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  updateGroupName(groupId, name) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId, that.getRequestHeader(), {\n        name: name\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(updateGroupName) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(updateGroupName) REST delete group\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(updateGroupName) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(updateGroupName) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  addUserInGroup(contactId, groupId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId + \"/users/\" + contactId, that.getRequestHeader(), undefined, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(addUserInGroup) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(addUserInGroup) REST add user in group\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(addUserInGroup) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(addUserInGroup) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  removeUserFromGroup(contactId, groupId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.delete(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId + \"/users/\" + contactId, that.getRequestHeader()).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(removeUserFromGroup) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(removeUserFromGroup) REST remove user from group\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID + \"(removeUserFromGroup) error\");\n        that.logger.log(\"internalerror\", LOG_ID + \"(removeUserFromGroup) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getBots() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/enduser/v1.0/bots\", that.getRequestHeader(), undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(getBots) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getBots) received \" + json.total + \" bots\");\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getBots) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getBots) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Bubble API\n\n\n  createBubble(name, description, withHistory) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let history = \"none\";\n\n      if (withHistory) {\n        history = \"all\";\n      }\n\n      that.http.post(\"/api/rainbow/enduser/v1.0/rooms\", that.getRequestHeader(), {\n        name: name,\n        topic: description,\n        history: history\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(createBubble) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(createBubble) REST bubble created\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(createBubble) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(createBubble) error\", err);\n        return reject(err);\n      });\n    });\n  }\n\n  setBubbleVisibility(bubbleId, visibility) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId, that.getRequestHeader(), {\n        visibility: visibility\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(setBubbleVisibility) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(setBubbleVisibility) REST bubble set visibility\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(setBubbleVisibility) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(setBubbleVisibility) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  setBubbleTopic(bubbleId, topic) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId, that.getRequestHeader(), {\n        topic: topic\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(setBubbleTopic) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(setBubbleTopic) REST bubble updated topic\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(setBubbleTopic) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(setBubbleTopic) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  setBubbleName(bubbleId, name) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId, that.getRequestHeader(), {\n        name: name\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(setBubbleName) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(setBubbleName) REST bubble updated name\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(setBubbleName) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(setBubbleName) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getBubbles() {\n    let that = this;\n\n    let getSetOfBubbles = (page, max, bubbles) => {\n      return new Promise((resolve, reject) => {\n        that.http.get(\"/api/rainbow/enduser/v1.0/rooms?format=full&offset=\" + page + \"&limit=\" + max + \"&userId=\" + that.account.id, that.getRequestHeader(), undefined).then(function (json) {\n          bubbles = bubbles.concat(json.data);\n          that.logger.log(\"info\", LOG_ID + \"(getBubbles) getSetOfBubbles successfull\");\n          that.logger.log(\"internal\", LOG_ID + \"(getBubbles) getSetOfBubbles retrieved \" + json.data.length + \" bubbles, total \" + bubbles.length + \", existing \" + json.total);\n          resolve({\n            bubbles: bubbles,\n            finished: bubbles.length === json.total\n          });\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    };\n\n    let getAllBubbles = function (page, limit, bubbles) {\n      return new Promise((resolve, reject) => {\n        getSetOfBubbles(page, limit, bubbles).then(json => {\n          if (json.finished) {\n            that.logger.log(\"info\", LOG_ID + \"(getAllBubbles) no need to loop again. All bubbles retrieved...\");\n            return resolve(json.bubbles);\n          }\n\n          page += limit;\n          that.logger.log(\"info\", LOG_ID + \"(getAllBubbles) need another loop to get more bubbles... [\" + json.bubbles.length + \"]\");\n          getAllBubbles(page, limit, json.bubbles).then(bubbles => {\n            resolve(bubbles);\n          }).catch(err => {\n            return reject(err);\n          });\n        }).catch(err => {\n          return reject(err);\n        });\n      });\n    };\n\n    return new Promise(function (resolve, reject) {\n      let page = 0;\n      let limit = 100;\n      getAllBubbles(page, limit, []).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(getBubbles) getAllBubbles successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getBubbles) getAllBubbles received \" + json.length + \" bubbles\");\n        resolve(json);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(getBubbles) getAllBubbles error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getBubbles) getAllBubbles error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getBubble(bubbleId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"?format=full\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(getBubble) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getBubble) REST get bubble information\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getBubble) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getBubble) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getBubbleByJid(bubbleJid) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      //http://vberder.openrainbow.org/api/rainbow/enduser/v1.0/rooms/jids/{jid}\n      that.http.get(\"/api/rainbow/enduser/v1.0/rooms/jids/\" + bubbleJid + \"?format=full\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(getBubbleByJid) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getBubbleByJid) REST get bubble information\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getBubbleByJid) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getBubbleByJid) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  setBubbleCustomData(bubbleId, customData) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/custom-data\", that.getRequestHeader(), customData, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(setBubbleCustomData) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(setBubbleCustomData) REST PUT customData to bubble\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(setBubbleCustomData) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(setBubbleCustomData) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  inviteContactToBubble(contactId, bubbleId, asModerator, withInvitation, reason) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let privilege = asModerator ? \"moderator\" : \"user\";\n      let status = withInvitation ? \"invited\" : \"accepted\";\n      reason = reason || \"from moderator\";\n      that.http.post(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users\", that.getRequestHeader(), {\n        userId: contactId,\n        reason: reason,\n        privilege: privilege,\n        status: status\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(inviteContactToBubble) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(inviteContactToBubble) REST bubble invitation\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(inviteContactToBubble) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(inviteContactToBubble) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  inviteContactsByEmailsToBubble(contactsEmails, bubbleId) {\n    let that = this;\n    const data = {\n      scenario: \"chat\",\n      emails: contactsEmails // [\"philippe.torrelli@gmail.com\"]\n\n    };\n    return new Promise(function (resolve, reject) {\n      that.http.post(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/invitations\", that.getRequestHeader(), data, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(inviteContactToBubble) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(inviteContactToBubble) REST bubble invitation\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(inviteContactToBubble) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(inviteContactToBubble) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Get all users from bubble\n\n\n  getRoomUsers(bubbleId, options = {}) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let filterToApply = \"format=medium\";\n\n      if (options.format) {\n        filterToApply = \"format=\" + options.format;\n      }\n\n      if (!options.limit) options.limit = 100;\n\n      if (options.page > 0) {\n        filterToApply += \"&offset=\";\n\n        if (options.page > 1) {\n          filterToApply += options.limit * (options.page - 1);\n        } else {\n          filterToApply += 0;\n        }\n      }\n\n      filterToApply += \"&limit=\" + Math.min(options.limit, 1000);\n\n      if (options.type) {\n        filterToApply += \"&types=\" + options.type;\n      }\n\n      that.http.get(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users?\" + filterToApply, that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getUsersChannel) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getUsersChannel) received \", json.total, \" users in bubble\");\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getUsersChannel) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getUsersChannel) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  promoteContactInBubble(contactId, bubbleId, asModerator) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let privilege = asModerator ? \"moderator\" : \"user\";\n      that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + contactId, that.getRequestHeader(), {\n        privilege: privilege\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(promoteContactInBubble) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(promoteContactInBubble) REST invitation accepted\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(promoteContactInBubble) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(promoteContactInBubble) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  changeBubbleOwner(bubbleId, contactId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId, that.getRequestHeader(), {\n        \"owner\": contactId\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(changeBubbleOwner) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(changeBubbleOwner) REST invitation accepted\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(changeBubbleOwner) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(changeBubbleOwner) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  archiveBubble(bubbleId) {\n    // /api/rainbow/enduser/v1.0/rooms/:roomId/archive\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.logger.log(\"internal\", LOG_ID + \"(archiveBubble) bubbleId : \", bubbleId);\n      let data = {};\n      that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/archive\", that.getRequestHeader(), data, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(archiveBubble) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(archiveBubble) REST leave bubble\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(archiveBubble) error.\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(archiveBubble) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  leaveBubble(bubbleId, bubbleStatus) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.logger.log(\"internal\", LOG_ID + \"(leaveBubble) bubbleId : \", bubbleId, \", bubbleStatus : \", bubbleStatus);\n\n      switch (bubbleStatus) {\n        case \"unsubscribed\":\n          that.http.delete(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + that.account.id, that.getRequestHeader()).then(function (json) {\n            that.logger.log(\"info\", LOG_ID + \"(leaveBubble) delete successfull\");\n            that.logger.log(\"internal\", LOG_ID + \"(leaveBubble) REST leave bubble\", json.data);\n            resolve(json.data);\n          }).catch(function (err) {\n            that.logger.log(\"error\", LOG_ID, \"(leaveBubble) error\");\n            that.logger.log(\"internalerror\", LOG_ID, \"(leaveBubble) error : \", err);\n            return reject(err);\n          });\n          break;\n\n        default:\n          that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + that.account.id, that.getRequestHeader(), {\n            \"status\": \"unsubscribed\"\n          }, undefined).then(function (json) {\n            that.logger.log(\"info\", LOG_ID + \"(leaveBubble) unsubscribed successfull\");\n            that.logger.log(\"internal\", LOG_ID + \"(leaveBubble) REST invitation accepted\", json.data);\n            resolve(json.data);\n          }).catch(function (err) {\n            that.logger.log(\"error\", LOG_ID, \"(leaveBubble) error\");\n            that.logger.log(\"internalerror\", LOG_ID, \"(leaveBubble) error : \", err);\n            return reject(err);\n          });\n          break;\n      }\n    });\n  }\n\n  deleteBubble(bubbleId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.delete(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId, that.getRequestHeader()).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(deleteBubble) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(deleteBubble) REST leave bubble : \", json);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(deleteBubble) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(deleteBubble) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  removeInvitationOfContactToBubble(contactId, bubbleId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.delete(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + contactId, that.getRequestHeader()).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(removeInvitationOfContactToBubble) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(removeInvitationOfContactToBubble) REST remove contact from bubble\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(removeInvitationOfContactToBubble) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(removeInvitationOfContactToBubble) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  unsubscribeContactFromBubble(contactId, bubbleId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + contactId, that.getRequestHeader(), {\n        status: \"unsubscribed\"\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(unsubscribeContactFromBubble) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(unsubscribeContactFromBubble) REST remove contact from bubble\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(unsubscribeContactFromBubble) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(unsubscribeContactFromBubble) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  acceptInvitationToJoinBubble(bubbleId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + that.account.id, that.getRequestHeader(), {\n        status: \"accepted\"\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(acceptInvitationToJoinBubble) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(acceptInvitationToJoinBubble) REST invitation accepted\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(acceptInvitationToJoinBubble) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(acceptInvitationToJoinBubble) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  declineInvitationToJoinBubble(bubbleId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + that.account.id, that.getRequestHeader(), {\n        status: \"rejected\"\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(declineInvitationToJoinBubble) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(declineInvitationToJoinBubble) REST invitation declined\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(declineInvitationToJoinBubble) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(declineInvitationToJoinBubble) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  inviteUser(email, companyId, language, message) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let user = {\n        email: email,\n        lang: language,\n        customMessage: null\n      };\n\n      if (message) {\n        user.customMessage = message;\n      }\n\n      that.http.post(\"/api/rainbow/admin/v1.0/companies/\" + companyId + \"/join-companies/invitations\", that.getRequestHeader(), user, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(inviteUser) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(inviteUser) REST admin user invitation sent\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(inviteUser) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(inviteUser) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  setAvatarRoom(bubbleid, binaryData) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let data = binaryData.data;\n      that.http.post(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleid + \"/avatar\", that.getRequestHeader(\"application/json\"), data, \"image/\" + binaryData.type).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(setAvatarRoom) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(setAvatarRoom) REST bubble Avatar sent : \", json);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(setAvatarRoom) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(setAvatarRoom) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  deleteAvatarRoom(roomId) {\n    return new Promise((resolve, reject) => {\n      let that = this;\n      that.http.delete(\"/api/rainbow/enduser/v1.0/rooms/\" + roomId + \"/avatar\", that.getRequestHeader()).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(deleteAvatarRoom) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(deleteAvatarRoom) REST deletion file descriptor\", json);\n        resolve(json);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(deleteAvatarRoom) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(deleteAvatarRoom) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  /**\r\n   * Method retrieveWebConferences\r\n   * @public\r\n   * @param {string} mediaType mediaType of conference to retrieve. Default: this.MEDIATYPE.WEBRTC\r\n   * @returns {ng.IPromise<any>} a promise that resolves when conference are reterived\r\n   * @memberof WebConferenceService\r\n   */\n  retrieveWebConferences(mediaType = this.MEDIATYPE.WEBRTC) {\n    let that = this;\n    that.logger.log(\"info\", LOG_ID + \"(retrieveWebConferences) with mediaType=\" + mediaType);\n    return new Promise((resolve, reject) => {\n      let urlQueryParameters = \"?format=full&userId=\" + that.userId;\n\n      if (mediaType) {\n        urlQueryParameters += \"&mediaType=\" + mediaType;\n      }\n\n      that.http.get(\"/api/rainbow/confprovisioning/v1.0/conferences\" + urlQueryParameters, that.getRequestHeader(), undefined)\n      /* this.$http({\r\n          method: \"GET\",\r\n          url: this.confProvPortalURL + \"conferences\" + urlQueryParameters,\r\n          headers: this.authService.getRequestHeader()\r\n      }) // */\n      // Handle success response\n      .then(response => {\n        let conferencesProvisionData = response;\n        that.logger.log(\"info\", LOG_ID + \"(WebConferenceService) retrieveWebConferences successfully\");\n        that.logger.log(\"internal\", LOG_ID + \"(WebConferenceService) retrieveWebConferences successfully : \", conferencesProvisionData);\n        resolve(conferencesProvisionData.data);\n      }, response => {\n        let msg = response.data ? response.data.errorDetails : response.data;\n        let errorMessage = \"retrieveWebConferences failure: \" + msg;\n        that.logger.log(\"error\", LOG_ID + \"(WebConferenceService) error : \" + errorMessage);\n        reject(new Error(errorMessage));\n      });\n    });\n  }\n\n  /*\r\n  ownerUpdateRoomCustomData (roomData) {\r\n      let that = this;\r\n        return new Promise(function(resolve, reject) {\r\n          let data = { \"customData\": roomData.customData };\r\n          that.logger.log(\"internal\", LOG_ID + \"(ownerUpdateRoomCustomData) roomData : \", roomData);\r\n          that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + roomData.id + \"/custom-data\", that.getRequestHeader(\"application/json\"), data, undefined).then(function(json) {\r\n              that.logger.log(\"info\", LOG_ID + \"(ownerUpdateRoomCustomData) successfull\");\r\n              that.logger.log(\"internal\", LOG_ID + \"(ownerUpdateRoomCustomData) REST bubble Avatar sent : \", json);\r\n              resolve(json.data.customData || {});\r\n          }).catch(function(err) {\r\n              that.logger.log(\"error\", LOG_ID, \"(ownerUpdateRoomCustomData) error\");\r\n              that.logger.log(\"internalerror\", LOG_ID, \"(ownerUpdateRoomCustomData) error : \", err);\r\n              return reject(err);\r\n          });\r\n      });\r\n  };\r\n    ownerUpdateRoom (roomData) {\r\n      let that = this;\r\n        return new Promise(function(resolve, reject) {\r\n          let data = {\r\n              name: roomData.name,\r\n              topic: roomData.desc,\r\n              visibility: roomData.type ? \"public\" : \"private\"\r\n          };\r\n          that.logger.log(\"internal\", LOG_ID + \"(ownerUpdateRoomCustomData) roomData : \", roomData);\r\n          that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + roomData.id , that.getRequestHeader(\"application/json\"), data, undefined).then(function(json) {\r\n              that.logger.log(\"info\", LOG_ID + \"(ownerUpdateRoomCustomData) successfull\");\r\n              that.logger.log(\"internal\", LOG_ID + \"(ownerUpdateRoomCustomData) REST bubble Avatar sent : \", json);\r\n              resolve(json.data || {});\r\n          }).catch(function(err) {\r\n              that.logger.log(\"error\", LOG_ID, \"(ownerUpdateRoomCustomData) error\");\r\n              that.logger.log(\"internalerror\", LOG_ID, \"(ownerUpdateRoomCustomData) error : \", err);\r\n              return reject(err);\r\n          });\r\n      });\r\n  };\r\n  // */\n  createUser(email, password, firstname, lastname, companyId, language, isAdmin, roles) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let user = {\n        loginEmail: email,\n        password: password,\n        firstName: firstname,\n        lastName: lastname,\n        isActive: true,\n        isInitialized: false,\n        language: language,\n        adminType: \"undefined\",\n        roles: [\"user\"],\n        accountType: \"free\",\n        companyId: null\n      };\n\n      if (companyId) {\n        user.companyId = companyId;\n      } else {\n        user.companyId = that.account.companyId;\n      }\n\n      if (roles != null) {\n        user.roles = roles;\n      }\n\n      if (isAdmin) {\n        user.roles.push(\"admin\"); //user.adminType = [\"company_admin\"];\n\n        user.adminType = \"company_admin\";\n      }\n\n      that.http.post(\"/api/rainbow/admin/v1.0/users\", that.getRequestHeader(), user, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(createUser) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(createUser) REST admin creation user\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(createUser) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(createUser) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  createGuestUser(firstname, lastname, language, timeToLive) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      // Generate user Email based on appId\n      let uid = Utils_js_1.makeId(40);\n      let appId = that._application.appID;\n      let domain = that.http.host;\n      let email = `${uid}@${appId}.${domain}`; // Generate a rainbow compatible password\n\n      let password = Utils_js_2.createPassword(40);\n      let user = {\n        loginEmail: email,\n        password: password,\n        isActive: true,\n        isInitialized: false,\n        adminType: \"undefined\",\n        roles: [\"guest\"],\n        accountType: \"free\",\n        companyId: that.account.companyId,\n        firstName: undefined,\n        lastName: undefined,\n        language: undefined,\n        timeToLive: undefined\n      };\n\n      if (firstname) {\n        user.firstName = firstname;\n      }\n\n      if (lastname) {\n        user.lastName = lastname;\n      }\n\n      if (language) {\n        user.language = language;\n      }\n\n      if (timeToLive) {\n        user.timeToLive = timeToLive;\n      }\n\n      that.http.post(\"/api/rainbow/admin/v1.0/users\", that.getRequestHeader(), user, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(createGuestUser) successfull\"); // Add generated password into the answer\n\n        json.data.password = password;\n        that.logger.log(\"internal\", LOG_ID + \"(createGuestUser) REST admin creation user\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(createGuestUser) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(createGuestUser) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  changePassword(password, userId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let data = {\n        password: password\n      };\n      that.http.put(\"/api/rainbow/admin/v1.0/users/\" + userId, that.getRequestHeader(), data, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(changePassword) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(changePassword) REST admin change password\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(changePassword) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(changePassword) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  updateInformation(objData, userId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/admin/v1.0/users/\" + userId, that.getRequestHeader(), objData, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(updateInformation) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(updateInformation) REST admin change data\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(updateInformation) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(updateInformation) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  deleteUser(userId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.delete(\"/api/rainbow/admin/v1.0/users/\" + userId, that.getRequestHeader()).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(deleteUser) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(deleteUser) REST admin delete user\", json);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(deleteUser) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(deleteUser) error : \", err);\n        return reject(err);\n      });\n    });\n  } // FileStorage\n\n\n  createFileDescriptor(name, extension, size, viewers) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let data = {\n        fileName: name,\n        extension: extension,\n        size: size,\n        viewers: viewers\n      };\n      that.http.post(\"/api/rainbow/filestorage/v1.0/files\", that.getRequestHeader(), data, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(createFileDescriptor) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(createFileDescriptor) REST get Blob from Url\");\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(createFileDescriptor) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(createFileDescriptor) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  deleteFileDescriptor(fileId) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.delete(\"/api/rainbow/filestorage/v1.0/files/\" + fileId, that.getRequestHeader()).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(deleteFileDescriptor) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(deleteFileDescriptor) REST deletion file descriptor\", json);\n        resolve(json);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(deleteFileDescriptor) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(deleteFileDescriptor) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  retrieveFileDescriptors(format, limit, offset, viewerId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let queries = [];\n\n      if (format) {\n        queries.push(\"format=\" + format);\n      }\n\n      if (limit) {\n        queries.push(\"limit=\" + limit);\n      }\n\n      if (offset) {\n        queries.push(\"offset=\" + offset);\n      }\n\n      if (viewerId) {\n        queries.push(\"viewerId=\" + viewerId);\n      }\n\n      that.http.get(\"/api/rainbow/filestorage/v1.0/files\" + (queries.length ? \"?\" + queries.join(\"&\") : \"\"), that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(retrieveFileDescriptors) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(retrieveFileDescriptors) REST get file descriptors\");\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(retrieveFileDescriptors) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(retrieveFileDescriptors) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  retrieveFilesReceivedFromPeer(userId, peerId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/filestorage/v1.0/files/viewers/\" + userId + \"?ownerId=\" + peerId + \"&format=full\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(retrieveFilesReceivedFromPeer) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(retrieveFilesReceivedFromPeer) REST get file descriptors\");\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(retrieveFilesReceivedFromPeer) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(retrieveFilesReceivedFromPeer) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  retrieveReceivedFilesForRoomOrViewer(roomId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/filestorage/v1.0/files/viewers/\" + roomId + \"?format=full\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(retrieveFilesReceivedFromPeer) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(retrieveFilesReceivedFromPeer) REST get file descriptors\");\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(retrieveFilesReceivedFromPeer) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(retrieveFilesReceivedFromPeer) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  retrieveOneFileDescriptor(fileId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/filestorage/v1.0/files/\" + fileId + \"?format=full\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(retrieveOneFileDescriptor) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(retrieveOneFileDescriptor) REST get file descriptors\");\n        let res = json ? json.data : {};\n        resolve(res);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(retrieveOneFileDescriptor) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(retrieveOneFileDescriptor) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  retrieveUserConsumption() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/filestorage/v1.0/users/consumption\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(retrieveUserConsumption) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(retrieveUserConsumption) REST get file descriptors\");\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(retrieveUserConsumption) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(retrieveUserConsumption) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  deleteFileViewer(viewerId, fileId) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.delete(\"/api/rainbow/filestorage/v1.0/files/\" + fileId + \"/viewers/\" + viewerId, that.getRequestHeader()).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(deleteFileViewer) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(deleteFileViewer) REST deletion file viewer\", json);\n        resolve(json);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(deleteFileViewer) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(deleteFileViewer) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  addFileViewer(fileId, viewerId, viewerType) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.post(\"/api/rainbow/filestorage/v1.0/files/\" + fileId + \"/viewers\", that.getRequestHeader(), {\n        viewerId: viewerId,\n        type: viewerType\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(createCompany) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(createCompany) REST creation company\", json);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(createCompany) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(createCompany) error : \", err);\n        return reject(err);\n      });\n    });\n  } // FileServer\n\n\n  getPartialDataFromServer(url, minRange, maxRange, index) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(url, that.getRequestHeaderWithRange(\"application/octet-stream\", \"bytes=\" + minRange + \"-\" + maxRange), undefined).then(function (data) {\n        that.logger.log(\"info\", LOG_ID + \"(getPartialDataFromServer) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(getPartialDataFromServer) REST get Blob from Url\");\n        resolve({\n          \"data\": data,\n          \"index\": index\n        });\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getPartialDataFromServer) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getPartialDataFromServer) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getFileFromUrl(url) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(url, that.getRequestHeader(\"application/octet-stream\"), undefined).then(function (response) {\n        that.logger.log(\"info\", LOG_ID + \"(getFileFromUrl) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(getFileFromUrl) REST get Blob from Url\");\n        resolve(response);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getFileFromUrl) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getFileFromUrl) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getBlobFromUrl(url) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      /* responseType: 'arraybuffer'// */\n      that.http.get(url, that.getRequestHeader(\"responseType: 'arraybuffer'\"), undefined).then(function (response) {\n        that.logger.log(\"info\", LOG_ID + \"(getBlobFromUrl) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(getBlobFromUrl) REST get Blob from Url\");\n        resolve(response);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getBlobFromUrl) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getBlobFromUrl) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  uploadAFile(fileId, buffer) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/fileserver/v1.0/files/\" + fileId, that.getRequestHeader(\"Content-Type: 'application/octet-stream'\"), buffer, undefined).then(function (response) {\n        that.logger.log(\"info\", LOG_ID + \"(uploadAFile) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(uploadAFile) REST file sent\");\n        resolve(response);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(uploadAFile) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(uploadAFile) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  uploadAStream(fileId, stream) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let headers = that.getRequestHeader();\n      headers['Content-Type'] = 'application/octet-stream';\n      that.http.putStream(\"/api/rainbow/fileserver/v1.0/files/\" + fileId, headers, stream).then(function (response) {\n        that.logger.log(\"info\", LOG_ID + \"(uploadAStream) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(uploadAStream) REST file sent\");\n        resolve(response);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(uploadAStream) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(uploadAStream) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  sendPartialDataToServer(fileId, file, index) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      //let headers = that.getPostHeaderWithRange(\"application/json\", initialSize, minRange, maxRange );\n      let headers = that.getRequestHeader();\n      headers[\"Content-Type\"] = 'application/octet-stream'; //headers[\"Connection\"] = 'keep-alive' ;\n      //headers['Accept-Encoding'] = 'gzip, deflate, br' ;\n      //headers['Accept-Language'] = 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7' ;\n\n      that.logger.log(\"debug\", LOG_ID + \" sendPartialDataToServer, fileId : \" + fileId + \", index : \" + index + \" Headers : \", JSON.stringify(headers, null, \"  \"));\n      that.http.putBuffer(\"/api/rainbow/fileserver/v1.0/files/\" + fileId + \"/parts/\" + index, headers, file).then(function (response) {\n        that.logger.log(\"info\", LOG_ID + \"(sendPartialDataToServer) successfull\");\n        resolve(response);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(sendPartialDataToServer) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(sendPartialDataToServer) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  sendPartialFileCompletion(fileId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let headers = that.getRequestHeader(\"application/json\");\n      headers['Content-Type'] = 'application/octet-stream';\n      that.http.putBuffer(\"/api/rainbow/fileserver/v1.0/files/\" + fileId + \"/parts/end\", headers, undefined).then(function (response) {\n        that.logger.log(\"info\", LOG_ID + \"(sendPartialFileCompletion) successfull\");\n        resolve(response);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(sendPartialFileCompletion) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(sendPartialFileCompletion) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getServerCapabilities() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/fileserver/v1.0/capabilities\", that.getRequestHeader(), undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(getServerCapabilities) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getServerCapabilities) REST get Server capabilities\", json.data);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(getServerCapabilities) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getServerCapabilities) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Settings\n\n\n  getUserSettings() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/settings\", that.getRequestHeader(), undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(getUserSettings) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getUserSettings) REST get User Settings\", json.data);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(getUserSettings) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getUserSettings) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  updateUserSettings(settings) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/settings\", that.getRequestHeader(), settings, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(updateUserSettings) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(updateUserSettings) REST user change data\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(updateUserSettings) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(updateUserSettings) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getAllCompanies() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.logger.log(\"debug\", LOG_ID + \"(getAllCompanies) that.account.roles : \", that.account.roles);\n      that.http.get(\"/api/rainbow/admin/v1.0/companies\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(getAllCompanies) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getAllCompanies) REST get all companies :\", json.data);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getAllCompanies) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getAllCompanies) error : \", err);\n        return reject(err);\n      });\n      that.logger.log(\"info\", LOG_ID + \"(getAllCompanies) after sending the request\");\n    });\n  }\n\n  getAllUsers(format = \"small\", offset = 0, limit = 100, sortField = \"loginEmail\") {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.logger.log(\"debug\", LOG_ID + \"(getAllUsers) that.account.roles : \", that.account.roles);\n      that.http.get(\"/api/rainbow/admin/v1.0/users?format=\" + encodeURIComponent(format) + \"&limit=\" + limit + \"&offset=\" + offset + \"&sortField=\" + encodeURIComponent(sortField) + \"&sortOrder=-1\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(getAllUsers) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getAllUsers) REST get all companies :\", json.data);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getAllUsers) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getAllUsers) error : \", err);\n        return reject(err);\n      });\n      that.logger.log(\"info\", LOG_ID + \"(getAllUsers) after sending the request\");\n    });\n  }\n\n  getContactInfos(userId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.logger.log(\"debug\", LOG_ID + \"(getContactInfos) that.account.roles : \", that.account.roles);\n      that.http.get(\"/api/rainbow/admin/v1.0/users/\" + userId, that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(getContactInfos) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getContactInfos) REST get infos :\", json.data);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getContactInfos) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getContactInfos) error : \", err);\n        return reject(err);\n      });\n      that.logger.log(\"info\", LOG_ID + \"(getContactInfos) after sending the request\");\n    });\n  }\n\n  putContactInfos(userId, infos) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.logger.log(\"debug\", LOG_ID + \"(getContactInfos) that.account.roles : \", that.account.roles);\n      that.http.put(\"/api/rainbow/admin/v1.0/users/\" + userId, that.getRequestHeader(), infos, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(getContactInfos) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getContactInfos) REST get infos :\", json);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getContactInfos) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getContactInfos) error : \", err);\n        return reject(err);\n      });\n      that.logger.log(\"info\", LOG_ID + \"(getContactInfos) after sending the request\");\n    });\n  }\n\n  createCompany(name, country, state) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let countryObj = {\n        name: name,\n        country: \"Fr\",\n        state: null\n      };\n\n      if (country) {\n        countryObj.country = country;\n      }\n\n      if (state) {\n        countryObj.state = state;\n      }\n\n      that.http.post('/api/rainbow/admin/v1.0/companies', that.getRequestHeader(), countryObj, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(createCompany) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(createCompany) REST creation company : \", json);\n\n        if (json && json.data) {\n          resolve(json.data);\n        } else {\n          resolve(json);\n        }\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(createCompany) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(createCompany) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getCompany(companyId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get('/api/rainbow/admin/v1.0/companies/' + companyId, that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(getCompany) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getCompany) REST get company : \", json);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getCompany) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getCompany) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  deleteCompany(companyId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.logger.log(\"debug\", LOG_ID + \"(deleteCompany) companyId\", companyId);\n      that.http.delete('/api/rainbow/admin/v1.0/companies/' + companyId, that.getRequestHeader()).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(deleteCompany) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(deleteCompany) REST deletion company : \", json);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(deleteCompany) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(deleteCompany) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  setVisibilityForCompany(companyId, visibleByCompanyId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.post('/api/rainbow/admin/v1.0/companies/' + companyId + \"/visible-by/\" + visibleByCompanyId, that.getRequestHeader(), undefined, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(setVisibilityForCompany) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(setVisibilityForCompany) REST setVisibilityForCompany company\", json);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(setVisibilityForCompany) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(setVisibilityForCompany) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Channel\n  // Create a channel\n\n\n  createPublicChannel(name, topic, category = \"globalnews\", visibility, max_items, max_payload_size) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let channel = {\n        name: name,\n        topic: null,\n        visibility: null,\n        max_items: null,\n        max_payload_size: null,\n        category: category\n      };\n\n      if (topic) {\n        channel.topic = topic;\n      }\n\n      if (visibility) {\n        channel.visibility = visibility;\n      }\n\n      if (max_items) {\n        channel.max_items = max_items;\n      }\n\n      if (max_payload_size) {\n        channel.max_payload_size = max_payload_size;\n      }\n\n      that.http.post(\"/api/rainbow/channels/v1.0/channels\", that.getRequestHeader(), channel, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(createPublicChannel) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(createPublicChannel) REST creation channel\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(createPublicChannel) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(createPublicChannel) error : \", err);\n        return reject(err);\n      });\n    });\n  } // get a channel\n\n  /* getChannel(channelId) {\r\n       let that = this;\r\n          return new Promise(function(resolve, reject) {\r\n              that.logger.log(\"debug\", LOG_ID + \"(getChannel) _entering_\");\r\n              that.http.get(\"/api/rainbow/channels/v1.0/channels/\" + channelId, that.getRequestHeader()).then(function(json) {\r\n               that.logger.log(\"info\", LOG_ID + \"(getChannel) successfull\");\r\n               that.logger.log(\"internal\", LOG_ID + \"(getChannel) REST read channelId\", json.data);\r\n               that.logger.log(\"debug\", LOG_ID + \"(getChannel) _exiting_\");\r\n               resolve(json.data);\r\n           }).catch(function(err) {\r\n               that.logger.log(\"error\", LOG_ID, \"(getChannel) error\", err);\r\n               that.logger.log(\"debug\", LOG_ID + \"(getChannel) _exiting_\");\r\n               reject(err);\r\n           });\r\n       });\r\n   } // */\n  // Delete a channel\n\n\n  deleteChannel(channelId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.delete(\"/api/rainbow/channels/v1.0/channels/\" + channelId, that.getRequestHeader()).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(deleteChannel) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(deleteChannel) REST remove channelId\", json);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(deleteChannel) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(deleteChannel) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Find Channels\n\n\n  findChannels(name, topic, category, limit, offset, sortField, sortOrder) {\n    let that = this;\n    let query = \"?limit=\";\n\n    if (limit) {\n      query += limit;\n    } else {\n      query += \"100\";\n    }\n\n    if (name) {\n      query += \"&name=\" + name;\n    }\n\n    if (topic) {\n      query += \"&topic=\" + topic;\n    }\n\n    if (category) {\n      query += \"&category=\" + category;\n    }\n\n    if (offset) {\n      query += \"&offset=\" + offset;\n    }\n\n    if (sortField) {\n      query += \"&sortField=\" + sortField;\n    }\n\n    if (sortOrder) {\n      query += \"&sortOrder=\" + sortOrder;\n    }\n\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/channels/v1.0/channels/search\" + query, that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(findChannels) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(findChannels) REST found channels\", json.total);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(findChannels) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(findChannels) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Get my channels\n\n\n  getChannels() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/channels/v1.0/channels\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(fetchMyChannels) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(fetchMyChannels) received channels\");\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(fetchMyChannels) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(fetchMyChannels) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getChannel(id) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/channels/v1.0/channels/\" + id, that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getChannel) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getChannel) received channels : \", json);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getChannel) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getChannel) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Publish a message to a channel\n\n\n  publishMessage(channelId, message, title, url, imagesIds, type) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      let payload = {\n        type,\n        message: message,\n        title: title || \"\",\n        url: url || \"\",\n        images: null\n      };\n\n      if (imagesIds) {\n        payload.images = imagesIds || null;\n      }\n\n      that.http.post(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/publish\", that.getRequestHeader(), payload, undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(publishMessage) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(publishMessage) REST message published\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(publishMessage) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(publishMessage) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  chewReceivedItems(items) {\n    items.forEach(item => {\n      if (item.type === \"urn:xmpp:channels:simple\") {\n        item[\"entry\"] = {\n          message: item.message\n        };\n        delete item.message;\n      }\n\n      item.displayId = item.id + \"-\" + item.timestamp;\n      item.modified = item.creation !== undefined;\n    });\n  }\n  /**\r\n   * Get latests message from channel\r\n   */\n\n\n  getLatestMessages(maxMessages, beforeDate = null, afterDate = null) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/channels/v1.0/channels/latest-items\", that.getRequestHeader(), {\n        max: maxMessages,\n        before: beforeDate,\n        after: afterDate\n      }).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getLatestMessages) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getLatestMessages) received \" + JSON.stringify(json) + \" latestMessages\");\n        that.chewReceivedItems(json.data.items);\n        resolve(json.data.items);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getLatestMessages) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getLatestMessages) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  // Subscribe to a channel\n  subscribeToChannel(channelId) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.post(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/subscribe\", that.getRequestHeader(), undefined, undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(subscribeToChannel) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(subscribeToChannel) REST channel subscribed\", json.data);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(subscribeToChannel) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(subscribeToChannel) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Unsubscribe to a channel\n\n\n  unsubscribeToChannel(channelId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.delete(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/subscribe\", that.getRequestHeader()).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(unsubscribeToChannel) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(unsubscribeToChannel) REST channel unsubscribed\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(unsubscribeToChannel) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(unsubscribeToChannel) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Update channels\n\n\n  updateChannel(channelId, title, visibility, max_items, max_payload_size, channelName, mode) {\n    let that = this;\n    let channel = {\n      name: null,\n      topic: null,\n      visibility: null,\n      max_items: null,\n      max_payload_size: null,\n      mode: null\n    };\n\n    if (title === null) {\n      delete channel.topic;\n    } else {\n      channel.topic = title;\n    }\n\n    if (visibility === null) {\n      delete channel.visibility;\n    } else {\n      channel.visibility = visibility;\n    }\n\n    if (mode === null) {\n      delete channel.mode;\n    } else {\n      channel.mode = mode;\n    }\n\n    if (max_items === null) {\n      delete channel.max_items;\n    } else {\n      channel.max_items = max_items;\n    }\n\n    if (max_payload_size === null) {\n      delete channel.max_payload_size;\n    } else {\n      channel.max_payload_size = max_payload_size;\n    }\n\n    if (channelName === null) {\n      delete channel.name;\n    } else {\n      channel.name = channelName;\n    }\n\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/channels/v1.0/channels/\" + channelId, that.getRequestHeader(), channel, undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(updateChannel) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(updateChannel) REST channel updated\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(updateChannel) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(updateChannel) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  uploadChannelAvatar(channelId, avatar, avatarSize, fileType) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      //this.roomService.resizeImage(avatar, avatarSize, avatarSize)\n      //  .then((resizedImage) => {\n      //var binaryData = this.roomService.getBinaryData(resizedImage);\n      that.http.post(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/avatar\", that.getRequestHeader(), avatar, fileType).then(response => {\n        that.logger.log(\"info\", LOG_ID + \"(updateChannel) successfull channelId : \", channelId);\n        resolve(response);\n      }).catch(err => {\n        return reject(err);\n      }); //});\n    });\n  }\n\n  deleteChannelAvatar(channelId) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.delete(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/avatar\", that.getRequestHeader(\"image/jpeg\")).then(response => {\n        that.logger.log(\"info\", LOG_ID + \"(deleteChannelAvatar) successfull channelId : \", channelId);\n        resolve(response);\n      }).catch(err => {\n        return reject(err);\n      });\n    });\n  } // Get all users from channel\n\n\n  getChannelUsers(channelId, options) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let filterToApply = \"format=full\";\n\n      if (options.format) {\n        filterToApply = \"format=\" + options.format;\n      }\n\n      if (options.page > 0) {\n        filterToApply += \"&offset=\";\n\n        if (options.page > 1) {\n          filterToApply += options.limit * (options.page - 1);\n        } else {\n          filterToApply += 0;\n        }\n      }\n\n      filterToApply += \"&limit=\" + Math.min(options.limit, 1000);\n\n      if (options.type) {\n        filterToApply += \"&types=\" + options.type;\n      }\n\n      that.http.get(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/users?\" + filterToApply, that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getUsersChannel) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getUsersChannel) received \", json.total, \" users in channel\");\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getUsersChannel) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getUsersChannel) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Delete all users in channel\n\n\n  deleteAllUsersFromChannel(channelId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.delete(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/users\", that.getRequestHeader()).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(deleteAllUsersFromChannel) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(deleteAllUsersFromChannel) REST remove all users in channel with channelId\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(deleteAllUsersFromChannel) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(deleteAllUsersFromChannel) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Update a collection of channel users\n\n\n  updateChannelUsers(channelId, users) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/users\", that.getRequestHeader(), {\n        \"data\": users\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(updateChannelUsers) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(updateChannelUsers) REST channels updated\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(updateChannelUsers) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(updateChannelUsers) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Update a collection of channel users\n\n\n  getChannelMessages(channelId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.post(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/items\", that.getRequestHeader(), {\n        \"max\": \"100\"\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(getChannelMessages) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getChannelMessages) REST channels messages received\", json.data.items.length);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getChannelMessages) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getChannelMessages) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n  /**\r\n   * Delete item from a channel\r\n   */\n\n\n  deleteChannelMessage(channelId, itemId) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.delete(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/items/\" + itemId, that.getRequestHeader()).then(response => {\n        that.logger.log(\"info\", LOG_ID + \"[channelService] deleteChannelItem (\" + channelId + \", \" + itemId + \") -- success\");\n        resolve(itemId);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"[channelService] deleteChannelItem (\" + channelId + \", \" + itemId + \") -- failure -- \");\n        that.logger.log(\"internalerror\", LOG_ID, \"[channelService] deleteChannelItem (\" + channelId + \", \" + itemId + \") -- failure -- \", err.message);\n        return reject(err);\n      });\n    });\n  }\n\n  // Get Server Profiles\n  getServerProfiles() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/profiles\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getServerProfiles) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getServerProfiles) received \", json, \" profiles\");\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getServerProfiles) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getServerProfiles) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Get Server Profiles\n\n\n  getServerProfilesFeatures() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/profiles/features\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getServerProfilesFeatures) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getServerProfilesFeatures) received \" + JSON.stringify(json) + \" profiles features\");\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getServerProfilesFeatures) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getServerProfilesFeatures) error : \", err);\n        return reject(err);\n      });\n    });\n  } ////////\n  // Telephony\n\n\n  makeCall(contact, phoneInfo) {\n    let that = this;\n    return that.restTelephony.makeCall(that.getRequestHeader(), contact, phoneInfo);\n  }\n\n  releaseCall(call) {\n    let that = this;\n    return that.restTelephony.releaseCall(that.getRequestHeader(), call);\n  }\n\n  makeConsultationCall(callId, contact, phoneInfo) {\n    let that = this;\n    return that.restTelephony.makeConsultationCall(that.getRequestHeader(), callId, contact, phoneInfo);\n  }\n\n  answerCall(call) {\n    let that = this;\n    return that.restTelephony.answerCall(that.getRequestHeader(), call);\n  }\n\n  holdCall(call) {\n    let that = this;\n    return that.restTelephony.holdCall(that.getRequestHeader(), call);\n  }\n\n  retrieveCall(call) {\n    let that = this;\n    return that.restTelephony.retrieveCall(that.getRequestHeader(), call);\n  }\n\n  deflectCallToVM(call, VMInfos) {\n    let that = this;\n    return that.restTelephony.deflectCallToVM(that.getRequestHeader(), call, VMInfos);\n  }\n\n  deflectCall(call, calleeInfos) {\n    let that = this;\n    return that.restTelephony.deflectCall(that.getRequestHeader(), call, calleeInfos);\n  }\n\n  transfertCall(activeCall, heldCall) {\n    let that = this;\n    return that.restTelephony.transfertCall(that.getRequestHeader(), activeCall, heldCall);\n  }\n\n  conferenceCall(activeCall, heldCall) {\n    let that = this;\n    return that.restTelephony.conferenceCall(that.getRequestHeader(), activeCall, heldCall);\n  }\n\n  forwardToDevice(contact, phoneInfo) {\n    let that = this;\n    return that.restTelephony.forwardToDevice(that.getRequestHeader(), contact, phoneInfo);\n  }\n\n  getForwardStatus() {\n    let that = this;\n    return that.restTelephony.getForwardStatus(that.getRequestHeader());\n  }\n\n  getNomadicStatus() {\n    let that = this;\n    return that.restTelephony.getNomadicStatus(that.getRequestHeader());\n  }\n\n  nomadicLogin(data) {\n    let that = this;\n    return that.restTelephony.nomadicLogin(that.getRequestHeader(), data);\n  }\n\n  sendDtmf(callId, deviceId, data) {\n    let that = this;\n    return that.restTelephony.sendDtmf(that.getRequestHeader(), callId, deviceId, data);\n  }\n\n  logon(endpointTel, agentId, password, groupId) {\n    let that = this;\n    return that.restTelephony.logon(that.getRequestHeader(), endpointTel, agentId, password, groupId);\n  }\n\n  logoff(endpointTel, agentId, password, groupId) {\n    let that = this;\n    return that.restTelephony.logoff(that.getRequestHeader(), endpointTel, agentId, password, groupId);\n  }\n\n  withdrawal(agentId, groupId, status) {\n    let that = this;\n    return that.restTelephony.withdrawal(that.getRequestHeader(), agentId, groupId, status);\n  }\n\n  wrapup(agentId, groupId, password, status) {\n    let that = this;\n    return that.restTelephony.wrapup(that.getRequestHeader(), agentId, groupId, password, status);\n  }\n\n  getRainbowNodeSdkPackagePublishedInfos() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      let headers = {\n        \"Accept\": \"application/json\"\n      };\n      that.http.getUrl(\"https://api.npms.io/v2/search?q=rainbow-node-sdk\", headers, undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getRainbowNodeSdkPackagePublishedInfos) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getRainbowNodeSdkPackagePublishedInfos) received \", json);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getRainbowNodeSdkPackagePublishedInfos) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getRainbowNodeSdkPackagePublishedInfos) error : \", err);\n        return reject(err);\n      });\n    });\n  } ////////\n  // Conversations\n\n\n  getServerConversations(format = \"small\") {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations?format=\" + format, that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getServerConversations) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getServerConversations) received \" + JSON.stringify(json) + \" conversations\");\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getServerConversations) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getServerConversations) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  createServerConversation(conversation) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations\", that.getRequestHeader(), conversation, undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(createServerConversation) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(createServerConversation) REST conversation created\", json.data);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(createServerConversation) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(createServerConversation) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  deleteServerConversation(conversationId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.delete(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations/\" + conversationId, that.getRequestHeader()).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(deleteServerConversation) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(deleteServerConversation) REST conversation deleted\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(deleteServerConversation) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(deleteServerConversation) error : \", err);\n        return reject(err);\n      });\n    });\n  } //Update conversation\n\n\n  updateServerConversation(conversationId, mute) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations/\" + conversationId, that.getRequestHeader(), {\n        \"mute\": mute\n      }, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(updateServerConversation) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(updateServerConversation) REST conversation updated\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(updateServerConversation) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(updateServerConversation) error : \", err);\n        return reject(err);\n      });\n    });\n  } // Send Conversation By Email\n\n\n  sendConversationByEmail(conversationId) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations/\" + conversationId + \"/downloads\", that.getRequestHeader(), undefined, undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(sendConversationByEmail) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(sendConversationByEmail) REST conversation sent by email.\", json.data);\n        resolve(json.data);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(sendConversationByEmail) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(sendConversationByEmail) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  ackAllMessages(conversationId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.put(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations/\" + conversationId + \"/markallread\", that.getRequestHeader(), undefined, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(ackAllMessages) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(ackAllMessages) REST ack all messages updated : \", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(ackAllMessages) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(ackAllMessages) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  joinConference(webPontConferenceId, role = \"moderator\") {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let muted = \"unmuted\";\n      let params = {\n        participant: {\n          role: role,\n          type: muted\n        },\n        mediaType: that.MEDIATYPE.WEBRTC\n      };\n      that.logger.log(\"internal\", LOG_ID + \"(joinConference) REST params : \", params);\n      that.http.post(\"/api/rainbow/conference/v1.0/conferences/\" + webPontConferenceId + \"/snapshot?mediaType=webrtc\", that.getRequestHeader(), params, undefined).then(json => {\n        //that.http.post(\"/api/rainbow/conference/v1.0/conferences/\" + webPontConferenceId + \"/join\", that.getRequestHeader(), params, undefined).then((json) => {\n        that.logger.log(\"info\", LOG_ID + \"(joinConference) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(joinConference) REST conference updated : \", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(joinConference) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(joinConference) error : \", err);\n        return reject(err);\n      });\n    });\n  } // ***** INVITATIONS *****\n\n\n  getAllSentInvitations() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/sent?format=full&status=pending&limit=500\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getAllSentInvitations) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getAllSentInvitations) received : \", json);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getAllSentInvitations) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getAllSentInvitations) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getServerInvitation(invitationId) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/\" + invitationId, that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getServerInvitation) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getServerInvitation) received : \", json);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getServerInvitation) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getServerInvitation) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  sendInvitationByEmail(email, lang, customMessage) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      let params = {\n        email: email,\n        lang: lang,\n        customMessage: customMessage\n      };\n      that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations\", that.getRequestHeader(), params, undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(sendInvitationByEmail) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(sendInvitationByEmail) REST invitation created : \", json);\n        resolve(json);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(sendInvitationByEmail) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(sendInvitationByEmail) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  cancelOneSendInvitation(invitation) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/\" + invitation.id + \"/cancel\", that.getRequestHeader(), undefined, undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(cancelOneSendInvitation) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(cancelOneSendInvitation) REST cancel one send invitation created : \", json);\n        resolve(json);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(cancelOneSendInvitation) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(cancelOneSendInvitation) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  reSendInvitation(invitationId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/\" + invitationId + \"/re-send\", that.getRequestHeader(), undefined, undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(reSendInvitation) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(reSendInvitation) REST reSend invitation created : \", json);\n        resolve(json);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(reSendInvitation) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(reSendInvitation) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  sendInvitationsParBulk(listOfMails) {\n    let that = this;\n    let data = {\n      emails: listOfMails\n    };\n    return new Promise(function (resolve, reject) {\n      that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/bulk\", that.getRequestHeader(), data, undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(sendInvitationsParBulk) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(sendInvitationsParBulk) REST invitations sent : \", json);\n        resolve(json);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(sendInvitationsParBulk) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(sendInvitationsParBulk) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  getAllReceivedInvitations() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/received?format=full&status=pending&status=accepted&status=auto-accepted&limit=500\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getAllReceivedInvitations) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getAllReceivedInvitations) received : \", json);\n        resolve(json);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getAllReceivedInvitations) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getAllReceivedInvitations) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  //////\n  // Generic HTTP VERB\n  get(url, token) {\n    let that = this;\n    that.token = token;\n    return new Promise(function (resolve, reject) {\n      that.http.get(url, that.getRequestHeader(), undefined).then(function (JSON) {\n        resolve(JSON);\n      }).catch(function (err) {\n        that.logger.log(\"internalerror\", LOG_ID + \"(get) CATCH Error !!! : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  post(url, token, data, contentType) {\n    let that = this;\n    that.token = token;\n    return new Promise(function (resolve, reject) {\n      that.http.post(url, that.getRequestHeader(), data, contentType).then(function (JSON) {\n        resolve(JSON);\n      }).catch(function (err) {\n        that.logger.log(\"internalerror\", LOG_ID + \"(post) CATCH Error !!! : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  put(url, token, data) {\n    let that = this;\n    that.token = token;\n    return new Promise(function (resolve, reject) {\n      that.http.put(url, that.getRequestHeader(), data, undefined).then(function (JSON) {\n        resolve(JSON);\n      }).catch(function (err) {\n        that.logger.log(\"internalerror\", LOG_ID + \"(put) CATCH Error !!! : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  delete(url, token) {\n    let that = this;\n    that.token = token;\n    return new Promise(function (resolve, reject) {\n      that.http.delete(url, that.getRequestHeader()).then(function (JSON) {\n        resolve(JSON);\n      }).catch(function (err) {\n        that.logger.log(\"internalerror\", LOG_ID + \"(delete) CATCH Error !!! : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  checkEveryPortals() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this; //that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) \");\n\n      if (this._isOfficialRainbow) {\n        let authenticationAbout = that.http.get(\"/api/rainbow/authentication/v1.0/about\", that.getDefaultHeader(), undefined).then(portalAbout => {\n          that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) authentication about : \", portalAbout);\n        });\n        let enduserAbout = that.http.get(\"/api/rainbow/enduser/v1.0/about\", that.getDefaultHeader(), undefined).then(portalAbout => {\n          that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) enduser about : \", portalAbout);\n        });\n        let telephonyAbout = that.http.get(\"/api/rainbow/telephony/v1.0/about\", that.getDefaultHeader(), undefined).then(portalAbout => {\n          that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) telephony about : \", portalAbout);\n        });\n        let adminAbout = that.http.get(\"/api/rainbow/admin/v1.0/about\", that.getDefaultHeader(), undefined).then(portalAbout => {\n          that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) admin about : \", portalAbout);\n        });\n        let channelsAbout = that.http.get(\"/api/rainbow/channels/v1.0/about\", that.getDefaultHeader(), undefined).then(portalAbout => {\n          that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) channels about : \", portalAbout);\n        });\n        let applicationsAbout = that.http.get(\"/api/rainbow/applications/v1.0/about\", that.getDefaultHeader(), undefined).then(portalAbout => {\n          that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) applications about : \", portalAbout);\n        });\n        return Promise.all([authenticationAbout, enduserAbout, telephonyAbout, adminAbout, channelsAbout, applicationsAbout]);\n      } else {\n        that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals)\", that.http._host, \"NOT IN RAINBOW PRODUCTION so do not test every application's about status \");\n        return Promise.resolve({\n          'status': \"OK\"\n        });\n      }\n    });\n  }\n\n  checkPortalHealth() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/ping\", that.getDefaultHeader(), undefined).then(function (JSON) {\n        that.logger.log(\"debug\", LOG_ID + \"(checkPortalHealth) Wait a few time (10 seconds ) before check every portals, because somes of it respond before being xmpp ready.\");\n        setTimeout(() => {\n          that.checkEveryPortals().then(() => {\n            that.logger.log(\"debug\", LOG_ID + \"(checkPortalHealth) Connection succeeded!\");\n            resolve(JSON);\n          }).catch(err => {\n            that.logger.log(\"debug\", LOG_ID + \"(checkPortalHealth) Connection failed!\");\n            return reject(err);\n          });\n        }, 1000 * 10);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID + \"(checkPortalHealth) ErrorManager \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(checkPortalHealth) ErrorManager : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  attemptToReconnect(reconnectDelay) {\n    let that = this;\n    that.logger.log(\"debug\", LOG_ID + \"(attemptToReconnect) Next attempt in \" + that.reconnectDelay + \"ms\");\n    setTimeout(() => {\n      that.checkPortalHealth().then(() => {\n        //that.logger.log(\"debug\", LOG_ID + \"(attemptToReconnect) Attempt succeeded!\");\n        that.eventEmitter.emit(\"attempt_succeeded\");\n      }).catch(err => {\n        //that.logger.log(\"debug\", LOG_ID + \"(attemptToReconnect) Attempt failed!\");\n        that.eventEmitter.emit(\"attempt_failed\");\n      });\n    }, reconnectDelay);\n  }\n\n  get_attempt_succeeded_callback(resolve) {\n    let that = this; //that.logger.log(\"debug\", LOG_ID + \"(reconnect) get_attempt_succeeded_callback\");\n\n    that.attempt_promise_resolver.resolve = resolve;\n\n    if (!that.attempt_succeeded_callback) {\n      that.logger.log(\"debug\", LOG_ID + \"(reconnect) get_attempt_succeeded_callback create the singleton of attempt_succeeded_callback method\");\n\n      that.attempt_succeeded_callback = () => {\n        that.logger.log(\"debug\", LOG_ID + \"(reconnect) attempt_succeeded_callback reconnection attempt successfull!\");\n        that.fibonacciStrategy.reset(); //that.reconnect.delay = that.fibonacciStrategy.getInitialDelay();\n\n        if (that.attempt_promise_resolver.resolve) {\n          that.attempt_promise_resolver.resolve();\n        } else {\n          that.logger.log(\"error\", LOG_ID + \"(reconnect) attempt_succeeded_callback resolve is not define !\");\n        }\n      };\n    }\n\n    return that.attempt_succeeded_callback;\n  }\n\n  get_attempt_failed_callback(reject) {\n    let that = this;\n    that.attempt_promise_resolver.reject = reject; //that.logger.log(\"debug\", LOG_ID + \"(reconnect) get_attempt_failed_callback\");\n\n    if (!that.attempt_failed_callback) {\n      that.logger.log(\"debug\", LOG_ID + \"(reconnect) get_attempt_failed_callback create the singleton of attempt_failed_callback method\");\n\n      that.attempt_failed_callback = () => {\n        that.logger.log(\"debug\", LOG_ID + \"(reconnect) attempt_failed_callback attempt #\" + that.currentAttempt + \" has failed!\");\n        that.currentAttempt++;\n\n        if (that.currentAttempt < that.maxAttemptToReconnect) {\n          that.reconnectDelay = that.fibonacciStrategy.next();\n          that.attemptToReconnect(that.reconnectDelay);\n        } else {\n          if (that.attempt_promise_resolver.reject) {\n            that.attempt_promise_resolver.reject();\n          } else {\n            that.logger.log(\"error\", LOG_ID + \"(reconnect) attempt_failed_callback reject is not define !\");\n          }\n        }\n      };\n    }\n\n    return that.attempt_failed_callback;\n  }\n\n  reconnect() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that.currentAttempt = 0;\n      that.eventEmitter.removeListener(\"attempt_succeeded\", that.get_attempt_succeeded_callback());\n      that.eventEmitter.on(\"attempt_succeeded\", that.get_attempt_succeeded_callback(resolve));\n      that.eventEmitter.removeListener(\"attempt_failed\", that.get_attempt_failed_callback());\n      that.eventEmitter.on(\"attempt_failed\", that.get_attempt_failed_callback(reject));\n      that.attemptToReconnect(that.reconnectDelay);\n    });\n  } // ************* S2S **************************\n\n\n  listConnectionsS2S() {\n    let that = this; //that.logger.log(\"internal\", LOG_ID + \"(listConnectionsS2S) S2S\");\n\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/ucs/v1.0/connections\", that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(listConnectionsS2S) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(listConnectionsS2S) received : \", json);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(listConnectionsS2S) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(listConnectionsS2S) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  sendS2SPresence(obj) {\n    let that = this;\n    that.logger.log(\"internal\", LOG_ID + \"(sendS2SPresence) Set S2S presence : \", obj);\n    return new Promise(function (resolve, reject) {\n      let data = obj ? {\n        presence: {\n          show: obj.show,\n          status: obj.status\n        }\n      } : {\n        presence: {\n          show: \"\",\n          status: \"\"\n        }\n      };\n\n      if (!that.connectionS2SInfo || !that.connectionS2SInfo.id) {\n        that.logger.log(\"error\", LOG_ID, \"(sendS2SPresence) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(sendS2SPresence) error connectionS2SInfo.id is not defined.\");\n        return reject({\n          code: -1,\n          label: \"connectionS2SInfo.id is not defined!!!\"\n        });\n      }\n\n      that.http.put(\"/api/rainbow/ucs/v1.0/connections/\" + that.connectionS2SInfo.id + \"/presences\", that.getRequestHeader(), data, undefined).then(function (json) {\n        that.logger.log(\"info\", LOG_ID + \"(sendS2SPresence) successfull.\");\n        that.logger.log(\"internal\", LOG_ID + \"(sendS2SPresence) REST presence updated\", json.data);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(sendS2SPresence) error.\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(sendS2SPresence) error : \", err);\n        return reject(err);\n      });\n    });\n    /*return axios.put(`/api/rainbow/ucs/v1.0/connections/${connectionInfo.id}/presences`, { presence: { show:\"\", status: \"\"}} ) //, {connection: { /*resource: \"s2s_machin\",*/\n\n    /* callback_url: \"https://e894efad.ngrok.io\" }})\r\n    .then( response => {\r\n    console.log( \"it worked\" );\r\n    console.log( response.data )\r\n    console.log( response.config)\r\n    console.log( \"STATUS = \", response.status)\r\n    return response.data\r\n    } )\r\n    // */\n  }\n\n  deleteConnectionsS2S(connexions) {\n    let that = this;\n    that.logger.log(\"debug\", LOG_ID + \"(deleteConnectionsS2S) will del cnx S2S\");\n    that.logger.log(\"info\", LOG_ID + \"(deleteConnectionsS2S) will del cnx S2S : \", connexions);\n    const requests = [];\n    connexions.forEach(cnx => requests.push(that.http.delete(\"/api/rainbow/ucs/v1.0/connections/\" + cnx.id, that.getRequestHeader()).then(function (json) {\n      that.logger.log(\"debug\", LOG_ID + \"(deleteConnectionsS2S) successfull\");\n      that.logger.log(\"internal\", LOG_ID + \"(deleteConnectionsS2S) REST result : \", json.data);\n      return json.data;\n    }).catch(function (err) {\n      that.logger.log(\"error\", LOG_ID, \"(deleteConnectionsS2S) error\");\n      that.logger.log(\"internalerror\", LOG_ID, \"(deleteConnectionsS2S) error : \", err);\n      return err;\n    })));\n    return Promise.all(connexions).then(response => {\n      that.logger.log(\"debug\", LOG_ID + \"(deleteConnectionsS2S) all successfull\"); //console.log(\"it worked\");\n      //console.log( response.data )\n      //connectionInfo = response.data.data\n      //process.exit()\n\n      return response;\n    });\n  }\n\n  loginS2S(callback_url) {\n    let that = this;\n    let data = {\n      connection: {\n        /*resource: \"s2s_machin\",*/\n        callback_url\n      }\n    };\n    that.logger.log(\"debug\", LOG_ID + \"(loginS2S)  will login  S2S.\");\n    that.logger.log(\"internal\", LOG_ID + \"(loginS2S) will login S2S : \", data);\n    return new Promise(function (resolve, reject) {\n      that.http.post(\"/api/rainbow/ucs/v1.0/connections\", that.getRequestHeader(), data, undefined).then(json => {\n        that.logger.log(\"info\", LOG_ID + \"(loginS2S) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(loginS2S) REST loginS2S successfull : \", json);\n        that.connectionS2SInfo = json;\n        resolve(json);\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID, \"(loginS2S) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(loginS2S) error : \", err);\n        return reject(err);\n      });\n    });\n    /*\r\n           console.log( \"will do login S2S\")\r\n           return axios.post(`/api/rainbow/ucs/v1.0/connections`, {connection: { /*resource: \"s2s_machin\",*/\n\n    /* callback_url }})\r\n    .then( response => {\r\n    console.log( \"it worked\" );\r\n    console.log( response.data )\r\n    connectionInfo = response.data.data\r\n    return response.data\r\n    } )\r\n    // */\n  }\n\n  infoS2S(s2sConnectionId) {\n    let that = this;\n    that.logger.log(\"debug\", LOG_ID + \"(infoS2S)  will get info S2S\");\n    that.logger.log(\"internal\", LOG_ID + \"(infoS2S) will get info S2S\");\n    return new Promise(function (resolve, reject) {\n      that.http.get(\"/api/rainbow/ucs/v1.0/connections/\" + s2sConnectionId, that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(infoS2S) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(infoS2S) REST info S2S received : \", json);\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(infoS2S) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(infoS2S) error : \", err);\n        return reject(err);\n      });\n    });\n    /*console.log( \"will do infoS2S\", obj );\r\n      return axios.get(`/api/rainbow/ucs/v1.0/connections/`+connectionInfo.id ) //, {connection: { /*resource: \"s2s_machin\",*/\n\n    /*  callback_url: \"https://e894efad.ngrok.io\" }})\r\n    .then( response => {\r\n    console.log( \"it worked\" );\r\n    //console.log( response.data )\r\n    return response.data\r\n    } )\r\n    // */\n  }\n\n  setS2SConnection(connectionId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      that.logger.log(\"debug\", LOG_ID + \"(setS2SConnection)  will get info S2S and save the session infos.\");\n      that.logger.log(\"internal\", LOG_ID + \"(setS2SConnection) will get info S2S and save the session infos.\");\n      return that.connectionS2SInfo = yield that.infoS2S(connectionId);\n    });\n  }\n\n  sendS2SMessageInConversation(conversationId, msg) {\n    // https://openrainbow.com:443/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (!msg) {\n        that.logger.log(\"debug\", LOG_ID + \"(sendS2SMessageInConversation) failed\");\n        that.logger.log(\"info\", LOG_ID + \"(sendS2SMessageInConversation) No msg provided\");\n        resolve(null);\n      } else {\n        that.http.post(\"/api/rainbow/ucs/v1.0/connections/\" + that.connectionS2SInfo.id + \"/conversations/\" + conversationId + \"/messages\", that.getRequestHeader(), msg, undefined).then(function (json) {\n          that.logger.log(\"debug\", LOG_ID + \"(sendS2SMessageInConversation) successfull\");\n          that.logger.log(\"internal\", LOG_ID + \"(sendS2SMessageInConversation) REST contact received \", json.data);\n          resolve(json.data);\n        }).catch(function (err) {\n          that.logger.log(\"error\", LOG_ID, \"(sendS2SMessageInConversation) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(sendS2SMessageInConversation) error : \", err);\n          return reject(err);\n        });\n      }\n    });\n  }\n\n  getS2SServerConversation(conversationId) {\n    let that = this; // https://openrainbow.com:443/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{id}\n\n    return new Promise((resolve, reject) => {\n      that.http.get(\"/api/rainbow/ucs/v1.0/connections/\" + that.connectionS2SInfo.id + \"/conversations/\" + conversationId, that.getRequestHeader(), undefined).then(function (json) {\n        that.logger.log(\"debug\", LOG_ID + \"(getServerConversation) successfull\");\n        that.logger.log(\"internal\", LOG_ID + \"(getServerConversation) received \" + JSON.stringify(json) + \" conversations\");\n        resolve(json.data);\n      }).catch(function (err) {\n        that.logger.log(\"error\", LOG_ID, \"(getServerConversation) error\");\n        that.logger.log(\"internalerror\", LOG_ID, \"(getServerConversation) error : \", err);\n        return reject(err);\n      });\n    });\n  }\n\n  joinS2SRoom(roomid) {\n    // https://openrainbow.com:443/api/rainbow/ucs/v1.0/connections/{cnxId}/rooms/{roomId}/join\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (!roomid) {\n        that.logger.log(\"debug\", LOG_ID + \"(joinRoom) failed\");\n        that.logger.log(\"info\", LOG_ID + \"(joinRoom) No roomid provided\");\n        reject({\n          code: -1,\n          label: \"roomid is not defined!!!\"\n        });\n      } else {\n        that.http.post(\"/api/rainbow/ucs/v1.0/connections/\" + that.connectionS2SInfo.id + \"/rooms/\" + roomid + \"/join\", that.getRequestHeader(), {}, undefined).then(function (json) {\n          that.logger.log(\"debug\", LOG_ID + \"(joinRoom) successfull\");\n          that.logger.log(\"internal\", LOG_ID + \"(joinRoom) REST bubble presence received \", json.data);\n          resolve(json.data);\n        }).catch(function (err) {\n          that.logger.log(\"error\", LOG_ID, \"(joinRoom) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(joinRoom) error : \", err);\n          return reject(err);\n        });\n      }\n    });\n  }\n\n  markMessageAsRead(conversationId, messageId) {\n    // https://openrainbow.com:443/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages/{id}/read\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      if (!conversationId) {\n        that.logger.log(\"debug\", LOG_ID + \"(markMessageAsRead) failed\");\n        that.logger.log(\"info\", LOG_ID + \"(markMessageAsRead) No conversationId provided\");\n        reject({\n          code: -1,\n          label: \"conversationId is not defined!!!\"\n        });\n      } else if (!messageId) {\n        that.logger.log(\"debug\", LOG_ID + \"(markMessageAsRead) failed\");\n        that.logger.log(\"info\", LOG_ID + \"(markMessageAsRead) No messageId provided\");\n        reject({\n          code: -1,\n          label: \"messageId is not defined!!!\"\n        });\n      } else {\n        that.http.put(\"/api/rainbow/ucs/v1.0/connections/\" + that.connectionS2SInfo.id + \"/conversations/\" + conversationId + \"/messages/\" + messageId + \"/read\", that.getRequestHeader(), {}, undefined).then(function (json) {\n          that.logger.log(\"debug\", LOG_ID + \"(markMessageAsRead) successfull\");\n          that.logger.log(\"internal\", LOG_ID + \"(markMessageAsRead) REST bubble presence received \", json.data);\n          resolve(json.data);\n        }).catch(function (err) {\n          that.logger.log(\"error\", LOG_ID, \"(markMessageAsRead) error\");\n          that.logger.log(\"internalerror\", LOG_ID, \"(markMessageAsRead) error : \", err);\n          return reject(err);\n        });\n      }\n    });\n  }\n\n};\nRESTService = __decorate([Utils_js_1.logEntryExit(LOG_ID)], RESTService);\nexports.RESTService = RESTService;\nmodule.exports.RESTService = RESTService;","map":{"version":3,"sources":["../../src/lib/connection/RESTService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst jwt = require(\"jwt-decode\");\r\nconst btoa = require(\"btoa\");\r\nconst CryptoJS = require(\"crypto-js\");\r\nconst backoff = require(\"backoff\");\r\nconst Utils_js_1 = require(\"../common/Utils.js\");\r\nconst Utils_js_2 = require(\"../common/Utils.js\");\r\nconst RESTTelephony_1 = require(\"./RestServices/RESTTelephony\");\r\nlet packageVersion = require(\"../../package.json\");\r\nconst RECONNECT_INITIAL_DELAY = 2000;\r\nconst RECONNECT_MAX_DELAY = 60000;\r\n/*\r\nvar getRequestHeader;\r\nvar getRequestHeaderWithRange;\r\nvar getLoginHeader;\r\nvar getDefaultHeader;\r\n// */\r\nconst LOG_ID = \"REST - \";\r\nlet RESTService = class RESTService {\r\n    constructor(_credentials, _application, _isOfficialRainbow, evtEmitter, _logger) {\r\n        /// Conference\r\n        this.MEDIATYPE = {\r\n            WEBRTC: \"webrtc\",\r\n            WEBRTCSHARINGONLY: \"webrtcSharingOnly\"\r\n        };\r\n        let that = this;\r\n        let self = this;\r\n        this.http = null;\r\n        this.account = null;\r\n        this.app = null;\r\n        this.token = null;\r\n        this.renewTokenInterval = null;\r\n        this.auth = btoa(_credentials.login + \":\" + _credentials.password);\r\n        this._credentials = _credentials;\r\n        this._application = _application;\r\n        this.loginEmail = _credentials.login;\r\n        this.eventEmitter = evtEmitter;\r\n        this.logger = _logger;\r\n        this.currentAttempt = 0;\r\n        this.attempt_succeeded_callback = undefined;\r\n        this.attempt_failed_callback = undefined;\r\n        this.attempt_promise_resolver = { resolve: undefined, reject: undefined };\r\n        this._isOfficialRainbow = _isOfficialRainbow;\r\n        this.maxAttemptToReconnect = 50;\r\n        this.fibonacciStrategy = new backoff.FibonacciStrategy({ randomisationFactor: 0.4, initialDelay: RECONNECT_INITIAL_DELAY, maxDelay: RECONNECT_MAX_DELAY });\r\n        this.reconnectDelay = this.fibonacciStrategy.getInitialDelay();\r\n        this.restTelephony = new RESTTelephony_1.RESTTelephony(evtEmitter, _logger);\r\n        this.getRequestHeader = (accept) => {\r\n            let headers = {\r\n                \"Authorization\": \"Bearer \" + that.token,\r\n                \"Accept\": accept || \"application/json\",\r\n            };\r\n            return headers;\r\n        };\r\n        this.getRequestHeaderWithRange = (accept, range) => {\r\n            let header = this.getRequestHeader(accept);\r\n            header.Range = range;\r\n            return header;\r\n        };\r\n        this.getPostHeader = (contentType) => {\r\n            let header = this.getRequestHeader();\r\n            let type = contentType || \"application/json\";\r\n            header[\"Content-Type\"] = type;\r\n            return header;\r\n        };\r\n        this.getPostHeaderWithRange = (accept, initialSize, minRange, maxRange) => {\r\n            let header = this.getRequestHeader(accept);\r\n            // Content-Range: bytes 0-1048575/2960156\r\n            //header[\"Content-Range\"] = \"bytes \" + minRange + \"-\" + maxRange + \"/\" + initialSize;\r\n            return header;\r\n        };\r\n        this.getLoginHeader = (auth, password) => {\r\n            let headers = {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Basic \" + (auth || that.auth),\r\n                \"x-rainbow-client\": \"sdk_node\",\r\n                \"x-rainbow-client-version\": packageVersion.version\r\n            };\r\n            let toEncrypt = that._application.appSecret + (password || that._credentials.password);\r\n            //that.logger.log(\"debug\", LOG_ID + \"toEncrypt : \" + toEncrypt);\r\n            let encrypted = CryptoJS.SHA256(toEncrypt).toString();\r\n            //that.logger.log(\"debug\", LOG_ID + \"encrypted : \" + encrypted);\r\n            let base64 = btoa(that._application.appID + ':' + encrypted);\r\n            //that.logger.log(\"debug\", LOG_ID + \"base64 : \" + base64);\r\n            if (that._application.appSecret && base64 && base64.length) {\r\n                headers[\"x-rainbow-app-auth\"] = \"Basic \" + base64 || \"\";\r\n            }\r\n            return headers;\r\n        };\r\n        this.getDefaultHeader = () => {\r\n            return {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            };\r\n        };\r\n    }\r\n    get userId() {\r\n        return this.account ? this.account.id : \"\";\r\n    }\r\n    get loggedInUser() {\r\n        return this.account;\r\n    }\r\n    start(http) {\r\n        let that = this;\r\n        that.http = http;\r\n        return that.restTelephony.start(that.http).then(() => {\r\n            that.logger.log(\"internal\", LOG_ID + \"(start) email used\", that.loginEmail);\r\n        });\r\n    }\r\n    stop() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.signout().then(() => {\r\n                that.logger.log(\"debug\", LOG_ID + \"(stop) Successfully stopped\");\r\n                resolve();\r\n            }).catch((err) => {\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    signin(token) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            // Login by the token provided in parameter.\r\n            if (token) {\r\n                try {\r\n                    that.logger.log(\"internal\", LOG_ID + \"(signin) with token : \", token, \" : \", that.getLoginHeader());\r\n                    let decodedtoken = jwt(token);\r\n                    let JSON = {\r\n                        \"loggedInUser\": decodedtoken.user,\r\n                        \"loggedInApplication\": decodedtoken.app,\r\n                        \"token\": token\r\n                    };\r\n                    that.account = JSON.loggedInUser;\r\n                    that.app = JSON.loggedInApplication;\r\n                    that.token = JSON.token;\r\n                    let loggedInUser = yield that.getContactInformationByLoginEmail(decodedtoken.user.loginEmail).then((contactsFromServeur) => __awaiter(this, void 0, void 0, function* () {\r\n                        if (contactsFromServeur && contactsFromServeur.length > 0) {\r\n                            let contact = null;\r\n                            that.logger.log(\"info\", LOG_ID + \"(signin) contact found on server, get full infos.\");\r\n                            let _contactFromServer = contactsFromServeur[0];\r\n                            if (_contactFromServer) {\r\n                                // The contact is not found by email in the that.contacts tab, so it need to be find on server to get or update it.\r\n                                return yield that.getContactInformationByID(_contactFromServer.id).then((_contactInformation) => {\r\n                                    that.logger.log(\"internal\", LOG_ID + \"(signin) contact full infos : \", _contactInformation);\r\n                                    return _contactInformation;\r\n                                });\r\n                            }\r\n                        }\r\n                    }));\r\n                    that.account = JSON.loggedInUser = loggedInUser;\r\n                    that.logger.log(\"debug\", LOG_ID + \"(signin) token signin, welcome \" + that.account.id + \"!\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(signin) user information \", that.account);\r\n                    that.logger.log(\"internal\", LOG_ID + \"(signin) application information : \", that.app);\r\n                    return Promise.resolve(JSON);\r\n                }\r\n                catch (err) {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(signin) CATCH Error !!! error : \", err);\r\n                    return Promise.reject(err);\r\n                }\r\n            }\r\n            // If no token is provided, then signin with user/pwd credentials.\r\n            return new Promise(function (resolve, reject) {\r\n                that.http.get(\"/api/rainbow/authentication/v1.0/login\", that.getLoginHeader(), undefined).then(function (JSON) {\r\n                    that.account = JSON.loggedInUser;\r\n                    that.app = JSON.loggedInApplication;\r\n                    that.token = JSON.token;\r\n                    that.logger.log(\"internal\", LOG_ID + \"(signin) welcome \" + that.account.displayName + \"!\");\r\n                    //that.logger.log(\"debug\", LOG_ID + \"(signin) user information \", that.account);\r\n                    that.logger.log(\"internal\", LOG_ID + \"(signin) application information : \", that.app);\r\n                    resolve(JSON);\r\n                }).catch(function (err) {\r\n                    that.logger.log(\"error\", LOG_ID, \"(signin) ErrorManager during REST signin\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(signin) ErrorManager during REST signin : \", err);\r\n                    return reject(err);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    setconnectionS2SInfo(_connectionS2SInfo) {\r\n        this.connectionS2SInfo = _connectionS2SInfo;\r\n    }\r\n    askTokenOnBehalf(loginEmail, password) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let auth = btoa(loginEmail + \":\" + password);\r\n            that.http.get(\"/api/rainbow/authentication/v1.0/login\", that.getLoginHeader(auth, password), undefined).then(function (JSON) {\r\n                that.logger.log(\"internal\", LOG_ID + \"(askTokenOnBehalf) successfully received token for \", JSON.loggedInUser.id, \" !\");\r\n                resolve(JSON);\r\n            })\r\n                .catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(askTokenOnBehalf) Error requesting a token\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(askTokenOnBehalf) Error requesting a token : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    signout() {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (that.http) {\r\n                that.http.get(\"/api/rainbow/authentication/v1.0/logout\", that.getRequestHeader(), undefined).then(function (JSON) {\r\n                    that.account = null;\r\n                    that.token = null;\r\n                    that.renewTokenInterval = null;\r\n                    that.logger.log(\"info\", LOG_ID + \"(signout) Successfully signed-out!\");\r\n                    resolve(JSON);\r\n                }).catch(function (err) {\r\n                    that.logger.log(\"error\", LOG_ID, \"error at signout\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"error at signout : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            else {\r\n                that.logger.log(\"warn\", LOG_ID + \"(signout) seems to be already signed-out!\");\r\n                resolve(null);\r\n            }\r\n        });\r\n    }\r\n    startTokenSurvey() {\r\n        let that = this;\r\n        let decodedToken = jwt(that.token);\r\n        that.logger.log(\"debug\", LOG_ID + \"(startTokenSurvey) - token\");\r\n        that.logger.log(\"info\", LOG_ID + \"(startTokenSurvey) - token, exp : \", decodedToken.exp, \", iat : \", decodedToken.iat);\r\n        that.logger.log(\"internal\", LOG_ID + \"(startTokenSurvey) - token, decodedToken : \", decodedToken);\r\n        let halfExpirationDate = (decodedToken.exp - decodedToken.iat) / 2 + decodedToken.iat;\r\n        let tokenExpirationTimestamp = halfExpirationDate * 1000;\r\n        let expirationDate = new Date(tokenExpirationTimestamp);\r\n        let currentDate = new Date();\r\n        let currentTimestamp = currentDate.valueOf();\r\n        let tokenExpirationDuration = tokenExpirationTimestamp - currentTimestamp;\r\n        if (tokenExpirationDuration < 0) {\r\n            that.logger.log(\"warn\", LOG_ID + \"(startTokenSurvey) auth token has already expired, re-new it immediately\");\r\n            that._renewAuthToken();\r\n        }\r\n        else if (tokenExpirationDuration < 300000) {\r\n            that.logger.log(\"warn\", LOG_ID + \"(startTokenSurvey) auth token will expire in less 5 minutes, re-new it immediately\");\r\n            that._renewAuthToken();\r\n        }\r\n        else {\r\n            let usedExpirationDuration = tokenExpirationDuration - 3600000; // Refresh 1 hour before the token expiration - negative values are well treated by settimeout\r\n            that.logger.log(\"info\", LOG_ID + \"(startTokenSurvey) start token survey (expirationDate: \" + expirationDate + \" currentDate:\" + currentDate + \" tokenExpirationDuration: \" + tokenExpirationDuration + \"ms usedExpirationDuration: \" + usedExpirationDuration + \"ms)\");\r\n            if (that.renewTokenInterval) {\r\n                that.logger.log(\"info\", LOG_ID + \"(startTokenSurvey) remove timer\");\r\n                clearTimeout(that.renewTokenInterval);\r\n            }\r\n            that.logger.log(\"info\", LOG_ID + \"(startTokenSurvey) start a new timer for renewing token in \", usedExpirationDuration, \" ms\");\r\n            that.renewTokenInterval = setTimeout(function () {\r\n                that._renewAuthToken();\r\n            }, usedExpirationDuration);\r\n        }\r\n    }\r\n    _renewAuthToken() {\r\n        let that = this;\r\n        that.http.get(\"/api/rainbow/authentication/v1.0/renew\", that.getRequestHeader(), undefined).then(function (JSON) {\r\n            that.logger.log(\"info\", LOG_ID + \"(_renewAuthToken) renew authentication token success\");\r\n            that.token = JSON.token;\r\n            that.logger.log(\"internal\", LOG_ID + \"(_renewAuthToken) new token received\", that.token);\r\n            that.eventEmitter.emit(\"rainbow_tokenrenewed\");\r\n        }).catch(function (err) {\r\n            that.logger.log(\"error\", LOG_ID, \"(_renewAuthToken) renew authentication token failure\");\r\n            that.logger.log(\"internalerror\", LOG_ID, \"(_renewAuthToken) renew authentication token failure : \", err);\r\n            clearTimeout(that.renewTokenInterval);\r\n            that.renewTokenInterval = null;\r\n            that.eventEmitter.emit(\"rainbow_tokenexpired\");\r\n        });\r\n    }\r\n    // Contacts API\r\n    getContacts() {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/users/networks?format=full\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getContacts) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getContacts) received \" + json.total + \" contacts\");\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getContacts) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getContacts) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getContactInformationByJID(jid) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!jid) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByJID) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(getContactInformationByJID) No jid provided\");\r\n                resolve(null);\r\n            }\r\n            else {\r\n                // Remove resource from jid\r\n                let jidBare = jid;\r\n                if (jid.includes(\"/\")) {\r\n                    jidBare = jid.substr(0, jid.lastIndexOf(\"/\"));\r\n                }\r\n                that.http.get(\"/api/rainbow/enduser/v1.0/users/jids/\" + encodeURIComponent(jidBare), that.getRequestHeader(), undefined).then(function (json) {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByJID) successfull\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(getContactInformationByJID) REST contact received \", json.data);\r\n                    resolve(json.data);\r\n                }).catch(function (err) {\r\n                    that.logger.log(\"error\", LOG_ID, \"(getContactInformationByJID) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(getContactInformationByJID) error : \", err);\r\n                    if (err && err.code === 404) {\r\n                        resolve(null);\r\n                    }\r\n                    else {\r\n                        return reject(err);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    getContactInformationByID(id) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!id) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByID) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(getContactInformationByID) No id provided\");\r\n                resolve(null);\r\n            }\r\n            else {\r\n                that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + encodeURIComponent(id) + \"?format=full\", that.getRequestHeader(), undefined).then(function (json) {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByID) successfull\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(getContactInformationByID) REST contact received \", json.data);\r\n                    resolve(json.data);\r\n                }).catch(function (err) {\r\n                    that.logger.log(\"error\", LOG_ID, \"(getContactInformationByID) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(getContactInformationByID) error : \", err);\r\n                    if (err && err.code === 404) {\r\n                        resolve(null);\r\n                    }\r\n                    else {\r\n                        return reject(err);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    getContactInformationByLoginEmail(email) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!email) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByLoginEmail) failed\");\r\n                that.logger.log(\"info\", LOG_ID + \"(getContactInformationByLoginEmail) No email provided\");\r\n                resolve(null);\r\n            }\r\n            else {\r\n                //that.logger.log(\"internal\", LOG_ID + \"(getContactInformationByLoginEmail) with params : \", { \"loginEmail\": email });\r\n                that.http.post(\"/api/rainbow/enduser/v1.0/users/loginEmails\", that.getRequestHeader(), { \"loginEmail\": email }, undefined).then(function (json) {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(getContactInformationByLoginEmail) successfull\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(getContactInformationByLoginEmail) REST contact received \", json.data);\r\n                    resolve(json.data);\r\n                }).catch(function (err) {\r\n                    that.logger.log(\"error\", LOG_ID, \"(getContactInformationByLoginEmail) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(getContactInformationByLoginEmail) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    getServerFavorites() {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            //that.logger.log(\"internal\", LOG_ID + \"(getContactInformationByLoginEmail) with params : \", { \"loginEmail\": email });\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.userId + \"/favorites\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getServerFavorites) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getServerFavorites) REST result : \", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getServerFavorites) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getServerFavorites) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    addServerFavorite(peerId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            return new Promise(function (resolve, reject) {\r\n                if (!peerId) {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(addServerFavorite) failed\");\r\n                    that.logger.log(\"info\", LOG_ID + \"(addServerFavorite) No peerId provided\");\r\n                    resolve(null);\r\n                }\r\n                else {\r\n                    let data = { peerId, type };\r\n                    that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.userId + \"/favorites\", that.getRequestHeader(), data, undefined).then(function (json) {\r\n                        that.logger.log(\"debug\", LOG_ID + \"(addServerFavorite) successfull\");\r\n                        that.logger.log(\"internal\", LOG_ID + \"(addServerFavorite) REST result : \", json.data);\r\n                        resolve(json.data);\r\n                    }).catch(function (err) {\r\n                        that.logger.log(\"error\", LOG_ID, \"(addServerFavorite) error\");\r\n                        that.logger.log(\"internalerror\", LOG_ID, \"(addServerFavorite) error : \", err);\r\n                        return reject(err);\r\n                    });\r\n                }\r\n            });\r\n            /*\r\n            let that = this;\r\n            try {\r\n                let url = `${config.restServerUrl}/api/rainbow/enduser/v1.0/users/${this.contactService.userContact.dbId}/favorites`;\r\n                let data = { peerId, type };\r\n                await this.$http({ method: \"POST\", url, headers: this.authService.getRequestHeader(), data });\r\n    \r\n                that._logger.log(\"debug\", LOG_ID +`[favoriteService] addServerFavorite(${peerId}, ${type}) -- SUCCESS`);\r\n            }\r\n            catch (error) {\r\n                let errorMessage = `addServerFavorite(${peerId}, ${type}) -- FAILURE -- ${error.message}`;\r\n                that._logger.log(\"error\", LOG_ID + `[favoriteService] ${errorMessage}`);\r\n                throw new Error(errorMessage);\r\n            }\r\n    \r\n             */\r\n        });\r\n    }\r\n    removeServerFavorite(favoriteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            return new Promise(function (resolve, reject) {\r\n                if (!favoriteId) {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(removeServerFavorite) failed\");\r\n                    that.logger.log(\"info\", LOG_ID + \"(removeServerFavorite) No favoriteId provided\");\r\n                    resolve(null);\r\n                }\r\n                else {\r\n                    that.http.delete(\"/api/rainbow/enduser/v1.0/users/\" + that.userId + \"/favorites/\" + favoriteId, that.getRequestHeader()).then(function (json) {\r\n                        that.logger.log(\"debug\", LOG_ID + \"(removeServerFavorite) successfull\");\r\n                        that.logger.log(\"internal\", LOG_ID + \"(removeServerFavorite) REST result : \", json.data);\r\n                        resolve(json.data);\r\n                    }).catch(function (err) {\r\n                        that.logger.log(\"error\", LOG_ID, \"(removeServerFavorite) error\");\r\n                        that.logger.log(\"internalerror\", LOG_ID, \"(removeServerFavorite) error : \", err);\r\n                        return reject(err);\r\n                    });\r\n                }\r\n            });\r\n            /*\r\n                       let url = `${config.restServerUrl}/api/rainbow/enduser/v1.0/users/${this.contactService.userContact.dbId}/favorites/${favoriteId}`;\r\n                       await this.$http({ method: \"DELETE\", url: url, headers: this.authService.getRequestHeader() });\r\n                        */\r\n        });\r\n    }\r\n    /**\r\n     * ACCEPT INVITATION\r\n     * Used by SDK (public)\r\n     * Warning when modifying this method\r\n     */\r\n    acceptInvitation(invitation) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.logger.log(\"internal\", LOG_ID + \"(acceptInvitation) invitation : \", invitation);\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + invitation.invitedUserId + \"/invitations/\" + invitation.id + \"/accept\", that.getRequestHeader(), {}, undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(acceptInvitation) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(acceptInvitation) REST invitation received \", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(acceptInvitation) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(acceptInvitation) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * DECLINE INVITATION\r\n     * Used by SDK (public)\r\n     * Warning when modifying this method\r\n     */\r\n    declineInvitation(invitation) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.logger.log(\"internal\", LOG_ID + \"(declineInvitation) invitation : \", invitation);\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + invitation.invitedUserId + \"/invitations/\" + invitation.id + \"/decline\", that.getRequestHeader(), {}, undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(declineInvitation) successfull\");\r\n                resolve();\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(declineInvitation) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(declineInvitation) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * SEND INVITATION\r\n     * Used by SDK (public)\r\n     * Warning when modifying this method\r\n     */\r\n    joinContactInvitation(contact) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.logger.log(\"internal\", LOG_ID + \"(joinContactInvitation) contact : \", contact);\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations\", that.getRequestHeader(), { \"invitedUserId\": contact.id }, undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(joinContactInvitation) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(joinContactInvitation) REST invitation received \", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(joinContactInvitation) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(joinContactInvitation) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    joinContacts(contact, contactIds, presence) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.post(\"/api/rainbow/admin/v1.0/users/\" + contact.id + \"/networks\", that.getRequestHeader(), {\r\n                \"users\": contactIds,\r\n                \"presence\": Boolean(presence)\r\n            }, undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(joinContacts) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(joinContacts) REST invitation received \", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(joinContacts) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(joinContacts) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getInvitationById(invitationId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!invitationId) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getInvitationById) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(getInvitationById) No id provided\");\r\n                resolve(null);\r\n            }\r\n            else {\r\n                that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/\" + invitationId, that.getRequestHeader(), undefined).then(function (json) {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(getInvitationById) successfull\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(getInvitationById) REST invitation received \", json.data);\r\n                    resolve(json.data);\r\n                }).catch(function (err) {\r\n                    that.logger.log(\"error\", LOG_ID, \"(getInvitationById) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(getInvitationById) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    getGroups() {\r\n        let that = this;\r\n        let getSetOfGroups = function (page, max, groups) {\r\n            return new Promise((resolve, reject) => {\r\n                that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups?format=full&offset=\" + page + \"&limit=\" + max, that.getRequestHeader(), undefined).then(function (json) {\r\n                    groups = groups.concat(json.data);\r\n                    that.logger.log(\"internal\", LOG_ID + \"(getGroups) retrieved \" + json.data.length + \" groups, total \" + groups.length + \", existing \" + json.total);\r\n                    resolve({ groups: groups, finished: groups.length === json.total });\r\n                }).catch(function (err) {\r\n                    return reject(err);\r\n                });\r\n            });\r\n        };\r\n        let getAllGroups = function (page, limit, groups) {\r\n            return new Promise((resolve, reject) => {\r\n                getSetOfGroups(page, limit, groups).then((json) => {\r\n                    if (json.finished) {\r\n                        that.logger.log(\"info\", LOG_ID + \"(getGroups) getSetOfGroups no need to loop again. All groups retrieve...\");\r\n                        return resolve(json.groups);\r\n                    }\r\n                    page += limit;\r\n                    that.logger.log(\"internal\", LOG_ID + \"(getGroups) getSetOfGroups need another loop to get more groups... [\" + json.groups.length + \"]\");\r\n                    getAllGroups(page, limit, json.groups).then((allGroups) => {\r\n                        resolve(allGroups);\r\n                    }).catch((err) => {\r\n                        return reject(err);\r\n                    });\r\n                }).catch((err) => {\r\n                    return reject(err);\r\n                });\r\n            });\r\n        };\r\n        return new Promise(function (resolve, reject) {\r\n            let page = 0;\r\n            let limit = 100;\r\n            getAllGroups(page, limit, []).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(getGroups) getAllGroups successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getGroups) getAllGroups received \" + json.length + \" groups\");\r\n                resolve(json);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(getGroups) getAllGroups error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getGroups) getAllGroups error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getGroup(groupId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId, that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getGroup) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getGroup) REST get group information\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getGroup) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getGroup) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    setFavoriteGroup(group, favorite) {\r\n        /*\r\n        Request URL: https://vberder.openrainbow.org/api/rainbow/enduser/v1.0/users/5bbdc3ae2cf496c07dd8912f/groups/5e3d39e1cbc6187d74aee06c\r\nRequest Method: PUT\r\n{name: \"GroupTest\", comment: \"descgroup\", isFavorite: true}\r\n         */\r\n        let that = this;\r\n        //  let data = { \"name\": group.name, \"comment\": group.comment, \"isFavorite\": group.isFavorite }\r\n        let data = {\r\n            isFavorite: favorite\r\n        };\r\n        let groupId = group.id;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId, that.getRequestHeader(), data, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(setFavoriteGroup) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(setFavoriteGroup) REST set group favorite information : \", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(setFavoriteGroup) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(setFavoriteGroup) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    createGroup(name, comment, isFavorite) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups\", that.getRequestHeader(), {\r\n                name: name,\r\n                comment: comment,\r\n                isFavorite: isFavorite\r\n            }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(createGroup) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(createGroup) REST group created\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(createGroup) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(createGroup) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    deleteGroup(groupId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.delete(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId, that.getRequestHeader()).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(deleteGroup) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(deleteGroup) REST delete group\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(deleteGroup) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(deleteGroup) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    updateGroupName(groupId, name) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId, that.getRequestHeader(), {\r\n                name: name\r\n            }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(updateGroupName) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(updateGroupName) REST delete group\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(updateGroupName) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(updateGroupName) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    addUserInGroup(contactId, groupId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId + \"/users/\" + contactId, that.getRequestHeader(), undefined, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(addUserInGroup) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(addUserInGroup) REST add user in group\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(addUserInGroup) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(addUserInGroup) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    removeUserFromGroup(contactId, groupId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.delete(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/groups/\" + groupId + \"/users/\" + contactId, that.getRequestHeader()).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(removeUserFromGroup) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(removeUserFromGroup) REST remove user from group\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID + \"(removeUserFromGroup) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(removeUserFromGroup) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getBots() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/bots\", that.getRequestHeader(), undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(getBots) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getBots) received \" + json.total + \" bots\");\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getBots) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getBots) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Bubble API\r\n    createBubble(name, description, withHistory) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let history = \"none\";\r\n            if (withHistory) {\r\n                history = \"all\";\r\n            }\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/rooms\", that.getRequestHeader(), {\r\n                name: name,\r\n                topic: description,\r\n                history: history\r\n            }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(createBubble) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(createBubble) REST bubble created\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(createBubble) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(createBubble) error\", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    setBubbleVisibility(bubbleId, visibility) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId, that.getRequestHeader(), {\r\n                visibility: visibility\r\n            }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(setBubbleVisibility) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(setBubbleVisibility) REST bubble set visibility\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(setBubbleVisibility) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(setBubbleVisibility) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    setBubbleTopic(bubbleId, topic) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId, that.getRequestHeader(), {\r\n                topic: topic\r\n            }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(setBubbleTopic) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(setBubbleTopic) REST bubble updated topic\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(setBubbleTopic) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(setBubbleTopic) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    setBubbleName(bubbleId, name) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId, that.getRequestHeader(), {\r\n                name: name\r\n            }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(setBubbleName) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(setBubbleName) REST bubble updated name\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(setBubbleName) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(setBubbleName) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getBubbles() {\r\n        let that = this;\r\n        let getSetOfBubbles = (page, max, bubbles) => {\r\n            return new Promise((resolve, reject) => {\r\n                that.http.get(\"/api/rainbow/enduser/v1.0/rooms?format=full&offset=\" + page + \"&limit=\" + max + \"&userId=\" + that.account.id, that.getRequestHeader(), undefined).then(function (json) {\r\n                    bubbles = bubbles.concat(json.data);\r\n                    that.logger.log(\"info\", LOG_ID + \"(getBubbles) getSetOfBubbles successfull\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(getBubbles) getSetOfBubbles retrieved \" + json.data.length + \" bubbles, total \" + bubbles.length + \", existing \" + json.total);\r\n                    resolve({ bubbles: bubbles, finished: bubbles.length === json.total });\r\n                }).catch(function (err) {\r\n                    return reject(err);\r\n                });\r\n            });\r\n        };\r\n        let getAllBubbles = function (page, limit, bubbles) {\r\n            return new Promise((resolve, reject) => {\r\n                getSetOfBubbles(page, limit, bubbles).then((json) => {\r\n                    if (json.finished) {\r\n                        that.logger.log(\"info\", LOG_ID + \"(getAllBubbles) no need to loop again. All bubbles retrieved...\");\r\n                        return resolve(json.bubbles);\r\n                    }\r\n                    page += limit;\r\n                    that.logger.log(\"info\", LOG_ID + \"(getAllBubbles) need another loop to get more bubbles... [\" + json.bubbles.length + \"]\");\r\n                    getAllBubbles(page, limit, json.bubbles).then((bubbles) => {\r\n                        resolve(bubbles);\r\n                    }).catch((err) => {\r\n                        return reject(err);\r\n                    });\r\n                }).catch((err) => {\r\n                    return reject(err);\r\n                });\r\n            });\r\n        };\r\n        return new Promise(function (resolve, reject) {\r\n            let page = 0;\r\n            let limit = 100;\r\n            getAllBubbles(page, limit, []).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(getBubbles) getAllBubbles successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getBubbles) getAllBubbles received \" + json.length + \" bubbles\");\r\n                resolve(json);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(getBubbles) getAllBubbles error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getBubbles) getAllBubbles error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getBubble(bubbleId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"?format=full\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getBubble) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getBubble) REST get bubble information\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getBubble) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getBubble) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getBubbleByJid(bubbleJid) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            //http://vberder.openrainbow.org/api/rainbow/enduser/v1.0/rooms/jids/{jid}\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/rooms/jids/\" + bubbleJid + \"?format=full\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getBubbleByJid) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getBubbleByJid) REST get bubble information\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getBubbleByJid) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getBubbleByJid) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    setBubbleCustomData(bubbleId, customData) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/custom-data\", that.getRequestHeader(), customData, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(setBubbleCustomData) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(setBubbleCustomData) REST PUT customData to bubble\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(setBubbleCustomData) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(setBubbleCustomData) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    inviteContactToBubble(contactId, bubbleId, asModerator, withInvitation, reason) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let privilege = asModerator ? \"moderator\" : \"user\";\r\n            let status = withInvitation ? \"invited\" : \"accepted\";\r\n            reason = reason || \"from moderator\";\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users\", that.getRequestHeader(), { userId: contactId, reason: reason, privilege: privilege, status: status }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(inviteContactToBubble) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(inviteContactToBubble) REST bubble invitation\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(inviteContactToBubble) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(inviteContactToBubble) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    inviteContactsByEmailsToBubble(contactsEmails, bubbleId) {\r\n        let that = this;\r\n        const data = {\r\n            scenario: \"chat\",\r\n            emails: contactsEmails // [\"philippe.torrelli@gmail.com\"]\r\n        };\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/invitations\", that.getRequestHeader(), data, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(inviteContactToBubble) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(inviteContactToBubble) REST bubble invitation\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(inviteContactToBubble) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(inviteContactToBubble) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Get all users from bubble\r\n    getRoomUsers(bubbleId, options = {}) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let filterToApply = \"format=medium\";\r\n            if (options.format) {\r\n                filterToApply = \"format=\" + options.format;\r\n            }\r\n            if (!options.limit)\r\n                options.limit = 100;\r\n            if (options.page > 0) {\r\n                filterToApply += \"&offset=\";\r\n                if (options.page > 1) {\r\n                    filterToApply += (options.limit * (options.page - 1));\r\n                }\r\n                else {\r\n                    filterToApply += 0;\r\n                }\r\n            }\r\n            filterToApply += \"&limit=\" + Math.min(options.limit, 1000);\r\n            if (options.type) {\r\n                filterToApply += \"&types=\" + options.type;\r\n            }\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users?\" + filterToApply, that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getUsersChannel) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getUsersChannel) received \", json.total, \" users in bubble\");\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getUsersChannel) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getUsersChannel) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    promoteContactInBubble(contactId, bubbleId, asModerator) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let privilege = asModerator ? \"moderator\" : \"user\";\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + contactId, that.getRequestHeader(), { privilege: privilege }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(promoteContactInBubble) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(promoteContactInBubble) REST invitation accepted\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(promoteContactInBubble) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(promoteContactInBubble) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    changeBubbleOwner(bubbleId, contactId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId, that.getRequestHeader(), { \"owner\": contactId }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(changeBubbleOwner) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(changeBubbleOwner) REST invitation accepted\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(changeBubbleOwner) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(changeBubbleOwner) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    archiveBubble(bubbleId) {\r\n        // /api/rainbow/enduser/v1.0/rooms/:roomId/archive\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.logger.log(\"internal\", LOG_ID + \"(archiveBubble) bubbleId : \", bubbleId);\r\n            let data = {};\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/archive\", that.getRequestHeader(), data, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(archiveBubble) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(archiveBubble) REST leave bubble\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(archiveBubble) error.\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(archiveBubble) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    leaveBubble(bubbleId, bubbleStatus) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.logger.log(\"internal\", LOG_ID + \"(leaveBubble) bubbleId : \", bubbleId, \", bubbleStatus : \", bubbleStatus);\r\n            switch (bubbleStatus) {\r\n                case \"unsubscribed\":\r\n                    that.http.delete(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + that.account.id, that.getRequestHeader()).then(function (json) {\r\n                        that.logger.log(\"info\", LOG_ID + \"(leaveBubble) delete successfull\");\r\n                        that.logger.log(\"internal\", LOG_ID + \"(leaveBubble) REST leave bubble\", json.data);\r\n                        resolve(json.data);\r\n                    }).catch(function (err) {\r\n                        that.logger.log(\"error\", LOG_ID, \"(leaveBubble) error\");\r\n                        that.logger.log(\"internalerror\", LOG_ID, \"(leaveBubble) error : \", err);\r\n                        return reject(err);\r\n                    });\r\n                    break;\r\n                default:\r\n                    that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + that.account.id, that.getRequestHeader(), { \"status\": \"unsubscribed\" }, undefined).then(function (json) {\r\n                        that.logger.log(\"info\", LOG_ID + \"(leaveBubble) unsubscribed successfull\");\r\n                        that.logger.log(\"internal\", LOG_ID + \"(leaveBubble) REST invitation accepted\", json.data);\r\n                        resolve(json.data);\r\n                    }).catch(function (err) {\r\n                        that.logger.log(\"error\", LOG_ID, \"(leaveBubble) error\");\r\n                        that.logger.log(\"internalerror\", LOG_ID, \"(leaveBubble) error : \", err);\r\n                        return reject(err);\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    deleteBubble(bubbleId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.delete(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId, that.getRequestHeader()).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(deleteBubble) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(deleteBubble) REST leave bubble : \", json);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(deleteBubble) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(deleteBubble) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    removeInvitationOfContactToBubble(contactId, bubbleId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.delete(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + contactId, that.getRequestHeader()).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(removeInvitationOfContactToBubble) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(removeInvitationOfContactToBubble) REST remove contact from bubble\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(removeInvitationOfContactToBubble) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(removeInvitationOfContactToBubble) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    unsubscribeContactFromBubble(contactId, bubbleId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + contactId, that.getRequestHeader(), { status: \"unsubscribed\" }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(unsubscribeContactFromBubble) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(unsubscribeContactFromBubble) REST remove contact from bubble\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(unsubscribeContactFromBubble) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(unsubscribeContactFromBubble) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    acceptInvitationToJoinBubble(bubbleId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + that.account.id, that.getRequestHeader(), { status: \"accepted\" }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(acceptInvitationToJoinBubble) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(acceptInvitationToJoinBubble) REST invitation accepted\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(acceptInvitationToJoinBubble) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(acceptInvitationToJoinBubble) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    declineInvitationToJoinBubble(bubbleId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleId + \"/users/\" + that.account.id, that.getRequestHeader(), { status: \"rejected\" }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(declineInvitationToJoinBubble) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(declineInvitationToJoinBubble) REST invitation declined\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(declineInvitationToJoinBubble) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(declineInvitationToJoinBubble) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    inviteUser(email, companyId, language, message) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let user = {\r\n                email: email,\r\n                lang: language,\r\n                customMessage: null\r\n            };\r\n            if (message) {\r\n                user.customMessage = message;\r\n            }\r\n            that.http.post(\"/api/rainbow/admin/v1.0/companies/\" + companyId + \"/join-companies/invitations\", that.getRequestHeader(), user, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(inviteUser) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(inviteUser) REST admin user invitation sent\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(inviteUser) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(inviteUser) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    setAvatarRoom(bubbleid, binaryData) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let data = binaryData.data;\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/rooms/\" + bubbleid + \"/avatar\", that.getRequestHeader(\"application/json\"), data, \"image/\" + binaryData.type).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(setAvatarRoom) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(setAvatarRoom) REST bubble Avatar sent : \", json);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(setAvatarRoom) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(setAvatarRoom) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    deleteAvatarRoom(roomId) {\r\n        return new Promise((resolve, reject) => {\r\n            let that = this;\r\n            that.http.delete(\"/api/rainbow/enduser/v1.0/rooms/\" + roomId + \"/avatar\", that.getRequestHeader()).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(deleteAvatarRoom) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(deleteAvatarRoom) REST deletion file descriptor\", json);\r\n                resolve(json);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(deleteAvatarRoom) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(deleteAvatarRoom) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * Method retrieveWebConferences\r\n     * @public\r\n     * @param {string} mediaType mediaType of conference to retrieve. Default: this.MEDIATYPE.WEBRTC\r\n     * @returns {ng.IPromise<any>} a promise that resolves when conference are reterived\r\n     * @memberof WebConferenceService\r\n     */\r\n    retrieveWebConferences(mediaType = this.MEDIATYPE.WEBRTC) {\r\n        let that = this;\r\n        that.logger.log(\"info\", LOG_ID + \"(retrieveWebConferences) with mediaType=\" + mediaType);\r\n        return new Promise((resolve, reject) => {\r\n            let urlQueryParameters = \"?format=full&userId=\" + that.userId;\r\n            if (mediaType) {\r\n                urlQueryParameters += \"&mediaType=\" + mediaType;\r\n            }\r\n            that.http.get(\"/api/rainbow/confprovisioning/v1.0/conferences\" + urlQueryParameters, that.getRequestHeader(), undefined)\r\n                /* this.$http({\r\n                    method: \"GET\",\r\n                    url: this.confProvPortalURL + \"conferences\" + urlQueryParameters,\r\n                    headers: this.authService.getRequestHeader()\r\n                }) // */\r\n                // Handle success response\r\n                .then((response) => {\r\n                let conferencesProvisionData = response;\r\n                that.logger.log(\"info\", LOG_ID + \"(WebConferenceService) retrieveWebConferences successfully\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(WebConferenceService) retrieveWebConferences successfully : \", conferencesProvisionData);\r\n                resolve(conferencesProvisionData.data);\r\n            }, (response) => {\r\n                let msg = response.data ? response.data.errorDetails : response.data;\r\n                let errorMessage = \"retrieveWebConferences failure: \" + msg;\r\n                that.logger.log(\"error\", LOG_ID + \"(WebConferenceService) error : \" + errorMessage);\r\n                reject(new Error(errorMessage));\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /*\r\n    ownerUpdateRoomCustomData (roomData) {\r\n        let that = this;\r\n\r\n        return new Promise(function(resolve, reject) {\r\n            let data = { \"customData\": roomData.customData };\r\n            that.logger.log(\"internal\", LOG_ID + \"(ownerUpdateRoomCustomData) roomData : \", roomData);\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + roomData.id + \"/custom-data\", that.getRequestHeader(\"application/json\"), data, undefined).then(function(json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(ownerUpdateRoomCustomData) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(ownerUpdateRoomCustomData) REST bubble Avatar sent : \", json);\r\n                resolve(json.data.customData || {});\r\n            }).catch(function(err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(ownerUpdateRoomCustomData) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(ownerUpdateRoomCustomData) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    };\r\n\r\n    ownerUpdateRoom (roomData) {\r\n        let that = this;\r\n\r\n        return new Promise(function(resolve, reject) {\r\n            let data = {\r\n                name: roomData.name,\r\n                topic: roomData.desc,\r\n                visibility: roomData.type ? \"public\" : \"private\"\r\n            };\r\n            that.logger.log(\"internal\", LOG_ID + \"(ownerUpdateRoomCustomData) roomData : \", roomData);\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/rooms/\" + roomData.id , that.getRequestHeader(\"application/json\"), data, undefined).then(function(json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(ownerUpdateRoomCustomData) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(ownerUpdateRoomCustomData) REST bubble Avatar sent : \", json);\r\n                resolve(json.data || {});\r\n            }).catch(function(err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(ownerUpdateRoomCustomData) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(ownerUpdateRoomCustomData) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    };\r\n    // */\r\n    createUser(email, password, firstname, lastname, companyId, language, isAdmin, roles) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let user = {\r\n                loginEmail: email,\r\n                password: password,\r\n                firstName: firstname,\r\n                lastName: lastname,\r\n                isActive: true,\r\n                isInitialized: false,\r\n                language: language,\r\n                adminType: \"undefined\",\r\n                roles: [\"user\"],\r\n                accountType: \"free\",\r\n                companyId: null,\r\n            };\r\n            if (companyId) {\r\n                user.companyId = companyId;\r\n            }\r\n            else {\r\n                user.companyId = that.account.companyId;\r\n            }\r\n            if (roles != null) {\r\n                user.roles = roles;\r\n            }\r\n            if (isAdmin) {\r\n                user.roles.push(\"admin\");\r\n                //user.adminType = [\"company_admin\"];\r\n                user.adminType = \"company_admin\";\r\n            }\r\n            that.http.post(\"/api/rainbow/admin/v1.0/users\", that.getRequestHeader(), user, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(createUser) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(createUser) REST admin creation user\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(createUser) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(createUser) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    createGuestUser(firstname, lastname, language, timeToLive) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            // Generate user Email based on appId\r\n            let uid = Utils_js_1.makeId(40);\r\n            let appId = that._application.appID;\r\n            let domain = that.http.host;\r\n            let email = `${uid}@${appId}.${domain}`;\r\n            // Generate a rainbow compatible password\r\n            let password = Utils_js_2.createPassword(40);\r\n            let user = {\r\n                loginEmail: email,\r\n                password: password,\r\n                isActive: true,\r\n                isInitialized: false,\r\n                adminType: \"undefined\",\r\n                roles: [\"guest\"],\r\n                accountType: \"free\",\r\n                companyId: that.account.companyId,\r\n                firstName: undefined,\r\n                lastName: undefined,\r\n                language: undefined,\r\n                timeToLive: undefined\r\n            };\r\n            if (firstname) {\r\n                user.firstName = firstname;\r\n            }\r\n            if (lastname) {\r\n                user.lastName = lastname;\r\n            }\r\n            if (language) {\r\n                user.language = language;\r\n            }\r\n            if (timeToLive) {\r\n                user.timeToLive = timeToLive;\r\n            }\r\n            that.http.post(\"/api/rainbow/admin/v1.0/users\", that.getRequestHeader(), user, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(createGuestUser) successfull\");\r\n                // Add generated password into the answer\r\n                json.data.password = password;\r\n                that.logger.log(\"internal\", LOG_ID + \"(createGuestUser) REST admin creation user\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(createGuestUser) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(createGuestUser) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    changePassword(password, userId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let data = {\r\n                password: password\r\n            };\r\n            that.http.put(\"/api/rainbow/admin/v1.0/users/\" + userId, that.getRequestHeader(), data, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(changePassword) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(changePassword) REST admin change password\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(changePassword) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(changePassword) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    updateInformation(objData, userId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/admin/v1.0/users/\" + userId, that.getRequestHeader(), objData, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(updateInformation) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(updateInformation) REST admin change data\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(updateInformation) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(updateInformation) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    deleteUser(userId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.delete(\"/api/rainbow/admin/v1.0/users/\" + userId, that.getRequestHeader()).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(deleteUser) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(deleteUser) REST admin delete user\", json);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(deleteUser) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(deleteUser) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // FileStorage\r\n    createFileDescriptor(name, extension, size, viewers) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let data = {\r\n                fileName: name,\r\n                extension: extension,\r\n                size: size,\r\n                viewers: viewers\r\n            };\r\n            that.http.post(\"/api/rainbow/filestorage/v1.0/files\", that.getRequestHeader(), data, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(createFileDescriptor) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(createFileDescriptor) REST get Blob from Url\");\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(createFileDescriptor) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(createFileDescriptor) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    deleteFileDescriptor(fileId) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.delete(\"/api/rainbow/filestorage/v1.0/files/\" + fileId, that.getRequestHeader()).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(deleteFileDescriptor) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(deleteFileDescriptor) REST deletion file descriptor\", json);\r\n                resolve(json);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(deleteFileDescriptor) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(deleteFileDescriptor) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    retrieveFileDescriptors(format, limit, offset, viewerId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let queries = [];\r\n            if (format) {\r\n                queries.push(\"format=\" + format);\r\n            }\r\n            if (limit) {\r\n                queries.push(\"limit=\" + limit);\r\n            }\r\n            if (offset) {\r\n                queries.push(\"offset=\" + offset);\r\n            }\r\n            if (viewerId) {\r\n                queries.push(\"viewerId=\" + viewerId);\r\n            }\r\n            that.http.get(\"/api/rainbow/filestorage/v1.0/files\" + (queries.length ? \"?\" + queries.join(\"&\") : \"\"), that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(retrieveFileDescriptors) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(retrieveFileDescriptors) REST get file descriptors\");\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(retrieveFileDescriptors) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(retrieveFileDescriptors) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    retrieveFilesReceivedFromPeer(userId, peerId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/filestorage/v1.0/files/viewers/\" + userId + \"?ownerId=\" + peerId + \"&format=full\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(retrieveFilesReceivedFromPeer) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(retrieveFilesReceivedFromPeer) REST get file descriptors\");\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(retrieveFilesReceivedFromPeer) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(retrieveFilesReceivedFromPeer) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    retrieveReceivedFilesForRoomOrViewer(roomId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/filestorage/v1.0/files/viewers/\" + roomId + \"?format=full\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(retrieveFilesReceivedFromPeer) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(retrieveFilesReceivedFromPeer) REST get file descriptors\");\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(retrieveFilesReceivedFromPeer) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(retrieveFilesReceivedFromPeer) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    retrieveOneFileDescriptor(fileId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/filestorage/v1.0/files/\" + fileId + \"?format=full\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(retrieveOneFileDescriptor) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(retrieveOneFileDescriptor) REST get file descriptors\");\r\n                let res = json ? json.data : {};\r\n                resolve(res);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(retrieveOneFileDescriptor) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(retrieveOneFileDescriptor) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    retrieveUserConsumption() {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/filestorage/v1.0/users/consumption\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(retrieveUserConsumption) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(retrieveUserConsumption) REST get file descriptors\");\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(retrieveUserConsumption) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(retrieveUserConsumption) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    deleteFileViewer(viewerId, fileId) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.delete(\"/api/rainbow/filestorage/v1.0/files/\" + fileId + \"/viewers/\" + viewerId, that.getRequestHeader()).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(deleteFileViewer) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(deleteFileViewer) REST deletion file viewer\", json);\r\n                resolve(json);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(deleteFileViewer) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(deleteFileViewer) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    addFileViewer(fileId, viewerId, viewerType) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.post(\"/api/rainbow/filestorage/v1.0/files/\" + fileId + \"/viewers\", that.getRequestHeader(), {\r\n                viewerId: viewerId,\r\n                type: viewerType\r\n            }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(createCompany) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(createCompany) REST creation company\", json);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(createCompany) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(createCompany) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // FileServer\r\n    getPartialDataFromServer(url, minRange, maxRange, index) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(url, that.getRequestHeaderWithRange(\"application/octet-stream\", \"bytes=\" + minRange + \"-\" + maxRange), undefined).then(function (data) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getPartialDataFromServer) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(getPartialDataFromServer) REST get Blob from Url\");\r\n                resolve({ \"data\": data, \"index\": index });\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getPartialDataFromServer) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getPartialDataFromServer) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getFileFromUrl(url) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(url, that.getRequestHeader(\"application/octet-stream\"), undefined).then(function (response) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getFileFromUrl) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(getFileFromUrl) REST get Blob from Url\");\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getFileFromUrl) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getFileFromUrl) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getBlobFromUrl(url) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            /* responseType: 'arraybuffer'// */\r\n            that.http.get(url, that.getRequestHeader(\"responseType: 'arraybuffer'\"), undefined).then(function (response) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getBlobFromUrl) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(getBlobFromUrl) REST get Blob from Url\");\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getBlobFromUrl) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getBlobFromUrl) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    uploadAFile(fileId, buffer) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/fileserver/v1.0/files/\" + fileId, that.getRequestHeader(\"Content-Type: 'application/octet-stream'\"), buffer, undefined).then(function (response) {\r\n                that.logger.log(\"info\", LOG_ID + \"(uploadAFile) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(uploadAFile) REST file sent\");\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(uploadAFile) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(uploadAFile) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    uploadAStream(fileId, stream) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let headers = that.getRequestHeader();\r\n            headers['Content-Type'] = 'application/octet-stream';\r\n            that.http.putStream(\"/api/rainbow/fileserver/v1.0/files/\" + fileId, headers, stream).then(function (response) {\r\n                that.logger.log(\"info\", LOG_ID + \"(uploadAStream) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(uploadAStream) REST file sent\");\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(uploadAStream) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(uploadAStream) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    sendPartialDataToServer(fileId, file, index) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            //let headers = that.getPostHeaderWithRange(\"application/json\", initialSize, minRange, maxRange );\r\n            let headers = that.getRequestHeader();\r\n            headers[\"Content-Type\"] = 'application/octet-stream';\r\n            //headers[\"Connection\"] = 'keep-alive' ;\r\n            //headers['Accept-Encoding'] = 'gzip, deflate, br' ;\r\n            //headers['Accept-Language'] = 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7' ;\r\n            that.logger.log(\"debug\", LOG_ID + \" sendPartialDataToServer, fileId : \" + fileId + \", index : \" + index + \" Headers : \", JSON.stringify(headers, null, \"  \"));\r\n            that.http.putBuffer(\"/api/rainbow/fileserver/v1.0/files/\" + fileId + \"/parts/\" + index, headers, file).then(function (response) {\r\n                that.logger.log(\"info\", LOG_ID + \"(sendPartialDataToServer) successfull\");\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(sendPartialDataToServer) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(sendPartialDataToServer) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    sendPartialFileCompletion(fileId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let headers = that.getRequestHeader(\"application/json\");\r\n            headers['Content-Type'] = 'application/octet-stream';\r\n            that.http.putBuffer(\"/api/rainbow/fileserver/v1.0/files/\" + fileId + \"/parts/end\", headers, undefined).then(function (response) {\r\n                that.logger.log(\"info\", LOG_ID + \"(sendPartialFileCompletion) successfull\");\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(sendPartialFileCompletion) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(sendPartialFileCompletion) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getServerCapabilities() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/fileserver/v1.0/capabilities\", that.getRequestHeader(), undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(getServerCapabilities) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getServerCapabilities) REST get Server capabilities\", json.data);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(getServerCapabilities) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getServerCapabilities) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Settings\r\n    getUserSettings() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/settings\", that.getRequestHeader(), undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(getUserSettings) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getUserSettings) REST get User Settings\", json.data);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(getUserSettings) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getUserSettings) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    updateUserSettings(settings) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/settings\", that.getRequestHeader(), settings, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(updateUserSettings) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(updateUserSettings) REST user change data\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(updateUserSettings) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(updateUserSettings) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getAllCompanies() {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.logger.log(\"debug\", LOG_ID + \"(getAllCompanies) that.account.roles : \", that.account.roles);\r\n            that.http.get(\"/api/rainbow/admin/v1.0/companies\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getAllCompanies) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getAllCompanies) REST get all companies :\", json.data);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getAllCompanies) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getAllCompanies) error : \", err);\r\n                return reject(err);\r\n            });\r\n            that.logger.log(\"info\", LOG_ID + \"(getAllCompanies) after sending the request\");\r\n        });\r\n    }\r\n    getAllUsers(format = \"small\", offset = 0, limit = 100, sortField = \"loginEmail\") {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.logger.log(\"debug\", LOG_ID + \"(getAllUsers) that.account.roles : \", that.account.roles);\r\n            that.http.get(\"/api/rainbow/admin/v1.0/users?format=\" + encodeURIComponent(format) + \"&limit=\" + limit + \"&offset=\" + offset + \"&sortField=\" + encodeURIComponent(sortField) + \"&sortOrder=-1\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getAllUsers) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getAllUsers) REST get all companies :\", json.data);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getAllUsers) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getAllUsers) error : \", err);\r\n                return reject(err);\r\n            });\r\n            that.logger.log(\"info\", LOG_ID + \"(getAllUsers) after sending the request\");\r\n        });\r\n    }\r\n    getContactInfos(userId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.logger.log(\"debug\", LOG_ID + \"(getContactInfos) that.account.roles : \", that.account.roles);\r\n            that.http.get(\"/api/rainbow/admin/v1.0/users/\" + userId, that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getContactInfos) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getContactInfos) REST get infos :\", json.data);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getContactInfos) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getContactInfos) error : \", err);\r\n                return reject(err);\r\n            });\r\n            that.logger.log(\"info\", LOG_ID + \"(getContactInfos) after sending the request\");\r\n        });\r\n    }\r\n    putContactInfos(userId, infos) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.logger.log(\"debug\", LOG_ID + \"(getContactInfos) that.account.roles : \", that.account.roles);\r\n            that.http.put(\"/api/rainbow/admin/v1.0/users/\" + userId, that.getRequestHeader(), infos, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getContactInfos) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getContactInfos) REST get infos :\", json);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getContactInfos) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getContactInfos) error : \", err);\r\n                return reject(err);\r\n            });\r\n            that.logger.log(\"info\", LOG_ID + \"(getContactInfos) after sending the request\");\r\n        });\r\n    }\r\n    createCompany(name, country, state) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let countryObj = {\r\n                name: name,\r\n                country: \"Fr\",\r\n                state: null\r\n            };\r\n            if (country) {\r\n                countryObj.country = country;\r\n            }\r\n            if (state) {\r\n                countryObj.state = state;\r\n            }\r\n            that.http.post('/api/rainbow/admin/v1.0/companies', that.getRequestHeader(), countryObj, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(createCompany) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(createCompany) REST creation company : \", json);\r\n                if (json && json.data) {\r\n                    resolve(json.data);\r\n                }\r\n                else {\r\n                    resolve(json);\r\n                }\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(createCompany) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(createCompany) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getCompany(companyId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get('/api/rainbow/admin/v1.0/companies/' + companyId, that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getCompany) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getCompany) REST get company : \", json);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getCompany) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getCompany) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    deleteCompany(companyId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.logger.log(\"debug\", LOG_ID + \"(deleteCompany) companyId\", companyId);\r\n            that.http.delete('/api/rainbow/admin/v1.0/companies/' + companyId, that.getRequestHeader()).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(deleteCompany) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(deleteCompany) REST deletion company : \", json);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(deleteCompany) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(deleteCompany) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    setVisibilityForCompany(companyId, visibleByCompanyId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.post('/api/rainbow/admin/v1.0/companies/' + companyId + \"/visible-by/\" + visibleByCompanyId, that.getRequestHeader(), undefined, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(setVisibilityForCompany) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(setVisibilityForCompany) REST setVisibilityForCompany company\", json);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(setVisibilityForCompany) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(setVisibilityForCompany) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Channel\r\n    // Create a channel\r\n    createPublicChannel(name, topic, category = \"globalnews\", visibility, max_items, max_payload_size) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let channel = {\r\n                name: name,\r\n                topic: null,\r\n                visibility: null,\r\n                max_items: null,\r\n                max_payload_size: null,\r\n                category: category\r\n            };\r\n            if (topic) {\r\n                channel.topic = topic;\r\n            }\r\n            if (visibility) {\r\n                channel.visibility = visibility;\r\n            }\r\n            if (max_items) {\r\n                channel.max_items = max_items;\r\n            }\r\n            if (max_payload_size) {\r\n                channel.max_payload_size = max_payload_size;\r\n            }\r\n            that.http.post(\"/api/rainbow/channels/v1.0/channels\", that.getRequestHeader(), channel, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(createPublicChannel) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(createPublicChannel) REST creation channel\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(createPublicChannel) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(createPublicChannel) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // get a channel\r\n    /* getChannel(channelId) {\r\n         let that = this;\r\n \r\n         return new Promise(function(resolve, reject) {\r\n \r\n             that.logger.log(\"debug\", LOG_ID + \"(getChannel) _entering_\");\r\n \r\n             that.http.get(\"/api/rainbow/channels/v1.0/channels/\" + channelId, that.getRequestHeader()).then(function(json) {\r\n                 that.logger.log(\"info\", LOG_ID + \"(getChannel) successfull\");\r\n                 that.logger.log(\"internal\", LOG_ID + \"(getChannel) REST read channelId\", json.data);\r\n                 that.logger.log(\"debug\", LOG_ID + \"(getChannel) _exiting_\");\r\n                 resolve(json.data);\r\n             }).catch(function(err) {\r\n                 that.logger.log(\"error\", LOG_ID, \"(getChannel) error\", err);\r\n                 that.logger.log(\"debug\", LOG_ID + \"(getChannel) _exiting_\");\r\n                 reject(err);\r\n             });\r\n         });\r\n     } // */\r\n    // Delete a channel\r\n    deleteChannel(channelId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.delete(\"/api/rainbow/channels/v1.0/channels/\" + channelId, that.getRequestHeader()).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(deleteChannel) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(deleteChannel) REST remove channelId\", json);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(deleteChannel) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(deleteChannel) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Find Channels\r\n    findChannels(name, topic, category, limit, offset, sortField, sortOrder) {\r\n        let that = this;\r\n        let query = \"?limit=\";\r\n        if (limit) {\r\n            query += limit;\r\n        }\r\n        else {\r\n            query += \"100\";\r\n        }\r\n        if (name) {\r\n            query += \"&name=\" + name;\r\n        }\r\n        if (topic) {\r\n            query += \"&topic=\" + topic;\r\n        }\r\n        if (category) {\r\n            query += \"&category=\" + category;\r\n        }\r\n        if (offset) {\r\n            query += \"&offset=\" + offset;\r\n        }\r\n        if (sortField) {\r\n            query += \"&sortField=\" + sortField;\r\n        }\r\n        if (sortOrder) {\r\n            query += \"&sortOrder=\" + sortOrder;\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/channels/v1.0/channels/search\" + query, that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(findChannels) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(findChannels) REST found channels\", json.total);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(findChannels) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(findChannels) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Get my channels\r\n    getChannels() {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/channels/v1.0/channels\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(fetchMyChannels) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(fetchMyChannels) received channels\");\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(fetchMyChannels) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(fetchMyChannels) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    getChannel(id) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/channels/v1.0/channels/\" + id, that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getChannel) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getChannel) received channels : \", json);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getChannel) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getChannel) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Publish a message to a channel\r\n    publishMessage(channelId, message, title, url, imagesIds, type) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            let payload = {\r\n                type,\r\n                message: message,\r\n                title: title || \"\",\r\n                url: url || \"\",\r\n                images: null\r\n            };\r\n            if (imagesIds) {\r\n                payload.images = imagesIds || null;\r\n            }\r\n            that.http.post(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/publish\", that.getRequestHeader(), payload, undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(publishMessage) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(publishMessage) REST message published\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(publishMessage) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(publishMessage) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    chewReceivedItems(items) {\r\n        items.forEach((item) => {\r\n            if (item.type === \"urn:xmpp:channels:simple\") {\r\n                item[\"entry\"] = { message: item.message };\r\n                delete item.message;\r\n            }\r\n            item.displayId = item.id + \"-\" + item.timestamp;\r\n            item.modified = item.creation !== undefined;\r\n        });\r\n    }\r\n    /**\r\n     * Get latests message from channel\r\n     */\r\n    getLatestMessages(maxMessages, beforeDate = null, afterDate = null) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/channels/v1.0/channels/latest-items\", that.getRequestHeader(), { max: maxMessages, before: beforeDate, after: afterDate }).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getLatestMessages) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getLatestMessages) received \" + JSON.stringify(json) + \" latestMessages\");\r\n                that.chewReceivedItems(json.data.items);\r\n                resolve(json.data.items);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getLatestMessages) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getLatestMessages) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    // Subscribe to a channel\r\n    subscribeToChannel(channelId) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.post(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/subscribe\", that.getRequestHeader(), undefined, undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(subscribeToChannel) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(subscribeToChannel) REST channel subscribed\", json.data);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(subscribeToChannel) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(subscribeToChannel) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Unsubscribe to a channel\r\n    unsubscribeToChannel(channelId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.delete(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/subscribe\", that.getRequestHeader()).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(unsubscribeToChannel) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(unsubscribeToChannel) REST channel unsubscribed\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(unsubscribeToChannel) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(unsubscribeToChannel) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Update channels\r\n    updateChannel(channelId, title, visibility, max_items, max_payload_size, channelName, mode) {\r\n        let that = this;\r\n        let channel = {\r\n            name: null,\r\n            topic: null,\r\n            visibility: null,\r\n            max_items: null,\r\n            max_payload_size: null,\r\n            mode: null\r\n        };\r\n        if (title === null) {\r\n            delete channel.topic;\r\n        }\r\n        else {\r\n            channel.topic = title;\r\n        }\r\n        if (visibility === null) {\r\n            delete channel.visibility;\r\n        }\r\n        else {\r\n            channel.visibility = visibility;\r\n        }\r\n        if (mode === null) {\r\n            delete channel.mode;\r\n        }\r\n        else {\r\n            channel.mode = mode;\r\n        }\r\n        if (max_items === null) {\r\n            delete channel.max_items;\r\n        }\r\n        else {\r\n            channel.max_items = max_items;\r\n        }\r\n        if (max_payload_size === null) {\r\n            delete channel.max_payload_size;\r\n        }\r\n        else {\r\n            channel.max_payload_size = max_payload_size;\r\n        }\r\n        if (channelName === null) {\r\n            delete channel.name;\r\n        }\r\n        else {\r\n            channel.name = channelName;\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/channels/v1.0/channels/\" + channelId, that.getRequestHeader(), channel, undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(updateChannel) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(updateChannel) REST channel updated\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(updateChannel) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(updateChannel) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    uploadChannelAvatar(channelId, avatar, avatarSize, fileType) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            //this.roomService.resizeImage(avatar, avatarSize, avatarSize)\r\n            //  .then((resizedImage) => {\r\n            //var binaryData = this.roomService.getBinaryData(resizedImage);\r\n            that.http.post(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/avatar\", that.getRequestHeader(), avatar, fileType).then((response) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(updateChannel) successfull channelId : \", channelId);\r\n                resolve(response);\r\n            })\r\n                .catch((err) => {\r\n                return reject(err);\r\n            });\r\n            //});\r\n        });\r\n    }\r\n    deleteChannelAvatar(channelId) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.delete(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/avatar\", that.getRequestHeader(\"image/jpeg\"))\r\n                .then((response) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(deleteChannelAvatar) successfull channelId : \", channelId);\r\n                resolve(response);\r\n            })\r\n                .catch((err) => {\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Get all users from channel\r\n    getChannelUsers(channelId, options) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let filterToApply = \"format=full\";\r\n            if (options.format) {\r\n                filterToApply = \"format=\" + options.format;\r\n            }\r\n            if (options.page > 0) {\r\n                filterToApply += \"&offset=\";\r\n                if (options.page > 1) {\r\n                    filterToApply += (options.limit * (options.page - 1));\r\n                }\r\n                else {\r\n                    filterToApply += 0;\r\n                }\r\n            }\r\n            filterToApply += \"&limit=\" + Math.min(options.limit, 1000);\r\n            if (options.type) {\r\n                filterToApply += \"&types=\" + options.type;\r\n            }\r\n            that.http.get(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/users?\" + filterToApply, that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getUsersChannel) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getUsersChannel) received \", json.total, \" users in channel\");\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getUsersChannel) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getUsersChannel) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Delete all users in channel\r\n    deleteAllUsersFromChannel(channelId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.delete(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/users\", that.getRequestHeader()).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(deleteAllUsersFromChannel) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(deleteAllUsersFromChannel) REST remove all users in channel with channelId\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(deleteAllUsersFromChannel) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(deleteAllUsersFromChannel) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Update a collection of channel users\r\n    updateChannelUsers(channelId, users) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/users\", that.getRequestHeader(), { \"data\": users }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(updateChannelUsers) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(updateChannelUsers) REST channels updated\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(updateChannelUsers) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(updateChannelUsers) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Update a collection of channel users\r\n    getChannelMessages(channelId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.post(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/items\", that.getRequestHeader(), { \"max\": \"100\" }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(getChannelMessages) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getChannelMessages) REST channels messages received\", json.data.items.length);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getChannelMessages) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getChannelMessages) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Delete item from a channel\r\n     */\r\n    deleteChannelMessage(channelId, itemId) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.delete(\"/api/rainbow/channels/v1.0/channels/\" + channelId + \"/items/\" + itemId, that.getRequestHeader())\r\n                .then((response) => {\r\n                that.logger.log(\"info\", LOG_ID + \"[channelService] deleteChannelItem (\" + channelId + \", \" + itemId + \") -- success\");\r\n                resolve(itemId);\r\n            })\r\n                .catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"[channelService] deleteChannelItem (\" + channelId + \", \" + itemId + \") -- failure -- \");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"[channelService] deleteChannelItem (\" + channelId + \", \" + itemId + \") -- failure -- \", err.message);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    // Get Server Profiles\r\n    getServerProfiles() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/profiles\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getServerProfiles) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getServerProfiles) received \", json, \" profiles\");\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getServerProfiles) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getServerProfiles) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Get Server Profiles\r\n    getServerProfilesFeatures() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/profiles/features\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getServerProfilesFeatures) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getServerProfilesFeatures) received \" + JSON.stringify(json) + \" profiles features\");\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getServerProfilesFeatures) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getServerProfilesFeatures) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ////////\r\n    // Telephony\r\n    makeCall(contact, phoneInfo) {\r\n        let that = this;\r\n        return that.restTelephony.makeCall(that.getRequestHeader(), contact, phoneInfo);\r\n    }\r\n    releaseCall(call) {\r\n        let that = this;\r\n        return that.restTelephony.releaseCall(that.getRequestHeader(), call);\r\n    }\r\n    makeConsultationCall(callId, contact, phoneInfo) {\r\n        let that = this;\r\n        return that.restTelephony.makeConsultationCall(that.getRequestHeader(), callId, contact, phoneInfo);\r\n    }\r\n    answerCall(call) {\r\n        let that = this;\r\n        return that.restTelephony.answerCall(that.getRequestHeader(), call);\r\n    }\r\n    holdCall(call) {\r\n        let that = this;\r\n        return that.restTelephony.holdCall(that.getRequestHeader(), call);\r\n    }\r\n    retrieveCall(call) {\r\n        let that = this;\r\n        return that.restTelephony.retrieveCall(that.getRequestHeader(), call);\r\n    }\r\n    deflectCallToVM(call, VMInfos) {\r\n        let that = this;\r\n        return that.restTelephony.deflectCallToVM(that.getRequestHeader(), call, VMInfos);\r\n    }\r\n    deflectCall(call, calleeInfos) {\r\n        let that = this;\r\n        return that.restTelephony.deflectCall(that.getRequestHeader(), call, calleeInfos);\r\n    }\r\n    transfertCall(activeCall, heldCall) {\r\n        let that = this;\r\n        return that.restTelephony.transfertCall(that.getRequestHeader(), activeCall, heldCall);\r\n    }\r\n    conferenceCall(activeCall, heldCall) {\r\n        let that = this;\r\n        return that.restTelephony.conferenceCall(that.getRequestHeader(), activeCall, heldCall);\r\n    }\r\n    forwardToDevice(contact, phoneInfo) {\r\n        let that = this;\r\n        return that.restTelephony.forwardToDevice(that.getRequestHeader(), contact, phoneInfo);\r\n    }\r\n    getForwardStatus() {\r\n        let that = this;\r\n        return that.restTelephony.getForwardStatus(that.getRequestHeader());\r\n    }\r\n    getNomadicStatus() {\r\n        let that = this;\r\n        return that.restTelephony.getNomadicStatus(that.getRequestHeader());\r\n    }\r\n    nomadicLogin(data) {\r\n        let that = this;\r\n        return that.restTelephony.nomadicLogin(that.getRequestHeader(), data);\r\n    }\r\n    sendDtmf(callId, deviceId, data) {\r\n        let that = this;\r\n        return that.restTelephony.sendDtmf(that.getRequestHeader(), callId, deviceId, data);\r\n    }\r\n    logon(endpointTel, agentId, password, groupId) {\r\n        let that = this;\r\n        return that.restTelephony.logon(that.getRequestHeader(), endpointTel, agentId, password, groupId);\r\n    }\r\n    logoff(endpointTel, agentId, password, groupId) {\r\n        let that = this;\r\n        return that.restTelephony.logoff(that.getRequestHeader(), endpointTel, agentId, password, groupId);\r\n    }\r\n    withdrawal(agentId, groupId, status) {\r\n        let that = this;\r\n        return that.restTelephony.withdrawal(that.getRequestHeader(), agentId, groupId, status);\r\n    }\r\n    wrapup(agentId, groupId, password, status) {\r\n        let that = this;\r\n        return that.restTelephony.wrapup(that.getRequestHeader(), agentId, groupId, password, status);\r\n    }\r\n    getRainbowNodeSdkPackagePublishedInfos() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            let headers = {\r\n                \"Accept\": \"application/json\"\r\n            };\r\n            that.http.getUrl(\"https://api.npms.io/v2/search?q=rainbow-node-sdk\", headers, undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getRainbowNodeSdkPackagePublishedInfos) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getRainbowNodeSdkPackagePublishedInfos) received \", json);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getRainbowNodeSdkPackagePublishedInfos) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getRainbowNodeSdkPackagePublishedInfos) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ////////\r\n    // Conversations\r\n    getServerConversations(format = \"small\") {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations?format=\" + format, that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getServerConversations) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getServerConversations) received \" + JSON.stringify(json) + \" conversations\");\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getServerConversations) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getServerConversations) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    createServerConversation(conversation) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations\", that.getRequestHeader(), conversation, undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(createServerConversation) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(createServerConversation) REST conversation created\", json.data);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(createServerConversation) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(createServerConversation) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    deleteServerConversation(conversationId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.delete(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations/\" + conversationId, that.getRequestHeader()).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(deleteServerConversation) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(deleteServerConversation) REST conversation deleted\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(deleteServerConversation) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(deleteServerConversation) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    //Update conversation\r\n    updateServerConversation(conversationId, mute) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations/\" + conversationId, that.getRequestHeader(), { \"mute\": mute }, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(updateServerConversation) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(updateServerConversation) REST conversation updated\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(updateServerConversation) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(updateServerConversation) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // Send Conversation By Email\r\n    sendConversationByEmail(conversationId) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations/\" + conversationId + \"/downloads\", that.getRequestHeader(), undefined, undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(sendConversationByEmail) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(sendConversationByEmail) REST conversation sent by email.\", json.data);\r\n                resolve(json.data);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(sendConversationByEmail) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(sendConversationByEmail) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ackAllMessages(conversationId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/conversations/\" + conversationId + \"/markallread\", that.getRequestHeader(), undefined, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(ackAllMessages) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(ackAllMessages) REST ack all messages updated : \", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(ackAllMessages) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(ackAllMessages) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    joinConference(webPontConferenceId, role = \"moderator\") {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let muted = \"unmuted\";\r\n            let params = { participant: { role: role, type: muted }, mediaType: that.MEDIATYPE.WEBRTC };\r\n            that.logger.log(\"internal\", LOG_ID + \"(joinConference) REST params : \", params);\r\n            that.http.post(\"/api/rainbow/conference/v1.0/conferences/\" + webPontConferenceId + \"/snapshot?mediaType=webrtc\", that.getRequestHeader(), params, undefined).then((json) => {\r\n                //that.http.post(\"/api/rainbow/conference/v1.0/conferences/\" + webPontConferenceId + \"/join\", that.getRequestHeader(), params, undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(joinConference) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(joinConference) REST conference updated : \", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(joinConference) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(joinConference) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    // ***** INVITATIONS *****\r\n    getAllSentInvitations() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/sent?format=full&status=pending&limit=500\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getAllSentInvitations) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getAllSentInvitations) received : \", json);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getAllSentInvitations) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getAllSentInvitations) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    getServerInvitation(invitationId) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/\" + invitationId, that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getServerInvitation) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getServerInvitation) received : \", json);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getServerInvitation) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getServerInvitation) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    sendInvitationByEmail(email, lang, customMessage) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            let params = { email: email, lang: lang, customMessage: customMessage };\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations\", that.getRequestHeader(), params, undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(sendInvitationByEmail) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(sendInvitationByEmail) REST invitation created : \", json);\r\n                resolve(json);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(sendInvitationByEmail) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(sendInvitationByEmail) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    cancelOneSendInvitation(invitation) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/\" + invitation.id + \"/cancel\", that.getRequestHeader(), undefined, undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(cancelOneSendInvitation) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(cancelOneSendInvitation) REST cancel one send invitation created : \", json);\r\n                resolve(json);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(cancelOneSendInvitation) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(cancelOneSendInvitation) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    reSendInvitation(invitationId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/\" + invitationId + \"/re-send\", that.getRequestHeader(), undefined, undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(reSendInvitation) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(reSendInvitation) REST reSend invitation created : \", json);\r\n                resolve(json);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(reSendInvitation) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(reSendInvitation) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    sendInvitationsParBulk(listOfMails) {\r\n        let that = this;\r\n        let data = {\r\n            emails: listOfMails\r\n        };\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.post(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/bulk\", that.getRequestHeader(), data, undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(sendInvitationsParBulk) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(sendInvitationsParBulk) REST invitations sent : \", json);\r\n                resolve(json);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(sendInvitationsParBulk) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(sendInvitationsParBulk) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    getAllReceivedInvitations() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/enduser/v1.0/users/\" + that.account.id + \"/invitations/received?format=full&status=pending&status=accepted&status=auto-accepted&limit=500\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getAllReceivedInvitations) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getAllReceivedInvitations) received : \", json);\r\n                resolve(json);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getAllReceivedInvitations) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getAllReceivedInvitations) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    //////\r\n    // Generic HTTP VERB\r\n    get(url, token) {\r\n        let that = this;\r\n        that.token = token;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(url, that.getRequestHeader(), undefined).then(function (JSON) {\r\n                resolve(JSON);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(get) CATCH Error !!! : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    post(url, token, data, contentType) {\r\n        let that = this;\r\n        that.token = token;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.post(url, that.getRequestHeader(), data, contentType).then(function (JSON) {\r\n                resolve(JSON);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(post) CATCH Error !!! : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    put(url, token, data) {\r\n        let that = this;\r\n        that.token = token;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.put(url, that.getRequestHeader(), data, undefined).then(function (JSON) {\r\n                resolve(JSON);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(put) CATCH Error !!! : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    delete(url, token) {\r\n        let that = this;\r\n        that.token = token;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.delete(url, that.getRequestHeader()).then(function (JSON) {\r\n                resolve(JSON);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(delete) CATCH Error !!! : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    checkEveryPortals() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            //that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) \");\r\n            if (this._isOfficialRainbow) {\r\n                let authenticationAbout = that.http.get(\"/api/rainbow/authentication/v1.0/about\", that.getDefaultHeader(), undefined).then((portalAbout) => {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) authentication about : \", portalAbout);\r\n                });\r\n                let enduserAbout = that.http.get(\"/api/rainbow/enduser/v1.0/about\", that.getDefaultHeader(), undefined).then((portalAbout) => {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) enduser about : \", portalAbout);\r\n                });\r\n                let telephonyAbout = that.http.get(\"/api/rainbow/telephony/v1.0/about\", that.getDefaultHeader(), undefined).then((portalAbout) => {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) telephony about : \", portalAbout);\r\n                });\r\n                let adminAbout = that.http.get(\"/api/rainbow/admin/v1.0/about\", that.getDefaultHeader(), undefined).then((portalAbout) => {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) admin about : \", portalAbout);\r\n                });\r\n                let channelsAbout = that.http.get(\"/api/rainbow/channels/v1.0/about\", that.getDefaultHeader(), undefined).then((portalAbout) => {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) channels about : \", portalAbout);\r\n                });\r\n                let applicationsAbout = that.http.get(\"/api/rainbow/applications/v1.0/about\", that.getDefaultHeader(), undefined).then((portalAbout) => {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals) applications about : \", portalAbout);\r\n                });\r\n                return Promise.all([authenticationAbout, enduserAbout, telephonyAbout, adminAbout, channelsAbout, applicationsAbout]);\r\n            }\r\n            else {\r\n                that.logger.log(\"debug\", LOG_ID + \"(checkEveryPortals)\", that.http._host, \"NOT IN RAINBOW PRODUCTION so do not test every application's about status \");\r\n                return Promise.resolve({ 'status': \"OK\" });\r\n            }\r\n        });\r\n    }\r\n    checkPortalHealth() {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/ping\", that.getDefaultHeader(), undefined).then(function (JSON) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(checkPortalHealth) Wait a few time (10 seconds ) before check every portals, because somes of it respond before being xmpp ready.\");\r\n                setTimeout(() => {\r\n                    that.checkEveryPortals().then(() => {\r\n                        that.logger.log(\"debug\", LOG_ID + \"(checkPortalHealth) Connection succeeded!\");\r\n                        resolve(JSON);\r\n                    }).catch((err) => {\r\n                        that.logger.log(\"debug\", LOG_ID + \"(checkPortalHealth) Connection failed!\");\r\n                        return reject(err);\r\n                    });\r\n                }, 1000 * 10);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID + \"(checkPortalHealth) ErrorManager \");\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(checkPortalHealth) ErrorManager : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    attemptToReconnect(reconnectDelay) {\r\n        let that = this;\r\n        that.logger.log(\"debug\", LOG_ID + \"(attemptToReconnect) Next attempt in \" + that.reconnectDelay + \"ms\");\r\n        setTimeout(() => {\r\n            that.checkPortalHealth().then(() => {\r\n                //that.logger.log(\"debug\", LOG_ID + \"(attemptToReconnect) Attempt succeeded!\");\r\n                that.eventEmitter.emit(\"attempt_succeeded\");\r\n            }).catch((err) => {\r\n                //that.logger.log(\"debug\", LOG_ID + \"(attemptToReconnect) Attempt failed!\");\r\n                that.eventEmitter.emit(\"attempt_failed\");\r\n            });\r\n        }, reconnectDelay);\r\n    }\r\n    get_attempt_succeeded_callback(resolve) {\r\n        let that = this;\r\n        //that.logger.log(\"debug\", LOG_ID + \"(reconnect) get_attempt_succeeded_callback\");\r\n        that.attempt_promise_resolver.resolve = resolve;\r\n        if (!that.attempt_succeeded_callback) {\r\n            that.logger.log(\"debug\", LOG_ID + \"(reconnect) get_attempt_succeeded_callback create the singleton of attempt_succeeded_callback method\");\r\n            that.attempt_succeeded_callback = () => {\r\n                that.logger.log(\"debug\", LOG_ID + \"(reconnect) attempt_succeeded_callback reconnection attempt successfull!\");\r\n                that.fibonacciStrategy.reset();\r\n                //that.reconnect.delay = that.fibonacciStrategy.getInitialDelay();\r\n                if (that.attempt_promise_resolver.resolve) {\r\n                    that.attempt_promise_resolver.resolve();\r\n                }\r\n                else {\r\n                    that.logger.log(\"error\", LOG_ID + \"(reconnect) attempt_succeeded_callback resolve is not define !\");\r\n                }\r\n            };\r\n        }\r\n        return that.attempt_succeeded_callback;\r\n    }\r\n    get_attempt_failed_callback(reject) {\r\n        let that = this;\r\n        that.attempt_promise_resolver.reject = reject;\r\n        //that.logger.log(\"debug\", LOG_ID + \"(reconnect) get_attempt_failed_callback\");\r\n        if (!that.attempt_failed_callback) {\r\n            that.logger.log(\"debug\", LOG_ID + \"(reconnect) get_attempt_failed_callback create the singleton of attempt_failed_callback method\");\r\n            that.attempt_failed_callback = () => {\r\n                that.logger.log(\"debug\", LOG_ID + \"(reconnect) attempt_failed_callback attempt #\" + that.currentAttempt + \" has failed!\");\r\n                that.currentAttempt++;\r\n                if (that.currentAttempt < that.maxAttemptToReconnect) {\r\n                    that.reconnectDelay = that.fibonacciStrategy.next();\r\n                    that.attemptToReconnect(that.reconnectDelay);\r\n                }\r\n                else {\r\n                    if (that.attempt_promise_resolver.reject) {\r\n                        that.attempt_promise_resolver.reject();\r\n                    }\r\n                    else {\r\n                        that.logger.log(\"error\", LOG_ID + \"(reconnect) attempt_failed_callback reject is not define !\");\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        return that.attempt_failed_callback;\r\n    }\r\n    reconnect() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            that.currentAttempt = 0;\r\n            that.eventEmitter.removeListener(\"attempt_succeeded\", that.get_attempt_succeeded_callback());\r\n            that.eventEmitter.on(\"attempt_succeeded\", that.get_attempt_succeeded_callback(resolve));\r\n            that.eventEmitter.removeListener(\"attempt_failed\", that.get_attempt_failed_callback());\r\n            that.eventEmitter.on(\"attempt_failed\", that.get_attempt_failed_callback(reject));\r\n            that.attemptToReconnect(that.reconnectDelay);\r\n        });\r\n    }\r\n    // ************* S2S **************************\r\n    listConnectionsS2S() {\r\n        let that = this;\r\n        //that.logger.log(\"internal\", LOG_ID + \"(listConnectionsS2S) S2S\");\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/ucs/v1.0/connections\", that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(listConnectionsS2S) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(listConnectionsS2S) received : \", json);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(listConnectionsS2S) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(listConnectionsS2S) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    sendS2SPresence(obj) {\r\n        let that = this;\r\n        that.logger.log(\"internal\", LOG_ID + \"(sendS2SPresence) Set S2S presence : \", obj);\r\n        return new Promise(function (resolve, reject) {\r\n            let data = obj ? { presence: { show: obj.show, status: obj.status } } : { presence: { show: \"\", status: \"\" } };\r\n            if (!that.connectionS2SInfo || !that.connectionS2SInfo.id) {\r\n                that.logger.log(\"error\", LOG_ID, \"(sendS2SPresence) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(sendS2SPresence) error connectionS2SInfo.id is not defined.\");\r\n                return reject({ code: -1, label: \"connectionS2SInfo.id is not defined!!!\" });\r\n            }\r\n            that.http.put(\"/api/rainbow/ucs/v1.0/connections/\" + that.connectionS2SInfo.id + \"/presences\", that.getRequestHeader(), data, undefined).then(function (json) {\r\n                that.logger.log(\"info\", LOG_ID + \"(sendS2SPresence) successfull.\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(sendS2SPresence) REST presence updated\", json.data);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(sendS2SPresence) error.\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(sendS2SPresence) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n        /*return axios.put(`/api/rainbow/ucs/v1.0/connections/${connectionInfo.id}/presences`, { presence: { show:\"\", status: \"\"}} ) //, {connection: { /*resource: \"s2s_machin\",*/ /* callback_url: \"https://e894efad.ngrok.io\" }})\r\n            .then( response => {\r\n                console.log( \"it worked\" );\r\n                console.log( response.data )\r\n                console.log( response.config)\r\n                console.log( \"STATUS = \", response.status)\r\n                return response.data\r\n            } )\r\n            // */\r\n    }\r\n    deleteConnectionsS2S(connexions) {\r\n        let that = this;\r\n        that.logger.log(\"debug\", LOG_ID + \"(deleteConnectionsS2S) will del cnx S2S\");\r\n        that.logger.log(\"info\", LOG_ID + \"(deleteConnectionsS2S) will del cnx S2S : \", connexions);\r\n        const requests = [];\r\n        connexions.forEach(cnx => requests.push(that.http.delete(\"/api/rainbow/ucs/v1.0/connections/\" + cnx.id, that.getRequestHeader()).then(function (json) {\r\n            that.logger.log(\"debug\", LOG_ID + \"(deleteConnectionsS2S) successfull\");\r\n            that.logger.log(\"internal\", LOG_ID + \"(deleteConnectionsS2S) REST result : \", json.data);\r\n            return json.data;\r\n        }).catch(function (err) {\r\n            that.logger.log(\"error\", LOG_ID, \"(deleteConnectionsS2S) error\");\r\n            that.logger.log(\"internalerror\", LOG_ID, \"(deleteConnectionsS2S) error : \", err);\r\n            return err;\r\n        })));\r\n        return Promise.all(connexions)\r\n            .then(response => {\r\n            that.logger.log(\"debug\", LOG_ID + \"(deleteConnectionsS2S) all successfull\");\r\n            //console.log(\"it worked\");\r\n            //console.log( response.data )\r\n            //connectionInfo = response.data.data\r\n            //process.exit()\r\n            return response;\r\n        });\r\n    }\r\n    loginS2S(callback_url) {\r\n        let that = this;\r\n        let data = { connection: { /*resource: \"s2s_machin\",*/ callback_url } };\r\n        that.logger.log(\"debug\", LOG_ID + \"(loginS2S)  will login  S2S.\");\r\n        that.logger.log(\"internal\", LOG_ID + \"(loginS2S) will login S2S : \", data);\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.post(\"/api/rainbow/ucs/v1.0/connections\", that.getRequestHeader(), data, undefined).then((json) => {\r\n                that.logger.log(\"info\", LOG_ID + \"(loginS2S) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(loginS2S) REST loginS2S successfull : \", json);\r\n                that.connectionS2SInfo = json;\r\n                resolve(json);\r\n            }).catch((err) => {\r\n                that.logger.log(\"error\", LOG_ID, \"(loginS2S) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(loginS2S) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n        /*\r\n               console.log( \"will do login S2S\")\r\n               return axios.post(`/api/rainbow/ucs/v1.0/connections`, {connection: { /*resource: \"s2s_machin\",*/ /* callback_url }})\r\n             .then( response => {\r\n                 console.log( \"it worked\" );\r\n                 console.log( response.data )\r\n                 connectionInfo = response.data.data\r\n                 return response.data\r\n             } )\r\n // */\r\n    }\r\n    infoS2S(s2sConnectionId) {\r\n        let that = this;\r\n        that.logger.log(\"debug\", LOG_ID + \"(infoS2S)  will get info S2S\");\r\n        that.logger.log(\"internal\", LOG_ID + \"(infoS2S) will get info S2S\");\r\n        return new Promise(function (resolve, reject) {\r\n            that.http.get(\"/api/rainbow/ucs/v1.0/connections/\" + s2sConnectionId, that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(infoS2S) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(infoS2S) REST info S2S received : \", json);\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(infoS2S) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(infoS2S) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n        /*console.log( \"will do infoS2S\", obj );\r\n\r\n        return axios.get(`/api/rainbow/ucs/v1.0/connections/`+connectionInfo.id ) //, {connection: { /*resource: \"s2s_machin\",*/ /*  callback_url: \"https://e894efad.ngrok.io\" }})\r\n            .then( response => {\r\n                console.log( \"it worked\" );\r\n                //console.log( response.data )\r\n                return response.data\r\n            } )\r\n            // */\r\n    }\r\n    setS2SConnection(connectionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that.logger.log(\"debug\", LOG_ID + \"(setS2SConnection)  will get info S2S and save the session infos.\");\r\n            that.logger.log(\"internal\", LOG_ID + \"(setS2SConnection) will get info S2S and save the session infos.\");\r\n            return that.connectionS2SInfo = yield that.infoS2S(connectionId);\r\n        });\r\n    }\r\n    sendS2SMessageInConversation(conversationId, msg) {\r\n        // https://openrainbow.com:443/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!msg) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(sendS2SMessageInConversation) failed\");\r\n                that.logger.log(\"info\", LOG_ID + \"(sendS2SMessageInConversation) No msg provided\");\r\n                resolve(null);\r\n            }\r\n            else {\r\n                that.http.post(\"/api/rainbow/ucs/v1.0/connections/\" + that.connectionS2SInfo.id + \"/conversations/\" + conversationId + \"/messages\", that.getRequestHeader(), msg, undefined).then(function (json) {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(sendS2SMessageInConversation) successfull\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(sendS2SMessageInConversation) REST contact received \", json.data);\r\n                    resolve(json.data);\r\n                }).catch(function (err) {\r\n                    that.logger.log(\"error\", LOG_ID, \"(sendS2SMessageInConversation) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(sendS2SMessageInConversation) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    getS2SServerConversation(conversationId) {\r\n        let that = this;\r\n        // https://openrainbow.com:443/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{id}\r\n        return new Promise((resolve, reject) => {\r\n            that.http.get(\"/api/rainbow/ucs/v1.0/connections/\" + that.connectionS2SInfo.id + \"/conversations/\" + conversationId, that.getRequestHeader(), undefined).then(function (json) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(getServerConversation) successfull\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(getServerConversation) received \" + JSON.stringify(json) + \" conversations\");\r\n                resolve(json.data);\r\n            }).catch(function (err) {\r\n                that.logger.log(\"error\", LOG_ID, \"(getServerConversation) error\");\r\n                that.logger.log(\"internalerror\", LOG_ID, \"(getServerConversation) error : \", err);\r\n                return reject(err);\r\n            });\r\n        });\r\n    }\r\n    joinS2SRoom(roomid) {\r\n        // https://openrainbow.com:443/api/rainbow/ucs/v1.0/connections/{cnxId}/rooms/{roomId}/join\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!roomid) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(joinRoom) failed\");\r\n                that.logger.log(\"info\", LOG_ID + \"(joinRoom) No roomid provided\");\r\n                reject({ code: -1, label: \"roomid is not defined!!!\" });\r\n            }\r\n            else {\r\n                that.http.post(\"/api/rainbow/ucs/v1.0/connections/\" + that.connectionS2SInfo.id + \"/rooms/\" + roomid + \"/join\", that.getRequestHeader(), {}, undefined).then(function (json) {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(joinRoom) successfull\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(joinRoom) REST bubble presence received \", json.data);\r\n                    resolve(json.data);\r\n                }).catch(function (err) {\r\n                    that.logger.log(\"error\", LOG_ID, \"(joinRoom) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(joinRoom) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    markMessageAsRead(conversationId, messageId) {\r\n        // https://openrainbow.com:443/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages/{id}/read\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!conversationId) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(markMessageAsRead) failed\");\r\n                that.logger.log(\"info\", LOG_ID + \"(markMessageAsRead) No conversationId provided\");\r\n                reject({ code: -1, label: \"conversationId is not defined!!!\" });\r\n            }\r\n            else if (!messageId) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(markMessageAsRead) failed\");\r\n                that.logger.log(\"info\", LOG_ID + \"(markMessageAsRead) No messageId provided\");\r\n                reject({ code: -1, label: \"messageId is not defined!!!\" });\r\n            }\r\n            else {\r\n                that.http.put(\"/api/rainbow/ucs/v1.0/connections/\" + that.connectionS2SInfo.id + \"/conversations/\" + conversationId + \"/messages/\" + messageId + \"/read\", that.getRequestHeader(), {}, undefined).then(function (json) {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(markMessageAsRead) successfull\");\r\n                    that.logger.log(\"internal\", LOG_ID + \"(markMessageAsRead) REST bubble presence received \", json.data);\r\n                    resolve(json.data);\r\n                }).catch(function (err) {\r\n                    that.logger.log(\"error\", LOG_ID, \"(markMessageAsRead) error\");\r\n                    that.logger.log(\"internalerror\", LOG_ID, \"(markMessageAsRead) error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\nRESTService = __decorate([\r\n    Utils_js_1.logEntryExit(LOG_ID)\r\n], RESTService);\r\nexports.RESTService = RESTService;\r\nmodule.exports.RESTService = RESTService;\r\n//# sourceMappingURL=RESTService.js.map"]},"metadata":{},"sourceType":"script"}