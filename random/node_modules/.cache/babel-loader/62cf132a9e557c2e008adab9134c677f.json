{"ast":null,"code":"'use strict';\n\nclass XMPPError extends Error {\n  constructor(condition, text, application) {\n    super(condition + (text ? ` - ${text}` : ''));\n    this.name = 'XMPPError';\n    this.condition = condition;\n    this.text = text;\n    this.application = application;\n  }\n\n  static fromElement(element) {\n    const [condition, second, third] = element.children;\n    let text;\n    let application;\n\n    if (second) {\n      if (second.is('text')) {\n        text = second;\n      } else if (second) {\n        application = second;\n      }\n\n      if (third) application = third;\n    }\n\n    const error = new this(condition.name, text ? text.text() : '', application);\n    error.element = element;\n    return error;\n  }\n\n}\n\nmodule.exports = XMPPError;","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/@xmpp/error/index.js"],"names":["XMPPError","Error","constructor","condition","text","application","name","fromElement","element","second","third","children","is","error","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAN,SAAwBC,KAAxB,CAA8B;AAC5BC,EAAAA,WAAW,CAACC,SAAD,EAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AACxC,UAAMF,SAAS,IAAIC,IAAI,GAAI,MAAKA,IAAK,EAAd,GAAkB,EAA1B,CAAf;AACA,SAAKE,IAAL,GAAY,WAAZ;AACA,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD;;AAED,SAAOE,WAAP,CAAmBC,OAAnB,EAA4B;AAC1B,UAAM,CAACL,SAAD,EAAYM,MAAZ,EAAoBC,KAApB,IAA6BF,OAAO,CAACG,QAA3C;AACA,QAAIP,IAAJ;AACA,QAAIC,WAAJ;;AAEA,QAAII,MAAJ,EAAY;AACV,UAAIA,MAAM,CAACG,EAAP,CAAU,MAAV,CAAJ,EAAuB;AACrBR,QAAAA,IAAI,GAAGK,MAAP;AACD,OAFD,MAEO,IAAIA,MAAJ,EAAY;AACjBJ,QAAAA,WAAW,GAAGI,MAAd;AACD;;AAED,UAAIC,KAAJ,EAAWL,WAAW,GAAGK,KAAd;AACZ;;AAED,UAAMG,KAAK,GAAG,IAAI,IAAJ,CAASV,SAAS,CAACG,IAAnB,EAAyBF,IAAI,GAAGA,IAAI,CAACA,IAAL,EAAH,GAAiB,EAA9C,EAAkDC,WAAlD,CAAd;AACAQ,IAAAA,KAAK,CAACL,OAAN,GAAgBA,OAAhB;AACA,WAAOK,KAAP;AACD;;AA3B2B;;AA8B9BC,MAAM,CAACC,OAAP,GAAiBf,SAAjB","sourcesContent":["'use strict'\r\n\r\nclass XMPPError extends Error {\r\n  constructor(condition, text, application) {\r\n    super(condition + (text ? ` - ${text}` : ''))\r\n    this.name = 'XMPPError'\r\n    this.condition = condition\r\n    this.text = text\r\n    this.application = application\r\n  }\r\n\r\n  static fromElement(element) {\r\n    const [condition, second, third] = element.children\r\n    let text\r\n    let application\r\n\r\n    if (second) {\r\n      if (second.is('text')) {\r\n        text = second\r\n      } else if (second) {\r\n        application = second\r\n      }\r\n\r\n      if (third) application = third\r\n    }\r\n\r\n    const error = new this(condition.name, text ? text.text() : '', application)\r\n    error.element = element\r\n    return error\r\n  }\r\n}\r\n\r\nmodule.exports = XMPPError\r\n"]},"metadata":{},"sourceType":"script"}