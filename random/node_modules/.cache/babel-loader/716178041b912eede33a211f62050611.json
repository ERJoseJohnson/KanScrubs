{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst crypto = require(\"crypto\");\n\nconst URL = require(\"url\");\n\nconst fs = require(\"fs\"); //const TransferPromiseQueue = require(\"./TransferPromiseQueue\");\n\n\nconst promiseQueue_1 = require(\"../common/promiseQueue\");\n\nconst Utils_1 = require(\"../common/Utils\");\n\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\n\nconst Utils_2 = require(\"../common/Utils\");\n\nconst LOG_ID = \"FileServer/SVCE - \";\nconst ONE_KILOBYTE = 1024;\nconst ONE_MEGABYTE = 1024 * 1024;\nconst ONE_GIGABYTE = 1024 * 1024 * 1024;\nlet FileServer =\n/**\n* @module\n* @name FileStorage\n * @version 1.67.1 \n* @public\n* @description\n*      This service manage files on server side\n*/\nclass FileServer {\n  constructor(_eventEmitter, _logger, _startConfig) {\n    this.ready = false;\n    this._startConfig = _startConfig;\n    this._eventEmitter = _eventEmitter;\n    this._xmpp = null;\n    this._rest = null;\n    this._s2s = null;\n    this._options = {};\n    this._useXMPP = false;\n    this._useS2S = false;\n    this._logger = _logger;\n    this._capabilities = null;\n    this.transferPromiseQueue = null;\n    this._fileStorageService = null;\n    this.ready = false;\n  }\n\n  get startConfig() {\n    return this._startConfig;\n  }\n\n  get capabilities() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      if (!that._capabilities) {\n        if (that._rest) {\n          that._rest.getServerCapabilities().then(capabilities => {\n            that._capabilities = capabilities; //that.transferPromiseQueue = new TransferPromiseQueue(that._logger);\n\n            resolve(this._capabilities);\n          }).catch(() => {\n            return reject();\n          });\n        } else {\n          return reject();\n        }\n\n        return;\n      }\n\n      resolve(that._capabilities);\n    });\n  }\n\n  start(_options, _core) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._xmpp = _core._xmpp;\n        that._rest = _core._rest;\n        that._options = _options;\n        that._s2s = _core._s2s;\n        that._useXMPP = that._options.useXMPP;\n        that._useS2S = that._options.useS2S;\n        that._fileStorageService = _core.fileStorage;\n        that.ready = true;\n        resolve();\n      } catch (err) {\n        return reject(err);\n      }\n    });\n  }\n\n  stop() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._xmpp = null;\n        that._rest = null;\n        that.ready = false;\n        resolve();\n      } catch (err) {\n        return reject(err);\n      }\n    });\n  }\n\n  init() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      let capa = that.capabilities;\n      resolve(capa);\n    });\n  }\n  /**\n   * Method retrieve data from server using range request mecanism (RFC7233)\n   *\n   * @private\n   * @param {string} url [required] server url for request\n   * @param {number} minRange [requied] minimum value of range\n   * @param {number} maxRange [required] maximum value of range\n   * @param {number} index [required] index of the part. Used to re-assemble the data\n   * @returns {Object} structure containing the response data from server and the index\n   *\n   */\n\n\n  getPartialDataFromServer(url, minRange, maxRange, index) {\n    return this._rest.getPartialDataFromServer(url, minRange, maxRange, index);\n  }\n  /**\n   * Method creates buffer from a file retrieved from server using optimization (range request) whenever necessary\n   *\n   * @param {string} url [required] server url for request\n   * @param {string} mime [required] Mime type of the blob to be created\n   * @param {number} fileSize [optional] size of file to be retrieved. Default: 0\n   * @param {string} fileName [optional] name of file to be downloaded\n   * @returns {Buffer} Buffer created from data received from server\n   *\n   */\n\n\n  getBufferFromUrlWithOptimization(url, mime, fileSize, fileName, uploadedDate) {\n    let that = this;\n\n    if (fileSize === void 0) {\n      fileSize = 0;\n    }\n\n    if (fileName === void 0) {\n      fileName = \"\";\n    }\n\n    if (uploadedDate === void 0) {\n      uploadedDate = \"\";\n    }\n\n    if (uploadedDate.length !== 0) {\n      url += \"?update=\" + crypto.createHash(\"md5\").update(uploadedDate).digest(\"hex\");\n    }\n\n    let _url = url.startsWith(\"http\") ? URL.parse(url).path : url;\n\n    return new Promise((resolve, reject) => {\n      this.capabilities.then(capabilities => {\n        if (Boolean(capabilities.maxChunkSizeDownload) && fileSize !== 0 && fileSize > capabilities.maxChunkSizeDownload) {\n          let range = capabilities.maxChunkSizeDownload;\n          let minRange = 0;\n          let maxRange = range - 1;\n          let repetition = Math.ceil(fileSize / range);\n          let bufferArray = new Array(repetition);\n          let promiseArray = [];\n\n          for (let i = 0; repetition > 0; i++, repetition--, minRange += range, maxRange += range) {\n            promiseArray.push(this.getPartialDataFromServer(_url, minRange, maxRange, i).then(response => {\n              bufferArray[response.index] = response.data;\n              return response.data;\n            }));\n          }\n\n          Promise.all(promiseArray).then(() => {\n            let buffer = Buffer.concat(bufferArray);\n\n            that._logger.log(\"info\", LOG_ID + \"[FileServer] getBufferFromUrlWithOptimization success\");\n\n            resolve(buffer);\n          }, error => {\n            that._logger.log(\"error\", LOG_ID + \"[FileServer] Error.\");\n\n            that._logger.log(\"internalerror\", LOG_ID + \"[FileServer] Error : \", error);\n\n            return reject(error);\n          });\n        } else {\n          resolve(that._rest.getFileFromUrl(_url));\n        }\n      });\n    });\n  }\n  /**\n   * Method creates buffer from a file retrieved from server using optimization (range request) whenever necessary\n   *\n   * @param destFile\n   * @param {string} url [required] server url for request\n   * @param {string} mime [required] Mime type of the blob to be created\n   * @param {number} fileSize [optional] size of file to be retrieved. Default: 0\n   * @param {string} fileName [optional] name of file to be downloaded\n   * @param {string} uploadedDate [optional] date of the upload\n   * @returns {Buffer} Buffer created from data received from server\n   *\n   */\n\n\n  getFileFromUrlWithOptimization(destFile, url, mime, fileSize, fileName, uploadedDate) {\n    let that = this;\n\n    if (fileSize === void 0) {\n      fileSize = 0;\n    }\n\n    if (fileName === void 0) {\n      fileName = \"\";\n    }\n\n    if (uploadedDate === void 0) {\n      uploadedDate = \"\";\n    }\n\n    if (uploadedDate.length !== 0) {\n      url += \"?update=\" + crypto.createHash(\"md5\").update(uploadedDate).digest(\"hex\");\n    }\n\n    let _url = url.startsWith(\"http\") ? URL.parse(url).path : url;\n\n    let stream = fs.createWriteStream(destFile, {\n      flags: \"a\"\n    });\n    return new Promise((resolve, reject) => {\n      this.capabilities.then(capabilities => {\n        if (Boolean(capabilities.maxChunkSizeDownload) && fileSize !== 0 && fileSize > capabilities.maxChunkSizeDownload) {\n          let range = capabilities.maxChunkSizeDownload;\n          let minRange = 0;\n          let maxRange = range - 1;\n          let repetition = Math.ceil(fileSize / range);\n          let blobArray = new Array(repetition);\n          let promiseArray = [];\n\n          for (let i = 0; repetition > 0; i++, repetition--, minRange += range, maxRange += range) {\n            promiseArray.push(this.getPartialDataFromServer(_url, minRange, maxRange, i).then(response => {\n              blobArray[response.index] = response.data;\n              return response.data;\n            }));\n          }\n\n          Promise.all(promiseArray).then(() => {\n            let buffer = Buffer.concat(blobArray);\n\n            that._logger.log(\"info\", LOG_ID + \"[FileServer] getBufferFromUrlWithOptimization success\");\n\n            resolve(buffer);\n          }, error => {\n            that._logger.log(\"error\", LOG_ID + \"[FileServer] Error.\");\n\n            that._logger.log(\"internalerror\", LOG_ID + \"[FileServer] Error : \", error);\n\n            return reject(error);\n          });\n        } else {\n          resolve(that._rest.getFileFromUrl(_url));\n        }\n      });\n    });\n  }\n  /***\n   * @private\n   * @param fileDescriptor\n   * @param large\n   */\n\n\n  getBlobThumbnailFromFileDescriptor(fileDescriptor, large = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      /*\n              if (fileDescriptor.thumbnail.isThumbnailAvailable() ||\n                  (fileDescriptor.isImage() && fileDescriptor.size < (20 * this.ONE_KILOBYTE)) ) {\n      \n                  // Check if a request for this thumbnail is already lauched\n                  let existingPromise = this.thumbnailPromises[fileDescriptor.id];\n                  if (existingPromise) {\n                      this.$log.info(\"[FileServerService] getBlobThumbnailFromFileDescriptor \" + fileDescriptor.id + \" already lauched\");\n                      return existingPromise.promise;\n                  }\n      \n                  // Create the defered object\n                  let defered = this.$q.defer();\n                  this.thumbnailPromises[fileDescriptor.id] = defered;\n      \n                  // Forge the thumbnail url\n                  let url = fileDescriptor.url;\n                  if (fileDescriptor.thumbnail.isThumbnailAvailable() && fileDescriptor.size >= (20 * this.ONE_KILOBYTE)) {\n                      if (large) { url += \"?thumbnail500=true\"; }\n                      else { url += \"?thumbnail=true\"; }\n                  }\n                  else if (fileDescriptor.uploadedDate) { url += \"?update=\" + MD5.hexdigest(fileDescriptor.uploadedDate); }\n      \n                  // Get the thumbnail blob\n                  this.getBlobFromUrl(url, fileDescriptor.typeMIME, fileDescriptor.size, fileDescriptor.fileName)\n                      .then((blob) => {\n                          fileDescriptor.previewBlob = blob;\n      \n                          this.$rootScope.$broadcast(\"ON_FILE_TRANSFER_EVENT\", {\n                              result: \"success\", type: \"download\",\n                              fileDesc: fileDescriptor});\n                          delete this.thumbnailPromises[fileDescriptor.id];\n                          defered.resolve(blob);\n                      })\n                      .catch((error) => {\n                          this.$rootScope.$broadcast(\"ON_FILE_TRANSFER_EVENT\", {\n                              result: \"failure\", type: \"download\", message: error.message,\n                              fileDesc: fileDescriptor});\n                          delete this.thumbnailPromises[fileDescriptor.id];\n                          defered.reject(error);\n                      });\n      \n                  return defered.promise;\n              }\n              else { return this.$q.reject(); }\n      \n       */\n    });\n  }\n\n  /**\n   * Method sends data file to server\n   *\n   * @private\n   * @param {string} fileId [required] file descriptor ID of file to be sent\n   * @param {File} file [required] file to be sent\n   * @param {string} mime [required] mime type of file\n   * @returns {Promise<FileDescriptor>} file descriptor data received as response from server or http error response\n   *\n   */\n  _uploadAFile(fileId, filePath, mime) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      let fileDescriptor = that._fileStorageService.getFileDescriptorById(fileId);\n\n      if (fileDescriptor) {\n        fileDescriptor.state = \"uploading\";\n      }\n\n      let stream = fs.createReadStream(filePath); //let buffer = new Buffer(ONE_MEGABYTE);\n\n      /*\n                  let myWritableStreamBuffer = new streamBuffers.WritableStreamBuffer({\n                      initialSize: (1000 * 1024),   // start at 100 kilobytes.\n                      incrementAmount: (100 * 1024) // grow by 10 kilobytes each time buffer overflows.\n                  });\n      */\n      //stream.pipe(myWritableStreamBuffer);\n      //            stream.pipe(buffer)\n\n      that._rest.uploadAStream(fileId, stream).then(response => {\n        //let fileDescResponse = response.data.data;\n        let newFileDescriptor = that._fileStorageService.getFileDescriptorById(fileId);\n\n        if (newFileDescriptor) {\n          newFileDescriptor.state = \"uploaded\";\n        }\n\n        that._logger.log(\"info\", LOG_ID + \"(UploadAFile) success\"); // this.$rootScope.$broadcast(\"ON_FILE_TRANSFER_EVENT\", {\n        //     result: \"success\",\n        //     type: \"upload\",\n        //     url: this.portalURL + \"/\" + fileId,\n        //     fileId: fileId,\n        //     mime: mime,\n        //     filename: file.name,\n        //     filesize: file.size\n        // });\n        // this._fileStorageService.orderDocuments();\n\n\n        resolve(newFileDescriptor);\n      }).catch(errorResponse => {\n        // let error = this.errorHelperService.handleError(errorResponse);\n        // this.$rootScope.$broadcast(\"ON_FILE_TRANSFER_EVENT\", {\n        //     result: \"failure\",\n        //     type: \"upload\",\n        //     url: this.portalURL + \"/\" + fileId,\n        //     fileId: fileId,\n        //     mime: mime,\n        //     filename: file.name,\n        //     filesize: file.size\n        // });\n        that._logger.log(\"error\", LOG_ID + \"(UploadAFile) error.\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(UploadAFile) error : \", errorResponse);\n\n        return reject(errorResponse);\n      });\n    });\n  }\n  /**\n   * Method sends data to server using range request mecanism (RFC7233)\n   *\n   * @private\n   * @param {string} fileId [required] file descriptor ID of file to be sent\n   * @param {Blob} file [required] file to be sent\n   * @param {number} initialSize [required] initial size of whole file to be sent before partition\n   * @param {number} minRange [requied] minimum value of range\n   * @param {number} maxRange [required] maximum value of range\n   * @param {number} index [required] index of the part. Used to indicate the part number to the server\n   * @returns {Promise<{}>} file descriptor data received as response from server or http error response\n   *\n   */\n\n\n  _sendPartialDataToServer(fileId, file, index) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that._rest.sendPartialDataToServer(fileId, file, index).then(response => {\n        let filedescriptor = response.data;\n\n        that._logger.log(\"info\", LOG_ID + \"(_sendPartialDataToServer) sendPartialDataToServer success\");\n\n        resolve(filedescriptor);\n      }, errorResponse => {\n        //let error = this.errorHelperService.handleError(errorResponse);\n        that._logger.log(\"error\", LOG_ID + \"(_sendPartialDataToServer) Error.\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(_sendPartialDataToServer) Error : \", errorResponse);\n\n        return reject(errorResponse);\n      });\n    });\n  }\n  /**\n   * Upload File ByChunk progressCallback callback is displayed as part of the Requester class.\n   * @callback uploadAFileByChunk~progressCallback\n   * @param {FileDescriptor} fileDescriptor\n   */\n\n  /**\n   * Method sends data to server using range request mecanism (RFC7233)\n   *\n   * @private\n   * @param {FileDescriptor} fileDescriptor [required] file descriptor Object of file to be sent\n   * @param {File} file [required] filePath of the file to be sent\n  //     * @param {uploadAFileByChunk~progressCallback} progressCallback [required] initial size of whole file to be sent before partition\n   * @returns {Promise<{FileDescriptor}>} file descriptor data received as response from server or http error response\n   *\n   */\n\n\n  uploadAFileByChunk(fileDescriptor, filePath\n  /*, progressCallback */\n  ) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n      let promiseQueue = promiseQueue_1.createPromiseQueue(that._logger);\n      let fileStats = fs.statSync(filePath); //let range = ONE_MEGABYTE;\n\n      let range = (yield that.capabilities).maxChunkSizeUpload;\n\n      if (range < fileStats.size) {\n        if (fileStats.size >= 100 * range) {\n          range = fileStats.size / 100 + this.ONE_KILOBYTE;\n\n          that._logger.log(\"debug\", LOG_ID + \"(uploadAFileByChunk) changing chunk size: \" + range);\n        }\n\n        let deferred = new Utils_1.Deferred();\n        fileDescriptor.chunkTotalNumber = Math.ceil(fileStats.size / range);\n        fileDescriptor.chunkPerformed = 0;\n        fileDescriptor.chunkPerformedPercent = 0;\n        fileDescriptor.state = \"uploading\"; //let promiseArray = [];\n\n        let fd = fs.openSync(filePath, \"r+\");\n\n        let partialSent = (promiseDeferred, blob, i) => {\n          //let promiseArrayDeferred = new Deferred();\n          that._sendPartialDataToServer(fileDescriptor.id, blob, i).then(response => {\n            fileDescriptor.chunkPerformed++;\n            fileDescriptor.chunkPerformedPercent = 100 * fileDescriptor.chunkPerformed / fileDescriptor.chunkTotalNumber; // progressCallback(fileDescriptor);\n\n            return promiseDeferred.resolve(response);\n          }).catch(error => {\n            that._logger.log(\"error\", LOG_ID + \"(uploadAFileByChunk) error on chunk upload.\");\n\n            that._logger.log(\"internalerror\", LOG_ID + \"(uploadAFileByChunk) error on chunk upload : \", error);\n\n            return promiseDeferred.reject(error);\n          });\n\n          return promiseDeferred.promise;\n        };\n\n        for (let i = 0, minRange = 0, maxRange = range - 1, repetition = Math.ceil(fileStats.size / range); repetition > 0; i++, repetition--, minRange += range, maxRange += range) {\n          let max = maxRange < fileStats.size ? maxRange + 1 : fileStats.size;\n          let sizeToRead = max - minRange;\n          let buf = new Buffer(sizeToRead);\n\n          that._logger.log(\"debug\", LOG_ID + \"(uploadAFileByChunk) sizeToRead=\", sizeToRead, \", minRange : \", minRange, \", max : \", max, \", buff.byteLength : \", buf.byteLength);\n\n          let promiseDeferred = new Utils_1.Deferred(); //promiseArray.push(promiseDeferred.promise);\n\n          promiseQueue.add(() => {\n            fs.readSync(fd, buf, 0, sizeToRead, null);\n            partialSent(promiseDeferred, buf, i);\n            return promiseDeferred.promise;\n          });\n        }\n        /* let promisesCompletion = () => {\n             this._rest.sendPartialFileCompletion(fileDescriptor.id)\n                 .then(\n                     (response) => {\n                         that._logger.log(\"info\", LOG_ID + \"(uploadAFileByChunk) success\");\n                         fileDescriptor.state = \"uploaded\";\n                         fileDescriptor.chunkPerformed = 0;\n                         fileDescriptor.chunkTotalNumber = 0;\n                         fileDescriptor.chunkPerformedPercent = 0;\n                         // progressCallback(fileDescriptor);\n                         deferred.resolve(fileDescriptor);\n                     })\n                 .catch((errorResponse) => {\n                     deferred.reject(errorResponse);\n                 });\n         };\n         let promisesReject = (errorResponse) => {\n             deferred.reject(errorResponse);\n         };\n         that.transferPromiseQueue.addPromiseArray(promiseArray, promisesCompletion, promisesReject);\n         // */\n\n\n        promiseQueue.add(() => {\n          return this._rest.sendPartialFileCompletion(fileDescriptor.id).then(response => {\n            that._logger.log(\"info\", LOG_ID + \"(uploadAFileByChunk) success\");\n\n            fileDescriptor.state = \"uploaded\";\n            fileDescriptor.chunkPerformed = 0;\n            fileDescriptor.chunkTotalNumber = 0;\n            fileDescriptor.chunkPerformedPercent = 0; // progressCallback(fileDescriptor);\n\n            deferred.resolve(fileDescriptor);\n          }).catch(errorResponse => {\n            return deferred.reject(errorResponse);\n          });\n        }); // */\n\n        return deferred.promise;\n      } // Fallback if capabilities retrieval fails or file is small enough to upload the whole file in one go\n      // progressCallback(fileDescriptor);\n\n\n      return that._uploadAFile(fileDescriptor.id, filePath, fileDescriptor.typeMIME).then(response => {\n        that._logger.log(\"info\", LOG_ID + \"(uploadAFileByChunk) uploadAFile success\"); // progressCallback(fileDescriptor);\n\n\n        return Promise.resolve(fileDescriptor);\n      });\n    });\n  }\n\n  isTransferInProgress() {\n    return this.transferPromiseQueue.isTransferInProgress();\n  }\n\n  cancelAllTransfers() {\n    this.transferPromiseQueue.cancelAllTransfers();\n  }\n  /**\n   * Method creates blob from a file retrieved from server using optimization (range request) whenever necessary\n   *\n   * @param {string} url [required] server url for request\n   * @param {string} mime [required] Mime type of the blob to be created\n   * @param {number} fileSize [optional] size of file to be retrieved. Default: 0\n   * @param {string} fileName [optional] name of file to be downloaded\n   * @returns {Promise<Blob>} Blob created from data received from server\n   *\n   * !!!!!! OBSOLETE\n   */\n\n\n  getBlobFromUrlWithOptimization(url, mime, fileSize, fileName, uploadedDate) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      if (fileSize == null || fileSize == undefined) {\n        fileSize = 0;\n      }\n\n      if (fileName == null || fileName == undefined) {\n        fileName = \"\";\n      }\n\n      if (uploadedDate == null || uploadedDate == undefined) {\n        uploadedDate = \"\";\n      }\n\n      if (uploadedDate.length !== 0) {// NEED TO BE CORREDTED TO BE USED IN NODE RAINBOW SDK  url += \"?update=\" + MD5.hexdigest(uploadedDate);\n      }\n\n      if (!!(yield that.capabilities).maxChunkSizeDownload && fileSize !== 0 && fileSize > (yield that.capabilities).maxChunkSizeDownload) {\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n          let range = (yield that.capabilities).maxChunkSizeDownload;\n\n          if (range > that.ONE_MEGABYTE) {\n            range = that.ONE_MEGABYTE;\n          }\n\n          let minRange = 0;\n          let maxRange = range - 1;\n          let repetition = Math.ceil(fileSize / range);\n          let blobArray = new Array(repetition);\n\n          that._logger.log(\"info\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization : \" + repetition + \" chunks to be downloaded\");\n\n          let promiseArray = [];\n\n          for (let i = 0; repetition > 0; i++, repetition--, minRange += range, maxRange += range) {\n            promiseArray.push(that.getPartialDataFromServer(url, minRange, maxRange, i).then(response => {\n              blobArray[response['index']] = response['data'];\n              return response['data'];\n            }));\n          }\n\n          Promise.all(promiseArray).then(() => {\n            /* NEED TO BE CORREDTED TO BE USED IN NODE RAINBOW SDK\n             let blob = new Blob(blobArray,\n                { type: mime });\n            that._logger.log(\"info\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization success\");\n             resolve(blob);\n            */\n          }, errorResponse => {\n            let errorMessage = \"[FileServerService] getBlobFromUrlWithOptimization failure : \" + errorResponse.message;\n\n            that._logger.log(\"error\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization Error.\");\n\n            that._logger.log(\"internalerror\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization : \", errorResponse);\n\n            return reject(ErrorManager_1.ErrorManager.getErrorManager().OTHERERROR(errorMessage, errorMessage));\n            /*\n            let error = this.errorHelperService.handleError(errorResponse);\n             let errorDataObj = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(errorResponse.data)));\n            let translatedErrorMessage = that.errorHelperService.getLocalizedError(errorDataObj.errorDetailsCode);\n            that._logger.log(\"info\", LOG_ID + \"[FileServerService] \" + translatedErrorMessage ? translatedErrorMessage : error.message);\n            */\n            //reject(errorMessage);\n          });\n        }));\n      } else {\n        return this.getBlobFromUrl(url, mime, fileSize, fileName);\n      }\n    });\n  }\n\n  /**\n   * Method creates blob from a file retrieved from server\n   *\n   * @private\n   * @param {string} url [required] server url for request\n   * @param {string} mime [required] Mime type of the blob to be created\n   * @param {number} fileSize [required] size of file to be retrieved\n   * @param {string} fileName [required] name of file to be downloaded\n   * @returns {ng.IPromise<Blob>} Blob created from data received from server\n   *\n   */\n  getBlobFromUrl(url, mime, fileSize, fileName) {\n    let that = this;\n\n    that._logger.log(\"info\", LOG_ID + \"[FileServerService] >getBlobFromUrl\");\n\n    that._logger.log(\"internal\", LOG_ID + \"[FileServerService] >getBlobFromUrl : \" + url);\n\n    return new Promise((resolve, reject) => {\n      /*this.$http({\n          method: \"GET\",\n          url: url,\n          headers: this.authService.getRequestHeader(),\n          responseType: 'arraybuffer'\n      }) // */\n      that._rest.getBlobFromUrl(url).then(response => {\n        /* let blob = blobUtil.createBlob([response.data],\n            { type: mime }); // */\n        let blob = {\n          buffer: response,\n          type: mime,\n          fileSize: fileSize,\n          fileName: fileName\n        }; // */\n\n        /*let blob = new Blob([response.data],\n            { type: mime }); // */\n\n        that._logger.log(\"debug\", LOG_ID + \"[FileServerService] getBlobFromUrl success\");\n\n        resolve(blob);\n      }, errorResponse => {\n        let errorMessage = \"[FileServerService] getBlobFromUrlWithOptimization failure : \" + errorResponse;\n\n        that._logger.log(\"error\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization Error.\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization : \", errorResponse);\n\n        let err = ErrorManager_1.ErrorManager.getErrorManager().ERROR;\n        err.msg = errorMessage;\n        return reject(err);\n        /*\n        let error = this.errorHelperService.handleError(errorResponse);\n        let errorDataObj = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(errorResponse.data)));\n        let translatedErrorMessage = this.errorHelperService.getLocalizedError(errorDataObj.errorDetailsCode);\n        this.$log.error(\"[FileServerService] \" + (translatedErrorMessage) ? translatedErrorMessage : error.message);\n        // */\n      });\n    });\n  }\n  /**\n  * Method retrieves user quota (capabilities) for user\n  *\n  * @returns {Capabilities} user quota for user\n  *\n  */\n\n\n  getServerCapabilities() {\n    return this._rest.getServerCapabilities();\n  }\n\n};\nFileServer = __decorate([Utils_1.logEntryExit(LOG_ID), Utils_2.isStarted([])\n/**\n* @module\n* @name FileStorage\n * @version 1.67.1 \n* @public\n* @description\n*      This service manage files on server side\n*/\n], FileServer);\nexports.FileServerService = FileServer;\nmodule.exports.FileServerService = FileServer;","map":{"version":3,"sources":["../../src/lib/services/FileServerService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto = require(\"crypto\");\nconst URL = require(\"url\");\nconst fs = require(\"fs\");\n//const TransferPromiseQueue = require(\"./TransferPromiseQueue\");\nconst promiseQueue_1 = require(\"../common/promiseQueue\");\nconst Utils_1 = require(\"../common/Utils\");\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\nconst Utils_2 = require(\"../common/Utils\");\nconst LOG_ID = \"FileServer/SVCE - \";\nconst ONE_KILOBYTE = 1024;\nconst ONE_MEGABYTE = 1024 * 1024;\nconst ONE_GIGABYTE = 1024 * 1024 * 1024;\nlet FileServer = \n/**\n* @module\n* @name FileStorage\n * @version 1.67.1 \n* @public\n* @description\n*      This service manage files on server side\n*/\nclass FileServer {\n    constructor(_eventEmitter, _logger, _startConfig) {\n        this.ready = false;\n        this._startConfig = _startConfig;\n        this._eventEmitter = _eventEmitter;\n        this._xmpp = null;\n        this._rest = null;\n        this._s2s = null;\n        this._options = {};\n        this._useXMPP = false;\n        this._useS2S = false;\n        this._logger = _logger;\n        this._capabilities = null;\n        this.transferPromiseQueue = null;\n        this._fileStorageService = null;\n        this.ready = false;\n    }\n    get startConfig() {\n        return this._startConfig;\n    }\n    get capabilities() {\n        let that = this;\n        return new Promise((resolve, reject) => {\n            if (!that._capabilities) {\n                if (that._rest) {\n                    that._rest.getServerCapabilities().then((capabilities) => {\n                        that._capabilities = capabilities;\n                        //that.transferPromiseQueue = new TransferPromiseQueue(that._logger);\n                        resolve(this._capabilities);\n                    }).catch(() => {\n                        return reject();\n                    });\n                }\n                else {\n                    return reject();\n                }\n                return;\n            }\n            resolve(that._capabilities);\n        });\n    }\n    start(_options, _core) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                that._xmpp = _core._xmpp;\n                that._rest = _core._rest;\n                that._options = _options;\n                that._s2s = _core._s2s;\n                that._useXMPP = that._options.useXMPP;\n                that._useS2S = that._options.useS2S;\n                that._fileStorageService = _core.fileStorage;\n                that.ready = true;\n                resolve();\n            }\n            catch (err) {\n                return reject(err);\n            }\n        });\n    }\n    stop() {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                that._xmpp = null;\n                that._rest = null;\n                that.ready = false;\n                resolve();\n            }\n            catch (err) {\n                return reject(err);\n            }\n        });\n    }\n    init() {\n        let that = this;\n        return new Promise((resolve, reject) => {\n            let capa = that.capabilities;\n            resolve(capa);\n        });\n    }\n    /**\n     * Method retrieve data from server using range request mecanism (RFC7233)\n     *\n     * @private\n     * @param {string} url [required] server url for request\n     * @param {number} minRange [requied] minimum value of range\n     * @param {number} maxRange [required] maximum value of range\n     * @param {number} index [required] index of the part. Used to re-assemble the data\n     * @returns {Object} structure containing the response data from server and the index\n     *\n     */\n    getPartialDataFromServer(url, minRange, maxRange, index) {\n        return this._rest.getPartialDataFromServer(url, minRange, maxRange, index);\n    }\n    /**\n     * Method creates buffer from a file retrieved from server using optimization (range request) whenever necessary\n     *\n     * @param {string} url [required] server url for request\n     * @param {string} mime [required] Mime type of the blob to be created\n     * @param {number} fileSize [optional] size of file to be retrieved. Default: 0\n     * @param {string} fileName [optional] name of file to be downloaded\n     * @returns {Buffer} Buffer created from data received from server\n     *\n     */\n    getBufferFromUrlWithOptimization(url, mime, fileSize, fileName, uploadedDate) {\n        let that = this;\n        if (fileSize === void 0) {\n            fileSize = 0;\n        }\n        if (fileName === void 0) {\n            fileName = \"\";\n        }\n        if (uploadedDate === void 0) {\n            uploadedDate = \"\";\n        }\n        if (uploadedDate.length !== 0) {\n            url += \"?update=\" + crypto.createHash(\"md5\").update(uploadedDate).digest(\"hex\");\n        }\n        let _url = url.startsWith(\"http\") ? URL.parse(url).path : url;\n        return new Promise((resolve, reject) => {\n            this.capabilities.then((capabilities) => {\n                if (Boolean(capabilities.maxChunkSizeDownload) && fileSize !== 0 && fileSize > capabilities.maxChunkSizeDownload) {\n                    let range = capabilities.maxChunkSizeDownload;\n                    let minRange = 0;\n                    let maxRange = range - 1;\n                    let repetition = Math.ceil(fileSize / range);\n                    let bufferArray = new Array(repetition);\n                    let promiseArray = [];\n                    for (let i = 0; repetition > 0; i++, repetition--, minRange += range, maxRange += range) {\n                        promiseArray.push(this.getPartialDataFromServer(_url, minRange, maxRange, i).then((response) => {\n                            bufferArray[response.index] = response.data;\n                            return (response.data);\n                        }));\n                    }\n                    Promise.all(promiseArray)\n                        .then(() => {\n                        let buffer = Buffer.concat(bufferArray);\n                        that._logger.log(\"info\", LOG_ID + \"[FileServer] getBufferFromUrlWithOptimization success\");\n                        resolve(buffer);\n                    }, (error) => {\n                        that._logger.log(\"error\", LOG_ID + \"[FileServer] Error.\");\n                        that._logger.log(\"internalerror\", LOG_ID + \"[FileServer] Error : \", error);\n                        return reject(error);\n                    });\n                }\n                else {\n                    resolve(that._rest.getFileFromUrl(_url));\n                }\n            });\n        });\n    }\n    /**\n     * Method creates buffer from a file retrieved from server using optimization (range request) whenever necessary\n     *\n     * @param destFile\n     * @param {string} url [required] server url for request\n     * @param {string} mime [required] Mime type of the blob to be created\n     * @param {number} fileSize [optional] size of file to be retrieved. Default: 0\n     * @param {string} fileName [optional] name of file to be downloaded\n     * @param {string} uploadedDate [optional] date of the upload\n     * @returns {Buffer} Buffer created from data received from server\n     *\n     */\n    getFileFromUrlWithOptimization(destFile, url, mime, fileSize, fileName, uploadedDate) {\n        let that = this;\n        if (fileSize === void 0) {\n            fileSize = 0;\n        }\n        if (fileName === void 0) {\n            fileName = \"\";\n        }\n        if (uploadedDate === void 0) {\n            uploadedDate = \"\";\n        }\n        if (uploadedDate.length !== 0) {\n            url += \"?update=\" + crypto.createHash(\"md5\").update(uploadedDate).digest(\"hex\");\n        }\n        let _url = url.startsWith(\"http\") ? URL.parse(url).path : url;\n        let stream = fs.createWriteStream(destFile, {\n            flags: \"a\"\n        });\n        return new Promise((resolve, reject) => {\n            this.capabilities.then((capabilities) => {\n                if (Boolean(capabilities.maxChunkSizeDownload) && fileSize !== 0 && fileSize > capabilities.maxChunkSizeDownload) {\n                    let range = capabilities.maxChunkSizeDownload;\n                    let minRange = 0;\n                    let maxRange = range - 1;\n                    let repetition = Math.ceil(fileSize / range);\n                    let blobArray = new Array(repetition);\n                    let promiseArray = [];\n                    for (let i = 0; repetition > 0; i++, repetition--, minRange += range, maxRange += range) {\n                        promiseArray.push(this.getPartialDataFromServer(_url, minRange, maxRange, i)\n                            .then((response) => {\n                            blobArray[response.index] = response.data;\n                            return (response.data);\n                        }));\n                    }\n                    Promise.all(promiseArray)\n                        .then(() => {\n                        let buffer = Buffer.concat(blobArray);\n                        that._logger.log(\"info\", LOG_ID + \"[FileServer] getBufferFromUrlWithOptimization success\");\n                        resolve(buffer);\n                    }, (error) => {\n                        that._logger.log(\"error\", LOG_ID + \"[FileServer] Error.\");\n                        that._logger.log(\"internalerror\", LOG_ID + \"[FileServer] Error : \", error);\n                        return reject(error);\n                    });\n                }\n                else {\n                    resolve(that._rest.getFileFromUrl(_url));\n                }\n            });\n        });\n    }\n    /***\n     * @private\n     * @param fileDescriptor\n     * @param large\n     */\n    getBlobThumbnailFromFileDescriptor(fileDescriptor, large = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            /*\n                    if (fileDescriptor.thumbnail.isThumbnailAvailable() ||\n                        (fileDescriptor.isImage() && fileDescriptor.size < (20 * this.ONE_KILOBYTE)) ) {\n            \n                        // Check if a request for this thumbnail is already lauched\n                        let existingPromise = this.thumbnailPromises[fileDescriptor.id];\n                        if (existingPromise) {\n                            this.$log.info(\"[FileServerService] getBlobThumbnailFromFileDescriptor \" + fileDescriptor.id + \" already lauched\");\n                            return existingPromise.promise;\n                        }\n            \n                        // Create the defered object\n                        let defered = this.$q.defer();\n                        this.thumbnailPromises[fileDescriptor.id] = defered;\n            \n                        // Forge the thumbnail url\n                        let url = fileDescriptor.url;\n                        if (fileDescriptor.thumbnail.isThumbnailAvailable() && fileDescriptor.size >= (20 * this.ONE_KILOBYTE)) {\n                            if (large) { url += \"?thumbnail500=true\"; }\n                            else { url += \"?thumbnail=true\"; }\n                        }\n                        else if (fileDescriptor.uploadedDate) { url += \"?update=\" + MD5.hexdigest(fileDescriptor.uploadedDate); }\n            \n                        // Get the thumbnail blob\n                        this.getBlobFromUrl(url, fileDescriptor.typeMIME, fileDescriptor.size, fileDescriptor.fileName)\n                            .then((blob) => {\n                                fileDescriptor.previewBlob = blob;\n            \n                                this.$rootScope.$broadcast(\"ON_FILE_TRANSFER_EVENT\", {\n                                    result: \"success\", type: \"download\",\n                                    fileDesc: fileDescriptor});\n                                delete this.thumbnailPromises[fileDescriptor.id];\n                                defered.resolve(blob);\n                            })\n                            .catch((error) => {\n                                this.$rootScope.$broadcast(\"ON_FILE_TRANSFER_EVENT\", {\n                                    result: \"failure\", type: \"download\", message: error.message,\n                                    fileDesc: fileDescriptor});\n                                delete this.thumbnailPromises[fileDescriptor.id];\n                                defered.reject(error);\n                            });\n            \n                        return defered.promise;\n                    }\n                    else { return this.$q.reject(); }\n            \n             */\n        });\n    }\n    ;\n    /**\n     * Method sends data file to server\n     *\n     * @private\n     * @param {string} fileId [required] file descriptor ID of file to be sent\n     * @param {File} file [required] file to be sent\n     * @param {string} mime [required] mime type of file\n     * @returns {Promise<FileDescriptor>} file descriptor data received as response from server or http error response\n     *\n     */\n    _uploadAFile(fileId, filePath, mime) {\n        let that = this;\n        return new Promise((resolve, reject) => {\n            let fileDescriptor = that._fileStorageService.getFileDescriptorById(fileId);\n            if (fileDescriptor) {\n                fileDescriptor.state = \"uploading\";\n            }\n            let stream = fs.createReadStream(filePath);\n            //let buffer = new Buffer(ONE_MEGABYTE);\n            /*\n                        let myWritableStreamBuffer = new streamBuffers.WritableStreamBuffer({\n                            initialSize: (1000 * 1024),   // start at 100 kilobytes.\n                            incrementAmount: (100 * 1024) // grow by 10 kilobytes each time buffer overflows.\n                        });\n            */\n            //stream.pipe(myWritableStreamBuffer);\n            //            stream.pipe(buffer)\n            that._rest.uploadAStream(fileId, stream).then((response) => {\n                //let fileDescResponse = response.data.data;\n                let newFileDescriptor = that._fileStorageService.getFileDescriptorById(fileId);\n                if (newFileDescriptor) {\n                    newFileDescriptor.state = \"uploaded\";\n                }\n                that._logger.log(\"info\", LOG_ID + \"(UploadAFile) success\");\n                // this.$rootScope.$broadcast(\"ON_FILE_TRANSFER_EVENT\", {\n                //     result: \"success\",\n                //     type: \"upload\",\n                //     url: this.portalURL + \"/\" + fileId,\n                //     fileId: fileId,\n                //     mime: mime,\n                //     filename: file.name,\n                //     filesize: file.size\n                // });\n                // this._fileStorageService.orderDocuments();\n                resolve(newFileDescriptor);\n            }).catch((errorResponse) => {\n                // let error = this.errorHelperService.handleError(errorResponse);\n                // this.$rootScope.$broadcast(\"ON_FILE_TRANSFER_EVENT\", {\n                //     result: \"failure\",\n                //     type: \"upload\",\n                //     url: this.portalURL + \"/\" + fileId,\n                //     fileId: fileId,\n                //     mime: mime,\n                //     filename: file.name,\n                //     filesize: file.size\n                // });\n                that._logger.log(\"error\", LOG_ID + \"(UploadAFile) error.\");\n                that._logger.log(\"internalerror\", LOG_ID + \"(UploadAFile) error : \", errorResponse);\n                return reject(errorResponse);\n            });\n        });\n    }\n    /**\n     * Method sends data to server using range request mecanism (RFC7233)\n     *\n     * @private\n     * @param {string} fileId [required] file descriptor ID of file to be sent\n     * @param {Blob} file [required] file to be sent\n     * @param {number} initialSize [required] initial size of whole file to be sent before partition\n     * @param {number} minRange [requied] minimum value of range\n     * @param {number} maxRange [required] maximum value of range\n     * @param {number} index [required] index of the part. Used to indicate the part number to the server\n     * @returns {Promise<{}>} file descriptor data received as response from server or http error response\n     *\n     */\n    _sendPartialDataToServer(fileId, file, index) {\n        let that = this;\n        return new Promise((resolve, reject) => {\n            that._rest.sendPartialDataToServer(fileId, file, index).then((response) => {\n                let filedescriptor = response.data;\n                that._logger.log(\"info\", LOG_ID + \"(_sendPartialDataToServer) sendPartialDataToServer success\");\n                resolve(filedescriptor);\n            }, (errorResponse) => {\n                //let error = this.errorHelperService.handleError(errorResponse);\n                that._logger.log(\"error\", LOG_ID + \"(_sendPartialDataToServer) Error.\");\n                that._logger.log(\"internalerror\", LOG_ID + \"(_sendPartialDataToServer) Error : \", errorResponse);\n                return reject(errorResponse);\n            });\n        });\n    }\n    /**\n     * Upload File ByChunk progressCallback callback is displayed as part of the Requester class.\n     * @callback uploadAFileByChunk~progressCallback\n     * @param {FileDescriptor} fileDescriptor\n     */\n    /**\n     * Method sends data to server using range request mecanism (RFC7233)\n     *\n     * @private\n     * @param {FileDescriptor} fileDescriptor [required] file descriptor Object of file to be sent\n     * @param {File} file [required] filePath of the file to be sent\n//     * @param {uploadAFileByChunk~progressCallback} progressCallback [required] initial size of whole file to be sent before partition\n     * @returns {Promise<{FileDescriptor}>} file descriptor data received as response from server or http error response\n     *\n     */\n    uploadAFileByChunk(fileDescriptor, filePath /*, progressCallback */) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            let promiseQueue = promiseQueue_1.createPromiseQueue(that._logger);\n            let fileStats = fs.statSync(filePath);\n            //let range = ONE_MEGABYTE;\n            let range = (yield that.capabilities).maxChunkSizeUpload;\n            if (range < fileStats.size) {\n                if (fileStats.size >= 100 * range) {\n                    range = (fileStats.size / 100) + this.ONE_KILOBYTE;\n                    that._logger.log(\"debug\", LOG_ID + \"(uploadAFileByChunk) changing chunk size: \" + range);\n                }\n                let deferred = new Utils_1.Deferred();\n                fileDescriptor.chunkTotalNumber = Math.ceil(fileStats.size / range);\n                fileDescriptor.chunkPerformed = 0;\n                fileDescriptor.chunkPerformedPercent = 0;\n                fileDescriptor.state = \"uploading\";\n                //let promiseArray = [];\n                let fd = fs.openSync(filePath, \"r+\");\n                let partialSent = (promiseDeferred, blob, i) => {\n                    //let promiseArrayDeferred = new Deferred();\n                    that._sendPartialDataToServer(fileDescriptor.id, blob, i)\n                        .then((response) => {\n                        fileDescriptor.chunkPerformed++;\n                        fileDescriptor.chunkPerformedPercent = 100 * fileDescriptor.chunkPerformed / fileDescriptor.chunkTotalNumber;\n                        // progressCallback(fileDescriptor);\n                        return promiseDeferred.resolve(response);\n                    })\n                        .catch((error) => {\n                        that._logger.log(\"error\", LOG_ID + \"(uploadAFileByChunk) error on chunk upload.\");\n                        that._logger.log(\"internalerror\", LOG_ID + \"(uploadAFileByChunk) error on chunk upload : \", error);\n                        return promiseDeferred.reject(error);\n                    });\n                    return promiseDeferred.promise;\n                };\n                for (let i = 0, minRange = 0, maxRange = range - 1, repetition = Math.ceil(fileStats.size / range); repetition > 0; i++, repetition--, minRange += range, maxRange += range) {\n                    let max = maxRange < fileStats.size ? maxRange + 1 : fileStats.size;\n                    let sizeToRead = max - minRange;\n                    let buf = new Buffer(sizeToRead);\n                    that._logger.log(\"debug\", LOG_ID + \"(uploadAFileByChunk) sizeToRead=\", sizeToRead, \", minRange : \", minRange, \", max : \", max, \", buff.byteLength : \", buf.byteLength);\n                    let promiseDeferred = new Utils_1.Deferred();\n                    //promiseArray.push(promiseDeferred.promise);\n                    promiseQueue.add(() => {\n                        fs.readSync(fd, buf, 0, sizeToRead, null);\n                        partialSent(promiseDeferred, buf, i);\n                        return promiseDeferred.promise;\n                    });\n                }\n                /* let promisesCompletion = () => {\n                     this._rest.sendPartialFileCompletion(fileDescriptor.id)\n                         .then(\n                             (response) => {\n                                 that._logger.log(\"info\", LOG_ID + \"(uploadAFileByChunk) success\");\n                                 fileDescriptor.state = \"uploaded\";\n                                 fileDescriptor.chunkPerformed = 0;\n                                 fileDescriptor.chunkTotalNumber = 0;\n                                 fileDescriptor.chunkPerformedPercent = 0;\n                                 // progressCallback(fileDescriptor);\n                                 deferred.resolve(fileDescriptor);\n                             })\n                         .catch((errorResponse) => {\n                             deferred.reject(errorResponse);\n                         });\n                 };\n                 let promisesReject = (errorResponse) => {\n                     deferred.reject(errorResponse);\n                 };\n                 that.transferPromiseQueue.addPromiseArray(promiseArray, promisesCompletion, promisesReject);\n                 // */\n                promiseQueue.add(() => {\n                    return this._rest.sendPartialFileCompletion(fileDescriptor.id)\n                        .then((response) => {\n                        that._logger.log(\"info\", LOG_ID + \"(uploadAFileByChunk) success\");\n                        fileDescriptor.state = \"uploaded\";\n                        fileDescriptor.chunkPerformed = 0;\n                        fileDescriptor.chunkTotalNumber = 0;\n                        fileDescriptor.chunkPerformedPercent = 0;\n                        // progressCallback(fileDescriptor);\n                        deferred.resolve(fileDescriptor);\n                    })\n                        .catch((errorResponse) => {\n                        return deferred.reject(errorResponse);\n                    });\n                });\n                // */\n                return deferred.promise;\n            }\n            // Fallback if capabilities retrieval fails or file is small enough to upload the whole file in one go\n            // progressCallback(fileDescriptor);\n            return that._uploadAFile(fileDescriptor.id, filePath, fileDescriptor.typeMIME)\n                .then((response) => {\n                that._logger.log(\"info\", LOG_ID + \"(uploadAFileByChunk) uploadAFile success\");\n                // progressCallback(fileDescriptor);\n                return Promise.resolve(fileDescriptor);\n            });\n        });\n    }\n    isTransferInProgress() {\n        return this.transferPromiseQueue.isTransferInProgress();\n    }\n    cancelAllTransfers() {\n        this.transferPromiseQueue.cancelAllTransfers();\n    }\n    /**\n     * Method creates blob from a file retrieved from server using optimization (range request) whenever necessary\n     *\n     * @param {string} url [required] server url for request\n     * @param {string} mime [required] Mime type of the blob to be created\n     * @param {number} fileSize [optional] size of file to be retrieved. Default: 0\n     * @param {string} fileName [optional] name of file to be downloaded\n     * @returns {Promise<Blob>} Blob created from data received from server\n     *\n     * !!!!!! OBSOLETE\n     */\n    getBlobFromUrlWithOptimization(url, mime, fileSize, fileName, uploadedDate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let that = this;\n            if (fileSize == null || fileSize == undefined) {\n                fileSize = 0;\n            }\n            if (fileName == null || fileName == undefined) {\n                fileName = \"\";\n            }\n            if (uploadedDate == null || uploadedDate == undefined) {\n                uploadedDate = \"\";\n            }\n            if (uploadedDate.length !== 0) {\n                // NEED TO BE CORREDTED TO BE USED IN NODE RAINBOW SDK  url += \"?update=\" + MD5.hexdigest(uploadedDate);\n            }\n            if (!!(yield that.capabilities).maxChunkSizeDownload && fileSize !== 0 && fileSize > (yield that.capabilities).maxChunkSizeDownload) {\n                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                    let range = (yield that.capabilities).maxChunkSizeDownload;\n                    if (range > that.ONE_MEGABYTE) {\n                        range = that.ONE_MEGABYTE;\n                    }\n                    let minRange = 0;\n                    let maxRange = range - 1;\n                    let repetition = Math.ceil(fileSize / range);\n                    let blobArray = new Array(repetition);\n                    that._logger.log(\"info\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization : \" + repetition + \" chunks to be downloaded\");\n                    let promiseArray = [];\n                    for (let i = 0; repetition > 0; i++, repetition--, minRange += range, maxRange += range) {\n                        promiseArray.push(that.getPartialDataFromServer(url, minRange, maxRange, i)\n                            .then((response) => {\n                            blobArray[response['index']] = response['data'];\n                            return (response['data']);\n                        }));\n                    }\n                    Promise.all(promiseArray)\n                        .then(() => {\n                        /* NEED TO BE CORREDTED TO BE USED IN NODE RAINBOW SDK\n                         let blob = new Blob(blobArray,\n                            { type: mime });\n                        that._logger.log(\"info\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization success\");\n\n                        resolve(blob);\n                        */\n                    }, (errorResponse) => {\n                        let errorMessage = \"[FileServerService] getBlobFromUrlWithOptimization failure : \" + errorResponse.message;\n                        that._logger.log(\"error\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization Error.\");\n                        that._logger.log(\"internalerror\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization : \", errorResponse);\n                        return reject(ErrorManager_1.ErrorManager.getErrorManager().OTHERERROR(errorMessage, errorMessage));\n                        /*\n                        let error = this.errorHelperService.handleError(errorResponse);\n\n                        let errorDataObj = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(errorResponse.data)));\n                        let translatedErrorMessage = that.errorHelperService.getLocalizedError(errorDataObj.errorDetailsCode);\n                        that._logger.log(\"info\", LOG_ID + \"[FileServerService] \" + translatedErrorMessage ? translatedErrorMessage : error.message);\n                        */\n                        //reject(errorMessage);\n                    });\n                }));\n            }\n            else {\n                return this.getBlobFromUrl(url, mime, fileSize, fileName);\n            }\n        });\n    }\n    ;\n    /**\n     * Method creates blob from a file retrieved from server\n     *\n     * @private\n     * @param {string} url [required] server url for request\n     * @param {string} mime [required] Mime type of the blob to be created\n     * @param {number} fileSize [required] size of file to be retrieved\n     * @param {string} fileName [required] name of file to be downloaded\n     * @returns {ng.IPromise<Blob>} Blob created from data received from server\n     *\n     */\n    getBlobFromUrl(url, mime, fileSize, fileName) {\n        let that = this;\n        that._logger.log(\"info\", LOG_ID + \"[FileServerService] >getBlobFromUrl\");\n        that._logger.log(\"internal\", LOG_ID + \"[FileServerService] >getBlobFromUrl : \" + url);\n        return new Promise((resolve, reject) => {\n            /*this.$http({\n                method: \"GET\",\n                url: url,\n                headers: this.authService.getRequestHeader(),\n                responseType: 'arraybuffer'\n            }) // */\n            that._rest.getBlobFromUrl(url).then((response) => {\n                /* let blob = blobUtil.createBlob([response.data],\n                    { type: mime }); // */\n                let blob = { buffer: response,\n                    type: mime,\n                    fileSize: fileSize,\n                    fileName: fileName\n                }; // */\n                /*let blob = new Blob([response.data],\n                    { type: mime }); // */\n                that._logger.log(\"debug\", LOG_ID + \"[FileServerService] getBlobFromUrl success\");\n                resolve(blob);\n            }, (errorResponse) => {\n                let errorMessage = \"[FileServerService] getBlobFromUrlWithOptimization failure : \" + errorResponse;\n                that._logger.log(\"error\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization Error.\");\n                that._logger.log(\"internalerror\", LOG_ID + \"[FileServerService] getBlobFromUrlWithOptimization : \", errorResponse);\n                let err = ErrorManager_1.ErrorManager.getErrorManager().ERROR;\n                err.msg = errorMessage;\n                return reject(err);\n                /*\n        let error = this.errorHelperService.handleError(errorResponse);\n\n        let errorDataObj = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(errorResponse.data)));\n        let translatedErrorMessage = this.errorHelperService.getLocalizedError(errorDataObj.errorDetailsCode);\n        this.$log.error(\"[FileServerService] \" + (translatedErrorMessage) ? translatedErrorMessage : error.message);\n            // */\n            });\n        });\n    }\n    /**\n    * Method retrieves user quota (capabilities) for user\n    *\n    * @returns {Capabilities} user quota for user\n    *\n    */\n    getServerCapabilities() {\n        return this._rest.getServerCapabilities();\n    }\n};\nFileServer = __decorate([\n    Utils_1.logEntryExit(LOG_ID),\n    Utils_2.isStarted([])\n    /**\n    * @module\n    * @name FileStorage\n     * @version 1.67.1 \n    * @public\n    * @description\n    *      This service manage files on server side\n    */\n], FileServer);\nexports.FileServerService = FileServer;\nmodule.exports.FileServerService = FileServer;\n//# sourceMappingURL=FileServerService.js.map"]},"metadata":{},"sourceType":"script"}