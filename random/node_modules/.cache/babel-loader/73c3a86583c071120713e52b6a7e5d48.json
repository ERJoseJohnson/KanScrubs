{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst winston = require(\"winston\");\n\nconst DailyRotateFile = require('winston-daily-rotate-file');\n\nconst fs = require(\"fs\");\n\nconst colors = require(\"colors/safe\");\n\nconst util = require(\"util\");\n\nconst stripAnsi = require('strip-ansi'); //let defaultConfig = require(\"../config/config\");\n\n\nconst config_1 = require(\"../config/config\");\n\nconst LOG_ID = \"LOGS - \";\n\nconst tsFormat = () => {\n  let date = new Date();\n  return date.toLocaleDateString() + \" \" + date.toLocaleTimeString() + \" [\" + date.valueOf() + \"]\";\n};\n\nconst myFormat = winston.format.printf(info => {\n  //return `${info.timestamp} [${info._processInfo.pid}] ${info.level}: ${info.message}`;\n  return `${tsFormat()} - ${info.level}: ${info.message}`;\n});\nconst myFormatNoColors = winston.format.printf(info => {\n  return `${tsFormat()}` + ' - ' + stripAnsi(info.level) + ':' + stripAnsi(info.message);\n});\n\nclass Logger {\n  constructor(config) {\n    this.argumentsToString = this.argumentsToStringFull;\n    this.colors = colors;\n    this.colors.setTheme({\n      silly: 'rainbow',\n      input: 'grey',\n      verbose: 'cyan',\n      prompt: 'grey',\n      info: 'green',\n      data: 'grey',\n      help: 'cyan',\n      warn: 'yellow',\n      debug: 'blue',\n      error: 'red',\n      events: ['magenta', 'underline', 'italic'],\n      eventsEmitter: ['cyan', 'underline', 'italic']\n    });\n\n    let welcome = () => {\n      this._logger.log(\"info\", LOG_ID + \"------------------------------------------------\");\n\n      this._logger.log(\"info\", LOG_ID + \"Welcome to the \" + this.colors.magenta(\"ALE Rainbow SDK for Node.JS\") + \"\");\n\n      this._logger.log(\"info\", LOG_ID + \"Where Everything connects\");\n\n      this._logger.log(\"info\", LOG_ID + \"Support: Send message to Emily using #support #api\");\n\n      this._logger.log(\"info\", LOG_ID + \"------------------------------------------------\");\n\n      this._logger.log(\"internal\", LOG_ID + \"(constructor) : \", this.colors.italic(this.colors.red(\" \\n\\\r\n     * \\\"system-dev\\\" section in logs is activated!!! \\n\\\r\n    Note that it is for DEVELOPPEMENT ONLY, no production system should use it : \\n\\\r\n     * \\\"internals\\\" config property is for logs level of debug + unsensored data. \\n\\\r\n    Warning password and so on can be logs. \\n    \" + that.colors.red.underline(\"***    IT SHOULD ONLY BE USED IN DEVELOPPEMENT ENVIRONEMENT !!!    ***\"))));\n    };\n\n    let logs = config_1.config.logs;\n    let logDir = logs.path;\n    let logLevel = logs.level;\n    let logColor = logs.color;\n    let logHttp = logs[\"system-dev\"].http;\n    let logInternals = logs[\"system-dev\"].internals;\n    let logFormat = myFormat;\n    let zippedArchive = logs.zippedArchive;\n    let maxSize = logs.maxSize;\n    let maxFiles = logs.maxFiles;\n    let enableConsoleLog = true;\n    let enableFileLog = false;\n    let customFileName = \"\";\n    /*\n    this.argumentsToString = this.argumentsToStringReduced;\n    // */\n    // No configuration for file --> Don't store logs in file\n\n    if (!(\"logs\" in config)) {\n      enableFileLog = false;\n    }\n\n    if (\"logs\" in config && \"color\" in config.logs) {\n      logColor = config.logs.color;\n    }\n\n    if (\"logs\" in config && \"system-dev\" in config.logs && \"http\" in config.logs[\"system-dev\"]) {\n      logHttp = config.logs[\"system-dev\"].http;\n    }\n\n    if (\"logs\" in config && \"system-dev\" in config.logs && \"internals\" in config.logs[\"system-dev\"]) {\n      logInternals = config.logs[\"system-dev\"].internals;\n    }\n\n    if (!logColor) {\n      logFormat = myFormatNoColors;\n    } else {\n      logFormat = myFormat;\n    } // Check for console log\n\n\n    if (\"logs\" in config && \"enableConsoleLogs\" in config.logs && config.logs.enableConsoleLogs) {\n      enableConsoleLog = true;\n    } else {\n      enableConsoleLog = false;\n    } // Check for file log\n\n\n    if (\"logs\" in config && \"enableFileLogs\" in config.logs && config.logs.enableFileLogs) {\n      enableFileLog = true;\n    } else {\n      enableFileLog = false;\n    } // Set Path for log file\n\n\n    if (enableFileLog) {\n      if (\"logs\" in config && \"file\" in config.logs && \"path\" in config.logs.file) {\n        logDir = config.logs.file.path;\n      }\n    }\n\n    if (\"logs\" in config && \"level\" in config.logs) {\n      logLevel = config.logs.level;\n    }\n\n    if (\"logs\" in config && \"internals\" in config.logs) {\n      logInternals = config.logs.internals;\n    }\n\n    if (enableFileLog) {\n      //Set the Level for log file\n      if (\"logs\" in config && \"file\" in config.logs && \"level\" in config.logs.file) {\n        logLevel = config.logs.file.level;\n      } //Set the zippedArchive for log file\n\n\n      if (\"logs\" in config && \"file\" in config.logs && \"zippedArchive\" in config.logs.file) {\n        zippedArchive = config.logs.file.zippedArchive;\n      } //Set the zippedArchive for log file\n\n\n      if (\"logs\" in config && \"file\" in config.logs && \"maxSize\" in config.logs.file) {\n        maxSize = config.logs.file.maxSize;\n      } //Set the zippedArchive for log file\n\n\n      if (\"logs\" in config && \"file\" in config.logs && \"maxFiles\" in config.logs.file) {\n        maxFiles = config.logs.file.maxFiles;\n      } // Check and create the directory for logging\n\n\n      if (!fs.existsSync(logDir)) {\n        try {\n          fs.mkdirSync(config.logs.file.path);\n        } catch (err) {\n          console.log(\"Can't create the directoy for logging... File logs will be disabled\");\n          console.log(\"Error\", err);\n          enableFileLog = false;\n        }\n      }\n    }\n\n    let that = this;\n    this._winston = {};\n    this._logger = {};\n    this._logger.customLabel = \"\";\n    this._logger.logHttp = logHttp;\n    this._logger.argumentsToString = that.argumentsToString;\n\n    if (\"logs\" in config && \"customLabel\" in config.logs) {\n      this._logger.customLabel = config.logs.customLabel + \" - \";\n    }\n\n    if (enableFileLog) {\n      if (\"logs\" in config && \"file\" in config.logs && \"customFileName\" in config.logs.file) {\n        customFileName = config.logs.file.customFileName ? \"-\" + config.logs.file.customFileName : \"\";\n      }\n    }\n\n    this._logger.info = function () {\n      that._logger.log.apply(this._logger, [\"info\", ...arguments]);\n    };\n\n    this._logger.error = function () {\n      that._logger.log.apply(this._logger, [\"error\", ...arguments]);\n    };\n\n    this._logger.debug = function () {\n      that._logger.log.apply(that._logger, [\"debug\", ...arguments]);\n    };\n\n    this._logger.warn = function () {\n      that._logger.log.apply(that._logger, [\"warn\", ...arguments]);\n    };\n\n    this.hideId = function (url) {\n      return url.replace(/[\\/=\"'][a-f\\d]{24}[\\/\\?&\"']?/ig, x => {\n        let ret = x.toUpperCase();\n\n        if (ret.length > 8) {\n          ret = ret.substring(0, 4) + \"...\" + ret.substring(ret.length - 4, ret.length);\n        }\n\n        return ret;\n      });\n    };\n\n    this.hideUuid = function (url) {\n      return url.replace(/[a-f0-9]{8}[a-f0-9]{4}4[a-f0-9]{3}[89aAbB][a-f0-9]{3}[a-f0-9]{12}[(@|c%40|\\'|\\\")]/ig, x => {\n        let ret = x.toUpperCase();\n\n        if (ret.length > 8) {\n          ret = ret.substring(0, 4) + \"...\" + ret.substring(ret.length - 4, ret.length);\n        }\n\n        return ret;\n      });\n    };\n\n    this._logger.log = function (level) {\n      try {\n        if (level === \"internal\" || level === \"internalerror\") {\n          if (logInternals === true) {\n            //level = (level === \"internal\") ? \"debug\" : \"error\";\n            let datatolog = that.colors.italic(that.colors.red(\"FORBIDDEN TO LOG THIS DATA IN PROD ENV !!! Sorry.\"));\n            /*\n            if (level === \"internal\") {\n                level = \"debug\";\n                datatolog = that.colors.italic(that.colors.red(\"PROD HIDDEN : \")) + that.argumentsToString(arguments);\n                that._winston.log.apply(that._winston, [level, that._logger.customLabel + datatolog]);\n            }\n            else if (level === \"internalerror\") {\n                level = \"error\";\n                datatolog = that.colors.italic(that.colors.red(\"PROD HIDDEN : \")) + that.argumentsToStringFull(arguments);\n                that._winston.log.apply(that._winston, [level, that._logger.customLabel + datatolog]);\n            }\n            // */\n          }\n        } else {\n          if (logInternals) {\n            that._winston.log.apply(that._winston, [level, that._logger.customLabel + that.argumentsToString(arguments)]);\n          } else {\n            that._winston.log.apply(that._winston, [level, that._logger.customLabel + that.hideId(that.hideUuid(that.argumentsToString(arguments)))]);\n          }\n        }\n      } catch (err) {\n        console.error(\"CATCH Error !!! while logging : \" + err);\n      }\n    };\n\n    if (enableConsoleLog && enableFileLog) {\n      this._winston = winston.createLogger({\n        format: winston.format.combine(winston.format.colorize({\n          all: logColor\n        }), //winston.format.label({ label: 'right meow!' }),\n        //winston.format.colorize({ all: false }),\n        winston.format.simple(), winston.format.timestamp(), logFormat //winston.format.prettyPrint()\n        ),\n        transports: [new winston.transports.Console({\n          level: logLevel\n        }), new DailyRotateFile({\n          name: 'logs',\n          filename: `${logDir}/%DATE%-rainbowsdk${customFileName}.log`,\n          maxSize: maxSize,\n          zippedArchive: zippedArchive,\n          timestamp: tsFormat,\n          datePattern: \"YYYY-MM-DD\",\n          maxFiles: maxFiles,\n          prepend: true,\n          level: logLevel\n        })]\n      });\n      welcome();\n\n      this._logger.log(\"info\", LOG_ID + \"(constructor) console and file logs enabled\");\n\n      this._logger.log(\"info\", LOG_ID + \"(constructor) logs store in directory\", logDir);\n    } else if (enableConsoleLog) {\n      this._winston = winston.createLogger({\n        format: winston.format.combine(winston.format.colorize({\n          all: logColor\n        }), winston.format.simple(), //winston.format.label({ label: 'right meow!' }),\n        winston.format.timestamp(), logFormat //winston.format.prettyPrint()\n        ),\n        transports: [new winston.transports.Console({\n          level: logLevel\n        })]\n      });\n      welcome();\n\n      this._logger.log(\"info\", LOG_ID + \"(constructor) No file logs enabled\");\n    } else if (enableFileLog) {\n      this._winston = winston.createLogger({\n        format: winston.format.combine(winston.format.colorize({\n          all: logColor\n        }), //winston.format.label({ label: 'right meow!' }),\n        winston.format.timestamp(), logFormat //winston.format.prettyPrint()\n        ),\n        transports: [new DailyRotateFile({\n          name: 'logs',\n          filename: `${logDir}/%DATE%-rainbowsdk${customFileName}.log`,\n          maxSize: maxSize,\n          zippedArchive: zippedArchive,\n          timestamp: tsFormat,\n          datePattern: \"YYYY-MM-DD\",\n          maxFiles: maxFiles,\n          prepend: true,\n          level: logLevel\n        })]\n      });\n      welcome();\n\n      this._logger.log(\"info\", LOG_ID + \"(constructor) No console logs enabled\");\n\n      this._logger.log(\"info\", LOG_ID + \"(constructor) logs store in directory\", logDir);\n    } else {\n      this._winston = winston.createLogger({\n        transports: [],\n        silent: true\n      }); // No logs :-)\n    }\n\n    if (this._logger) {\n      this._logger.colors = this.colors;\n    }\n  }\n\n  get log() {\n    return this._logger;\n  }\n\n  argumentsToStringReduced(v) {\n    // convert arguments object to real array\n    let args = Array.prototype.slice.call(v, 1);\n\n    for (let k in args) {\n      if (typeof args[k] === \"object\") {\n        // args[k] = JSON.stringify(args[k]);\n        let options = {\n          showHidden: false,\n          depth: 3,\n          colors: true,\n          maxArrayLength: 3\n        };\n        args[k] = util.inspect(args[k], options);\n      }\n    }\n\n    let str = args.join(\" \");\n    return str;\n  }\n\n  argumentsToStringFull(v) {\n    // convert arguments object to real array\n    let args = Array.prototype.slice.call(v, 1);\n\n    for (let k in args) {\n      if (typeof args[k] === \"object\") {\n        // args[k] = JSON.stringify(args[k]);\n        args[k] = util.inspect(args[k], false, null, true);\n      }\n    } // */\n\n\n    let str = args.join(\" \");\n    return str;\n  }\n\n}\n\nexports.Logger = Logger;\nmodule.exports.Logger = Logger;","map":{"version":3,"sources":["../../src/lib/common/Logger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst winston = require(\"winston\");\nconst DailyRotateFile = require('winston-daily-rotate-file');\nconst fs = require(\"fs\");\nconst colors = require(\"colors/safe\");\nconst util = require(\"util\");\nconst stripAnsi = require('strip-ansi');\n//let defaultConfig = require(\"../config/config\");\nconst config_1 = require(\"../config/config\");\nconst LOG_ID = \"LOGS - \";\nconst tsFormat = () => {\n    let date = new Date();\n    return date.toLocaleDateString() + \" \" + date.toLocaleTimeString() + \" [\" + date.valueOf() + \"]\";\n};\nconst myFormat = winston.format.printf(info => {\n    //return `${info.timestamp} [${info._processInfo.pid}] ${info.level}: ${info.message}`;\n    return `${tsFormat()} - ${info.level}: ${info.message}`;\n});\nconst myFormatNoColors = winston.format.printf(info => {\n    return `${tsFormat()}` + ' - ' + stripAnsi(info.level) + ':' + stripAnsi(info.message);\n});\nclass Logger {\n    constructor(config) {\n        this.argumentsToString = this.argumentsToStringFull;\n        this.colors = colors;\n        this.colors.setTheme({\n            silly: 'rainbow',\n            input: 'grey',\n            verbose: 'cyan',\n            prompt: 'grey',\n            info: 'green',\n            data: 'grey',\n            help: 'cyan',\n            warn: 'yellow',\n            debug: 'blue',\n            error: 'red',\n            events: ['magenta', 'underline', 'italic'],\n            eventsEmitter: ['cyan', 'underline', 'italic']\n        });\n        let welcome = () => {\n            this._logger.log(\"info\", LOG_ID + \"------------------------------------------------\");\n            this._logger.log(\"info\", LOG_ID + \"Welcome to the \" + this.colors.magenta(\"ALE Rainbow SDK for Node.JS\") + \"\");\n            this._logger.log(\"info\", LOG_ID + \"Where Everything connects\");\n            this._logger.log(\"info\", LOG_ID + \"Support: Send message to Emily using #support #api\");\n            this._logger.log(\"info\", LOG_ID + \"------------------------------------------------\");\n            this._logger.log(\"internal\", LOG_ID + \"(constructor) : \", this.colors.italic(this.colors.red(\" \\n\\\r\n     * \\\"system-dev\\\" section in logs is activated!!! \\n\\\r\n    Note that it is for DEVELOPPEMENT ONLY, no production system should use it : \\n\\\r\n     * \\\"internals\\\" config property is for logs level of debug + unsensored data. \\n\\\r\n    Warning password and so on can be logs. \\n    \" +\n                that.colors.red.underline(\"***    IT SHOULD ONLY BE USED IN DEVELOPPEMENT ENVIRONEMENT !!!    ***\"))));\n        };\n        let logs = config_1.config.logs;\n        let logDir = logs.path;\n        let logLevel = logs.level;\n        let logColor = logs.color;\n        let logHttp = logs[\"system-dev\"].http;\n        let logInternals = logs[\"system-dev\"].internals;\n        let logFormat = myFormat;\n        let zippedArchive = logs.zippedArchive;\n        let maxSize = logs.maxSize;\n        let maxFiles = logs.maxFiles;\n        let enableConsoleLog = true;\n        let enableFileLog = false;\n        let customFileName = \"\";\n        /*\n        this.argumentsToString = this.argumentsToStringReduced;\n        // */\n        // No configuration for file --> Don't store logs in file\n        if (!(\"logs\" in config)) {\n            enableFileLog = false;\n        }\n        if ((\"logs\" in config) && (\"color\" in config.logs)) {\n            logColor = config.logs.color;\n        }\n        if ((\"logs\" in config) && (\"system-dev\" in config.logs) && (\"http\" in config.logs[\"system-dev\"])) {\n            logHttp = config.logs[\"system-dev\"].http;\n        }\n        if ((\"logs\" in config) && (\"system-dev\" in config.logs) && (\"internals\" in config.logs[\"system-dev\"])) {\n            logInternals = config.logs[\"system-dev\"].internals;\n        }\n        if (!logColor) {\n            logFormat = myFormatNoColors;\n        }\n        else {\n            logFormat = myFormat;\n        }\n        // Check for console log\n        if ((\"logs\" in config) && (\"enableConsoleLogs\" in config.logs) && config.logs.enableConsoleLogs) {\n            enableConsoleLog = true;\n        }\n        else {\n            enableConsoleLog = false;\n        }\n        // Check for file log\n        if ((\"logs\" in config) && (\"enableFileLogs\" in config.logs) && config.logs.enableFileLogs) {\n            enableFileLog = true;\n        }\n        else {\n            enableFileLog = false;\n        }\n        // Set Path for log file\n        if (enableFileLog) {\n            if ((\"logs\" in config) && (\"file\" in config.logs) && (\"path\" in config.logs.file)) {\n                logDir = config.logs.file.path;\n            }\n        }\n        if ((\"logs\" in config) && (\"level\" in config.logs)) {\n            logLevel = config.logs.level;\n        }\n        if ((\"logs\" in config) && (\"internals\" in config.logs)) {\n            logInternals = config.logs.internals;\n        }\n        if (enableFileLog) {\n            //Set the Level for log file\n            if ((\"logs\" in config) && (\"file\" in config.logs) && (\"level\" in config.logs.file)) {\n                logLevel = config.logs.file.level;\n            }\n            //Set the zippedArchive for log file\n            if ((\"logs\" in config) && (\"file\" in config.logs) && (\"zippedArchive\" in config.logs.file)) {\n                zippedArchive = config.logs.file.zippedArchive;\n            }\n            //Set the zippedArchive for log file\n            if ((\"logs\" in config) && (\"file\" in config.logs) && (\"maxSize\" in config.logs.file)) {\n                maxSize = config.logs.file.maxSize;\n            }\n            //Set the zippedArchive for log file\n            if ((\"logs\" in config) && (\"file\" in config.logs) && (\"maxFiles\" in config.logs.file)) {\n                maxFiles = config.logs.file.maxFiles;\n            }\n            // Check and create the directory for logging\n            if (!fs.existsSync(logDir)) {\n                try {\n                    fs.mkdirSync(config.logs.file.path);\n                }\n                catch (err) {\n                    console.log(\"Can't create the directoy for logging... File logs will be disabled\");\n                    console.log(\"Error\", err);\n                    enableFileLog = false;\n                }\n            }\n        }\n        let that = this;\n        this._winston = {};\n        this._logger = {};\n        this._logger.customLabel = \"\";\n        this._logger.logHttp = logHttp;\n        this._logger.argumentsToString = that.argumentsToString;\n        if ((\"logs\" in config) && (\"customLabel\" in config.logs)) {\n            this._logger.customLabel = config.logs.customLabel + \" - \";\n        }\n        if (enableFileLog) {\n            if ((\"logs\" in config) && (\"file\" in config.logs) && (\"customFileName\" in config.logs.file)) {\n                customFileName = config.logs.file.customFileName ? \"-\" + config.logs.file.customFileName : \"\";\n            }\n        }\n        this._logger.info = function () {\n            that._logger.log.apply(this._logger, [\"info\", ...arguments]);\n        };\n        this._logger.error = function () {\n            that._logger.log.apply(this._logger, [\"error\", ...arguments]);\n        };\n        this._logger.debug = function () {\n            that._logger.log.apply(that._logger, [\"debug\", ...arguments]);\n        };\n        this._logger.warn = function () {\n            that._logger.log.apply(that._logger, [\"warn\", ...arguments]);\n        };\n        this.hideId = function (url) {\n            return url.replace(/[\\/=\"'][a-f\\d]{24}[\\/\\?&\"']?/ig, (x) => {\n                let ret = x.toUpperCase();\n                if (ret.length > 8) {\n                    ret = ret.substring(0, 4) + \"...\" + ret.substring(ret.length - 4, ret.length);\n                }\n                return ret;\n            });\n        };\n        this.hideUuid = function (url) {\n            return url.replace(/[a-f0-9]{8}[a-f0-9]{4}4[a-f0-9]{3}[89aAbB][a-f0-9]{3}[a-f0-9]{12}[(@|c%40|\\'|\\\")]/ig, (x) => {\n                let ret = x.toUpperCase();\n                if (ret.length > 8) {\n                    ret = ret.substring(0, 4) + \"...\" + ret.substring(ret.length - 4, ret.length);\n                }\n                return ret;\n            });\n        };\n        this._logger.log = function (level) {\n            try {\n                if (level === \"internal\" || level === \"internalerror\") {\n                    if (logInternals === true) {\n                        //level = (level === \"internal\") ? \"debug\" : \"error\";\n                        let datatolog = that.colors.italic(that.colors.red(\"FORBIDDEN TO LOG THIS DATA IN PROD ENV !!! Sorry.\"));\n                        /*\n                        if (level === \"internal\") {\n                            level = \"debug\";\n                            datatolog = that.colors.italic(that.colors.red(\"PROD HIDDEN : \")) + that.argumentsToString(arguments);\n                            that._winston.log.apply(that._winston, [level, that._logger.customLabel + datatolog]);\n                        }\n                        else if (level === \"internalerror\") {\n                            level = \"error\";\n                            datatolog = that.colors.italic(that.colors.red(\"PROD HIDDEN : \")) + that.argumentsToStringFull(arguments);\n                            that._winston.log.apply(that._winston, [level, that._logger.customLabel + datatolog]);\n                        }\n                        // */\n                    }\n                }\n                else {\n                    if (logInternals) {\n                        that._winston.log.apply(that._winston, [level, that._logger.customLabel + that.argumentsToString(arguments)]);\n                    }\n                    else {\n                        that._winston.log.apply(that._winston, [level, that._logger.customLabel + that.hideId(that.hideUuid(that.argumentsToString(arguments)))]);\n                    }\n                }\n            }\n            catch (err) {\n                console.error(\"CATCH Error !!! while logging : \" + err);\n            }\n        };\n        if (enableConsoleLog && enableFileLog) {\n            this._winston = winston.createLogger({\n                format: winston.format.combine(winston.format.colorize({ all: logColor }), \n                //winston.format.label({ label: 'right meow!' }),\n                //winston.format.colorize({ all: false }),\n                winston.format.simple(), winston.format.timestamp(), logFormat\n                //winston.format.prettyPrint()\n                ),\n                transports: [\n                    new (winston.transports.Console)({\n                        level: logLevel\n                    }),\n                    new (DailyRotateFile)({\n                        name: 'logs',\n                        filename: `${logDir}/%DATE%-rainbowsdk${customFileName}.log`,\n                        maxSize: maxSize,\n                        zippedArchive: zippedArchive,\n                        timestamp: tsFormat,\n                        datePattern: \"YYYY-MM-DD\",\n                        maxFiles: maxFiles,\n                        prepend: true,\n                        level: logLevel\n                    })\n                ]\n            });\n            welcome();\n            this._logger.log(\"info\", LOG_ID + \"(constructor) console and file logs enabled\");\n            this._logger.log(\"info\", LOG_ID + \"(constructor) logs store in directory\", logDir);\n        }\n        else if (enableConsoleLog) {\n            this._winston = winston.createLogger({\n                format: winston.format.combine(winston.format.colorize({ all: logColor }), winston.format.simple(), \n                //winston.format.label({ label: 'right meow!' }),\n                winston.format.timestamp(), logFormat\n                //winston.format.prettyPrint()\n                ),\n                transports: [\n                    new (winston.transports.Console)({\n                        level: logLevel\n                    })\n                ]\n            });\n            welcome();\n            this._logger.log(\"info\", LOG_ID + \"(constructor) No file logs enabled\");\n        }\n        else if (enableFileLog) {\n            this._winston = winston.createLogger({\n                format: winston.format.combine(winston.format.colorize({ all: logColor }), \n                //winston.format.label({ label: 'right meow!' }),\n                winston.format.timestamp(), logFormat\n                //winston.format.prettyPrint()\n                ),\n                transports: [\n                    new (DailyRotateFile)({\n                        name: 'logs',\n                        filename: `${logDir}/%DATE%-rainbowsdk${customFileName}.log`,\n                        maxSize: maxSize,\n                        zippedArchive: zippedArchive,\n                        timestamp: tsFormat,\n                        datePattern: \"YYYY-MM-DD\",\n                        maxFiles: maxFiles,\n                        prepend: true,\n                        level: logLevel\n                    })\n                ]\n            });\n            welcome();\n            this._logger.log(\"info\", LOG_ID + \"(constructor) No console logs enabled\");\n            this._logger.log(\"info\", LOG_ID + \"(constructor) logs store in directory\", logDir);\n        }\n        else {\n            this._winston = winston.createLogger({\n                transports: [],\n                silent: true\n            });\n            // No logs :-)\n        }\n        if (this._logger) {\n            this._logger.colors = this.colors;\n        }\n    }\n    get log() {\n        return this._logger;\n    }\n    argumentsToStringReduced(v) {\n        // convert arguments object to real array\n        let args = Array.prototype.slice.call(v, 1);\n        for (let k in args) {\n            if (typeof args[k] === \"object\") {\n                // args[k] = JSON.stringify(args[k]);\n                let options = {\n                    showHidden: false,\n                    depth: 3,\n                    colors: true,\n                    maxArrayLength: 3\n                };\n                args[k] = util.inspect(args[k], options);\n            }\n        }\n        let str = args.join(\" \");\n        return str;\n    }\n    argumentsToStringFull(v) {\n        // convert arguments object to real array\n        let args = Array.prototype.slice.call(v, 1);\n        for (let k in args) {\n            if (typeof args[k] === \"object\") {\n                // args[k] = JSON.stringify(args[k]);\n                args[k] = util.inspect(args[k], false, null, true);\n            }\n        } // */\n        let str = args.join(\" \");\n        return str;\n    }\n}\nexports.Logger = Logger;\nmodule.exports.Logger = Logger;\n//# sourceMappingURL=Logger.js.map"]},"metadata":{},"sourceType":"script"}