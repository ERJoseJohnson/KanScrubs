{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass FileState {}\n\nFileState.DELETED = \"deleted\";\nFileState.UPLOADING = \"uploading\";\nFileState.UPLOADED = \"uploaded\";\nFileState.NOT_UPLOADED = \"not_uploaded\";\nFileState.DOWNLOADING = \"downloading\";\nFileState.UNKNOWN = \"unknown\";\n\nclass ThumbnailPlaceholder {\n  constructor(icon, style) {\n    this.icon = icon;\n    this.style = style;\n  }\n\n}\n\nclass Thumbnail {\n  /**\n   * @this FileDescriptor\n   */\n  constructor(data) {\n    if (data) {\n      this.availableThumbnail = data.availableThumbnail;\n      this.md5sum = data.md5sum;\n      this.size = data.size;\n      this.wantThumbnailDate = data.wantThumbnailDate;\n    } else {\n      this.availableThumbnail = false;\n    }\n  }\n\n  isThumbnailAvailable() {\n    return this.availableThumbnail;\n  }\n\n}\n/**\n * @public\n * @class\n * @name FileDescriptor\n * @description\n *      This class is used to represent a File Descriptor or a Short File Descriptor which describes a file shared in a conversation (one-to-one or bubble).\n */\n\n\nclass FileDescriptor {\n  /**\n   * @this FileDescriptor\n   */\n  constructor(id = null, url = null, ownerId = null, fileName = null, extension = null, typeMIME = null, size = null, registrationDate = null, uploadedDate = null, dateToSort = null, viewers = null, state = null, thumbnail = null, orientation) {\n    /**\n     * @public\n     * @property {string} id The file descriptor ID (File Descriptor only)\n     * @readonly\n     */\n    this.id = id;\n    /**\n     * @public\n     * @property {string} url The file descriptor url (File Descriptor only)\n     * @readonly\n     */\n\n    this.url = url;\n    /**\n     * @public\n     * @property {string} ownerId The ID of the owner (File Descriptor only)\n     * @readonly\n     */\n\n    this.ownerId = ownerId;\n    /**\n     * @public\n     * @property {string} fileName The name of the file\n     * @readonly\n     */\n\n    this.fileName = fileName;\n    /**\n     * @public\n     * @property {string} extension The extension of the file\n     * @readonly\n     */\n\n    this.extension = extension;\n    /**\n     * @public\n     * @property {string} typeMIME The mime type of the file ('mime' in Short File Descriptor)\n     * @readonly\n     */\n\n    this.typeMIME = typeMIME;\n    /**\n     * @public\n     * @property {ThumbnailPlaceholder} thumbnailPlaceholder The thumbnail icon placeholder info\n     * @readonly\n     */\n\n    this.thumbnailPlaceholder = this.getThumbnailPlaceholderFromMimetype(typeMIME);\n    /**\n     * @public\n     * @property {string} size The size of the file (octets)\n     * @readonly\n     */\n\n    this.size = size;\n    /**\n     * @public\n     * @property {Object} registrationDate The creation date (File Descriptor only)\n     * @readonly\n     */\n\n    this.registrationDate = registrationDate;\n    /**\n     * @public\n     * @property {Object} uploadedDate The upload date (File Descriptor only)\n     * @readonly\n     */\n\n    this.uploadedDate = uploadedDate;\n    /**\n     * @private\n     * @property {Object} dateToSort The date to sort (?)\n     * @readonly\n     */\n\n    this.dateToSort = dateToSort;\n    /**\n     * @public\n     * @property {any[]} viewers The list of viewers (File Descriptor only)\n     * @readonly\n     */\n\n    this.viewers = viewers;\n    this.state = state;\n    this.thumbnail = new Thumbnail(thumbnail);\n    this.fileToSend = undefined;\n    this.previewBlob = undefined;\n    /**\n     * @public\n     * @property {number} orientation\n     * @description\n     *      There are four possible values for orientation and the image should be rotated acording to this value.\n     *      1 -> rotate(0deg),\n     *      3 -> rotate(180deg),\n     *      6 -> rotate(90deg),\n     *      8 -> rotate(270deg).\n     */\n\n    this.orientation = orientation ? orientation : undefined;\n  }\n\n  isMicrosoftFile() {\n    let mediaExtension = [\"docx\", \"doc\", \"ppt\", \"pptx\", \"xls\", \"xlsx\"];\n    return mediaExtension.some(ext => ext === this.extension);\n  }\n\n  isThumbnailPossible() {\n    return this.isImage() || this.isPDF();\n  }\n\n  isPDF() {\n    return this.typeMIME === \"application/pdf\";\n  }\n\n  isImage() {\n    let imgType = \"image/\";\n    return this.typeMIME && this.typeMIME.length >= imgType.length && this.typeMIME.slice(0, imgType.length) === imgType;\n  }\n\n  isAudioVideo() {\n    let mediaExtension = [\"avi\", \"mpg\", \"wma\", \"mp3\", \"wmv\", \"mkv\", \"mov\", \"wav\", \"ogg\", \"mp4\", \"aac\"];\n    return mediaExtension.some(ext => ext === this.extension);\n  }\n\n  isUploaded() {\n    let imgType = \"image/\";\n    return this.state && this.state === FileState.UPLOADED;\n  }\n\n  isAlreadyFileViewer(viewerId) {\n    if (this.ownerId && this.ownerId === viewerId) {\n      // We are owner of this file\n      return true;\n    }\n\n    if (this.viewers) {\n      return this.viewers.some(viewer => viewer.viewerId === viewerId);\n    }\n\n    return false;\n  }\n\n  getDisplayName() {\n    return this.fileName.replace(/\\.[^/.]+$/, \"\");\n  }\n\n  getDisplayNameTruncated() {\n    var str = this.fileName.replace(/\\.[^/.]+$/, \"\");\n    return [str.substring(0, str.length - 4), str.slice(-4)];\n  }\n\n  getExtension() {\n    if (this.fileName.toUpperCase() === this.extension.toUpperCase()) {\n      return \"\";\n    } else {\n      return \".\" + this.extension;\n    }\n  }\n\n  getThumbnailPlaceholderFromMimetype(mime) {\n    if (!mime) {\n      return new ThumbnailPlaceholder('icon_filestandard', 'otherStyle');\n    }\n\n    if (mime.indexOf(\"image\") === 0) {\n      return new ThumbnailPlaceholder('icon_image', 'imageStyle');\n    }\n\n    if (mime === \"application/msword\" || /^application\\/vnd.openxmlformats-officedocument.wordprocessingml.*$/.test(mime) || mime === \"application/vnd.oasis.opendocument.text\") {\n      return new ThumbnailPlaceholder('icon_doc', 'docStyle');\n    }\n\n    if (/^application\\/vnd.ms-powerpoint.*$/.test(mime) || /^application\\/vnd.openxmlformats-officedocument.presentationml.*$/.test(mime) || mime === \"application/vnd.oasis.opendocument.presentation\") {\n      return new ThumbnailPlaceholder('icon_ppt', 'pptStyle');\n    }\n\n    if (mime.indexOf(\"application/vnd.ms-excel\") === 0 || /^application\\/vnd.openxmlformats-officedocument.spreadsheetml.*$/.test(mime)) {\n      return new ThumbnailPlaceholder('icon_xls', 'xlsStyle');\n    }\n\n    if (mime === \"application/pdf\" || mime === \"application/vnd.oasis.opendocument.spreadsheet\") {\n      return new ThumbnailPlaceholder('icon_pdf', 'pdfStyle');\n    }\n\n    if (mime.indexOf(\"video/\") === 0 || mime.indexOf(\"audio/\") === 0) {\n      return new ThumbnailPlaceholder('icon_file-video', 'imageStyle');\n    }\n\n    return new ThumbnailPlaceholder('icon_filestandard', 'otherStyle');\n  }\n\n}\n\nexports.FileDescriptor = FileDescriptor;\n\nfunction FileDescriptorFactory() {\n  return (id, url, ownerId, fileName, extension, typeMIME, size, registrationDate, uploadedDate, dateToSort, viewers, state, thumbnail, orientation) => {\n    return new FileDescriptor(id, url, ownerId, fileName, extension, typeMIME, size, registrationDate, uploadedDate, dateToSort, viewers, state, thumbnail, orientation);\n  };\n}\n\nexports.fileDescriptorFactory = FileDescriptorFactory;\nmodule.exports.fileDescriptorFactory = FileDescriptorFactory;","map":{"version":3,"sources":["../../../src/lib/common/models/fileDescriptor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass FileState {\n}\nFileState.DELETED = \"deleted\";\nFileState.UPLOADING = \"uploading\";\nFileState.UPLOADED = \"uploaded\";\nFileState.NOT_UPLOADED = \"not_uploaded\";\nFileState.DOWNLOADING = \"downloading\";\nFileState.UNKNOWN = \"unknown\";\nclass ThumbnailPlaceholder {\n    constructor(icon, style) {\n        this.icon = icon;\n        this.style = style;\n    }\n}\nclass Thumbnail {\n    /**\n     * @this FileDescriptor\n     */\n    constructor(data) {\n        if (data) {\n            this.availableThumbnail = data.availableThumbnail;\n            this.md5sum = data.md5sum;\n            this.size = data.size;\n            this.wantThumbnailDate = data.wantThumbnailDate;\n        }\n        else {\n            this.availableThumbnail = false;\n        }\n    }\n    isThumbnailAvailable() {\n        return this.availableThumbnail;\n    }\n    ;\n}\n/**\n * @public\n * @class\n * @name FileDescriptor\n * @description\n *      This class is used to represent a File Descriptor or a Short File Descriptor which describes a file shared in a conversation (one-to-one or bubble).\n */\nclass FileDescriptor {\n    /**\n     * @this FileDescriptor\n     */\n    constructor(id = null, url = null, ownerId = null, fileName = null, extension = null, typeMIME = null, size = null, registrationDate = null, uploadedDate = null, dateToSort = null, viewers = null, state = null, thumbnail = null, orientation) {\n        /**\n         * @public\n         * @property {string} id The file descriptor ID (File Descriptor only)\n         * @readonly\n         */\n        this.id = id;\n        /**\n         * @public\n         * @property {string} url The file descriptor url (File Descriptor only)\n         * @readonly\n         */\n        this.url = url;\n        /**\n         * @public\n         * @property {string} ownerId The ID of the owner (File Descriptor only)\n         * @readonly\n         */\n        this.ownerId = ownerId;\n        /**\n         * @public\n         * @property {string} fileName The name of the file\n         * @readonly\n         */\n        this.fileName = fileName;\n        /**\n         * @public\n         * @property {string} extension The extension of the file\n         * @readonly\n         */\n        this.extension = extension;\n        /**\n         * @public\n         * @property {string} typeMIME The mime type of the file ('mime' in Short File Descriptor)\n         * @readonly\n         */\n        this.typeMIME = typeMIME;\n        /**\n         * @public\n         * @property {ThumbnailPlaceholder} thumbnailPlaceholder The thumbnail icon placeholder info\n         * @readonly\n         */\n        this.thumbnailPlaceholder = this.getThumbnailPlaceholderFromMimetype(typeMIME);\n        /**\n         * @public\n         * @property {string} size The size of the file (octets)\n         * @readonly\n         */\n        this.size = size;\n        /**\n         * @public\n         * @property {Object} registrationDate The creation date (File Descriptor only)\n         * @readonly\n         */\n        this.registrationDate = registrationDate;\n        /**\n         * @public\n         * @property {Object} uploadedDate The upload date (File Descriptor only)\n         * @readonly\n         */\n        this.uploadedDate = uploadedDate;\n        /**\n         * @private\n         * @property {Object} dateToSort The date to sort (?)\n         * @readonly\n         */\n        this.dateToSort = dateToSort;\n        /**\n         * @public\n         * @property {any[]} viewers The list of viewers (File Descriptor only)\n         * @readonly\n         */\n        this.viewers = viewers;\n        this.state = state;\n        this.thumbnail = new Thumbnail(thumbnail);\n        this.fileToSend = undefined;\n        this.previewBlob = undefined;\n        /**\n         * @public\n         * @property {number} orientation\n         * @description\n         *      There are four possible values for orientation and the image should be rotated acording to this value.\n         *      1 -> rotate(0deg),\n         *      3 -> rotate(180deg),\n         *      6 -> rotate(90deg),\n         *      8 -> rotate(270deg).\n         */\n        this.orientation = orientation ? orientation : undefined;\n    }\n    ;\n    isMicrosoftFile() {\n        let mediaExtension = [\"docx\", \"doc\", \"ppt\", \"pptx\", \"xls\", \"xlsx\"];\n        return (mediaExtension.some((ext) => ext === this.extension));\n    }\n    ;\n    isThumbnailPossible() {\n        return (this.isImage() || this.isPDF());\n    }\n    ;\n    isPDF() {\n        return (this.typeMIME === \"application/pdf\");\n    }\n    ;\n    isImage() {\n        let imgType = \"image/\";\n        return this.typeMIME && this.typeMIME.length >= imgType.length && this.typeMIME.slice(0, imgType.length) === imgType;\n    }\n    ;\n    isAudioVideo() {\n        let mediaExtension = [\"avi\", \"mpg\", \"wma\", \"mp3\", \"wmv\", \"mkv\", \"mov\", \"wav\", \"ogg\", \"mp4\", \"aac\"];\n        return (mediaExtension.some((ext) => ext === this.extension));\n    }\n    ;\n    isUploaded() {\n        let imgType = \"image/\";\n        return this.state && this.state === FileState.UPLOADED;\n    }\n    ;\n    isAlreadyFileViewer(viewerId) {\n        if (this.ownerId && this.ownerId === viewerId) {\n            // We are owner of this file\n            return true;\n        }\n        if (this.viewers) {\n            return this.viewers.some((viewer) => viewer.viewerId === viewerId);\n        }\n        return false;\n    }\n    getDisplayName() {\n        return this.fileName.replace(/\\.[^/.]+$/, \"\");\n    }\n    getDisplayNameTruncated() {\n        var str = this.fileName.replace(/\\.[^/.]+$/, \"\");\n        return [str.substring(0, str.length - 4), str.slice(-4)];\n    }\n    getExtension() {\n        if (this.fileName.toUpperCase() === this.extension.toUpperCase()) {\n            return \"\";\n        }\n        else {\n            return \".\" + this.extension;\n        }\n    }\n    getThumbnailPlaceholderFromMimetype(mime) {\n        if (!mime) {\n            return new ThumbnailPlaceholder('icon_filestandard', 'otherStyle');\n        }\n        if (mime.indexOf(\"image\") === 0) {\n            return new ThumbnailPlaceholder('icon_image', 'imageStyle');\n        }\n        if (mime === \"application/msword\" ||\n            (/^application\\/vnd.openxmlformats-officedocument.wordprocessingml.*$/.test(mime)) ||\n            mime === \"application/vnd.oasis.opendocument.text\") {\n            return new ThumbnailPlaceholder('icon_doc', 'docStyle');\n        }\n        if (/^application\\/vnd.ms-powerpoint.*$/.test(mime) ||\n            (/^application\\/vnd.openxmlformats-officedocument.presentationml.*$/.test(mime)) ||\n            mime === \"application/vnd.oasis.opendocument.presentation\") {\n            return new ThumbnailPlaceholder('icon_ppt', 'pptStyle');\n        }\n        if (mime.indexOf(\"application/vnd.ms-excel\") === 0 ||\n            (/^application\\/vnd.openxmlformats-officedocument.spreadsheetml.*$/.test(mime))) {\n            return new ThumbnailPlaceholder('icon_xls', 'xlsStyle');\n        }\n        if (mime === \"application/pdf\" || mime === \"application/vnd.oasis.opendocument.spreadsheet\") {\n            return new ThumbnailPlaceholder('icon_pdf', 'pdfStyle');\n        }\n        if (mime.indexOf(\"video/\") === 0 || mime.indexOf(\"audio/\") === 0) {\n            return new ThumbnailPlaceholder('icon_file-video', 'imageStyle');\n        }\n        return new ThumbnailPlaceholder('icon_filestandard', 'otherStyle');\n    }\n    ;\n}\nexports.FileDescriptor = FileDescriptor;\nfunction FileDescriptorFactory() {\n    return (id, url, ownerId, fileName, extension, typeMIME, size, registrationDate, uploadedDate, dateToSort, viewers, state, thumbnail, orientation) => {\n        return new FileDescriptor(id, url, ownerId, fileName, extension, typeMIME, size, registrationDate, uploadedDate, dateToSort, viewers, state, thumbnail, orientation);\n    };\n}\nexports.fileDescriptorFactory = FileDescriptorFactory;\nmodule.exports.fileDescriptorFactory = FileDescriptorFactory;\n//# sourceMappingURL=fileDescriptor.js.map"]},"metadata":{},"sourceType":"script"}