{"ast":null,"code":"'use strict';\n\nconst compose = require('koa-compose');\n\nconst IncomingContext = require('./lib/IncomingContext');\n\nconst OutgoingContext = require('./lib/OutgoingContext');\n\nfunction listener(entity, middleware, Context) {\n  return function (stanza) {\n    const ctx = new Context(entity, stanza);\n    return compose(middleware)(ctx);\n  };\n}\n\nfunction errorHandler(entity) {\n  return function (ctx, next) {\n    next().then(reply => reply && entity.send(reply)).catch(err => entity.emit('error', err));\n  };\n}\n\nmodule.exports = function ({\n  entity\n}) {\n  const incoming = [errorHandler(entity)];\n  const outgoing = [];\n  const incomingListener = listener(entity, incoming, IncomingContext);\n  const outgoingListener = listener(entity, outgoing, OutgoingContext);\n  entity.on('element', incomingListener);\n  entity.hookOutgoing = outgoingListener;\n  return {\n    use(fn) {\n      incoming.push(fn);\n      return fn;\n    },\n\n    filter(fn) {\n      outgoing.push(fn);\n      return fn;\n    }\n\n  };\n};","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/@xmpp/middleware/index.js"],"names":["compose","require","IncomingContext","OutgoingContext","listener","entity","middleware","Context","stanza","ctx","errorHandler","next","then","reply","send","catch","err","emit","module","exports","incoming","outgoing","incomingListener","outgoingListener","on","hookOutgoing","use","fn","push","filter"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,MAAMC,eAAe,GAAGD,OAAO,CAAC,uBAAD,CAA/B;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,uBAAD,CAA/B;;AAEA,SAASG,QAAT,CAAkBC,MAAlB,EAA0BC,UAA1B,EAAsCC,OAAtC,EAA+C;AAC7C,SAAO,UAASC,MAAT,EAAiB;AACtB,UAAMC,GAAG,GAAG,IAAIF,OAAJ,CAAYF,MAAZ,EAAoBG,MAApB,CAAZ;AACA,WAAOR,OAAO,CAACM,UAAD,CAAP,CAAoBG,GAApB,CAAP;AACD,GAHD;AAID;;AAED,SAASC,YAAT,CAAsBL,MAAtB,EAA8B;AAC5B,SAAO,UAASI,GAAT,EAAcE,IAAd,EAAoB;AACzBA,IAAAA,IAAI,GACDC,IADH,CACQC,KAAK,IAAIA,KAAK,IAAIR,MAAM,CAACS,IAAP,CAAYD,KAAZ,CAD1B,EAEGE,KAFH,CAESC,GAAG,IAAIX,MAAM,CAACY,IAAP,CAAY,OAAZ,EAAqBD,GAArB,CAFhB;AAGD,GAJD;AAKD;;AAEDE,MAAM,CAACC,OAAP,GAAiB,UAAS;AAACd,EAAAA;AAAD,CAAT,EAAmB;AAClC,QAAMe,QAAQ,GAAG,CAACV,YAAY,CAACL,MAAD,CAAb,CAAjB;AACA,QAAMgB,QAAQ,GAAG,EAAjB;AAEA,QAAMC,gBAAgB,GAAGlB,QAAQ,CAACC,MAAD,EAASe,QAAT,EAAmBlB,eAAnB,CAAjC;AACA,QAAMqB,gBAAgB,GAAGnB,QAAQ,CAACC,MAAD,EAASgB,QAAT,EAAmBlB,eAAnB,CAAjC;AAEAE,EAAAA,MAAM,CAACmB,EAAP,CAAU,SAAV,EAAqBF,gBAArB;AACAjB,EAAAA,MAAM,CAACoB,YAAP,GAAsBF,gBAAtB;AAEA,SAAO;AACLG,IAAAA,GAAG,CAACC,EAAD,EAAK;AACNP,MAAAA,QAAQ,CAACQ,IAAT,CAAcD,EAAd;AACA,aAAOA,EAAP;AACD,KAJI;;AAKLE,IAAAA,MAAM,CAACF,EAAD,EAAK;AACTN,MAAAA,QAAQ,CAACO,IAAT,CAAcD,EAAd;AACA,aAAOA,EAAP;AACD;;AARI,GAAP;AAUD,CApBD","sourcesContent":["'use strict'\r\n\r\nconst compose = require('koa-compose')\r\n\r\nconst IncomingContext = require('./lib/IncomingContext')\r\nconst OutgoingContext = require('./lib/OutgoingContext')\r\n\r\nfunction listener(entity, middleware, Context) {\r\n  return function(stanza) {\r\n    const ctx = new Context(entity, stanza)\r\n    return compose(middleware)(ctx)\r\n  }\r\n}\r\n\r\nfunction errorHandler(entity) {\r\n  return function(ctx, next) {\r\n    next()\r\n      .then(reply => reply && entity.send(reply))\r\n      .catch(err => entity.emit('error', err))\r\n  }\r\n}\r\n\r\nmodule.exports = function({entity}) {\r\n  const incoming = [errorHandler(entity)]\r\n  const outgoing = []\r\n\r\n  const incomingListener = listener(entity, incoming, IncomingContext)\r\n  const outgoingListener = listener(entity, outgoing, OutgoingContext)\r\n\r\n  entity.on('element', incomingListener)\r\n  entity.hookOutgoing = outgoingListener\r\n\r\n  return {\r\n    use(fn) {\r\n      incoming.push(fn)\r\n      return fn\r\n    },\r\n    filter(fn) {\r\n      outgoing.push(fn)\r\n      return fn\r\n    },\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}