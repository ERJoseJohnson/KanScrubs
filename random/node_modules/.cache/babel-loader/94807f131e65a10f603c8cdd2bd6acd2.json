{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\n\nconst Settings_1 = require(\"../common/models/Settings\");\n\nconst PubSub = require(\"pubsub-js\");\n\nconst presenceEventHandler_1 = require(\"../connection/XMPPServiceHandler/presenceEventHandler\");\n\nconst Utils_1 = require(\"../common/Utils\");\n\nconst LOG_ID = \"PRES/SVCE - \";\nlet PresenceService =\n/**\n * @module\n * @name PresenceService\n * @version 1.67.1 \n * @public\n * @description\n *      This module manages the presence of the connected user.\n *      <br><br>\n *      The main methods proposed in that module allow to: <br>\n *      - Change the connected user presence\n */\nclass PresenceService {\n  constructor(_eventEmitter, _logger, _startConfig) {\n    this.ready = false;\n    let that = this;\n    this._startConfig = _startConfig;\n    this._xmpp = null;\n    this._rest = null;\n    that._s2s = null;\n    this._options = {};\n    this._useXMPP = false;\n    this._useS2S = false;\n    that._eventEmitter = _eventEmitter;\n    that._logger = _logger;\n    that.manualState = false;\n    that._currentPresence = {\n      status: \"online\",\n      show: \"\"\n    };\n    that.RAINBOW_PRESENCE_ONLINE = Settings_1.RainbowPresence.ONLINE;\n    that.RAINBOW_PRESENCE_DONOTDISTURB = Settings_1.RainbowPresence.DND;\n    that.RAINBOW_PRESENCE_AWAY = Settings_1.RainbowPresence.AWAY;\n    that.RAINBOW_PRESENCE_INVISIBLE = Settings_1.RainbowPresence.INVISIBLE;\n\n    that._eventEmitter.on(\"evt_internal_usersettingschanged\", that._onUserSettingsChanged.bind(that));\n\n    that._eventEmitter.on(\"evt_internal_presencechanged\", that._onPresenceChanged.bind(that));\n\n    this.ready = false;\n  }\n\n  get startConfig() {\n    return this._startConfig;\n  }\n\n  start(_options, _core) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._options = _options;\n        that._xmpp = _core._xmpp;\n        that._rest = _core._rest;\n        that._s2s = _core._s2s;\n        that._settings = _core.settings;\n        that._useXMPP = that._options.useXMPP;\n        that._useS2S = that._options.useS2S;\n        that._bubbles = _core.bubbles;\n        that._presenceEventHandler = new presenceEventHandler_1.PresenceEventHandler(that._xmpp);\n        that._presenceHandlerToken = PubSub.subscribe(that._xmpp.hash + \".\" + that._presenceEventHandler.PRESENCE, that._presenceEventHandler.onPresenceReceived);\n        /*\n                        that._eventEmitter.removeListener(\"evt_internal_usersettingschanged\", that._onUserSettingsChanged.bind(that));\n                        that._eventEmitter.removeListener(\"evt_internal_presencechanged\", that._onPresenceChanged.bind(that));\n        \n                        that._eventEmitter.on(\"evt_internal_usersettingschanged\", that._onUserSettingsChanged.bind(that));\n                        that._eventEmitter.on(\"evt_internal_presencechanged\", that._onPresenceChanged.bind(that));\n        */\n\n        that.ready = true;\n        resolve();\n      } catch (err) {\n        that._logger.log(\"error\", LOG_ID + \"(start) Catch Error !!!\");\n\n        that._logger.log(\"internalerror\", LOG_ID + \"(start) Catch Error !!! : \", err);\n\n        return reject();\n      }\n    });\n  }\n\n  stop() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        delete that._presenceEventHandler;\n        that._presenceEventHandler = null;\n        PubSub.unsubscribe(that._presenceHandlerToken);\n        that._xmpp = null;\n        /*\n                        that._eventEmitter.removeListener(\"evt_internal_usersettingschanged\", that._onUserSettingsChanged.bind(that));\n                        that._eventEmitter.removeListener(\"evt_internal_presencechanged\", that._onPresenceChanged.bind(that));\n        */\n\n        that.ready = false;\n        resolve();\n      } catch (err) {\n        return reject();\n      }\n    });\n  }\n  /**\n   * @private\n   * @method sendInitialPresence\n   * @instance\n   * @description\n   *  Send the initial presence (online)\n   * @return {ErrorManager.Ok} A promise containing the result\n   */\n\n\n  sendInitialPresence() {\n    let that = this;\n    return new Promise(resolve => {\n      that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n        that._logger.log(\"info\", LOG_ID + \"(sendInitialPresence) received.\");\n\n        that._logger.log(\"internal\", LOG_ID + \"(sendInitialPresence) received : \", presence);\n\n        that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n\n        resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n      });\n\n      that._xmpp.setPresence(\"online\", \"\");\n    });\n  }\n  /**\n   * @public\n   * @method setPresenceTo\n   * @instance\n   * @description\n   *    Allow to change the presence of the connected user <br/>\n   *    Only the following values are authorized: 'dnd', 'away', 'invisible' or 'online'\n   * @param {String} presence The presence value to set i.e: 'dnd', 'away', 'invisible' ('xa' on server side) or 'online'\n   * @async\n   * @return {Promise<ErrorManager>}\n   * @fulfil {ErrorManager} - ErrorManager object depending on the result (ErrorManager.getErrorManager().OK in case of success)\n   * @category async\n   */\n\n\n  setPresenceTo(presence) {\n    let that = this;\n    let show = \"online\";\n    let status = \"\";\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      switch (presence) {\n        case \"online\":\n          //show = \"online\";\n          //status = \"\";\n          show = undefined;\n          status = \"mode=auto\";\n          break;\n\n        case \"away\":\n          show = \"xa\";\n          status = \"away\";\n          break;\n\n        case \"dnd\":\n          show = \"dnd\";\n          status = \"\";\n          break;\n\n        case \"invisible\":\n          show = \"xa\";\n          status = \"\";\n          break;\n\n        default:\n          that._logger.log(\"warn\", LOG_ID + \"(setPresenceTo) Bad or empty 'presence' parameter\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(setPresenceTo) Bad or empty 'presence' parameter : \", presence);\n\n          return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          break;\n      }\n\n      that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(_presence) {\n        that._logger.log(\"info\", LOG_ID + \"(setPresenceTo) received.\");\n\n        that._logger.log(\"internal\", LOG_ID + \"(setPresenceTo) received : \", _presence);\n\n        that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n\n        resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n      });\n\n      that._logger.log(\"internal\", LOG_ID + \"(setPresenceTo) that._useXMPP : \", that._useXMPP, \", that._useS2S : \", that._useS2S);\n\n      if (that._useXMPP) {\n        that._xmpp.setPresence(show, status);\n      }\n\n      if (that._useS2S) {\n        yield that._s2s.sendS2SPresence({\n          show,\n          status\n        });\n      }\n\n      yield that._settings.updateUserSettings({\n        presence: presence\n      });\n    }));\n  }\n  /**\n   * @public\n   * @method getUserConnectedPresence\n   * @instance\n   * @description\n   *      Get user presence status calculated from events.\n   */\n\n\n  getUserConnectedPresence() {\n    return this._currentPresence;\n  }\n  /**\n  * @private\n  * @method _setUserPresenceStatus\n  * @instance\n  * @description\n  *      Send user presence status and message to xmpp.\n  */\n\n\n  _setUserPresenceStatus(status, message) {\n    let that = this;\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      if (that._useXMPP) {\n        if (status === \"online\") {\n          that.manualState = false;\n\n          that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n            that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n\n            that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n\n            that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n\n            resolve();\n          });\n\n          that._xmpp.setPresence(null, status);\n        } else {\n          that.manualState = true;\n\n          if (status === \"away\") {\n            that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n              that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n\n              that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n\n              that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n\n              resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n            });\n\n            that._xmpp.setPresence(\"away\", message);\n          } else if (status === \"dnd\") {\n            that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n              that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n\n              that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n\n              that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n\n              resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n            });\n\n            that._xmpp.setPresence(\"dnd\", message);\n          } else if (status === \"xa\") {\n            that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n              that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n\n              that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n\n              that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n\n              resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n            });\n\n            that._xmpp.setPresence(\"xa\", message);\n          } else {\n            let error = ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST;\n            return reject(error);\n          }\n        }\n      }\n\n      if (that._useS2S) {\n        if (status === \"online\") {\n          that.manualState = false;\n\n          that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n            that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n\n            that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n\n            that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n\n            resolve();\n          });\n\n          yield that._s2s.sendS2SPresence({\n            \"show\": null,\n            \"status\": status\n          });\n        } else {\n          that.manualState = true;\n\n          if (status === \"away\") {\n            that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n              that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n\n              that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n\n              that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n\n              resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n            });\n\n            yield that._s2s.sendS2SPresence({\n              \"show\": \"away\",\n              \"status\": message\n            });\n          } else if (status === \"dnd\") {\n            that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n              that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n\n              that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n\n              that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n\n              resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n            });\n\n            yield that._s2s.sendS2SPresence({\n              \"show\": \"dnd\",\n              \"status\": message\n            });\n          } else if (status === \"xa\") {\n            that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n              that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n\n              that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n\n              that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n\n              resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n            });\n\n            yield that._s2s.sendS2SPresence({\n              \"show\": \"xa\",\n              \"status\": message\n            });\n          } else {\n            let error = ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST;\n            return reject(error);\n          }\n        } //resolve (that._s2s.sendS2SPresence( { show:\"\", status: \"\"} ));\n\n      }\n    }));\n  }\n  /**\n   * @private\n   * @method _sendPresenceFromConfiguration\n   * @instance\n   * @description\n   *      Send user presence according to user settings presence.\n   */\n\n\n  _sendPresenceFromConfiguration() {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      that._settings.getUserSettings().then(function (settings) {\n        let message = \"\";\n        let presence = settings.presence;\n\n        if (presence === \"invisible\") {\n          presence = \"xa\";\n        } else if (presence === \"away\") {\n          presence = \"xa\";\n          message = \"away\";\n        }\n\n        that._logger.log(\"internal\", LOG_ID + \"(_sendPresenceFromConfiguration) -> getUserSettings are \" + presence + \" || message : \" + message);\n\n        if (that._currentPresence && (that._currentPresence.show !== presence || that._currentPresence.show === \"xa\" && that._currentPresence.status !== message)) {\n          that._logger.log(\"internal\", LOG_ID + \"(_sendPresenceFromConfiguration) should update my status from \" + that._currentPresence.show + \" to \" + presence + \" (\" + message + \")\");\n\n          that._setUserPresenceStatus(presence, message).then(() => {\n            resolve();\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          resolve();\n        }\n      }).catch(function (error) {\n        that._logger.log(\"debug\", LOG_ID + \"(_sendPresenceFromConfiguration) failure, send online\");\n\n        that._setUserPresenceStatus(\"online\").then(() => {\n          resolve();\n        }).catch(() => {\n          reject(error);\n        });\n      });\n    });\n  }\n  /**\n   * @private\n   * @method sendInitialBubblePresence\n   * @instance\n   * @param {Bubble} bubble The Bubble\n   * @description\n   *      Method called when receiving an invitation to join a bubble\n   */\n\n\n  sendInitialBubblePresence(bubble) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!bubble || !bubble.jid) {\n          that._logger.log(\"debug\", LOG_ID + \"(joinRoom) failed\");\n\n          that._logger.log(\"info\", LOG_ID + \"(joinRoom) No roomid provided\");\n\n          reject({\n            code: -1,\n            label: \"roomid is not defined!!!\"\n          });\n        } else {\n          if (that._useXMPP) {\n            resolve(that._xmpp.sendInitialBubblePresence(bubble.jid));\n          }\n\n          if (that._useS2S) {\n            let bubbleInfos = yield that._bubbles.getBubbleByJid(bubble.jid);\n            resolve(that._s2s.joinRoom(bubbleInfos.id));\n          }\n        }\n      });\n    });\n  }\n  /**\n   * @private\n   * @method _onUserSettingsChanged\n   * @instance\n   * @description\n   *      Method called when receiving an update on user settings\n   */\n\n\n  _onUserSettingsChanged() {\n    let that = this;\n\n    that._sendPresenceFromConfiguration();\n  }\n  /**\n   * @private\n   * @method _onPresenceChanged\n   * @instance\n   * @description\n   *      Method called when receiving an update on user presence\n   */\n\n\n  _onPresenceChanged(presence) {\n    let that = this;\n\n    that._logger.log(\"debug\", LOG_ID + \"(_onPresenceChanged) presence : \", presence, \", presence.fulljid : \", presence.fulljid, \", that._xmpp.jid\", that._xmpp.jid);\n\n    if (presence.jid === that._xmpp.jid) {\n      that._logger.log(\"debug\", LOG_ID + \"(_onPresenceChanged) set for connected user the presence : \", presence);\n\n      that._currentPresence = presence;\n    }\n  }\n\n};\nPresenceService = __decorate([Utils_1.logEntryExit(LOG_ID), Utils_1.isStarted([])\n/**\n * @module\n * @name PresenceService\n * @version 1.67.1 \n * @public\n * @description\n *      This module manages the presence of the connected user.\n *      <br><br>\n *      The main methods proposed in that module allow to: <br>\n *      - Change the connected user presence\n */\n], PresenceService);\nexports.PresenceService = PresenceService;\nmodule.exports.PresenceService = PresenceService;","map":{"version":3,"sources":["../../src/lib/services/PresenceService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\nconst Settings_1 = require(\"../common/models/Settings\");\nconst PubSub = require(\"pubsub-js\");\nconst presenceEventHandler_1 = require(\"../connection/XMPPServiceHandler/presenceEventHandler\");\nconst Utils_1 = require(\"../common/Utils\");\nconst LOG_ID = \"PRES/SVCE - \";\nlet PresenceService = \n/**\n * @module\n * @name PresenceService\n * @version 1.67.1 \n * @public\n * @description\n *      This module manages the presence of the connected user.\n *      <br><br>\n *      The main methods proposed in that module allow to: <br>\n *      - Change the connected user presence\n */\nclass PresenceService {\n    constructor(_eventEmitter, _logger, _startConfig) {\n        this.ready = false;\n        let that = this;\n        this._startConfig = _startConfig;\n        this._xmpp = null;\n        this._rest = null;\n        that._s2s = null;\n        this._options = {};\n        this._useXMPP = false;\n        this._useS2S = false;\n        that._eventEmitter = _eventEmitter;\n        that._logger = _logger;\n        that.manualState = false;\n        that._currentPresence = { status: \"online\", show: \"\" };\n        that.RAINBOW_PRESENCE_ONLINE = Settings_1.RainbowPresence.ONLINE;\n        that.RAINBOW_PRESENCE_DONOTDISTURB = Settings_1.RainbowPresence.DND;\n        that.RAINBOW_PRESENCE_AWAY = Settings_1.RainbowPresence.AWAY;\n        that.RAINBOW_PRESENCE_INVISIBLE = Settings_1.RainbowPresence.INVISIBLE;\n        that._eventEmitter.on(\"evt_internal_usersettingschanged\", that._onUserSettingsChanged.bind(that));\n        that._eventEmitter.on(\"evt_internal_presencechanged\", that._onPresenceChanged.bind(that));\n        this.ready = false;\n    }\n    get startConfig() {\n        return this._startConfig;\n    }\n    start(_options, _core) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                that._options = _options;\n                that._xmpp = _core._xmpp;\n                that._rest = _core._rest;\n                that._s2s = _core._s2s;\n                that._settings = _core.settings;\n                that._useXMPP = that._options.useXMPP;\n                that._useS2S = that._options.useS2S;\n                that._bubbles = _core.bubbles;\n                that._presenceEventHandler = new presenceEventHandler_1.PresenceEventHandler(that._xmpp);\n                that._presenceHandlerToken = PubSub.subscribe(that._xmpp.hash + \".\" + that._presenceEventHandler.PRESENCE, that._presenceEventHandler.onPresenceReceived);\n                /*\n                                that._eventEmitter.removeListener(\"evt_internal_usersettingschanged\", that._onUserSettingsChanged.bind(that));\n                                that._eventEmitter.removeListener(\"evt_internal_presencechanged\", that._onPresenceChanged.bind(that));\n                \n                                that._eventEmitter.on(\"evt_internal_usersettingschanged\", that._onUserSettingsChanged.bind(that));\n                                that._eventEmitter.on(\"evt_internal_presencechanged\", that._onPresenceChanged.bind(that));\n                */\n                that.ready = true;\n                resolve();\n            }\n            catch (err) {\n                that._logger.log(\"error\", LOG_ID + \"(start) Catch Error !!!\");\n                that._logger.log(\"internalerror\", LOG_ID + \"(start) Catch Error !!! : \", err);\n                return reject();\n            }\n        });\n    }\n    stop() {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                delete that._presenceEventHandler;\n                that._presenceEventHandler = null;\n                PubSub.unsubscribe(that._presenceHandlerToken);\n                that._xmpp = null;\n                /*\n                                that._eventEmitter.removeListener(\"evt_internal_usersettingschanged\", that._onUserSettingsChanged.bind(that));\n                                that._eventEmitter.removeListener(\"evt_internal_presencechanged\", that._onPresenceChanged.bind(that));\n                */\n                that.ready = false;\n                resolve();\n            }\n            catch (err) {\n                return reject();\n            }\n        });\n    }\n    /**\n     * @private\n     * @method sendInitialPresence\n     * @instance\n     * @description\n     *  Send the initial presence (online)\n     * @return {ErrorManager.Ok} A promise containing the result\n     */\n    sendInitialPresence() {\n        let that = this;\n        return new Promise((resolve) => {\n            that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n                that._logger.log(\"info\", LOG_ID + \"(sendInitialPresence) received.\");\n                that._logger.log(\"internal\", LOG_ID + \"(sendInitialPresence) received : \", presence);\n                that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n                resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n            });\n            that._xmpp.setPresence(\"online\", \"\");\n        });\n    }\n    /**\n     * @public\n     * @method setPresenceTo\n     * @instance\n     * @description\n     *    Allow to change the presence of the connected user <br/>\n     *    Only the following values are authorized: 'dnd', 'away', 'invisible' or 'online'\n     * @param {String} presence The presence value to set i.e: 'dnd', 'away', 'invisible' ('xa' on server side) or 'online'\n     * @async\n     * @return {Promise<ErrorManager>}\n     * @fulfil {ErrorManager} - ErrorManager object depending on the result (ErrorManager.getErrorManager().OK in case of success)\n     * @category async\n     */\n    setPresenceTo(presence) {\n        let that = this;\n        let show = \"online\";\n        let status = \"\";\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            switch (presence) {\n                case \"online\":\n                    //show = \"online\";\n                    //status = \"\";\n                    show = undefined;\n                    status = \"mode=auto\";\n                    break;\n                case \"away\":\n                    show = \"xa\";\n                    status = \"away\";\n                    break;\n                case \"dnd\":\n                    show = \"dnd\";\n                    status = \"\";\n                    break;\n                case \"invisible\":\n                    show = \"xa\";\n                    status = \"\";\n                    break;\n                default:\n                    that._logger.log(\"warn\", LOG_ID + \"(setPresenceTo) Bad or empty 'presence' parameter\");\n                    that._logger.log(\"internalerror\", LOG_ID + \"(setPresenceTo) Bad or empty 'presence' parameter : \", presence);\n                    return reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n                    break;\n            }\n            that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(_presence) {\n                that._logger.log(\"info\", LOG_ID + \"(setPresenceTo) received.\");\n                that._logger.log(\"internal\", LOG_ID + \"(setPresenceTo) received : \", _presence);\n                that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n                resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n            });\n            that._logger.log(\"internal\", LOG_ID + \"(setPresenceTo) that._useXMPP : \", that._useXMPP, \", that._useS2S : \", that._useS2S);\n            if (that._useXMPP) {\n                that._xmpp.setPresence(show, status);\n            }\n            if (that._useS2S) {\n                yield that._s2s.sendS2SPresence({ show, status });\n            }\n            yield that._settings.updateUserSettings({ presence: presence });\n        }));\n    }\n    /**\n     * @public\n     * @method getUserConnectedPresence\n     * @instance\n     * @description\n     *      Get user presence status calculated from events.\n     */\n    getUserConnectedPresence() {\n        return this._currentPresence;\n    }\n    /**\n    * @private\n    * @method _setUserPresenceStatus\n    * @instance\n    * @description\n    *      Send user presence status and message to xmpp.\n    */\n    _setUserPresenceStatus(status, message) {\n        let that = this;\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            if (that._useXMPP) {\n                if (status === \"online\") {\n                    that.manualState = false;\n                    that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n                        that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n                        that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n                        that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n                        resolve();\n                    });\n                    that._xmpp.setPresence(null, status);\n                }\n                else {\n                    that.manualState = true;\n                    if (status === \"away\") {\n                        that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n                            that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n                            that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n                            that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n                            resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n                        });\n                        that._xmpp.setPresence(\"away\", message);\n                    }\n                    else if (status === \"dnd\") {\n                        that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n                            that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n                            that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n                            that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n                            resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n                        });\n                        that._xmpp.setPresence(\"dnd\", message);\n                    }\n                    else if (status === \"xa\") {\n                        that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n                            that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n                            that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n                            that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n                            resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n                        });\n                        that._xmpp.setPresence(\"xa\", message);\n                    }\n                    else {\n                        let error = ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST;\n                        return reject(error);\n                    }\n                }\n            }\n            if (that._useS2S) {\n                if (status === \"online\") {\n                    that.manualState = false;\n                    that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n                        that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n                        that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n                        that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n                        resolve();\n                    });\n                    yield that._s2s.sendS2SPresence({ \"show\": null, \"status\": status });\n                }\n                else {\n                    that.manualState = true;\n                    if (status === \"away\") {\n                        that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n                            that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n                            that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n                            that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n                            resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n                        });\n                        yield that._s2s.sendS2SPresence({ \"show\": \"away\", \"status\": message });\n                    }\n                    else if (status === \"dnd\") {\n                        that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n                            that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n                            that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n                            that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n                            resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n                        });\n                        yield that._s2s.sendS2SPresence({ \"show\": \"dnd\", \"status\": message });\n                    }\n                    else if (status === \"xa\") {\n                        that._eventEmitter.once(\"evt_internal_presencechanged\", function fn_onpresencechanged(presence) {\n                            that._logger.log(\"info\", LOG_ID + \"(_setUserPresenceStatus) received.\");\n                            that._logger.log(\"internal\", LOG_ID + \"(_setUserPresenceStatus) received : \", presence);\n                            that._eventEmitter.removeListener(\"evt_internal_presencechanged\", fn_onpresencechanged);\n                            resolve(ErrorManager_1.ErrorManager.getErrorManager().OK);\n                        });\n                        yield that._s2s.sendS2SPresence({ \"show\": \"xa\", \"status\": message });\n                    }\n                    else {\n                        let error = ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST;\n                        return reject(error);\n                    }\n                }\n                //resolve (that._s2s.sendS2SPresence( { show:\"\", status: \"\"} ));\n            }\n        }));\n    }\n    /**\n     * @private\n     * @method _sendPresenceFromConfiguration\n     * @instance\n     * @description\n     *      Send user presence according to user settings presence.\n     */\n    _sendPresenceFromConfiguration() {\n        let that = this;\n        return new Promise((resolve, reject) => {\n            that._settings.getUserSettings().then(function (settings) {\n                let message = \"\";\n                let presence = settings.presence;\n                if (presence === \"invisible\") {\n                    presence = \"xa\";\n                }\n                else if (presence === \"away\") {\n                    presence = \"xa\";\n                    message = \"away\";\n                }\n                that._logger.log(\"internal\", LOG_ID + \"(_sendPresenceFromConfiguration) -> getUserSettings are \" + presence + \" || message : \" + message);\n                if (that._currentPresence && (that._currentPresence.show !== presence || (that._currentPresence.show === \"xa\" && that._currentPresence.status !== message))) {\n                    that._logger.log(\"internal\", LOG_ID + \"(_sendPresenceFromConfiguration) should update my status from \" + that._currentPresence.show + \" to \" + presence + \" (\" + message + \")\");\n                    that._setUserPresenceStatus(presence, message).then(() => { resolve(); }).catch((err) => { reject(err); });\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(function (error) {\n                that._logger.log(\"debug\", LOG_ID + \"(_sendPresenceFromConfiguration) failure, send online\");\n                that._setUserPresenceStatus(\"online\").then(() => { resolve(); }).catch(() => { reject(error); });\n            });\n        });\n    }\n    /**\n     * @private\n     * @method sendInitialBubblePresence\n     * @instance\n     * @param {Bubble} bubble The Bubble\n     * @description\n     *      Method called when receiving an invitation to join a bubble\n     */\n    sendInitialBubblePresence(bubble) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!bubble || !bubble.jid) {\n                    that._logger.log(\"debug\", LOG_ID + \"(joinRoom) failed\");\n                    that._logger.log(\"info\", LOG_ID + \"(joinRoom) No roomid provided\");\n                    reject({ code: -1, label: \"roomid is not defined!!!\" });\n                }\n                else {\n                    if (that._useXMPP) {\n                        resolve(that._xmpp.sendInitialBubblePresence(bubble.jid));\n                    }\n                    if (that._useS2S) {\n                        let bubbleInfos = yield that._bubbles.getBubbleByJid(bubble.jid);\n                        resolve(that._s2s.joinRoom(bubbleInfos.id));\n                    }\n                }\n            });\n        });\n    }\n    /**\n     * @private\n     * @method _onUserSettingsChanged\n     * @instance\n     * @description\n     *      Method called when receiving an update on user settings\n     */\n    _onUserSettingsChanged() {\n        let that = this;\n        that._sendPresenceFromConfiguration();\n    }\n    /**\n     * @private\n     * @method _onPresenceChanged\n     * @instance\n     * @description\n     *      Method called when receiving an update on user presence\n     */\n    _onPresenceChanged(presence) {\n        let that = this;\n        that._logger.log(\"debug\", LOG_ID + \"(_onPresenceChanged) presence : \", presence, \", presence.fulljid : \", presence.fulljid, \", that._xmpp.jid\", that._xmpp.jid);\n        if (presence.jid === that._xmpp.jid) {\n            that._logger.log(\"debug\", LOG_ID + \"(_onPresenceChanged) set for connected user the presence : \", presence);\n            that._currentPresence = presence;\n        }\n    }\n};\nPresenceService = __decorate([\n    Utils_1.logEntryExit(LOG_ID),\n    Utils_1.isStarted([])\n    /**\n     * @module\n     * @name PresenceService\n     * @version 1.67.1 \n     * @public\n     * @description\n     *      This module manages the presence of the connected user.\n     *      <br><br>\n     *      The main methods proposed in that module allow to: <br>\n     *      - Change the connected user presence\n     */\n], PresenceService);\nexports.PresenceService = PresenceService;\nmodule.exports.PresenceService = PresenceService;\n//# sourceMappingURL=PresenceService.js.map"]},"metadata":{},"sourceType":"script"}