{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst promiseFinaly = require('promise.prototype.finally');\n\npromiseFinaly.shim();\nlet LOG_ID = \"UTILS/PROMQ - \"; // Constructor\n\nclass PromiseQueue {\n  constructor(_logger) {\n    //var that = this;\n    this.logger = _logger;\n    this.queue = [];\n    this.started = false;\n  }\n\n  add(promise) {\n    let that = this;\n    that.logger.log(\"debug\", LOG_ID + \"[PromiseQueue] (add) _entering_\");\n    this.queue.push(promise);\n\n    if (!this.started) {\n      this.started = true;\n      this.execute();\n    }\n  }\n\n  execute() {\n    let that = this;\n    that.logger.log(\"debug\", LOG_ID + \"[PromiseQueue] (execute) _entering_\");\n    let promise = this.queue.shift();\n\n    if (promise) {\n      let pr = promise();\n\n      if (pr) {\n        pr.catch(function (error) {\n          let errorMessage = error && error.message ? error.message : \"Unknown error\"; //$log.error(\"[PromiseQueue] execute failure -- \" + errorMessage);\n\n          that.logger.log(\"error\", LOG_ID + \"[PromiseQueue] (execute) failure \");\n          that.logger.log(\"internalerror\", LOG_ID + \"[PromiseQueue] (execute) failure -- \" + errorMessage);\n        }).finally(function () {\n          that.execute();\n        });\n      } else {\n        that.logger.log(\"error\", LOG_ID + \"[PromiseQueue] (execute) pr is undefined. Start next promise \");\n        that.execute();\n      }\n    } else {\n      this.started = false;\n    }\n  }\n\n} // Static factories\n\n\nlet createPromiseQueue = function (_logger) {\n  return new PromiseQueue(_logger);\n};\n\nexports.createPromiseQueue = createPromiseQueue; //module.exports.PromiseQueue = PromiseQueue;\n\nmodule.exports.createPromiseQueue = createPromiseQueue;","map":{"version":3,"sources":["../../src/lib/common/promiseQueue.ts"],"names":[],"mappings":"AAAA;;;;;;AAIA,MAAM,aAAa,GAAG,OAAO,CAAC,2BAAD,CAA7B;;AAEA,aAAa,CAAC,IAAd;AAEA,IAAI,MAAM,GAAG,gBAAb,C,CAEA;;AACA,MAAM,YAAN,CAAkB;AAKd,EAAA,WAAA,CAAa,OAAb,EAAoB;AAChB;AAEA,SAAK,MAAL,GAAc,OAAd;AACA,SAAK,KAAL,GAAa,EAAb;AACA,SAAK,OAAL,GAAe,KAAf;AACH;;AACD,EAAA,GAAG,CAAE,OAAF,EAAS;AACR,QAAI,IAAI,GAAG,IAAX;AACA,IAAA,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,OAAhB,EAAyB,MAAM,GAAG,iCAAlC;AACA,SAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB;;AACA,QAAI,CAAC,KAAK,OAAV,EAAmB;AACf,WAAK,OAAL,GAAe,IAAf;AACA,WAAK,OAAL;AACH;AACJ;;AAED,EAAA,OAAO,GAAA;AACH,QAAI,IAAI,GAAG,IAAX;AACA,IAAA,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,OAAhB,EAAyB,MAAM,GAAG,qCAAlC;AACA,QAAI,OAAO,GAAG,KAAK,KAAL,CAAW,KAAX,EAAd;;AACA,QAAI,OAAJ,EAAa;AACT,UAAI,EAAE,GAAG,OAAO,EAAhB;;AACA,UAAI,EAAJ,EAAQ;AACJ,QAAA,EAAE,CAAC,KAAH,CAAS,UAAU,KAAV,EAAe;AACpB,cAAI,YAAY,GAAI,KAAK,IAAI,KAAK,CAAC,OAAhB,GAA2B,KAAK,CAAC,OAAjC,GAA2C,eAA9D,CADoB,CAEpB;;AACA,UAAA,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,OAAhB,EAAyB,MAAM,GAAG,mCAAlC;AACA,UAAA,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,eAAhB,EAAiC,MAAM,GAAG,sCAAT,GAAkD,YAAnF;AACH,SALD,EAMK,OANL,CAMa,YAAA;AACL,UAAA,IAAI,CAAC,OAAL;AACH,SARL;AASH,OAVD,MAUO;AACH,QAAA,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,OAAhB,EAAyB,MAAM,GAAG,+DAAlC;AACA,QAAA,IAAI,CAAC,OAAL;AACH;AACJ,KAhBD,MAiBK;AACD,WAAK,OAAL,GAAe,KAAf;AACH;AACJ;;AA9Ca,C,CAiDlB;;;AACA,IAAI,kBAAkB,GAAG,UAAU,OAAV,EAAiB;AACtC,SAAO,IAAI,YAAJ,CAAiB,OAAjB,CAAP;AACH,CAFD;;AAMQ,OAAA,CAAA,kBAAA,GAAA,kBAAA,C,CAFR;;AACA,MAAM,CAAC,OAAP,CAAe,kBAAf,GAAoC,kBAApC","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst promiseFinaly = require('promise.prototype.finally');\npromiseFinaly.shim();\nlet LOG_ID = \"UTILS/PROMQ - \";\n// Constructor\nclass PromiseQueue {\n    constructor(_logger) {\n        //var that = this;\n        this.logger = _logger;\n        this.queue = [];\n        this.started = false;\n    }\n    add(promise) {\n        let that = this;\n        that.logger.log(\"debug\", LOG_ID + \"[PromiseQueue] (add) _entering_\");\n        this.queue.push(promise);\n        if (!this.started) {\n            this.started = true;\n            this.execute();\n        }\n    }\n    execute() {\n        let that = this;\n        that.logger.log(\"debug\", LOG_ID + \"[PromiseQueue] (execute) _entering_\");\n        let promise = this.queue.shift();\n        if (promise) {\n            let pr = promise();\n            if (pr) {\n                pr.catch(function (error) {\n                    let errorMessage = (error && error.message) ? error.message : \"Unknown error\";\n                    //$log.error(\"[PromiseQueue] execute failure -- \" + errorMessage);\n                    that.logger.log(\"error\", LOG_ID + \"[PromiseQueue] (execute) failure \");\n                    that.logger.log(\"internalerror\", LOG_ID + \"[PromiseQueue] (execute) failure -- \" + errorMessage);\n                })\n                    .finally(function () {\n                    that.execute();\n                });\n            }\n            else {\n                that.logger.log(\"error\", LOG_ID + \"[PromiseQueue] (execute) pr is undefined. Start next promise \");\n                that.execute();\n            }\n        }\n        else {\n            this.started = false;\n        }\n    }\n}\n// Static factories\nlet createPromiseQueue = function (_logger) {\n    return new PromiseQueue(_logger);\n};\nexports.createPromiseQueue = createPromiseQueue;\n//module.exports.PromiseQueue = PromiseQueue;\nmodule.exports.createPromiseQueue = createPromiseQueue;\n//# sourceMappingURL=promiseQueue.js.map"]},"metadata":{},"sourceType":"script"}