{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst XMPPUtils_1 = require(\"../../common/XMPPUtils\");\n\nconst Utils_1 = require(\"../../common/Utils\");\n\nconst GenericHandler = require(\"./genericHandler\");\n\nconst xml = require(\"@xmpp/xml\");\n\nconst LOG_ID = \"XMPP/HNDL/PRES - \";\nlet PresenceEventHandler = class PresenceEventHandler extends GenericHandler {\n  constructor(xmppService) {\n    super(xmppService);\n    this.PRESENCE = \"jabber:client.presence\";\n    let that = this;\n    let xmppUtils = XMPPUtils_1.XMPPUTils.getXMPPUtils();\n\n    this.onPresenceReceived = (msg, stanza) => {\n      try {\n        that.logger.log(\"internal\", LOG_ID + \"(onPresenceReceived) _entering_ : \", msg, stanza);\n        let from = stanza.attrs.from;\n\n        if (from === that.fullJid || xmppUtils.getBareJIDFromFullJID(from) === xmppUtils.getBareJIDFromFullJID(that.fullJid)) {\n          // My presence changes (coming from me or another resource)\n          let show = stanza.getChild(\"show\") ? stanza.getChild(\"show\").text() : \"online\";\n          let status = stanza.getChild(\"status\") ? stanza.getChild(\"status\").text() : \"\";\n          that.eventEmitter.emit(\"evt_internal_presencechanged\", {\n            \"fulljid\": from,\n            \"jid\": xmppUtils.getBareJIDFromFullJID(from),\n            \"resource\": xmppUtils.getResourceFromFullJID(from),\n            \"status\": show,\n            \"message\": status,\n            \"type\": xmppUtils.isFromTelJid(from) ? \"phone\" : xmppUtils.isFromMobile(from) ? \"mobile\" : xmppUtils.isFromNode(from) ? \"node\" : \"desktopOrWeb\"\n          });\n        } else if (from.includes(\"room_\")) {\n          let presence = stanza.attrs.type;\n          let status = undefined;\n          let description = undefined;\n          let children = stanza.children;\n          children.forEach(function (node) {\n            switch (node.getName()) {\n              case \"x\":\n                let items = node.children;\n                items.forEach(item => {\n                  that.logger.log(\"internal\", LOG_ID + \"(onPresenceReceived) My presence (node or other resources) in the room changes x child name : \", item.getName());\n\n                  switch (item.getName()) {\n                    case \"item\":\n                      //that.logger.log(\"internal\", LOG_ID + \"(onPresenceReceived) My presence (node or other resources) in the room changes item \", item);\n                      let childrenReason = item.getChild(\"reason\");\n\n                      if (childrenReason) {\n                        description = childrenReason.children[0];\n                      }\n\n                      break;\n\n                    case \"status\":\n                      //that.logger.log(\"internal\", LOG_ID + \"(onPresenceReceived) status item\", item);\n                      switch (item.attrs.code) {\n                        case \"338\":\n                          status = \"deactivated\";\n                          break;\n\n                        case \"339\":\n                          status = \"resumed\";\n                          break;\n\n                        default:\n                          break;\n                      }\n\n                      break;\n\n                    default:\n                      break;\n                  }\n                });\n                break;\n\n              default:\n                break;\n            }\n          }); // My presence (node or other resources) in the room changes\n\n          that.eventEmitter.emit(\"evt_internal_onbubblepresencechanged\", {\n            fulljid: from,\n            jid: xmppUtils.getBareJIDFromFullJID(from),\n            resource: xmppUtils.getResourceFromFullJID(from),\n            presence: presence,\n            statusCode: status,\n            description: description\n          });\n          /*\r\n          // A presence in a room changes\r\n          let fullJid = xmppUtils.getResourceFromFullJID(from);\r\n          if (xmppUtils.getBareJIDFromFullJID(fullJid) === xmppUtils.getBareJIDFromFullJID(that.fullJid)) {\r\n                  // My presence (node or other resources) in the room changes\r\n              that\r\n                  .eventEmitter\r\n                  .emit(\"evt_internal_onbubblepresencechanged\", {\r\n                      fulljid: from,\r\n                      jid: xmppUtils.getBareJIDFromFullJID(from),\r\n                      resource: xmppUtils.getResourceFromFullJID(from)\r\n                  });\r\n          } else {\r\n              // Presence of a participants of the room changes\r\n              that\r\n                  .eventEmitter\r\n                  .emit(\"rainbow_onbubblerosterpresencechanged\", {\r\n                      fulljid: from,\r\n                      jid: xmppUtils.getBareJIDFromFullJID(from),\r\n                      resource: xmppUtils.getResourceFromFullJID(from)\r\n                  });\r\n          } // */\n        } else {\n          // Presence of a contact changes\n          let priority = 5;\n          let show = \"\";\n          let delay = \"\";\n          let status = \"\";\n\n          if (stanza.attrs.type === \"unavailable\") {\n            show = \"unavailable\";\n          } else {\n            let children = stanza.children;\n            children.forEach(function (node) {\n              if (node && typeof node !== \"string\") {\n                switch (node.getName()) {\n                  case \"priority\":\n                    priority = node.getText() || 5;\n                    break;\n\n                  case \"show\":\n                    show = node.getText() || \"online\";\n                    break;\n\n                  case \"delay\":\n                    delay = node.attrs.stamp || \"\";\n                    break;\n\n                  case \"status\":\n                    status = node.getText() || \"\";\n                    break;\n\n                  case \"actor\":\n                    if (node.attrs && node.attrs.xmlns === \"jabber:iq:configuration\") {\n                      // Contact updated\n                      if (node.parent && node.parent.getChild(\"x\") && (node.parent.getChild(\"x\").getChild(\"data\") || node.parent.getChild(\"x\").getChild(\"avatar\"))) {\n                        // Either avatar or user vcard changed\n                        that.eventEmitter.emit(\"evt_internal_onrostercontactinformationchanged\", xmppUtils.getBareJIDFromFullJID(from));\n                      }\n                    }\n\n                    break;\n\n                  default:\n                    break;\n                }\n              }\n            });\n          }\n\n          let evtParam = {\n            fulljid: from,\n            jid: xmppUtils.getBareJIDFromFullJID(from),\n            resource: xmppUtils.getResourceFromFullJID(from),\n            value: {\n              priority: priority,\n              show: show || \"\",\n              delay: delay,\n              status: status || \"\",\n              type: xmppUtils.isFromTelJid(from) ? \"phone\" : xmppUtils.isFromMobile(from) ? \"mobile\" : xmppUtils.isFromNode(from) ? \"node\" : \"desktopOrWeb\"\n            }\n          };\n          that.eventEmitter.emit(\"evt_internal_onrosterpresence\", evtParam);\n        }\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onPresenceReceived) CATCH ErrorManager !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onPresenceReceived) CATCH ErrorManager !!! : \", err);\n      }\n    };\n  }\n\n};\nPresenceEventHandler = __decorate([Utils_1.logEntryExit(LOG_ID)], PresenceEventHandler);\nexports.PresenceEventHandler = PresenceEventHandler;\nmodule.exports.PresenceEventHandler = PresenceEventHandler;","map":{"version":3,"sources":["../../../src/lib/connection/XMPPServiceHandler/presenceEventHandler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst XMPPUtils_1 = require(\"../../common/XMPPUtils\");\r\nconst Utils_1 = require(\"../../common/Utils\");\r\nconst GenericHandler = require(\"./genericHandler\");\r\nconst xml = require(\"@xmpp/xml\");\r\nconst LOG_ID = \"XMPP/HNDL/PRES - \";\r\nlet PresenceEventHandler = class PresenceEventHandler extends GenericHandler {\r\n    constructor(xmppService) {\r\n        super(xmppService);\r\n        this.PRESENCE = \"jabber:client.presence\";\r\n        let that = this;\r\n        let xmppUtils = XMPPUtils_1.XMPPUTils.getXMPPUtils();\r\n        this.onPresenceReceived = (msg, stanza) => {\r\n            try {\r\n                that.logger.log(\"internal\", LOG_ID + \"(onPresenceReceived) _entering_ : \", msg, stanza);\r\n                let from = stanza.attrs.from;\r\n                if (from === that.fullJid || xmppUtils.getBareJIDFromFullJID(from) === xmppUtils.getBareJIDFromFullJID(that.fullJid)) {\r\n                    // My presence changes (coming from me or another resource)\r\n                    let show = stanza.getChild(\"show\") ? stanza.getChild(\"show\").text() : \"online\";\r\n                    let status = stanza.getChild(\"status\") ? stanza.getChild(\"status\").text() : \"\";\r\n                    that.eventEmitter.emit(\"evt_internal_presencechanged\", {\r\n                        \"fulljid\": from,\r\n                        \"jid\": xmppUtils.getBareJIDFromFullJID(from),\r\n                        \"resource\": xmppUtils.getResourceFromFullJID(from),\r\n                        \"status\": show,\r\n                        \"message\": status,\r\n                        \"type\": xmppUtils.isFromTelJid(from) ?\r\n                            \"phone\" :\r\n                            xmppUtils.isFromMobile(from) ?\r\n                                \"mobile\" :\r\n                                xmppUtils.isFromNode(from) ?\r\n                                    \"node\" :\r\n                                    \"desktopOrWeb\"\r\n                    });\r\n                }\r\n                else if (from.includes(\"room_\")) {\r\n                    let presence = stanza.attrs.type;\r\n                    let status = undefined;\r\n                    let description = undefined;\r\n                    let children = stanza.children;\r\n                    children.forEach(function (node) {\r\n                        switch (node.getName()) {\r\n                            case \"x\":\r\n                                let items = node.children;\r\n                                items.forEach((item) => {\r\n                                    that.logger.log(\"internal\", LOG_ID + \"(onPresenceReceived) My presence (node or other resources) in the room changes x child name : \", item.getName());\r\n                                    switch (item.getName()) {\r\n                                        case \"item\":\r\n                                            //that.logger.log(\"internal\", LOG_ID + \"(onPresenceReceived) My presence (node or other resources) in the room changes item \", item);\r\n                                            let childrenReason = item.getChild(\"reason\");\r\n                                            if (childrenReason) {\r\n                                                description = childrenReason.children[0];\r\n                                            }\r\n                                            break;\r\n                                        case \"status\":\r\n                                            //that.logger.log(\"internal\", LOG_ID + \"(onPresenceReceived) status item\", item);\r\n                                            switch (item.attrs.code) {\r\n                                                case \"338\":\r\n                                                    status = \"deactivated\";\r\n                                                    break;\r\n                                                case \"339\":\r\n                                                    status = \"resumed\";\r\n                                                    break;\r\n                                                default:\r\n                                                    break;\r\n                                            }\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                });\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    });\r\n                    // My presence (node or other resources) in the room changes\r\n                    that.eventEmitter.emit(\"evt_internal_onbubblepresencechanged\", {\r\n                        fulljid: from,\r\n                        jid: xmppUtils.getBareJIDFromFullJID(from),\r\n                        resource: xmppUtils.getResourceFromFullJID(from),\r\n                        presence: presence,\r\n                        statusCode: status,\r\n                        description: description\r\n                    });\r\n                    /*\r\n                    // A presence in a room changes\r\n                    let fullJid = xmppUtils.getResourceFromFullJID(from);\r\n                    if (xmppUtils.getBareJIDFromFullJID(fullJid) === xmppUtils.getBareJIDFromFullJID(that.fullJid)) {\r\n\r\n\r\n                        // My presence (node or other resources) in the room changes\r\n                        that\r\n                            .eventEmitter\r\n                            .emit(\"evt_internal_onbubblepresencechanged\", {\r\n                                fulljid: from,\r\n                                jid: xmppUtils.getBareJIDFromFullJID(from),\r\n                                resource: xmppUtils.getResourceFromFullJID(from)\r\n                            });\r\n                    } else {\r\n                        // Presence of a participants of the room changes\r\n                        that\r\n                            .eventEmitter\r\n                            .emit(\"rainbow_onbubblerosterpresencechanged\", {\r\n                                fulljid: from,\r\n                                jid: xmppUtils.getBareJIDFromFullJID(from),\r\n                                resource: xmppUtils.getResourceFromFullJID(from)\r\n                            });\r\n                    } // */\r\n                }\r\n                else {\r\n                    // Presence of a contact changes\r\n                    let priority = 5;\r\n                    let show = \"\";\r\n                    let delay = \"\";\r\n                    let status = \"\";\r\n                    if (stanza.attrs.type === \"unavailable\") {\r\n                        show = \"unavailable\";\r\n                    }\r\n                    else {\r\n                        let children = stanza.children;\r\n                        children.forEach(function (node) {\r\n                            if (node && typeof node !== \"string\") {\r\n                                switch (node.getName()) {\r\n                                    case \"priority\":\r\n                                        priority = node.getText() || 5;\r\n                                        break;\r\n                                    case \"show\":\r\n                                        show = node.getText() || \"online\";\r\n                                        break;\r\n                                    case \"delay\":\r\n                                        delay = node.attrs.stamp || \"\";\r\n                                        break;\r\n                                    case \"status\":\r\n                                        status = node.getText() || \"\";\r\n                                        break;\r\n                                    case \"actor\":\r\n                                        if (node.attrs && (node.attrs.xmlns === \"jabber:iq:configuration\")) {\r\n                                            // Contact updated\r\n                                            if (node.parent && node.parent.getChild(\"x\") &&\r\n                                                (node.parent.getChild(\"x\").getChild(\"data\") || node.parent.getChild(\"x\").getChild(\"avatar\"))) {\r\n                                                // Either avatar or user vcard changed\r\n                                                that.eventEmitter.emit(\"evt_internal_onrostercontactinformationchanged\", xmppUtils.getBareJIDFromFullJID(from));\r\n                                            }\r\n                                        }\r\n                                        break;\r\n                                    default:\r\n                                        break;\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    let evtParam = {\r\n                        fulljid: from,\r\n                        jid: xmppUtils.getBareJIDFromFullJID(from),\r\n                        resource: xmppUtils.getResourceFromFullJID(from),\r\n                        value: {\r\n                            priority: priority,\r\n                            show: show || \"\",\r\n                            delay: delay,\r\n                            status: status || \"\",\r\n                            type: xmppUtils.isFromTelJid(from) ?\r\n                                \"phone\" :\r\n                                xmppUtils.isFromMobile(from) ?\r\n                                    \"mobile\" :\r\n                                    xmppUtils.isFromNode(from) ?\r\n                                        \"node\" :\r\n                                        \"desktopOrWeb\"\r\n                        }\r\n                    };\r\n                    that.eventEmitter.emit(\"evt_internal_onrosterpresence\", evtParam);\r\n                }\r\n            }\r\n            catch (err) {\r\n                that.logger.log(\"error\", LOG_ID + \"(onPresenceReceived) CATCH ErrorManager !!! \");\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(onPresenceReceived) CATCH ErrorManager !!! : \", err);\r\n            }\r\n        };\r\n    }\r\n};\r\nPresenceEventHandler = __decorate([\r\n    Utils_1.logEntryExit(LOG_ID)\r\n], PresenceEventHandler);\r\nexports.PresenceEventHandler = PresenceEventHandler;\r\nmodule.exports.PresenceEventHandler = PresenceEventHandler;\r\n//# sourceMappingURL=presenceEventHandler.js.map"]},"metadata":{},"sourceType":"script"}