{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); //let unirest = require(\"unirest\");\n\nconst Utils_1 = require(\"../common/Utils\");\n\nconst Request = require(\"request\");\n\nconst packageVersion = require(\"../../package.json\"); //let http = require('http');\n\n\nconst urlParse = require(\"url\").parse;\n\nconst EventEmitter = require(\"events\").EventEmitter;\n\nconst humanize = require(\"humanize-number\");\n\nconst chalk = require(\"chalk\");\n\nconst debugHttp = require(\"debug-http\");\n\nconst LOG_ID = \"HTTP - \";\nlet colorCodes = {\n  5: \"red\",\n  4: \"yellow\",\n  3: \"cyan\",\n  2: \"green\",\n  1: \"green\"\n};\n\nfunction time(start) {\n  let delta; // @ts-ignore\n\n  delta = new Date() - start;\n  delta = delta < 10000 ? delta + \"ms\" : Math.round(delta / 1000) + \"s\";\n  return humanize(delta);\n}\n\nconst USER_AGENT = \"node/\" + process.version + \" (\" + process.platform + \"; \" + process.arch + \") \" + \"Rainbow Sdk/\" + packageVersion.version;\nlet HTTPService = class HTTPService {\n  constructor(_http, _logger, _proxy, _evtEmitter) {\n    this.serverURL = _http.protocol + \"://\" + _http.host + \":\" + _http.port;\n    this._host = _http.host;\n    this.logger = _logger;\n    this.proxy = _proxy;\n    this.eventEmitter = _evtEmitter;\n    let that = this;\n\n    function debugHandler(request, options, cb) {\n      options = typeof options === \"string\" ? urlParse(options) : options;\n      let url = options.href || (options.protocol || \"http:\") + \"//\" + (options.host || options.hostname) + options.path;\n      let method = (options.method || \"GET\").toUpperCase();\n      let signature = method + \" \" + url;\n      let start = new Date();\n      let wasHandled = typeof cb === \"function\"; //setImmediate(console.log, chalk.gray('      → ' + signature));\n\n      that.logger.log(\"internal\", LOG_ID + \" \" + chalk.gray(\"      → \" + signature + \" : \" + JSON.stringify(options.headers, null, \"  \")));\n      return request(options, cb).on(\"response\", function (response) {\n        // Workaround for res._dump in Node.JS http client\n        // https://github.com/nodejs/node/blob/20285ad17755187ece16b8a5effeaa87f5407da2/lib/_http_client.js#L421-L427\n        if (!wasHandled && EventEmitter.listenerCount(response.req, \"response\") === 0) {\n          response.resume();\n        }\n\n        let status = response.statusCode;\n        let s = status / 100 | 0;\n        that.logger.log(\"internal\", LOG_ID + \"  \" + chalk[colorCodes[s]](status) + \" ← \" + signature + \" \" + chalk.gray(time(start)));\n      }).on(\"error\", function (err) {\n        that.logger.log(\"internalerror\", LOG_ID + \"  \" + chalk.red(\"xxx\") + \" ← \" + signature + \" \" + chalk.red(err.message));\n      });\n    }\n\n    if (that.logger.logHttp) {\n      debugHttp(debugHandler);\n    }\n  }\n  /*\r\n  // usage\r\n  // const [err, result] = safeJsonParse('[Invalid JSON}');\r\n  // if (err) {\r\n  //  console.log('Failed to parse JSON: ' + err.message);\r\n  //  } else {\r\n  //  console.log(result);\r\n  //}\r\n  safeJsonParse(str) {\r\n  try {\r\n     return [null, JSON.parse(str)];\r\n  } catch (err) {\r\n     return [err];\r\n  }\r\n  } // */\n\n  /**\r\n   *\r\n   */\n\n\n  hasJsonStructure(str) {\n    if (typeof str !== 'string') return false;\n\n    try {\n      const result = JSON.parse(str);\n      const type = Object.prototype.toString.call(result);\n      return type === '[object Object]' || type === '[object Array]';\n    } catch (err) {\n      return false;\n    }\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  start() {\n    let that = this;\n    return new Promise(resolve => {\n      that.logger.log(\"debug\", LOG_ID + \"(start) host used\", that._host);\n      that.logger.log(\"info\", LOG_ID + \"(start) REST URL\", that.serverURL);\n      resolve();\n    });\n  }\n\n  stop() {\n    let that = this;\n    return new Promise(resolve => {\n      that.logger.log(\"info\", LOG_ID + \"(stop) Successfully stopped\");\n      resolve();\n    });\n  }\n\n  tokenExpirationControl(bodyjs) {\n    let that = this;\n\n    if (bodyjs.errorCode === 401 && bodyjs.errorDetails === \"jwt expired\") {\n      that.logger.log(\"debug\", LOG_ID + \"(tokenExpirationControl) rainbow_tokenexpired\");\n      that.eventEmitter.emit(\"rainbow_tokenexpired\");\n    }\n  }\n\n  getUrl(url, headers = {}, params) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        headers[\"user-agent\"] = USER_AGENT;\n        let urlEncoded = url;\n        let request = Request({\n          url: urlEncoded,\n          method: \"GET\",\n          headers: headers,\n          //params: params,\n          proxy: that.proxy && that.proxy.isProxyConfigured ? that.proxy.proxyURL : null,\n          agentOptions: {\n            secureProtocol: that.proxy.secureProtocol\n          }\n        }, (error, response, body) => {\n          that.logger.log(\"info\", LOG_ID + \"(get) successfull\");\n\n          if (error) {\n            return reject({\n              code: -1,\n              msg: \"ErrorManager while requesting\",\n              details: error\n            });\n          } else {\n            if (response) {\n              if (response.statusCode) {\n                that.logger.log(\"info\", LOG_ID + \"(get) HTTP statusCode defined : \", response.statusCode);\n\n                if (response.statusCode >= 200 && response.statusCode <= 206) {\n                  if (!response.headers[\"content-type\"] || response.headers[\"content-type\"] && (response.headers[\"content-type\"].indexOf(\"json\") > -1 || response.headers[\"content-type\"].indexOf(\"csv\") > -1)) {\n                    let json = {};\n\n                    if (response.body && response.headers[\"content-type\"].indexOf(\"json\") > -1) {\n                      json = JSON.parse(response.body);\n                      resolve(json);\n                    } else {\n                      resolve(response.body);\n                    }\n                  } else {\n                    return reject({\n                      code: -1,\n                      msg: \"Bad content, please check your host\",\n                      details: \"\"\n                    });\n                  }\n                } else {\n                  that.logger.warn(\"warn\", LOG_ID + \"(get) HTTP response.code != 200\");\n                  that.logger.warn(\"internal\", LOG_ID + \"(get) HTTP response.code != 200 , bodyjs : \", response.body);\n                  let bodyjs = {};\n\n                  if (that.hasJsonStructure(response.body)) {\n                    bodyjs = JSON.parse(response.body);\n                  } else {\n                    bodyjs.errorMsg = response.body;\n                  }\n\n                  let msg = response.statusMessage ? response.statusMessage : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\n                  let errorMsgDetail = bodyjs ? bodyjs.errorDetails + (bodyjs.errorDetailsCode ? \". error code : \" + bodyjs.errorDetailsCode : \"\" || \"\") : \"\";\n                  errorMsgDetail = errorMsgDetail ? errorMsgDetail : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\n                  that.tokenExpirationControl(bodyjs);\n                  return reject({\n                    code: response.statusCode,\n                    msg: msg,\n                    details: errorMsgDetail,\n                    error: bodyjs\n                  });\n                }\n              } else {}\n            } else {}\n          }\n        });\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(get) HTTP ErrorManager\");\n        that.logger.log(\"internalerror\", LOG_ID + \"(get) HTTP ErrorManager\", err);\n        return reject({\n          code: -1,\n          msg: \"Unknown error\",\n          details: \"\"\n        });\n      }\n    });\n  }\n\n  get(url, headers = {}, params) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        headers[\"user-agent\"] = USER_AGENT;\n        that.logger.log(\"info\", LOG_ID + \"(get) url : \", (that.serverURL + url).match(/[a-z]+:\\/\\/[^:/]+(?::\\d+)?(?:\\/[^?]+)?(?:\\?)?/g));\n        that.logger.log(\"internal\", LOG_ID + \"(get) url : \", that.serverURL + url, \", headers : \", headers); //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\n\n        let urlEncoded = that.serverURL + url;\n\n        if (headers.Accept && headers.Accept.indexOf(\"json\") > -1) {\n          let request = Request({\n            url: urlEncoded,\n            method: \"GET\",\n            headers: headers,\n            params: params,\n            proxy: that.proxy && that.proxy.isProxyConfigured ? that.proxy.proxyURL : null,\n            agentOptions: {\n              secureProtocol: that.proxy.secureProtocol\n            }\n          }, (error, response, body) => {\n            that.logger.log(\"info\", LOG_ID + \"(get) successfull\");\n\n            if (error) {\n              return reject({\n                code: -1,\n                url: urlEncoded,\n                msg: \"ErrorManager while requesting\",\n                details: error\n              });\n            } else {\n              if (response) {\n                if (response.statusCode) {\n                  /*response.statusCode = 504;\r\n                  response.body = \"<html><body><h1>504 Gateway Time-out</h1>\\n\" +\r\n                      \"The server didn't respond in time.\\n\" +\r\n                      \"</body></html>\\n\";\r\n                      // */\n                  that.logger.log(\"info\", LOG_ID + \"(get) HTTP statusCode defined : \", response.statusCode);\n\n                  if (response.statusCode >= 200 && response.statusCode <= 206) {\n                    if (!response.headers[\"content-type\"] || response.headers[\"content-type\"] && (response.headers[\"content-type\"].indexOf(\"json\") > -1 || response.headers[\"content-type\"].indexOf(\"csv\") > -1)) {\n                      let json = {};\n\n                      if (response.body && response.headers[\"content-type\"].indexOf(\"json\") > -1) {\n                        json = JSON.parse(response.body);\n                        resolve(json);\n                      } else {\n                        resolve(response.body);\n                      }\n                    } else {\n                      return reject({\n                        code: -1,\n                        url: urlEncoded,\n                        msg: \"Bad content, please check your host\",\n                        details: \"\"\n                      });\n                    }\n                  } else {\n                    that.logger.warn(\"warn\", LOG_ID + \"(get) HTTP response.code != 200\");\n                    that.logger.warn(\"internal\", LOG_ID + \"(get) HTTP response.code != 200 , bodyjs : \", response.body);\n                    let bodyjs = {};\n\n                    if (that.hasJsonStructure(response.body)) {\n                      bodyjs = JSON.parse(response.body);\n                    } else {\n                      bodyjs.errorMsg = response.body;\n                    }\n\n                    let msg = response.statusMessage ? response.statusMessage : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\n                    let errorMsgDetail = bodyjs ? bodyjs.errorDetails + (bodyjs.errorDetailsCode ? \". error code : \" + bodyjs.errorDetailsCode : \"\" || \"\") : \"\";\n                    errorMsgDetail = errorMsgDetail ? errorMsgDetail : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\n                    that.tokenExpirationControl(bodyjs);\n                    return reject({\n                      code: response.statusCode,\n                      url: urlEncoded,\n                      msg: msg,\n                      details: errorMsgDetail,\n                      error: bodyjs\n                    });\n                  }\n                } else {\n                  if (response.error && response.error.reason) {\n                    that.logger.log(\"error\", LOG_ID + \"(get) HTTP security issue\", response.error.reason);\n                    return reject({\n                      code: -1,\n                      url: urlEncoded,\n                      msg: response.error.reason,\n                      details: \"\"\n                    });\n                  } else {\n                    that.logger.warn(\"warn\", LOG_ID + \"(get) HTTP other issue\");\n                    that.logger.warn(\"internal\", LOG_ID + \"(get) HTTP other issue , response : \", JSON.stringify(response) + \" error : \" + response.message);\n                    that.logger.log(\"internal\", LOG_ID + \"(get) HTTP other issue\", response);\n                    return reject({\n                      code: -1,\n                      url: urlEncoded,\n                      msg: \"Unknown error\",\n                      details: response\n                    });\n                  }\n                }\n              } else {\n                return reject({\n                  code: -1,\n                  url: urlEncoded,\n                  msg: \"ErrorManager while requesting\",\n                  details: \"error\"\n                });\n              }\n            }\n          });\n        } else {\n          let buff = [];\n          let err = {\n            statusCode: null,\n            statusMessage: null,\n            contentType: null\n          };\n          let req = Request.get({\n            url: urlEncoded,\n            headers: headers,\n            params: params,\n            proxy: that.proxy && that.proxy.isProxyConfigured ? that.proxy.proxyURL : null,\n            agentOptions: {\n              secureProtocol: that.proxy.secureProtocol\n            }\n          }).on(\"response\", function (response) {\n            that.logger.log(\"info\", LOG_ID + \"(get) status code:\" + response.statusCode); // 200\n\n            that.logger.log(\"debug\", LOG_ID + \"(get) response headers: \" + response.headers[\"content-type\"]); // 'image/png'\n\n            if (response.statusCode === 400) {\n              req.abort();\n              err.statusCode = response.statusCode;\n              err.statusMessage = response.statusMessage;\n              err.contentType = response.headers[\"content-type\"];\n            }\n          }).on(\"data\", chunk => {\n            buff.push(chunk);\n          }).on(\"error\", error => {\n            that.logger.log(\"error\", LOG_ID, \"(get) error\");\n            that.logger.log(\"internalerror\", LOG_ID, \"(get) error : \", error);\n            that.logger.log(\"debug\", LOG_ID + \"(get) _exiting_\");\n            return reject({\n              code: -1,\n              url: urlEncoded,\n              msg: error.message,\n              details: \"\"\n            });\n          }).on(\"end\", () => {\n            that.logger.log(\"info\", LOG_ID + \"(get) successfull\");\n            that.logger.log(\"info\", LOG_ID + \"(get) get file buffer from Url\");\n            that.logger.log(\"debug\", LOG_ID + \"(get) _exiting_\");\n\n            if (!err.statusCode) {\n              let data = Buffer.concat(buff);\n              resolve(data);\n            } else {\n              return reject({\n                code: err.statusCode,\n                url: urlEncoded,\n                msg: err.statusMessage,\n                details: \"\"\n              });\n            }\n          }); // */\n        }\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(get) HTTP ErrorManager\");\n        that.logger.log(\"internalerror\", LOG_ID + \"(get) HTTP ErrorManager\", err);\n        return reject({\n          code: -1,\n          msg: \"Unknown error\",\n          details: \"\"\n        });\n      }\n    });\n  }\n\n  post(url, headers = {}, data, contentType) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\n      let urlEncoded = that.serverURL + url;\n      headers[\"user-agent\"] = USER_AGENT;\n      let body = data;\n\n      if (contentType) {\n        //request.type(type);\n        headers[\"Content-Type\"] = contentType;\n      } else {\n        //request.type(\"json\");\n        if (!headers[\"Content-Type\"]) {\n          headers[\"Content-Type\"] = \"application/json\";\n          body = JSON.stringify(data);\n        }\n      } // */\n\n\n      that.logger.log(\"internal\", LOG_ID + \"(post) url : \", urlEncoded, \", headers : \", headers, \", body : \", body);\n      Request({\n        method: 'POST',\n        preambleCRLF: true,\n        postambleCRLF: true,\n        url: urlEncoded,\n        headers: headers,\n        proxy: that.proxy && that.proxy.isProxyConfigured ? that.proxy.proxyURL : null,\n        agentOptions: {\n          secureProtocol: that.proxy.secureProtocol\n        },\n        body: body\n      }, (error, response, body) => {\n        if (error) {\n          that.logger.log(\"internalerror\", LOG_ID + \"(post) failed:\", error, \", url:\", urlEncoded);\n          return reject(\"post failed\");\n        } else {\n          if (response) {\n            if (response.statusCode) {\n              that.logger.log(\"info\", LOG_ID + \"(post) HTTP statusCode\", response.statusCode);\n\n              if (response.statusCode >= 200 && response.statusCode <= 206) {\n                if (!response.headers[\"content-type\"] || response.headers[\"content-type\"] && (response.headers[\"content-type\"].indexOf(\"json\") > -1 || response.headers[\"content-type\"].indexOf(\"csv\") > -1)) {\n                  let json = {};\n\n                  if (response.body && response.headers[\"content-type\"].indexOf(\"json\") > -1) {\n                    json = JSON.parse(response.body);\n                    resolve(json);\n                  } else {\n                    resolve(response.body);\n                  }\n                } else {\n                  return reject({\n                    code: -1,\n                    url: urlEncoded,\n                    msg: \"Bad content, please check your host\",\n                    details: \"\"\n                  });\n                }\n              } else {\n                let bodyjs = {};\n\n                if (that.hasJsonStructure(response.body)) {\n                  bodyjs = JSON.parse(response.body);\n                } else {\n                  bodyjs.errorMsg = response.body;\n                }\n\n                that.logger.warn(\"warn\", LOG_ID + \"(post) HTTP response.code != 200 \");\n                that.logger.warn(\"internal\", LOG_ID + \"(post) HTTP response.code != 200 , body : \", bodyjs);\n                let msg = response.statusMessage ? response.statusMessage : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\n                let errorMsgDetail = bodyjs ? bodyjs.errorDetails + (bodyjs.errorDetailsCode ? \". error code : \" + bodyjs.errorDetailsCode : \"\" || \"\") : \"\";\n                errorMsgDetail = errorMsgDetail ? errorMsgDetail : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\n                that.tokenExpirationControl(bodyjs);\n                return reject({\n                  code: response.statusCode,\n                  url: urlEncoded,\n                  msg: msg,\n                  details: errorMsgDetail,\n                  error: bodyjs\n                });\n              }\n            } else {\n              if (response.error && response.error.reason) {\n                that.logger.log(\"error\", LOG_ID + \"(post) HTTP security issue\", response.error.reason);\n                return reject({\n                  code: -1,\n                  url: urlEncoded,\n                  msg: response.error.reason,\n                  details: \"\"\n                });\n              } else {\n                that.logger.warn(\"error\", LOG_ID + \"(post) HTTP other issue.\");\n                that.logger.warn(\"internalerror\", LOG_ID + \"(post) HTTP other issue , response : \", JSON.stringify(response) + \" error : \" + response.message);\n                that.logger.log(\"internal\", LOG_ID + \"(post) HTTP other issue\", response);\n                return reject({\n                  code: -1,\n                  url: urlEncoded,\n                  msg: \"Unknown error\",\n                  details: response\n                });\n              }\n            }\n          } else {\n            return reject({\n              code: -1,\n              url: urlEncoded,\n              msg: \"ErrorManager while requesting\",\n              details: \"error\"\n            });\n          }\n        }\n      });\n    });\n  }\n\n  put(url, headers = {}, data, type) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\n      let urlEncoded = that.serverURL + url;\n      headers[\"user-agent\"] = USER_AGENT;\n      that.logger.log(\"internal\", LOG_ID + \"(put) url : \", urlEncoded, \", headers : \", headers, \", data : \", data);\n      let body = data;\n\n      if (type) {\n        //request.type(type);\n        headers[\"Content-Type\"] = type;\n      } else {\n        //request.type(\"json\");\n        if (!headers[\"Content-Type\"]) {\n          headers[\"Content-Type\"] = \"application/json\";\n          body = JSON.stringify(data);\n        }\n      } // */\n\n\n      Request({\n        method: 'PUT',\n        preambleCRLF: true,\n        postambleCRLF: true,\n        url: urlEncoded,\n        headers: headers,\n        proxy: that.proxy && that.proxy.isProxyConfigured ? that.proxy.proxyURL : null,\n        agentOptions: {\n          secureProtocol: that.proxy.secureProtocol\n        },\n        body: body\n      }, (error, response, body) => {\n        if (error) {\n          that.logger.log(\"internalerror\", LOG_ID + \"(put) put failed:\", error, ', url : ', urlEncoded);\n          return reject(\"put failed\");\n        } else {\n          if (response) {\n            if (response.statusCode) {\n              that.logger.log(\"info\", LOG_ID + \"(put) HTTP statusCode\", response.statusCode);\n\n              if (response.statusCode >= 200 && response.statusCode <= 206) {\n                if (!response.headers[\"content-type\"] || response.headers[\"content-type\"] && (response.headers[\"content-type\"].indexOf(\"json\") > -1 || response.headers[\"content-type\"].indexOf(\"csv\") > -1)) {\n                  let json = {};\n\n                  if (response.body && response.headers[\"content-type\"].indexOf(\"json\") > -1) {\n                    json = JSON.parse(response.body);\n                    resolve(json);\n                  } else {\n                    resolve(response.body);\n                  }\n                } else {\n                  return reject({\n                    code: -1,\n                    url: urlEncoded,\n                    msg: \"Bad content, please check your host\",\n                    details: \"\"\n                  });\n                }\n              } else {\n                let bodyjs = {};\n\n                if (that.hasJsonStructure(response.body)) {\n                  bodyjs = JSON.parse(response.body);\n                } else {\n                  bodyjs.errorMsg = response.body;\n                }\n\n                that.logger.warn(\"warn\", LOG_ID + \"(put) HTTP response.code != 200 \");\n                that.logger.warn(\"internalerror\", LOG_ID + \"(put) HTTP response.code != 200 , body : \", bodyjs);\n                let msg = response.statusMessage ? response.statusMessage : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\n                let errorMsgDetail = bodyjs ? bodyjs.errorDetails + (bodyjs.errorDetailsCode ? \". error code : \" + bodyjs.errorDetailsCode : \"\" || \"\") : \"\";\n                errorMsgDetail = errorMsgDetail ? errorMsgDetail : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\n                that.tokenExpirationControl(bodyjs);\n                return reject({\n                  code: response.statusCode,\n                  url: urlEncoded,\n                  msg: msg,\n                  details: errorMsgDetail,\n                  error: bodyjs\n                });\n              }\n            } else {\n              if (response.error && response.error.reason) {\n                that.logger.log(\"error\", LOG_ID + \"(put) HTTP security issue\", response.error.reason);\n                return reject({\n                  code: -1,\n                  url: urlEncoded,\n                  msg: response.error.reason,\n                  details: \"\"\n                });\n              } else {\n                that.logger.warn(\"warn\", LOG_ID + \"(put) HTTP other issue \");\n                that.logger.warn(\"internalerror\", LOG_ID + \"(put) HTTP other issue , response : \", JSON.stringify(response) + \" error : \" + response.message);\n                that.logger.log(\"internal\", LOG_ID + \"(put) HTTP other issue\", response);\n                return reject({\n                  code: -1,\n                  url: urlEncoded,\n                  msg: \"Unknown error\",\n                  details: response\n                });\n              }\n            }\n          } else {\n            return reject({\n              code: -1,\n              url: urlEncoded,\n              msg: \"ErrorManager while requesting\",\n              details: \"error\"\n            });\n          }\n        }\n      });\n    });\n  }\n\n  putBuffer(url, headers = {}, buffer) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      //that.logger.log(\"info\", LOG_ID + \"(putBuffer) option url\", that.serverURL + url);\n      //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\n      let urlEncoded = that.serverURL + url;\n      headers[\"user-agent\"] = USER_AGENT;\n      that.logger.log(\"internal\", LOG_ID + \"(putBuffer) url : \", urlEncoded);\n      Request({\n        method: 'PUT',\n        preambleCRLF: true,\n        postambleCRLF: true,\n        url: urlEncoded,\n        headers: headers,\n        proxy: that.proxy && that.proxy.isProxyConfigured ? that.proxy.proxyURL : null,\n        agentOptions: {\n          secureProtocol: that.proxy.secureProtocol\n        },\n        body: buffer\n      }, function (error, response, body) {\n        if (error) {\n          that.logger.log(\"internalerror\", LOG_ID + \"(putBuffer) upload failed:\", error);\n          return reject(\"upload failed\");\n        }\n\n        that.logger.log(\"internal\", LOG_ID + \"(putBuffer) Upload successful!  Server responded with:\", body);\n        resolve(body);\n      });\n    });\n  }\n\n  putStream(url, headers = {}, stream) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\n      let urlEncoded = that.serverURL + url;\n      that.logger.log(\"internal\", LOG_ID + \"(put) url : \", urlEncoded, \" stream fileName : \", stream.fileName);\n      headers[\"user-agent\"] = USER_AGENT;\n      let request = Request.put({\n        url: urlEncoded,\n        headers: headers,\n        proxy: that.proxy && that.proxy.isProxyConfigured ? that.proxy.proxyURL : null,\n        agentOptions: {\n          secureProtocol: that.proxy.secureProtocol\n        }\n      }).on(\"end\", () => {\n        that.logger.log(\"info\", LOG_ID + \"(get) successfull\");\n        that.logger.log(\"info\", LOG_ID + \"(get) get file buffer from Url\");\n        resolve(\"done\");\n      });\n      stream.pipe(request);\n      return request;\n    });\n  }\n\n  delete(url, headers = {}) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\n      let urlEncoded = that.serverURL + url;\n      that.logger.log(\"internal\", LOG_ID + \"(delete) url : \", urlEncoded, \", headers : \", headers);\n      headers[\"user-agent\"] = USER_AGENT;\n      let request = Request.delete({\n        url: urlEncoded,\n        headers: headers,\n        proxy: that.proxy && that.proxy.isProxyConfigured ? that.proxy.proxyURL : null,\n        agentOptions: {\n          secureProtocol: that.proxy.secureProtocol\n        }\n      }, (error, response, body) => {\n        if (error) {\n          return reject({\n            code: -1,\n            url: urlEncoded,\n            msg: \"ErrorManager while requesting\",\n            details: error\n          });\n        } else {\n          if (response) {\n            that.logger.log(\"info\", LOG_ID + \"(delete) HTTP code\", response.code);\n\n            if (response.statusCode >= 200 && response.statusCode <= 206) {\n              let bodyjs = {};\n\n              if (response.body) {\n                bodyjs = JSON.parse(response.body);\n              }\n\n              resolve(bodyjs);\n            } else {\n              let bodyjs = {};\n\n              if (that.hasJsonStructure(response.body)) {\n                bodyjs = JSON.parse(response.body);\n              } else {\n                bodyjs.errorMsg = response.body;\n              }\n\n              that.tokenExpirationControl(bodyjs);\n              return reject({\n                code: response.statusCode,\n                url: urlEncoded,\n                msg: response.body ? response.body.errorMsg || \"\" : \"\",\n                details: response.body ? response.body.errorDetails || \"\" : \"\",\n                error: bodyjs\n              });\n            }\n          }\n        }\n      });\n    });\n  }\n\n};\nHTTPService = __decorate([Utils_1.logEntryExit(LOG_ID)], HTTPService);\nexports.HTTPService = HTTPService;\nmodule.exports.HTTPService = HTTPService;","map":{"version":3,"sources":["../../src/lib/connection/HttpService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//let unirest = require(\"unirest\");\r\nconst Utils_1 = require(\"../common/Utils\");\r\nconst Request = require(\"request\");\r\nconst packageVersion = require(\"../../package.json\");\r\n//let http = require('http');\r\nconst urlParse = require(\"url\").parse;\r\nconst EventEmitter = require(\"events\").EventEmitter;\r\nconst humanize = require(\"humanize-number\");\r\nconst chalk = require(\"chalk\");\r\nconst debugHttp = require(\"debug-http\");\r\nconst LOG_ID = \"HTTP - \";\r\nlet colorCodes = {\r\n    5: \"red\",\r\n    4: \"yellow\",\r\n    3: \"cyan\",\r\n    2: \"green\",\r\n    1: \"green\"\r\n};\r\nfunction time(start) {\r\n    let delta;\r\n    // @ts-ignore\r\n    delta = new Date() - start;\r\n    delta = delta < 10000 ? delta + \"ms\" : Math.round(delta / 1000) + \"s\";\r\n    return humanize(delta);\r\n}\r\nconst USER_AGENT = \"node/\" + process.version + \" (\" + process.platform + \"; \" + process.arch + \") \" + \"Rainbow Sdk/\" + packageVersion.version;\r\nlet HTTPService = class HTTPService {\r\n    constructor(_http, _logger, _proxy, _evtEmitter) {\r\n        this.serverURL = _http.protocol + \"://\" + _http.host + \":\" + _http.port;\r\n        this._host = _http.host;\r\n        this.logger = _logger;\r\n        this.proxy = _proxy;\r\n        this.eventEmitter = _evtEmitter;\r\n        let that = this;\r\n        function debugHandler(request, options, cb) {\r\n            options = typeof options === \"string\" ? urlParse(options) : options;\r\n            let url = options.href || (options.protocol || \"http:\") + \"//\" + (options.host || options.hostname) + options.path;\r\n            let method = (options.method || \"GET\").toUpperCase();\r\n            let signature = method + \" \" + url;\r\n            let start = new Date();\r\n            let wasHandled = typeof cb === \"function\";\r\n            //setImmediate(console.log, chalk.gray('      → ' + signature));\r\n            that.logger.log(\"internal\", LOG_ID + \" \" + chalk.gray(\"      → \" + signature + \" : \" + JSON.stringify(options.headers, null, \"  \")));\r\n            return request(options, cb)\r\n                .on(\"response\", function (response) {\r\n                // Workaround for res._dump in Node.JS http client\r\n                // https://github.com/nodejs/node/blob/20285ad17755187ece16b8a5effeaa87f5407da2/lib/_http_client.js#L421-L427\r\n                if (!wasHandled && EventEmitter.listenerCount(response.req, \"response\") === 0) {\r\n                    response.resume();\r\n                }\r\n                let status = response.statusCode;\r\n                let s = status / 100 | 0;\r\n                that.logger.log(\"internal\", LOG_ID + \"  \" + chalk[colorCodes[s]](status) + \" ← \" + signature + \" \" + chalk.gray(time(start)));\r\n            })\r\n                .on(\"error\", function (err) {\r\n                that.logger.log(\"internalerror\", LOG_ID + \"  \" + chalk.red(\"xxx\") + \" ← \" + signature + \" \" + chalk.red(err.message));\r\n            });\r\n        }\r\n        if (that.logger.logHttp) {\r\n            debugHttp(debugHandler);\r\n        }\r\n    }\r\n    /*\r\n// usage\r\n// const [err, result] = safeJsonParse('[Invalid JSON}');\r\n// if (err) {\r\n//  console.log('Failed to parse JSON: ' + err.message);\r\n//  } else {\r\n//  console.log(result);\r\n//}\r\n\r\nsafeJsonParse(str) {\r\n   try {\r\n       return [null, JSON.parse(str)];\r\n   } catch (err) {\r\n       return [err];\r\n   }\r\n} // */\r\n    /**\r\n     *\r\n     */\r\n    hasJsonStructure(str) {\r\n        if (typeof str !== 'string')\r\n            return false;\r\n        try {\r\n            const result = JSON.parse(str);\r\n            const type = Object.prototype.toString.call(result);\r\n            return type === '[object Object]'\r\n                || type === '[object Array]';\r\n        }\r\n        catch (err) {\r\n            return false;\r\n        }\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    start() {\r\n        let that = this;\r\n        return new Promise((resolve) => {\r\n            that.logger.log(\"debug\", LOG_ID + \"(start) host used\", that._host);\r\n            that.logger.log(\"info\", LOG_ID + \"(start) REST URL\", that.serverURL);\r\n            resolve();\r\n        });\r\n    }\r\n    stop() {\r\n        let that = this;\r\n        return new Promise((resolve) => {\r\n            that.logger.log(\"info\", LOG_ID + \"(stop) Successfully stopped\");\r\n            resolve();\r\n        });\r\n    }\r\n    tokenExpirationControl(bodyjs) {\r\n        let that = this;\r\n        if (bodyjs.errorCode === 401 && bodyjs.errorDetails === \"jwt expired\") {\r\n            that.logger.log(\"debug\", LOG_ID + \"(tokenExpirationControl) rainbow_tokenexpired\");\r\n            that.eventEmitter.emit(\"rainbow_tokenexpired\");\r\n        }\r\n    }\r\n    getUrl(url, headers = {}, params) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                headers[\"user-agent\"] = USER_AGENT;\r\n                let urlEncoded = url;\r\n                let request = Request({\r\n                    url: urlEncoded,\r\n                    method: \"GET\",\r\n                    headers: headers,\r\n                    //params: params,\r\n                    proxy: (that.proxy && that.proxy.isProxyConfigured) ? that.proxy.proxyURL : null,\r\n                    agentOptions: {\r\n                        secureProtocol: that.proxy.secureProtocol\r\n                    }\r\n                }, (error, response, body) => {\r\n                    that.logger.log(\"info\", LOG_ID + \"(get) successfull\");\r\n                    if (error) {\r\n                        return reject({\r\n                            code: -1,\r\n                            msg: \"ErrorManager while requesting\",\r\n                            details: error\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (response) {\r\n                            if (response.statusCode) {\r\n                                that.logger.log(\"info\", LOG_ID + \"(get) HTTP statusCode defined : \", response.statusCode);\r\n                                if (response.statusCode >= 200 && response.statusCode <= 206) {\r\n                                    if (!response.headers[\"content-type\"] || (response.headers[\"content-type\"] && (response.headers[\"content-type\"].indexOf(\"json\") > -1 || response.headers[\"content-type\"].indexOf(\"csv\") > -1))) {\r\n                                        let json = {};\r\n                                        if (response.body && (response.headers[\"content-type\"].indexOf(\"json\") > -1)) {\r\n                                            json = JSON.parse(response.body);\r\n                                            resolve(json);\r\n                                        }\r\n                                        else {\r\n                                            resolve(response.body);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        return reject({\r\n                                            code: -1,\r\n                                            msg: \"Bad content, please check your host\",\r\n                                            details: \"\"\r\n                                        });\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    that.logger.warn(\"warn\", LOG_ID + \"(get) HTTP response.code != 200\");\r\n                                    that.logger.warn(\"internal\", LOG_ID + \"(get) HTTP response.code != 200 , bodyjs : \", response.body);\r\n                                    let bodyjs = {};\r\n                                    if (that.hasJsonStructure(response.body)) {\r\n                                        bodyjs = JSON.parse(response.body);\r\n                                    }\r\n                                    else {\r\n                                        bodyjs.errorMsg = response.body;\r\n                                    }\r\n                                    let msg = response.statusMessage ? response.statusMessage : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\r\n                                    let errorMsgDetail = bodyjs ? bodyjs.errorDetails + (bodyjs.errorDetailsCode ? \". error code : \" + bodyjs.errorDetailsCode : \"\" || \"\") : \"\";\r\n                                    errorMsgDetail = errorMsgDetail ? errorMsgDetail : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\r\n                                    that.tokenExpirationControl(bodyjs);\r\n                                    return reject({\r\n                                        code: response.statusCode,\r\n                                        msg: msg,\r\n                                        details: errorMsgDetail,\r\n                                        error: bodyjs\r\n                                    });\r\n                                }\r\n                            }\r\n                            else {\r\n                            }\r\n                        }\r\n                        else {\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            catch (err) {\r\n                that.logger.log(\"error\", LOG_ID + \"(get) HTTP ErrorManager\");\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(get) HTTP ErrorManager\", err);\r\n                return reject({\r\n                    code: -1,\r\n                    msg: \"Unknown error\",\r\n                    details: \"\"\r\n                });\r\n            }\r\n        });\r\n    }\r\n    get(url, headers = {}, params) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                headers[\"user-agent\"] = USER_AGENT;\r\n                that.logger.log(\"info\", LOG_ID + \"(get) url : \", (that.serverURL + url).match(/[a-z]+:\\/\\/[^:/]+(?::\\d+)?(?:\\/[^?]+)?(?:\\?)?/g));\r\n                that.logger.log(\"internal\", LOG_ID + \"(get) url : \", that.serverURL + url, \", headers : \", headers);\r\n                //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\r\n                let urlEncoded = that.serverURL + url;\r\n                if (headers.Accept && headers.Accept.indexOf(\"json\") > -1) {\r\n                    let request = Request({\r\n                        url: urlEncoded,\r\n                        method: \"GET\",\r\n                        headers: headers,\r\n                        params: params,\r\n                        proxy: (that.proxy && that.proxy.isProxyConfigured) ? that.proxy.proxyURL : null,\r\n                        agentOptions: {\r\n                            secureProtocol: that.proxy.secureProtocol\r\n                        }\r\n                    }, (error, response, body) => {\r\n                        that.logger.log(\"info\", LOG_ID + \"(get) successfull\");\r\n                        if (error) {\r\n                            return reject({\r\n                                code: -1,\r\n                                url: urlEncoded,\r\n                                msg: \"ErrorManager while requesting\",\r\n                                details: error\r\n                            });\r\n                        }\r\n                        else {\r\n                            if (response) {\r\n                                if (response.statusCode) {\r\n                                    /*response.statusCode = 504;\r\n                                    response.body = \"<html><body><h1>504 Gateway Time-out</h1>\\n\" +\r\n                                        \"The server didn't respond in time.\\n\" +\r\n                                        \"</body></html>\\n\";\r\n                                        // */\r\n                                    that.logger.log(\"info\", LOG_ID + \"(get) HTTP statusCode defined : \", response.statusCode);\r\n                                    if (response.statusCode >= 200 && response.statusCode <= 206) {\r\n                                        if (!response.headers[\"content-type\"] || (response.headers[\"content-type\"] && (response.headers[\"content-type\"].indexOf(\"json\") > -1 || response.headers[\"content-type\"].indexOf(\"csv\") > -1))) {\r\n                                            let json = {};\r\n                                            if (response.body && (response.headers[\"content-type\"].indexOf(\"json\") > -1)) {\r\n                                                json = JSON.parse(response.body);\r\n                                                resolve(json);\r\n                                            }\r\n                                            else {\r\n                                                resolve(response.body);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            return reject({\r\n                                                code: -1,\r\n                                                url: urlEncoded,\r\n                                                msg: \"Bad content, please check your host\",\r\n                                                details: \"\"\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        that.logger.warn(\"warn\", LOG_ID + \"(get) HTTP response.code != 200\");\r\n                                        that.logger.warn(\"internal\", LOG_ID + \"(get) HTTP response.code != 200 , bodyjs : \", response.body);\r\n                                        let bodyjs = {};\r\n                                        if (that.hasJsonStructure(response.body)) {\r\n                                            bodyjs = JSON.parse(response.body);\r\n                                        }\r\n                                        else {\r\n                                            bodyjs.errorMsg = response.body;\r\n                                        }\r\n                                        let msg = response.statusMessage ? response.statusMessage : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\r\n                                        let errorMsgDetail = bodyjs ? bodyjs.errorDetails + (bodyjs.errorDetailsCode ? \". error code : \" + bodyjs.errorDetailsCode : \"\" || \"\") : \"\";\r\n                                        errorMsgDetail = errorMsgDetail ? errorMsgDetail : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\r\n                                        that.tokenExpirationControl(bodyjs);\r\n                                        return reject({\r\n                                            code: response.statusCode,\r\n                                            url: urlEncoded,\r\n                                            msg: msg,\r\n                                            details: errorMsgDetail,\r\n                                            error: bodyjs\r\n                                        });\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (response.error && response.error.reason) {\r\n                                        that.logger.log(\"error\", LOG_ID + \"(get) HTTP security issue\", response.error.reason);\r\n                                        return reject({\r\n                                            code: -1,\r\n                                            url: urlEncoded,\r\n                                            msg: response.error.reason,\r\n                                            details: \"\"\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        that.logger.warn(\"warn\", LOG_ID + \"(get) HTTP other issue\");\r\n                                        that.logger.warn(\"internal\", LOG_ID + \"(get) HTTP other issue , response : \", JSON.stringify(response) + \" error : \" + response.message);\r\n                                        that.logger.log(\"internal\", LOG_ID + \"(get) HTTP other issue\", response);\r\n                                        return reject({\r\n                                            code: -1,\r\n                                            url: urlEncoded,\r\n                                            msg: \"Unknown error\",\r\n                                            details: response\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                return reject({\r\n                                    code: -1,\r\n                                    url: urlEncoded,\r\n                                    msg: \"ErrorManager while requesting\",\r\n                                    details: \"error\"\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    let buff = [];\r\n                    let err = {\r\n                        statusCode: null,\r\n                        statusMessage: null,\r\n                        contentType: null\r\n                    };\r\n                    let req = Request.get({\r\n                        url: urlEncoded,\r\n                        headers: headers,\r\n                        params: params,\r\n                        proxy: (that.proxy && that.proxy.isProxyConfigured) ? that.proxy.proxyURL : null,\r\n                        agentOptions: {\r\n                            secureProtocol: that.proxy.secureProtocol\r\n                        }\r\n                    }).on(\"response\", function (response) {\r\n                        that.logger.log(\"info\", LOG_ID + \"(get) status code:\" + response.statusCode); // 200\r\n                        that.logger.log(\"debug\", LOG_ID + \"(get) response headers: \" + response.headers[\"content-type\"]); // 'image/png'\r\n                        if (response.statusCode === 400) {\r\n                            req.abort();\r\n                            err.statusCode = response.statusCode;\r\n                            err.statusMessage = response.statusMessage;\r\n                            err.contentType = response.headers[\"content-type\"];\r\n                        }\r\n                    }).on(\"data\", (chunk) => {\r\n                        buff.push(chunk);\r\n                    }).on(\"error\", (error) => {\r\n                        that.logger.log(\"error\", LOG_ID, \"(get) error\");\r\n                        that.logger.log(\"internalerror\", LOG_ID, \"(get) error : \", error);\r\n                        that.logger.log(\"debug\", LOG_ID + \"(get) _exiting_\");\r\n                        return reject({\r\n                            code: -1,\r\n                            url: urlEncoded,\r\n                            msg: error.message,\r\n                            details: \"\"\r\n                        });\r\n                    }).on(\"end\", () => {\r\n                        that.logger.log(\"info\", LOG_ID + \"(get) successfull\");\r\n                        that.logger.log(\"info\", LOG_ID + \"(get) get file buffer from Url\");\r\n                        that.logger.log(\"debug\", LOG_ID + \"(get) _exiting_\");\r\n                        if (!err.statusCode) {\r\n                            let data = Buffer.concat(buff);\r\n                            resolve(data);\r\n                        }\r\n                        else {\r\n                            return reject({\r\n                                code: err.statusCode,\r\n                                url: urlEncoded,\r\n                                msg: err.statusMessage,\r\n                                details: \"\"\r\n                            });\r\n                        }\r\n                    }); // */\r\n                }\r\n            }\r\n            catch (err) {\r\n                that.logger.log(\"error\", LOG_ID + \"(get) HTTP ErrorManager\");\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(get) HTTP ErrorManager\", err);\r\n                return reject({\r\n                    code: -1,\r\n                    msg: \"Unknown error\",\r\n                    details: \"\"\r\n                });\r\n            }\r\n        });\r\n    }\r\n    post(url, headers = {}, data, contentType) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\r\n            let urlEncoded = that.serverURL + url;\r\n            headers[\"user-agent\"] = USER_AGENT;\r\n            let body = data;\r\n            if (contentType) {\r\n                //request.type(type);\r\n                headers[\"Content-Type\"] = contentType;\r\n            }\r\n            else {\r\n                //request.type(\"json\");\r\n                if (!headers[\"Content-Type\"]) {\r\n                    headers[\"Content-Type\"] = \"application/json\";\r\n                    body = JSON.stringify(data);\r\n                }\r\n            } // */\r\n            that.logger.log(\"internal\", LOG_ID + \"(post) url : \", urlEncoded, \", headers : \", headers, \", body : \", body);\r\n            Request({\r\n                method: 'POST',\r\n                preambleCRLF: true,\r\n                postambleCRLF: true,\r\n                url: urlEncoded,\r\n                headers: headers,\r\n                proxy: (that.proxy && that.proxy.isProxyConfigured) ? that.proxy.proxyURL : null,\r\n                agentOptions: {\r\n                    secureProtocol: that.proxy.secureProtocol\r\n                },\r\n                body: body\r\n            }, (error, response, body) => {\r\n                if (error) {\r\n                    that.logger.log(\"internalerror\", LOG_ID + \"(post) failed:\", error, \", url:\", urlEncoded);\r\n                    return reject(\"post failed\");\r\n                }\r\n                else {\r\n                    if (response) {\r\n                        if (response.statusCode) {\r\n                            that.logger.log(\"info\", LOG_ID + \"(post) HTTP statusCode\", response.statusCode);\r\n                            if (response.statusCode >= 200 && response.statusCode <= 206) {\r\n                                if (!response.headers[\"content-type\"] || (response.headers[\"content-type\"] && (response.headers[\"content-type\"].indexOf(\"json\") > -1 || response.headers[\"content-type\"].indexOf(\"csv\") > -1))) {\r\n                                    let json = {};\r\n                                    if (response.body && (response.headers[\"content-type\"].indexOf(\"json\") > -1)) {\r\n                                        json = JSON.parse(response.body);\r\n                                        resolve(json);\r\n                                    }\r\n                                    else {\r\n                                        resolve(response.body);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    return reject({\r\n                                        code: -1,\r\n                                        url: urlEncoded,\r\n                                        msg: \"Bad content, please check your host\",\r\n                                        details: \"\"\r\n                                    });\r\n                                }\r\n                            }\r\n                            else {\r\n                                let bodyjs = {};\r\n                                if (that.hasJsonStructure(response.body)) {\r\n                                    bodyjs = JSON.parse(response.body);\r\n                                }\r\n                                else {\r\n                                    bodyjs.errorMsg = response.body;\r\n                                }\r\n                                that.logger.warn(\"warn\", LOG_ID + \"(post) HTTP response.code != 200 \");\r\n                                that.logger.warn(\"internal\", LOG_ID + \"(post) HTTP response.code != 200 , body : \", bodyjs);\r\n                                let msg = response.statusMessage ? response.statusMessage : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\r\n                                let errorMsgDetail = bodyjs ? bodyjs.errorDetails + (bodyjs.errorDetailsCode ? \". error code : \" + bodyjs.errorDetailsCode : \"\" || \"\") : \"\";\r\n                                errorMsgDetail = errorMsgDetail ? errorMsgDetail : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\r\n                                that.tokenExpirationControl(bodyjs);\r\n                                return reject({\r\n                                    code: response.statusCode,\r\n                                    url: urlEncoded,\r\n                                    msg: msg,\r\n                                    details: errorMsgDetail,\r\n                                    error: bodyjs\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (response.error && response.error.reason) {\r\n                                that.logger.log(\"error\", LOG_ID + \"(post) HTTP security issue\", response.error.reason);\r\n                                return reject({\r\n                                    code: -1,\r\n                                    url: urlEncoded,\r\n                                    msg: response.error.reason,\r\n                                    details: \"\"\r\n                                });\r\n                            }\r\n                            else {\r\n                                that.logger.warn(\"error\", LOG_ID + \"(post) HTTP other issue.\");\r\n                                that.logger.warn(\"internalerror\", LOG_ID + \"(post) HTTP other issue , response : \", JSON.stringify(response) + \" error : \" + response.message);\r\n                                that.logger.log(\"internal\", LOG_ID + \"(post) HTTP other issue\", response);\r\n                                return reject({\r\n                                    code: -1,\r\n                                    url: urlEncoded,\r\n                                    msg: \"Unknown error\",\r\n                                    details: response\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        return reject({\r\n                            code: -1,\r\n                            url: urlEncoded,\r\n                            msg: \"ErrorManager while requesting\",\r\n                            details: \"error\"\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    put(url, headers = {}, data, type) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\r\n            let urlEncoded = that.serverURL + url;\r\n            headers[\"user-agent\"] = USER_AGENT;\r\n            that.logger.log(\"internal\", LOG_ID + \"(put) url : \", urlEncoded, \", headers : \", headers, \", data : \", data);\r\n            let body = data;\r\n            if (type) {\r\n                //request.type(type);\r\n                headers[\"Content-Type\"] = type;\r\n            }\r\n            else {\r\n                //request.type(\"json\");\r\n                if (!headers[\"Content-Type\"]) {\r\n                    headers[\"Content-Type\"] = \"application/json\";\r\n                    body = JSON.stringify(data);\r\n                }\r\n            } // */\r\n            Request({\r\n                method: 'PUT',\r\n                preambleCRLF: true,\r\n                postambleCRLF: true,\r\n                url: urlEncoded,\r\n                headers: headers,\r\n                proxy: (that.proxy && that.proxy.isProxyConfigured) ? that.proxy.proxyURL : null,\r\n                agentOptions: {\r\n                    secureProtocol: that.proxy.secureProtocol\r\n                },\r\n                body: body\r\n            }, (error, response, body) => {\r\n                if (error) {\r\n                    that.logger.log(\"internalerror\", LOG_ID + \"(put) put failed:\", error, ', url : ', urlEncoded);\r\n                    return reject(\"put failed\");\r\n                }\r\n                else {\r\n                    if (response) {\r\n                        if (response.statusCode) {\r\n                            that.logger.log(\"info\", LOG_ID + \"(put) HTTP statusCode\", response.statusCode);\r\n                            if (response.statusCode >= 200 && response.statusCode <= 206) {\r\n                                if (!response.headers[\"content-type\"] || (response.headers[\"content-type\"] && (response.headers[\"content-type\"].indexOf(\"json\") > -1 || response.headers[\"content-type\"].indexOf(\"csv\") > -1))) {\r\n                                    let json = {};\r\n                                    if (response.body && (response.headers[\"content-type\"].indexOf(\"json\") > -1)) {\r\n                                        json = JSON.parse(response.body);\r\n                                        resolve(json);\r\n                                    }\r\n                                    else {\r\n                                        resolve(response.body);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    return reject({\r\n                                        code: -1,\r\n                                        url: urlEncoded,\r\n                                        msg: \"Bad content, please check your host\",\r\n                                        details: \"\"\r\n                                    });\r\n                                }\r\n                            }\r\n                            else {\r\n                                let bodyjs = {};\r\n                                if (that.hasJsonStructure(response.body)) {\r\n                                    bodyjs = JSON.parse(response.body);\r\n                                }\r\n                                else {\r\n                                    bodyjs.errorMsg = response.body;\r\n                                }\r\n                                that.logger.warn(\"warn\", LOG_ID + \"(put) HTTP response.code != 200 \");\r\n                                that.logger.warn(\"internalerror\", LOG_ID + \"(put) HTTP response.code != 200 , body : \", bodyjs);\r\n                                let msg = response.statusMessage ? response.statusMessage : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\r\n                                let errorMsgDetail = bodyjs ? bodyjs.errorDetails + (bodyjs.errorDetailsCode ? \". error code : \" + bodyjs.errorDetailsCode : \"\" || \"\") : \"\";\r\n                                errorMsgDetail = errorMsgDetail ? errorMsgDetail : bodyjs ? bodyjs.errorMsg || \"\" : \"\";\r\n                                that.tokenExpirationControl(bodyjs);\r\n                                return reject({\r\n                                    code: response.statusCode,\r\n                                    url: urlEncoded,\r\n                                    msg: msg,\r\n                                    details: errorMsgDetail,\r\n                                    error: bodyjs\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (response.error && response.error.reason) {\r\n                                that.logger.log(\"error\", LOG_ID + \"(put) HTTP security issue\", response.error.reason);\r\n                                return reject({\r\n                                    code: -1,\r\n                                    url: urlEncoded,\r\n                                    msg: response.error.reason,\r\n                                    details: \"\"\r\n                                });\r\n                            }\r\n                            else {\r\n                                that.logger.warn(\"warn\", LOG_ID + \"(put) HTTP other issue \");\r\n                                that.logger.warn(\"internalerror\", LOG_ID + \"(put) HTTP other issue , response : \", JSON.stringify(response) + \" error : \" + response.message);\r\n                                that.logger.log(\"internal\", LOG_ID + \"(put) HTTP other issue\", response);\r\n                                return reject({\r\n                                    code: -1,\r\n                                    url: urlEncoded,\r\n                                    msg: \"Unknown error\",\r\n                                    details: response\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        return reject({\r\n                            code: -1,\r\n                            url: urlEncoded,\r\n                            msg: \"ErrorManager while requesting\",\r\n                            details: \"error\"\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    putBuffer(url, headers = {}, buffer) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            //that.logger.log(\"info\", LOG_ID + \"(putBuffer) option url\", that.serverURL + url);\r\n            //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\r\n            let urlEncoded = that.serverURL + url;\r\n            headers[\"user-agent\"] = USER_AGENT;\r\n            that.logger.log(\"internal\", LOG_ID + \"(putBuffer) url : \", urlEncoded);\r\n            Request({\r\n                method: 'PUT',\r\n                preambleCRLF: true,\r\n                postambleCRLF: true,\r\n                url: urlEncoded,\r\n                headers: headers,\r\n                proxy: (that.proxy && that.proxy.isProxyConfigured) ? that.proxy.proxyURL : null,\r\n                agentOptions: {\r\n                    secureProtocol: that.proxy.secureProtocol\r\n                },\r\n                body: buffer\r\n            }, function (error, response, body) {\r\n                if (error) {\r\n                    that.logger.log(\"internalerror\", LOG_ID + \"(putBuffer) upload failed:\", error);\r\n                    return reject(\"upload failed\");\r\n                }\r\n                that.logger.log(\"internal\", LOG_ID + \"(putBuffer) Upload successful!  Server responded with:\", body);\r\n                resolve(body);\r\n            });\r\n        });\r\n    }\r\n    putStream(url, headers = {}, stream) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\r\n            let urlEncoded = that.serverURL + url;\r\n            that.logger.log(\"internal\", LOG_ID + \"(put) url : \", urlEncoded, \" stream fileName : \", stream.fileName);\r\n            headers[\"user-agent\"] = USER_AGENT;\r\n            let request = Request.put({\r\n                url: urlEncoded,\r\n                headers: headers,\r\n                proxy: (that.proxy && that.proxy.isProxyConfigured) ? that.proxy.proxyURL : null,\r\n                agentOptions: {\r\n                    secureProtocol: that.proxy.secureProtocol\r\n                }\r\n            }).on(\"end\", () => {\r\n                that.logger.log(\"info\", LOG_ID + \"(get) successfull\");\r\n                that.logger.log(\"info\", LOG_ID + \"(get) get file buffer from Url\");\r\n                resolve(\"done\");\r\n            });\r\n            stream.pipe(request);\r\n            return request;\r\n        });\r\n    }\r\n    delete(url, headers = {}) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            //let urlEncoded = encodeURI(that.serverURL + url); // Can not be used because the data in url are allready encodeURIComponent\r\n            let urlEncoded = that.serverURL + url;\r\n            that.logger.log(\"internal\", LOG_ID + \"(delete) url : \", urlEncoded, \", headers : \", headers);\r\n            headers[\"user-agent\"] = USER_AGENT;\r\n            let request = Request.delete({\r\n                url: urlEncoded,\r\n                headers: headers,\r\n                proxy: (that.proxy && that.proxy.isProxyConfigured) ? that.proxy.proxyURL : null,\r\n                agentOptions: {\r\n                    secureProtocol: that.proxy.secureProtocol\r\n                }\r\n            }, (error, response, body) => {\r\n                if (error) {\r\n                    return reject({\r\n                        code: -1,\r\n                        url: urlEncoded,\r\n                        msg: \"ErrorManager while requesting\",\r\n                        details: error\r\n                    });\r\n                }\r\n                else {\r\n                    if (response) {\r\n                        that.logger.log(\"info\", LOG_ID + \"(delete) HTTP code\", response.code);\r\n                        if (response.statusCode >= 200 && response.statusCode <= 206) {\r\n                            let bodyjs = {};\r\n                            if (response.body) {\r\n                                bodyjs = JSON.parse(response.body);\r\n                            }\r\n                            resolve(bodyjs);\r\n                        }\r\n                        else {\r\n                            let bodyjs = {};\r\n                            if (that.hasJsonStructure(response.body)) {\r\n                                bodyjs = JSON.parse(response.body);\r\n                            }\r\n                            else {\r\n                                bodyjs.errorMsg = response.body;\r\n                            }\r\n                            that.tokenExpirationControl(bodyjs);\r\n                            return reject({\r\n                                code: response.statusCode,\r\n                                url: urlEncoded,\r\n                                msg: response.body ? response.body.errorMsg || \"\" : \"\",\r\n                                details: response.body ? response.body.errorDetails || \"\" : \"\",\r\n                                error: bodyjs\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n};\r\nHTTPService = __decorate([\r\n    Utils_1.logEntryExit(LOG_ID)\r\n], HTTPService);\r\nexports.HTTPService = HTTPService;\r\nmodule.exports.HTTPService = HTTPService;\r\n//# sourceMappingURL=HttpService.js.map"]},"metadata":{},"sourceType":"script"}