{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst GenericHandler = require(\"./genericHandler\");\n\nconst Utils_1 = require(\"../../common/Utils\");\n\nconst util = require('util');\n\nconst xml = require(\"@xmpp/xml\");\n\nconst LOG_ID = \"XMPP/HNDL/FAV - \";\nconst TYPE_CHAT = \"chat\";\nconst TYPE_GROUPCHAT = \"groupchat\";\nlet FavoriteEventHandler = class FavoriteEventHandler extends GenericHandler {\n  constructor(xmppService, channelsService) {\n    super(xmppService);\n    this.MESSAGE_CHAT = \"jabber:client.message.chat\";\n    this.MESSAGE_GROUPCHAT = \"jabber:client.message.groupchat\";\n    this.MESSAGE_WEBRTC = \"jabber:client.message.webrtc\";\n    this.MESSAGE_MANAGEMENT = \"jabber:client.message.management\";\n    this.MESSAGE_ERROR = \"jabber:client.message.error\";\n    this.MESSAGE_HEADLINE = \"jabber:client.message.headline\";\n    this.MESSAGE_CLOSE = \"jabber:client.message.headline\";\n    this.channelsService = channelsService;\n    let that = this;\n\n    this.onManagementMessageReceived = (msg, stanza) => {\n      try {\n        that.logger.log(\"internal\", LOG_ID + \"(onManagementMessageReceived) _entering_ : \", msg, stanza);\n        let children = stanza.children;\n        children.forEach(function (node) {\n          switch (node.getName()) {\n            case \"room\":\n              break;\n\n            case \"usersettings\":\n              break;\n\n            case \"userinvite\":\n              break;\n\n            case \"group\":\n              break;\n\n            case \"conversation\":\n              break;\n\n            case \"mute\":\n              break;\n\n            case \"unmute\":\n              break;\n\n            case \"file\":\n              break;\n\n            case \"thumbnail\":\n              break;\n\n            case \"channel-subscription\":\n            case \"channel\":\n              break;\n\n            case \"favorite\":\n              that.onFavoriteManagementMessageReceived(node);\n              break;\n\n            default:\n              that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) unmanaged management message node \" + node.getName());\n              break;\n          }\n        });\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! : \", err);\n      }\n    };\n\n    this.onFavoriteManagementMessageReceived = stanza => {\n      that.logger.log(\"internal\", LOG_ID + \"(onFavoriteManagementMessageReceived) _entering_ : \", stanza);\n\n      try {\n        let stanzaElem = stanza;\n        let favoriteElem = stanzaElem.find(\"favorite\");\n\n        if (favoriteElem) {\n          let fav = {\n            \"id\": favoriteElem.attr(\"id\"),\n            \"type\": favoriteElem.attr(\"type\"),\n            \"peerId\": favoriteElem.attr(\"peer_id\")\n          };\n          let action = favoriteElem.attr(\"action\");\n\n          if (action === 'create') {\n            that.eventEmitter.emit(\"evt_internal_favoritecreated_handle\", fav);\n          }\n\n          if (action === 'delete') {\n            that.eventEmitter.emit(\"evt_internal_favoritedeleted_handle\", fav);\n          }\n        }\n\n        return true;\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onFavoriteManagementMessageReceived) -- failure -- \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onFavoriteManagementMessageReceived) -- failure -- : \", err.message);\n        return true;\n      }\n      /*\n       // */\n\n    };\n\n    this.onReceiptMessageReceived = (msg, stanza) => {};\n\n    this.onErrorMessageReceived = (msg, stanza) => {\n      try {\n        if (stanza.getChild('no-store') != undefined) {// // Treated in conversation handler that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) The 'to' of the message can not received the message\");\n        } else {\n          that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) something goes wrong...\");\n          that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) something goes wrong... : \", msg, stanza);\n          that.eventEmitter.emit(\"evt_internal_xmpperror\", msg);\n        }\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! : \", err);\n      }\n    };\n\n    this.findAttrs = () => {};\n    /*\n    this.findChildren = (element) => {\n        try {\n            that.logger.log(\"debug\", LOG_ID + \"(findChildren) _entering_\");\n            that.logger.log(\"internal\", LOG_ID + \"(findChildren) _entering_\", element);\n            that.logger.log(\"error\", LOG_ID + \"(findChildren) findChildren element : \", element, \" name : \", element.getName());\n            let json = {};\n            //let result = null;\n            let children = element.children;\n            if (children.length > 0) {\n                json[element.getName()] = {};\n                let childrenJson = json[element.getName()];\n                children.forEach((elemt) => {\n                    // @ts-ignore\n                    if (typeof elemt.children === Array) {\n                        that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach Array : \", element, \", elemt : \", elemt);\n                        childrenJson[elemt.getName()] = elemt.children[0];\n                    }\n                    that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach element : \", element, \", elemt : \", elemt);\n                    childrenJson[elemt.getName()] = this.findChildren(elemt);\n                });\n                return json;\n            } else {\n                that.logger.log(\"error\", LOG_ID + \"(findChildren)  No children element : \", element);\n                return element.getText();\n            }\n            //return result;\n        } catch (err) {\n            that.logger.log(\"error\", LOG_ID + \"(findChildren) CATCH Error !!! : \", err);\n        }\n    };\n      */\n\n  }\n\n};\nFavoriteEventHandler = __decorate([Utils_1.logEntryExit(LOG_ID)], FavoriteEventHandler);\nexports.FavoriteEventHandler = FavoriteEventHandler;\nmodule.exports.FavoriteEventHandler = FavoriteEventHandler;","map":{"version":3,"sources":["../../../src/lib/connection/XMPPServiceHandler/favoriteEventHandler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GenericHandler = require(\"./genericHandler\");\nconst Utils_1 = require(\"../../common/Utils\");\nconst util = require('util');\nconst xml = require(\"@xmpp/xml\");\nconst LOG_ID = \"XMPP/HNDL/FAV - \";\nconst TYPE_CHAT = \"chat\";\nconst TYPE_GROUPCHAT = \"groupchat\";\nlet FavoriteEventHandler = class FavoriteEventHandler extends GenericHandler {\n    constructor(xmppService, channelsService) {\n        super(xmppService);\n        this.MESSAGE_CHAT = \"jabber:client.message.chat\";\n        this.MESSAGE_GROUPCHAT = \"jabber:client.message.groupchat\";\n        this.MESSAGE_WEBRTC = \"jabber:client.message.webrtc\";\n        this.MESSAGE_MANAGEMENT = \"jabber:client.message.management\";\n        this.MESSAGE_ERROR = \"jabber:client.message.error\";\n        this.MESSAGE_HEADLINE = \"jabber:client.message.headline\";\n        this.MESSAGE_CLOSE = \"jabber:client.message.headline\";\n        this.channelsService = channelsService;\n        let that = this;\n        this.onManagementMessageReceived = (msg, stanza) => {\n            try {\n                that.logger.log(\"internal\", LOG_ID + \"(onManagementMessageReceived) _entering_ : \", msg, stanza);\n                let children = stanza.children;\n                children.forEach(function (node) {\n                    switch (node.getName()) {\n                        case \"room\":\n                            break;\n                        case \"usersettings\":\n                            break;\n                        case \"userinvite\":\n                            break;\n                        case \"group\":\n                            break;\n                        case \"conversation\":\n                            break;\n                        case \"mute\":\n                            break;\n                        case \"unmute\":\n                            break;\n                        case \"file\":\n                            break;\n                        case \"thumbnail\":\n                            break;\n                        case \"channel-subscription\":\n                        case \"channel\":\n                            break;\n                        case \"favorite\":\n                            that.onFavoriteManagementMessageReceived(node);\n                            break;\n                        default:\n                            that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) unmanaged management message node \" + node.getName());\n                            break;\n                    }\n                });\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! : \", err);\n            }\n        };\n        this.onFavoriteManagementMessageReceived = (stanza) => {\n            that.logger.log(\"internal\", LOG_ID + \"(onFavoriteManagementMessageReceived) _entering_ : \", stanza);\n            try {\n                let stanzaElem = stanza;\n                let favoriteElem = stanzaElem.find(\"favorite\");\n                if (favoriteElem) {\n                    let fav = {\n                        \"id\": favoriteElem.attr(\"id\"),\n                        \"type\": favoriteElem.attr(\"type\"),\n                        \"peerId\": favoriteElem.attr(\"peer_id\"),\n                    };\n                    let action = favoriteElem.attr(\"action\");\n                    if (action === 'create') {\n                        that.eventEmitter.emit(\"evt_internal_favoritecreated_handle\", fav);\n                    }\n                    if (action === 'delete') {\n                        that.eventEmitter.emit(\"evt_internal_favoritedeleted_handle\", fav);\n                    }\n                }\n                return true;\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(onFavoriteManagementMessageReceived) -- failure -- \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(onFavoriteManagementMessageReceived) -- failure -- : \", err.message);\n                return true;\n            }\n            /*\n\n            // */\n        };\n        this.onReceiptMessageReceived = (msg, stanza) => {\n        };\n        this.onErrorMessageReceived = (msg, stanza) => {\n            try {\n                if (stanza.getChild('no-store') != undefined) {\n                    // // Treated in conversation handler that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) The 'to' of the message can not received the message\");\n                }\n                else {\n                    that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) something goes wrong...\");\n                    that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) something goes wrong... : \", msg, stanza);\n                    that.eventEmitter.emit(\"evt_internal_xmpperror\", msg);\n                }\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! : \", err);\n            }\n        };\n        this.findAttrs = () => {\n        };\n        /*\n        this.findChildren = (element) => {\n            try {\n                that.logger.log(\"debug\", LOG_ID + \"(findChildren) _entering_\");\n                that.logger.log(\"internal\", LOG_ID + \"(findChildren) _entering_\", element);\n                that.logger.log(\"error\", LOG_ID + \"(findChildren) findChildren element : \", element, \" name : \", element.getName());\n                let json = {};\n                //let result = null;\n                let children = element.children;\n                if (children.length > 0) {\n                    json[element.getName()] = {};\n                    let childrenJson = json[element.getName()];\n                    children.forEach((elemt) => {\n                        // @ts-ignore\n                        if (typeof elemt.children === Array) {\n                            that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach Array : \", element, \", elemt : \", elemt);\n                            childrenJson[elemt.getName()] = elemt.children[0];\n                        }\n                        that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach element : \", element, \", elemt : \", elemt);\n                        childrenJson[elemt.getName()] = this.findChildren(elemt);\n                    });\n                    return json;\n                } else {\n                    that.logger.log(\"error\", LOG_ID + \"(findChildren)  No children element : \", element);\n                    return element.getText();\n                }\n                //return result;\n            } catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(findChildren) CATCH Error !!! : \", err);\n            }\n        };\n\n         */\n    }\n};\nFavoriteEventHandler = __decorate([\n    Utils_1.logEntryExit(LOG_ID)\n], FavoriteEventHandler);\nexports.FavoriteEventHandler = FavoriteEventHandler;\nmodule.exports.FavoriteEventHandler = FavoriteEventHandler;\n//# sourceMappingURL=favoriteEventHandler.js.map"]},"metadata":{},"sourceType":"script"}