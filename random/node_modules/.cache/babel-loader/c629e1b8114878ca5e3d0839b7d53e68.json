{"ast":null,"code":"(function (root, factory) {\n  if (typeof exports === 'object') {\n    // CommonJS\n    factory(exports, module);\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['exports', 'module'], factory);\n  }\n})(this, function (exports, module) {\n  /**\r\n   * `Factory` constructor.\r\n   *\r\n   * @api public\r\n   */\n  function Factory() {\n    this._mechs = [];\n  }\n  /**\r\n   * Utilize the given `mech` with optional `name`, overridding the mechanism's\r\n   * default name.\r\n   *\r\n   * Examples:\r\n   *\r\n   *     factory.use(FooMechanism);\r\n   *\r\n   *     factory.use('XFOO', FooMechanism);\r\n   *\r\n   * @param {String|Mechanism} name\r\n   * @param {Mechanism} mech\r\n   * @return {Factory} for chaining\r\n   * @api public\r\n   */\n\n\n  Factory.prototype.use = function (name, mech) {\n    if (!mech) {\n      mech = name;\n      name = mech.prototype.name;\n    }\n\n    this._mechs.push({\n      name: name,\n      mech: mech\n    });\n\n    return this;\n  };\n  /**\r\n   * Create a new mechanism from supported list of `mechs`.\r\n   *\r\n   * If no mechanisms are supported, returns `null`.\r\n   *\r\n   * Examples:\r\n   *\r\n   *     var mech = factory.create(['FOO', 'BAR']);\r\n   *\r\n   * @param {Array} mechs\r\n   * @return {Mechanism}\r\n   * @api public\r\n   */\n\n\n  Factory.prototype.create = function (mechs) {\n    for (var i = 0, len = this._mechs.length; i < len; i++) {\n      for (var j = 0, jlen = mechs.length; j < jlen; j++) {\n        var entry = this._mechs[i];\n\n        if (entry.name == mechs[j]) {\n          return new entry.mech();\n        }\n      }\n    }\n\n    return null;\n  };\n\n  exports = module.exports = Factory;\n});","map":{"version":3,"sources":["C:/Users/Jose Johnson/Desktop/KanScrubs/random/node_modules/saslmechanisms/lib/factory.js"],"names":["root","factory","exports","module","define","amd","Factory","_mechs","prototype","use","name","mech","push","create","mechs","i","len","length","j","jlen","entry"],"mappings":"AAAC,WAASA,IAAT,EAAeC,OAAf,EAAwB;AACvB,MAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;AAC/B;AACAD,IAAAA,OAAO,CAACC,OAAD,EAAUC,MAAV,CAAP;AACD,GAHD,MAGO,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACrD;AACAD,IAAAA,MAAM,CAAC,CAAC,SAAD,EAAY,QAAZ,CAAD,EAAwBH,OAAxB,CAAN;AACD;AACF,CARA,EAQC,IARD,EAQO,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAEhC;;;;;AAKA,WAASG,OAAT,GAAmB;AACjB,SAAKC,MAAL,GAAc,EAAd;AACD;AAED;;;;;;;;;;;;;;;;;AAeAD,EAAAA,OAAO,CAACE,SAAR,CAAkBC,GAAlB,GAAwB,UAASC,IAAT,EAAeC,IAAf,EAAqB;AAC3C,QAAI,CAACA,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAGD,IAAP;AACAA,MAAAA,IAAI,GAAGC,IAAI,CAACH,SAAL,CAAeE,IAAtB;AACD;;AACD,SAAKH,MAAL,CAAYK,IAAZ,CAAiB;AAAEF,MAAAA,IAAI,EAAEA,IAAR;AAAcC,MAAAA,IAAI,EAAEA;AAApB,KAAjB;;AACA,WAAO,IAAP;AACD,GAPD;AASA;;;;;;;;;;;;;;;AAaAL,EAAAA,OAAO,CAACE,SAAR,CAAkBK,MAAlB,GAA2B,UAASC,KAAT,EAAgB;AACzC,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG,KAAKT,MAAL,CAAYU,MAAlC,EAA0CF,CAAC,GAAGC,GAA9C,EAAmDD,CAAC,EAApD,EAAwD;AACtD,WAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGL,KAAK,CAACG,MAA7B,EAAqCC,CAAC,GAAGC,IAAzC,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,YAAIE,KAAK,GAAG,KAAKb,MAAL,CAAYQ,CAAZ,CAAZ;;AACA,YAAIK,KAAK,CAACV,IAAN,IAAcI,KAAK,CAACI,CAAD,CAAvB,EAA4B;AAC1B,iBAAO,IAAIE,KAAK,CAACT,IAAV,EAAP;AACD;AACF;AACF;;AACD,WAAO,IAAP;AACD,GAVD;;AAYAT,EAAAA,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBI,OAA3B;AAED,CAtEA,CAAD","sourcesContent":["(function(root, factory) {\r\n  if (typeof exports === 'object') {\r\n    // CommonJS\r\n    factory(exports, module);\r\n  } else if (typeof define === 'function' && define.amd) {\r\n    // AMD\r\n    define(['exports', 'module'], factory);\r\n  }\r\n}(this, function(exports, module) {\r\n  \r\n  /**\r\n   * `Factory` constructor.\r\n   *\r\n   * @api public\r\n   */\r\n  function Factory() {\r\n    this._mechs = [];\r\n  }\r\n  \r\n  /**\r\n   * Utilize the given `mech` with optional `name`, overridding the mechanism's\r\n   * default name.\r\n   *\r\n   * Examples:\r\n   *\r\n   *     factory.use(FooMechanism);\r\n   *\r\n   *     factory.use('XFOO', FooMechanism);\r\n   *\r\n   * @param {String|Mechanism} name\r\n   * @param {Mechanism} mech\r\n   * @return {Factory} for chaining\r\n   * @api public\r\n   */\r\n  Factory.prototype.use = function(name, mech) {\r\n    if (!mech) {\r\n      mech = name;\r\n      name = mech.prototype.name;\r\n    }\r\n    this._mechs.push({ name: name, mech: mech });\r\n    return this;\r\n  };\r\n  \r\n  /**\r\n   * Create a new mechanism from supported list of `mechs`.\r\n   *\r\n   * If no mechanisms are supported, returns `null`.\r\n   *\r\n   * Examples:\r\n   *\r\n   *     var mech = factory.create(['FOO', 'BAR']);\r\n   *\r\n   * @param {Array} mechs\r\n   * @return {Mechanism}\r\n   * @api public\r\n   */\r\n  Factory.prototype.create = function(mechs) {\r\n    for (var i = 0, len = this._mechs.length; i < len; i++) {\r\n      for (var j = 0, jlen = mechs.length; j < jlen; j++) {\r\n        var entry = this._mechs[i];\r\n        if (entry.name == mechs[j]) {\r\n          return new entry.mech();\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  exports = module.exports = Factory;\r\n  \r\n}));\r\n"]},"metadata":{},"sourceType":"script"}