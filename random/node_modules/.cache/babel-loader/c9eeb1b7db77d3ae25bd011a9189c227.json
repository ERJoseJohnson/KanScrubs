{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst GenericHandler = require(\"./genericHandler\");\n\nconst Utils_1 = require(\"../../common/Utils\");\n\nconst util = require('util');\n\nconst xml = require(\"@xmpp/xml\");\n\nconst LOG_ID = \"XMPP/HNDL/INVT - \";\nconst TYPE_CHAT = \"chat\";\nconst TYPE_GROUPCHAT = \"groupchat\";\nlet InvitationEventHandler = class InvitationEventHandler extends GenericHandler {\n  constructor(xmppService, invitationService) {\n    super(xmppService);\n    this.MESSAGE_CHAT = \"jabber:client.message.chat\";\n    this.MESSAGE_GROUPCHAT = \"jabber:client.message.groupchat\";\n    this.MESSAGE_WEBRTC = \"jabber:client.message.webrtc\";\n    this.MESSAGE_MANAGEMENT = \"jabber:client.message.management\";\n    this.MESSAGE_ERROR = \"jabber:client.message.error\";\n    this.MESSAGE_HEADLINE = \"jabber:client.message.headline\";\n    this.MESSAGE_CLOSE = \"jabber:client.message.headline\";\n    this.invitationService = invitationService;\n    let that = this;\n\n    this.onManagementMessageReceived = (msg, stanza) => {\n      try {\n        that.logger.log(\"internal\", LOG_ID + \"(onManagementMessageReceived) _entering_ : \", msg, stanza);\n        let children = stanza.children;\n        children.forEach(function (node) {\n          switch (node.getName()) {\n            case \"room\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"usersettings\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"group\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"conversation\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"mute\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"unmute\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"file\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"thumbnail\":\n              // treated in conversationEventHandler\n              break;\n\n            case \"channel-subscription\": // treated in channelEventHandler\n\n            case \"userinvite\":\n              // treated  also in conversationEventHandler\n              that.onInvitationManagementMessageReceived(node);\n              break;\n\n            case \"favorite\":\n              // treated in favoriteEventHandler\n              break;\n\n            default:\n              that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) unmanaged management message node \" + node.getName());\n              break;\n          }\n        });\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! : \", err);\n      }\n    };\n    /*this.onHeadlineMessageReceived = (msg, stanza) => {\r\n        try {\r\n            that.logger.log(\"internal\", LOG_ID + \"(onHeadlineMessageReceived) _entering_ : \", msg, stanza);\r\n            that.logger.log(\"info\", LOG_ID + \"(onHeadlineMessageReceived) channel message received\");\r\n              that.logger.log(\"info\", LOG_ID + \"(onHeadlineMessageReceived) channel message received\");\r\n              let eventNode = stanza.children[0];\r\n            if (!eventNode) {\r\n                that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived eventNode is empty\");\r\n                that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\r\n                that.logger.log(\"internal\", LOG_ID + util.inspect(stanza));\r\n                return;\r\n            }\r\n            let items = eventNode.children[0];\r\n            if (!items) {\r\n                that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived items is empty\");\r\n                that.logger.log(\"internal\", LOG_ID + util.inspect(eventNode));\r\n                that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\r\n                return;\r\n            }\r\n            let item = items.children[0];\r\n            if (!item) {\r\n                that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived item is empty\");\r\n                that.logger.log(\"internal\", LOG_ID + util.inspect(items));\r\n                that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\r\n                return;\r\n            }\r\n            let entry = item.children[0];\r\n            if (!entry) {\r\n                that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) onHeadlineMessageReceived entry is empty\");\r\n                that.logger.log(\"internal\", LOG_ID + util.inspect(item));\r\n                that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\r\n                //return;\r\n            }\r\n              switch (item.name) {\r\n                case \"retract\": {\r\n                    let messageId = item.attrs ? item.attrs.id || null : null;\r\n                    if (messageId === null) {\r\n                        that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel retract received, but id is empty. So ignored.\");\r\n                    } else {\r\n                        let message = { messageId: null};\r\n                        message.messageId = item.attrs.id;\r\n                        that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) channel retract received, for messageId \" + message.messageId);\r\n                        that.eventEmitter.emit(\"evt_internal_channelmessagedeletedreceived\", message);\r\n                    }\r\n                }\r\n                    break;\r\n                case \"item\": {\r\n                    if (entry) {\r\n                          let message = {\r\n                            \"messageId\": item.attrs.id,\r\n                            \"channelId\": entry.attrs.channelId,\r\n                            \"fromJid\": entry.attrs.from,\r\n                            \"message\": entry.getChild(\"message\") ? entry.getChild(\"message\").getText() || \"\" : \"\",\r\n                            \"title\": entry.getChild(\"title\") ? entry.getChild(\"title\").getText() || \"\" : \"\",\r\n                            \"url\": entry.getChild(\"url\") ? entry.getChild(\"url\").getText() || \"\" : \"\",\r\n                            \"date\": new Date(entry.attrs.timestamp),\r\n                            \"images\": new Array()\r\n                        };\r\n                        let images = entry.getChildren(\"images\");\r\n                        if (Array.isArray(images)) {\r\n                            images.forEach((image) => {\r\n                                //that.logger.log(\"info\", LOG_ID + \"(handleXMPPConnection) channel entry images.\", image);\r\n                                let id = image.getChild(\"id\") ? image.getChild(\"id\").getText() || null : null;\r\n                                if (id === null) {\r\n                                    that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel image entry received, but image id empty. So ignored.\");\r\n                                } else {\r\n                                    message.images.push(id);\r\n                                }\r\n                            });\r\n                        }\r\n                          that.eventEmitter.emit(\"evt_internal_channelitemreceived\", message);\r\n                    } else {\r\n                        that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel entry received, but empty. It can not be parsed, so ignored.\");\r\n                        that.logger.log(\"internalerror\", LOG_ID + \"(onHeadlineMessageReceived) channel entry received, but empty. It can not be parsed, so ignored. : \", stanza);\r\n                    }\r\n                }\r\n                    break;\r\n                default: {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) channel unknown event \" + item.name + \" received\");\r\n                }\r\n                    break;\r\n              }\r\n        } catch (err) {\r\n            that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) CATCH Error !!! \");\r\n            that.logger.log(\"internalerror\", LOG_ID + \"(onHeadlineMessageReceived) CATCH Error !!! : \", err);\r\n        }\r\n    };// */\n\n\n    this.onInvitationManagementMessageReceived = stanza => {\n      that.logger.log(\"internal\", LOG_ID + \"(onInvitationManagementMessageReceived) _entering_ : \", stanza);\n\n      try {\n        let userInviteElem = stanza; //.find(\"userinvite\");\n\n        if (userInviteElem && userInviteElem.attrs) {\n          let id = userInviteElem.attrs.id;\n          let type = userInviteElem.attrs.type;\n          let action = userInviteElem.attrs.action;\n          let status = userInviteElem.attrs.status;\n          let invitation = {\n            id,\n            type,\n            action,\n            status\n          };\n          that.eventEmitter.emit(\"evt_internal_invitationsManagementUpdate\", invitation);\n          return true;\n        } else {\n          that.logger.log(\"error\", LOG_ID + \"(onInvitationManagementMessageReceived) userInvite empty.\");\n          that.logger.log(\"internalerror\", LOG_ID + \"(onInvitationManagementMessageReceived) userInvite empty : \", stanza);\n        }\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onInvitationManagementMessageReceived) CATCH Error !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onInvitationManagementMessageReceived) CATCH Error !!! : \" + err.message);\n        return true;\n      }\n    };\n\n    this.onReceiptMessageReceived = (msg, stanza) => {};\n\n    this.onErrorMessageReceived = (msg, stanza) => {\n      try {\n        if (stanza.getChild('no-store') != undefined) {// // Treated in conversation handler that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) The 'to' of the message can not received the message\");\n        } else {\n          that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) something goes wrong...\", msg, stanza);\n          that.eventEmitter.emit(\"evt_internal_xmpperror\", msg);\n        }\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! : \", err);\n      }\n    };\n\n    this.findAttrs = () => {};\n    /*\r\n    this.findChildren = (element) => {\r\n        try {\r\n            that.logger.log(\"debug\", LOG_ID + \"(findChildren) _entering_\");\r\n            that.logger.log(\"internal\", LOG_ID + \"(findChildren) _entering_\", element);\r\n            that.logger.log(\"error\", LOG_ID + \"(findChildren) findChildren element : \", element, \" name : \", element.getName());\r\n            let json = {};\r\n            //let result = null;\r\n            let children = element.children;\r\n            if (children.length > 0) {\r\n                json[element.getName()] = {};\r\n                let childrenJson = json[element.getName()];\r\n                children.forEach((elemt) => {\r\n                    // @ts-ignore\r\n                    if (typeof elemt.children === Array) {\r\n                        that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach Array : \", element, \", elemt : \", elemt);\r\n                        childrenJson[elemt.getName()] = elemt.children[0];\r\n                    }\r\n                    that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach element : \", element, \", elemt : \", elemt);\r\n                    childrenJson[elemt.getName()] = this.findChildren(elemt);\r\n                });\r\n                return json;\r\n            } else {\r\n                that.logger.log(\"error\", LOG_ID + \"(findChildren)  No children element : \", element);\r\n                return element.getText();\r\n            }\r\n            //return result;\r\n        } catch (err) {\r\n            that.logger.log(\"error\", LOG_ID + \"(findChildren) CATCH Error !!! : \", err);\r\n        }\r\n    };\r\n     */\n\n  }\n\n};\nInvitationEventHandler = __decorate([Utils_1.logEntryExit(LOG_ID)], InvitationEventHandler);\nexports.InvitationEventHandler = InvitationEventHandler;\nmodule.exports.InvitationEventHandler = InvitationEventHandler;","map":{"version":3,"sources":["../../../src/lib/connection/XMPPServiceHandler/invitationEventHandler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst GenericHandler = require(\"./genericHandler\");\r\nconst Utils_1 = require(\"../../common/Utils\");\r\nconst util = require('util');\r\nconst xml = require(\"@xmpp/xml\");\r\nconst LOG_ID = \"XMPP/HNDL/INVT - \";\r\nconst TYPE_CHAT = \"chat\";\r\nconst TYPE_GROUPCHAT = \"groupchat\";\r\nlet InvitationEventHandler = class InvitationEventHandler extends GenericHandler {\r\n    constructor(xmppService, invitationService) {\r\n        super(xmppService);\r\n        this.MESSAGE_CHAT = \"jabber:client.message.chat\";\r\n        this.MESSAGE_GROUPCHAT = \"jabber:client.message.groupchat\";\r\n        this.MESSAGE_WEBRTC = \"jabber:client.message.webrtc\";\r\n        this.MESSAGE_MANAGEMENT = \"jabber:client.message.management\";\r\n        this.MESSAGE_ERROR = \"jabber:client.message.error\";\r\n        this.MESSAGE_HEADLINE = \"jabber:client.message.headline\";\r\n        this.MESSAGE_CLOSE = \"jabber:client.message.headline\";\r\n        this.invitationService = invitationService;\r\n        let that = this;\r\n        this.onManagementMessageReceived = (msg, stanza) => {\r\n            try {\r\n                that.logger.log(\"internal\", LOG_ID + \"(onManagementMessageReceived) _entering_ : \", msg, stanza);\r\n                let children = stanza.children;\r\n                children.forEach(function (node) {\r\n                    switch (node.getName()) {\r\n                        case \"room\":\r\n                            // treated in conversationEventHandler\r\n                            break;\r\n                        case \"usersettings\":\r\n                            // treated in conversationEventHandler\r\n                            break;\r\n                        case \"group\":\r\n                            // treated in conversationEventHandler\r\n                            break;\r\n                        case \"conversation\":\r\n                            // treated in conversationEventHandler\r\n                            break;\r\n                        case \"mute\":\r\n                            // treated in conversationEventHandler\r\n                            break;\r\n                        case \"unmute\":\r\n                            // treated in conversationEventHandler\r\n                            break;\r\n                        case \"file\":\r\n                            // treated in conversationEventHandler\r\n                            break;\r\n                        case \"thumbnail\":\r\n                            // treated in conversationEventHandler\r\n                            break;\r\n                        case \"channel-subscription\":\r\n                        // treated in channelEventHandler\r\n                        case \"userinvite\":\r\n                            // treated  also in conversationEventHandler\r\n                            that.onInvitationManagementMessageReceived(node);\r\n                            break;\r\n                        case \"favorite\":\r\n                            // treated in favoriteEventHandler\r\n                            break;\r\n                        default:\r\n                            that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) unmanaged management message node \" + node.getName());\r\n                            break;\r\n                    }\r\n                });\r\n            }\r\n            catch (err) {\r\n                that.logger.log(\"error\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! \");\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(onManagementMessageReceived) CATCH Error !!! : \", err);\r\n            }\r\n        };\r\n        /*this.onHeadlineMessageReceived = (msg, stanza) => {\r\n            try {\r\n                that.logger.log(\"internal\", LOG_ID + \"(onHeadlineMessageReceived) _entering_ : \", msg, stanza);\r\n                that.logger.log(\"info\", LOG_ID + \"(onHeadlineMessageReceived) channel message received\");\r\n\r\n                that.logger.log(\"info\", LOG_ID + \"(onHeadlineMessageReceived) channel message received\");\r\n\r\n                let eventNode = stanza.children[0];\r\n                if (!eventNode) {\r\n                    that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived eventNode is empty\");\r\n                    that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\r\n                    that.logger.log(\"internal\", LOG_ID + util.inspect(stanza));\r\n                    return;\r\n                }\r\n                let items = eventNode.children[0];\r\n                if (!items) {\r\n                    that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived items is empty\");\r\n                    that.logger.log(\"internal\", LOG_ID + util.inspect(eventNode));\r\n                    that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\r\n                    return;\r\n                }\r\n                let item = items.children[0];\r\n                if (!item) {\r\n                    that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) ERROR in onHeadlineMessageReceived item is empty\");\r\n                    that.logger.log(\"internal\", LOG_ID + util.inspect(items));\r\n                    that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\r\n                    return;\r\n                }\r\n                let entry = item.children[0];\r\n                if (!entry) {\r\n                    that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) onHeadlineMessageReceived entry is empty\");\r\n                    that.logger.log(\"internal\", LOG_ID + util.inspect(item));\r\n                    that.logger.log(\"internal\", LOG_ID + \", stanza: \" + stanza);\r\n                    //return;\r\n                }\r\n\r\n                switch (item.name) {\r\n                    case \"retract\": {\r\n                        let messageId = item.attrs ? item.attrs.id || null : null;\r\n                        if (messageId === null) {\r\n                            that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel retract received, but id is empty. So ignored.\");\r\n                        } else {\r\n                            let message = { messageId: null};\r\n                            message.messageId = item.attrs.id;\r\n                            that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) channel retract received, for messageId \" + message.messageId);\r\n                            that.eventEmitter.emit(\"evt_internal_channelmessagedeletedreceived\", message);\r\n                        }\r\n                    }\r\n                        break;\r\n                    case \"item\": {\r\n                        if (entry) {\r\n\r\n                            let message = {\r\n                                \"messageId\": item.attrs.id,\r\n                                \"channelId\": entry.attrs.channelId,\r\n                                \"fromJid\": entry.attrs.from,\r\n                                \"message\": entry.getChild(\"message\") ? entry.getChild(\"message\").getText() || \"\" : \"\",\r\n                                \"title\": entry.getChild(\"title\") ? entry.getChild(\"title\").getText() || \"\" : \"\",\r\n                                \"url\": entry.getChild(\"url\") ? entry.getChild(\"url\").getText() || \"\" : \"\",\r\n                                \"date\": new Date(entry.attrs.timestamp),\r\n                                \"images\": new Array()\r\n                            };\r\n                            let images = entry.getChildren(\"images\");\r\n                            if (Array.isArray(images)) {\r\n                                images.forEach((image) => {\r\n                                    //that.logger.log(\"info\", LOG_ID + \"(handleXMPPConnection) channel entry images.\", image);\r\n                                    let id = image.getChild(\"id\") ? image.getChild(\"id\").getText() || null : null;\r\n                                    if (id === null) {\r\n                                        that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel image entry received, but image id empty. So ignored.\");\r\n                                    } else {\r\n                                        message.images.push(id);\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                            that.eventEmitter.emit(\"evt_internal_channelitemreceived\", message);\r\n                        } else {\r\n                            that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) channel entry received, but empty. It can not be parsed, so ignored.\");\r\n                            that.logger.log(\"internalerror\", LOG_ID + \"(onHeadlineMessageReceived) channel entry received, but empty. It can not be parsed, so ignored. : \", stanza);\r\n                        }\r\n                    }\r\n                        break;\r\n                    default: {\r\n                        that.logger.log(\"debug\", LOG_ID + \"(onHeadlineMessageReceived) channel unknown event \" + item.name + \" received\");\r\n                    }\r\n                        break;\r\n\r\n                }\r\n            } catch (err) {\r\n                that.logger.log(\"error\", LOG_ID + \"(onHeadlineMessageReceived) CATCH Error !!! \");\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(onHeadlineMessageReceived) CATCH Error !!! : \", err);\r\n            }\r\n        };// */\r\n        this.onInvitationManagementMessageReceived = (stanza) => {\r\n            that.logger.log(\"internal\", LOG_ID + \"(onInvitationManagementMessageReceived) _entering_ : \", stanza);\r\n            try {\r\n                let userInviteElem = stanza; //.find(\"userinvite\");\r\n                if (userInviteElem && userInviteElem.attrs) {\r\n                    let id = userInviteElem.attrs.id;\r\n                    let type = userInviteElem.attrs.type;\r\n                    let action = userInviteElem.attrs.action;\r\n                    let status = userInviteElem.attrs.status;\r\n                    let invitation = {\r\n                        id,\r\n                        type,\r\n                        action,\r\n                        status\r\n                    };\r\n                    that.eventEmitter.emit(\"evt_internal_invitationsManagementUpdate\", invitation);\r\n                    return true;\r\n                }\r\n                else {\r\n                    that.logger.log(\"error\", LOG_ID + \"(onInvitationManagementMessageReceived) userInvite empty.\");\r\n                    that.logger.log(\"internalerror\", LOG_ID + \"(onInvitationManagementMessageReceived) userInvite empty : \", stanza);\r\n                }\r\n            }\r\n            catch (err) {\r\n                that.logger.log(\"error\", LOG_ID + \"(onInvitationManagementMessageReceived) CATCH Error !!! \");\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(onInvitationManagementMessageReceived) CATCH Error !!! : \" + err.message);\r\n                return true;\r\n            }\r\n        };\r\n        this.onReceiptMessageReceived = (msg, stanza) => {\r\n        };\r\n        this.onErrorMessageReceived = (msg, stanza) => {\r\n            try {\r\n                if (stanza.getChild('no-store') != undefined) {\r\n                    // // Treated in conversation handler that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) The 'to' of the message can not received the message\");\r\n                }\r\n                else {\r\n                    that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) something goes wrong...\", msg, stanza);\r\n                    that.eventEmitter.emit(\"evt_internal_xmpperror\", msg);\r\n                }\r\n            }\r\n            catch (err) {\r\n                that.logger.log(\"error\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! \");\r\n                that.logger.log(\"internalerror\", LOG_ID + \"(onErrorMessageReceived) CATCH Error !!! : \", err);\r\n            }\r\n        };\r\n        this.findAttrs = () => {\r\n        };\r\n        /*\r\n        this.findChildren = (element) => {\r\n            try {\r\n                that.logger.log(\"debug\", LOG_ID + \"(findChildren) _entering_\");\r\n                that.logger.log(\"internal\", LOG_ID + \"(findChildren) _entering_\", element);\r\n                that.logger.log(\"error\", LOG_ID + \"(findChildren) findChildren element : \", element, \" name : \", element.getName());\r\n                let json = {};\r\n                //let result = null;\r\n                let children = element.children;\r\n                if (children.length > 0) {\r\n                    json[element.getName()] = {};\r\n                    let childrenJson = json[element.getName()];\r\n                    children.forEach((elemt) => {\r\n                        // @ts-ignore\r\n                        if (typeof elemt.children === Array) {\r\n                            that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach Array : \", element, \", elemt : \", elemt);\r\n                            childrenJson[elemt.getName()] = elemt.children[0];\r\n                        }\r\n                        that.logger.log(\"error\", LOG_ID + \"(findChildren)  children.forEach element : \", element, \", elemt : \", elemt);\r\n                        childrenJson[elemt.getName()] = this.findChildren(elemt);\r\n                    });\r\n                    return json;\r\n                } else {\r\n                    that.logger.log(\"error\", LOG_ID + \"(findChildren)  No children element : \", element);\r\n                    return element.getText();\r\n                }\r\n                //return result;\r\n            } catch (err) {\r\n                that.logger.log(\"error\", LOG_ID + \"(findChildren) CATCH Error !!! : \", err);\r\n            }\r\n        };\r\n         */\r\n    }\r\n};\r\nInvitationEventHandler = __decorate([\r\n    Utils_1.logEntryExit(LOG_ID)\r\n], InvitationEventHandler);\r\nexports.InvitationEventHandler = InvitationEventHandler;\r\nmodule.exports.InvitationEventHandler = InvitationEventHandler;\r\n//# sourceMappingURL=invitationEventHandler.js.map"]},"metadata":{},"sourceType":"script"}