{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst XMPPUtils_1 = require(\"../../common/XMPPUtils\");\n\nconst Utils_1 = require(\"../../common/Utils\");\n\nconst Conversation_1 = require(\"../../common/models/Conversation\");\n\nconst util = require('util');\n\nconst xml = require(\"@xmpp/xml\");\n\nconst LOG_ID = \"S2S/HNDL - \";\nconst TYPE_CHAT = \"chat\";\nconst TYPE_GROUPCHAT = \"groupchat\";\nlet S2SServiceEventHandler = class S2SServiceEventHandler {\n  constructor(_im, _application, _eventEmitter, _logger, _hostCallback) {\n    this._logger = _logger;\n    this._eventEmitter = _eventEmitter;\n    this.shouldSendReadReceipt = _im.sendReadReceipt;\n    this.callbackAbsolutePath = _hostCallback;\n    this.xmppUtils = XMPPUtils_1.XMPPUTils.getXMPPUtils();\n  }\n\n  setAccount(account) {\n    let that = this;\n    that.jid_im = account.jid_im;\n    that.jid_tel = account.jid_tel;\n    that.jid_password = account.jid_password;\n    that.userId = account.id;\n    that.jid = account.jid_im;\n  }\n\n  handleS2SEvent(event) {\n    let that = this;\n\n    if (event === undefined) {\n      return;\n    }\n\n    let body = event.body;\n    let methodHttp = event.method;\n    let baseUrl = event.baseUrl;\n    let originalUrl = event.originalUrl;\n    let requestedPath = originalUrl;\n\n    that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) *************************************************\");\n\n    that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) received an S2S EVENT : \");\n\n    that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) METHOD : \", methodHttp);\n\n    that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) BASELURL : \", baseUrl);\n\n    that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) ORIGINALURL : \", originalUrl);\n\n    that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) EVENT BODY : \", that._logger.colors.events(body));\n\n    that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) *************************************************\");\n\n    if (String.prototype.toUpperCase.call(methodHttp + \"\") != \"POST\") {\n      that._logger.log(\"error\", LOG_ID + \"(handleS2SEvent) Don't manage this request - Invalid HttpVerb - HttpVerb:[\", methodHttp, \"] - Path:[host : \", event.headers.host, \", path : \", requestedPath, \"]\");\n\n      return false;\n    }\n\n    if (that.callbackAbsolutePath && that.callbackAbsolutePath.indexOf(event.headers.host) == -1) {\n      that._logger.log(\"error\", LOG_ID + \"(handleS2SEvent) Don't manage this request - Invalid path - HttpVerb:[\", methodHttp, \"] - Path:[host : \", event.headers.host, \", path : \", requestedPath, \"]\");\n\n      return false;\n    }\n\n    if (requestedPath === \"/connection\") {\n      // that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) return ParseConnectionCallback(content)\");\n      return that.ParseConnectionCallback(body);\n    } else if (requestedPath === \"/presence\") {\n      // that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) return ParsePresenceCallback(content)\");\n      return that.ParsePresenceCallback(body);\n    } else if (requestedPath === \"/chat-state\") {\n      // that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) return ParseChatStateCallback(content)\");\n      return that.ParseChatStateCallback(body);\n    } else if (requestedPath === \"/receipt\") {\n      //that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) return ParseReceiptCallback(content)\");\n      return that.ParseReceiptCallback(body);\n    } else if (requestedPath === \"/all-receipt\") {\n      //that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) return ParseAllReceiptCallback(content)\");\n      return that.ParseAllReceiptCallback(body);\n    } else if (requestedPath === \"/conversation\") {\n      //that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseConversationCallback(content)\");\n      return that.ParseConversationCallback(body);\n    } else if (requestedPath === \"/room-invite\") {\n      //that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseRoomInviteCallback(content)\");\n      return that.ParseRoomInviteCallback(body);\n    } else if (requestedPath === \"/room-member\") {\n      //that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseRoomMemberCallback(content)\");\n      return that.ParseRoomMemberCallback(body);\n    } else if (requestedPath === \"/room-state\") {\n      // that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseRoomStateCallback(content)\");\n      return that.ParseRoomStateCallback(body);\n    } else if (requestedPath === \"/message\") {\n      // that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseMessageCallback(content)\");\n      return that.ParseMessageCallback(body);\n    } else if (requestedPath === \"/all-deleted\") {\n      // that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseAlldeletedCallback(content)\");\n\n      /*\r\n      { timestamp: '2020-02-21T13:50:38.919508Z',\r\n      id: 'ee564d90-54b0-11ea-85d9-00505628611e',\r\n      'all-deleted':\r\n      { with: '5c1a3df51490a30213b9d9e2',\r\n      conversation_id: '1553006776830736' } }\r\n       */\n      return that.ParseAlldeletedCallback(body);\n    } else if (requestedPath === \"/error\") {\n      // that._logger.log(\"error\", LOG_ID + \"(handleS2SEvent) TODO: return ParseErrorCallback(content)\");\n      return that.ParseErrorCallback(body);\n    }\n\n    that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) Don't manage this request - Unknown path - HttpVerb:[\", methodHttp, \"] - Path:[host : \", event.headers.host, \", path : \", requestedPath, \"]\");\n\n    return false;\n  }\n\n  ParseConnectionCallback(event) {\n    let that = this;\n\n    that._logger.log(\"internal\", LOG_ID + \"(ParseConnectionCallback) Content:[\", event, \"]\");\n\n    if (event && event.connection && event.connection.state === \"ready\") {\n      that._eventEmitter.emit(\"evt_internal_ons2sready\", event); //await that.sendS2SPresence({});\n\n    }\n\n    return false;\n  }\n\n  ParsePresenceCallback(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"internal\", LOG_ID + \"(ParsePresenceCallback) Content:[\", event, \"]\");\n\n      let presence = event.presence;\n\n      if (event && presence) {\n        let from = event.presence.from;\n\n        if (from) {\n          let contact = yield that._contacts.getContactById(from, false);\n\n          if (contact != null) {\n            let show = presence.show;\n            let status = presence.status;\n            let resource = presence.resource; //DateTime date = jObject.GetValue(\"timestamp\").ToObject<DateTime>();\n\n            if (!show) {\n              show = \"online\";\n            } // PresenceInfo presenceInfo = Util.GetPresenceInfo((contact.Jid_im == contacts.GetCurrentContactJid()), show, status);\n            // s2sClient.PresenceInfoReceived(new PresenceInfoEventArgs(contact.Jid_im, resource, date, presenceInfo));\n\n\n            that._logger.log(\"internal\", LOG_ID + \"(ParsePresenceCallback) logguedin user's jid : \", that.jid_im, \", jid of the from presence : \", contact.jid_im);\n\n            if (that.jid_im === contact.jid_im) {\n              let eventInfo = {\n                \"fulljid\": contact.jid_im + \"/\" + resource,\n                \"jid\": contact.jid_im,\n                \"resource\": resource,\n                \"status\": show,\n                \"message\": status,\n                \"type\": that.xmppUtils.isFromTelJid(resource) ? \"phone\" : that.xmppUtils.isFromMobile(resource) ? \"mobile\" : that.xmppUtils.isFromNode(resource) ? \"node\" : that.xmppUtils.isFromS2S(resource) ? \"s2s\" : \"desktopOrWeb\"\n              };\n\n              that._eventEmitter.emit(\"evt_internal_presencechanged\", eventInfo);\n            } else {\n              let evtParam = {\n                fulljid: from,\n                jid: contact.jid_im,\n                resource: resource,\n                value: {\n                  priority: 5,\n                  show: show || \"\",\n                  delay: 0,\n                  status: status || \"\",\n                  type: that.xmppUtils.isFromTelJid(resource) ? \"phone\" : that.xmppUtils.isFromMobile(resource) ? \"mobile\" : that.xmppUtils.isFromNode(resource) ? \"node\" : that.xmppUtils.isFromS2S(resource) ? \"s2s\" : \"desktopOrWeb\"\n                }\n              };\n\n              that._eventEmitter.emit(\"evt_internal_onrosterpresence\", evtParam);\n            }\n\n            return true;\n          } else {\n            that._logger.log(\"internal\", LOG_ID + \"(ParsePresenceCallback) Impossible to get Contact using from field:[\", from, \"]\");\n          }\n        } else {\n          that._logger.log(\"warn\", LOG_ID + \"(ParsePresenceCallback) Impossible to get 'from' property from info provided:[\", event, \"]\");\n        }\n      } else {\n        that._logger.log(\"error\", LOG_ID + \"(ParsePresenceCallback) Impossible to get Presence object using from info provided:[\", event, \"]\");\n      }\n\n      return false;\n    });\n  }\n\n  ParseChatStateCallback(content) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"internal\", LOG_ID + \"(ParseChatStateCallback)  Content:[\", content, \"]\");\n\n      let chatstate = content.chatstate;\n\n      if (content && chatstate) {\n        let peer = chatstate.peer;\n\n        if (peer) {\n          let contact = yield that._contacts.getContactById(peer, false);\n\n          if (contact != null) {\n            let conversationId = chatstate.conversation_id;\n            let state = chatstate.state;\n\n            let conversation = that._conversations.getConversationByDbId(conversationId);\n\n            let chatstateEvent = {\n              type: \"s2s\",\n              fromJid: contact.jid_im,\n              //resource: resource,\n              chatstate: state,\n              conversation\n            };\n\n            that._logger.log(\"internal\", LOG_ID + \"(ParseChatStateCallback) event to raise : \", chatstateEvent);\n\n            that._eventEmitter.emit(\"evt_internal_chatstate\", chatstateEvent); // s2sClient.ChatStateReceived(new UserTypingEventArgs(conversationId, contact.Jid_im, (state == \"composing\")));\n\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  ParseReceiptCallback(content) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"internal\", LOG_ID + \"(ParseReceiptCallback)  Content:[\", content, \"]\");\n\n      let receipt = content.receipt;\n\n      if (content && receipt) {\n        let msg_id = receipt.msg_id;\n\n        if (msg_id) {\n          let date = content.timestamp;\n          let evt = receipt.event;\n          let entity = receipt.entity;\n          let conversation_id = receipt.conversation_id;\n          /*\r\n          let receiptType;\r\n                if (entity == \"server\")\r\n              receiptType = \"ServerReceived\";\r\n          else {\r\n              if (evt == \"received\") {\r\n                  receiptType = \"ClientReceived\";\r\n                  if (this.shouldSendReadReceipt) {\r\n                      await that._rest.markMessageAsRead(conversation_id, msg_id);\r\n                  }\r\n              } else\r\n                  receiptType = \"ClientRead\";\r\n                }\r\n                //s2sClient.NewMessageDeliveryReceived(new MessageDeliveryReceivedEventArgs(msgId, receiptType, date));\r\n          // */\n\n          let receiptEvent = {\n            event: evt,\n            entity: entity,\n            //type: messageType,\n            id: msg_id,\n            //fromJid: fromJid,\n            //resource: resource\n            conversation_id\n          };\n\n          that._logger.log(\"info\", LOG_ID + \"(ParseReceiptCallback) message - receipt received\");\n\n          that._eventEmitter.emit(\"evt_internal_onreceipt\", receiptEvent);\n\n          return true;\n        }\n\n        return false;\n      }\n    });\n  }\n\n  ParseAllReceiptCallback(content) {\n    let that = this;\n\n    that._logger.log(\"internal\", LOG_ID + \"(ParseAllReceiptCallback)  Content:[\", content, \"]\");\n\n    let allreceipt = content[\"all-receipt\"];\n\n    if (content && allreceipt) {\n      let typeread = allreceipt.id; // type of all : all-received / all-sent\n\n      if (typeread) {\n        let date = content.timestamp;\n        let conversationId = allreceipt.conversation_id;\n\n        let conversation = that._conversations.getConversationByDbId(conversationId);\n\n        switch (typeread) {\n          case \"all-received\":\n            // messages for this conversation have been acknowledged\n            conversation.missedCounter = 0;\n\n            that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation);\n\n            break;\n\n          case \"all-sent\":\n            // messages for this conversation have been read\n            // Not take into account : conversation.ackReadAllMessages();\n            break;\n\n          default:\n            that._logger.log(\"error\", LOG_ID + \"(ParseAllReceiptCallback) error - unknown read type : \", typeread);\n\n            break;\n        }\n\n        that._logger.log(\"info\", LOG_ID + \"(ParseAllReceiptCallback) message - all-receipt received\");\n\n        return true;\n      }\n\n      return false;\n    }\n  }\n\n  ParseConversationCallback(content) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"internal\", LOG_ID + \"(ParseConversationCallback)  Content:[\", content, \"]\");\n\n      let conversationObj = content[\"conversation\"];\n\n      if (content && conversationObj) {\n        let conversationId = conversationObj.id;\n\n        if (conversationId) {\n          let date = content.timestamp;\n          let action = conversationObj.action;\n          let peer = conversationObj.peer;\n          let conversationId = conversationObj.id;\n\n          if (conversationObj.type !== 'room') {\n            let contact = yield that._contacts.getContactById(peer, false);\n            let conversation = yield that._conversations.getOrCreateOneToOneConversation(contact.jid_im, conversationId);\n\n            switch (action) {\n              case \"create\":\n                conversation.dbId = conversationId;\n                conversation.lastModification = conversationObj.lastMessageDate;\n                conversation.missedCounter = parseInt(conversationObj.unreadMessageNumber, 10) || 0;\n                conversation.isFavorite = conversationObj.isFavorite === \"true\"; //this._conversations.orderConversations();\n                //$rootScope.$broadcast(\"ON_CONVERSATIONS_UPDATED_EVENT\");\n                // Send conversations update event\n\n                that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation);\n\n                break;\n\n              case \"delete\":\n                if (!conversation) {\n                  that._logger.log(\"info\", LOG_ID + \"(ParseConversationCallback) message - conversation received for delete but unknown, conversationId : \", conversationId);\n\n                  conversation = new Conversation_1.Conversation(conversationId);\n                }\n\n                this._conversations.removeConversation(conversation);\n\n                break;\n\n              case \"update\":\n                conversation.isFavorite = conversationObj.isFavorite === \"true\"; //this._conversations.orderConversations();\n                // Send conversations update event\n\n                that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation); //$rootScope.$broadcast(\"ON_CONVERSATIONS_UPDATED_EVENT\");\n\n\n                break;\n\n              default:\n                that._logger.log(\"error\", LOG_ID + \"(ParseAllReceiptCallback) error - unknown action type : \", action);\n\n                break;\n            }\n          }\n\n          if (conversationObj.type == 'room') {\n            /*\r\n             { timestamp: '2020-02-24T16:59:57.248369Z',\r\n            id: '6d73faec-5726-11ea-83d2-00505628611e',\r\n            conversation:\r\n            { type: 'room',\r\n            peer: '5e53fdc87cdc6514d72ed7e6',\r\n            mute: false,\r\n            id: '1582563596572184',\r\n            action: 'create' } }\r\n            { timestamp: '2020-02-26T10:38:41.264211Z',\r\n            id: '0f3a674a-5884-11ea-889e-00505628611e',\r\n            conversation:\r\n            { type: 'room',\r\n            peer: '5e553d747cdc6514d72ee15a',\r\n            id: '1582644598393532',\r\n            action: 'delete' } }\r\n             */\n            //let contact: Bubble = await that._conversations.getConversationByBubbleId(peer);\n            let bubbleId = peer;\n            let bubble = yield that._bulles.getBubbleById(bubbleId);\n            let conversation = yield that._conversations.getBubbleConversation(bubble.jid);\n\n            that._logger.log(\"info\", LOG_ID + \"(ParseConversationCallback) message - conversation conversation : \", conversation);\n\n            switch (action) {\n              case \"create\":\n                conversation.dbId = conversationId;\n                conversation.lastModification = conversationObj.lastMessageDate;\n                conversation.missedCounter = parseInt(conversationObj.unreadMessageNumber, 10) || 0;\n                conversation.isFavorite = conversationObj.isFavorite === \"true\"; //this._conversations.orderConversations();\n                //$rootScope.$broadcast(\"ON_CONVERSATIONS_UPDATED_EVENT\");\n                // Send conversations update event\n\n                that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation);\n\n                break;\n\n              case \"delete\":\n                if (!conversation) {\n                  that._logger.log(\"info\", LOG_ID + \"(ParseConversationCallback) message - conversation received for delete but unknown, conversationId : \", conversationId);\n\n                  conversation = new Conversation_1.Conversation(conversationId);\n                }\n\n                this._conversations.removeConversation(conversation);\n\n                break;\n\n              case \"update\":\n                conversation.isFavorite = conversationObj.isFavorite === \"true\"; //this._conversations.orderConversations();\n                // Send conversations update event\n\n                that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation); //$rootScope.$broadcast(\"ON_CONVERSATIONS_UPDATED_EVENT\");\n\n\n                break;\n\n              default:\n                that._logger.log(\"error\", LOG_ID + \"(ParseAllReceiptCallback) error - unknown action type : \", action);\n\n                break;\n            }\n          }\n\n          that._logger.log(\"info\", LOG_ID + \"(ParseConversationCallback) message - conversation received\");\n\n          return true;\n        }\n\n        return false;\n      }\n    });\n  }\n\n  ParseMessageCallback(content) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"internal\", LOG_ID + \"(ParseMessageCallback)  Content:[\", content, \"]\");\n\n      let messageObj = content[\"message\"];\n\n      if (content && messageObj) {\n        let conversationId = messageObj.conversation_id;\n\n        if (conversationId) {\n          let date = content.timestamp;\n          let datetime = messageObj.datetime;\n          let from = messageObj.from;\n          let contact = yield that._contacts.getContactById(from, false);\n          let conversation = yield that._conversations.getOrCreateOneToOneConversation(contact.jid_im, conversationId);\n          let lang = messageObj.lang;\n          let msgId = messageObj.id;\n          let body = messageObj.body;\n          let resource = undefined;\n          let toJid = undefined;\n          let oob = undefined;\n          let messageType = undefined;\n          let isGroup = messageObj[\"is_group\"];\n          let fromBubbleJid = null;\n          let fromBubbleUserJid = null;\n          let alternativeContent = undefined;\n          let subject = messageObj.subject;\n\n          if (messageObj.content) {\n            alternativeContent = [];\n            alternativeContent.push({\n              \"message\": messageObj.content.data,\n              \"type\": messageObj.content.type\n            });\n          }\n\n          if (isGroup) {//that._conversations.get\n            //fromBubbleJid = ;\n            //fromBubbleUserJid = ;\n          }\n\n          let data = {\n            \"fromJid\": contact.jid_im,\n            \"resource\": resource,\n            \"toJid\": toJid,\n            \"type\": messageType,\n            subject,\n            \"content\": body,\n            \"alternativeContent\": alternativeContent,\n            \"id\": msgId,\n            lang,\n            \"cc\": false,\n            \"cctype\": \"\",\n            \"isEvent\": false,\n            oob,\n            \"date\": datetime,\n            fromBubbleJid,\n            fromBubbleUserJid,\n            \"event\": null,\n            \"eventJid\": null,\n            \"originalMessageReplaced\": null,\n            \"attention\": undefined,\n            conversation: undefined\n          };\n          /*if (!body) {\r\n              that.logger.log(\"debug\", LOG_ID + \"(_onMessageReceived) with no message text, so ignore it!\");\r\n              return false;\r\n          } // */\n\n          data.conversation = conversation;\n          data.conversation.addMessage(data);\n          /*if (data.conversation.messages.length === 0 || !data.conversation.messages.find((elmt) => { if (elmt.id === data.id) { return elmt; } })) {\r\n              data.conversation.messages.push(data);\r\n          } // */\n\n          if (this.shouldSendReadReceipt) {\n            yield that._rest.markMessageAsRead(conversationId, msgId);\n          }\n\n          that._eventEmitter.emit(\"evt_internal_onmessagereceived\", data);\n\n          that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation);\n\n          that._logger.log(\"info\", LOG_ID + \"(ParseMessageCallback) message - conversation received\");\n\n          return true;\n        }\n\n        return false;\n      }\n    });\n  }\n\n  ParseRoomInviteCallback(content) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"internal\", LOG_ID + \"(ParseRoomInviteCallback)  Content:[\", content, \"]\");\n\n      let roomInvite = content[\"room-invite\"];\n\n      if (content && roomInvite) {\n        let roomId = roomInvite.id;\n\n        if (roomId) {\n          let date = content.timestamp;\n          let byUserId = roomInvite.by;\n          let bubble = yield that._bulles.getBubbleById(roomId);\n          /*let contact: Contact = await that._contacts.getContactById(byUserId, false);\r\n          let invitationdetails = {\r\n              bulle:bubble,\r\n              invitedByContact: contact\r\n          }; */\n\n          that._logger.log(\"info\", LOG_ID + \"(ParseRoomInviteCallback) message - room-invite received\");\n\n          that._eventEmitter.emit(\"evt_internal_invitationdetailsreceived\", bubble);\n\n          return true;\n        }\n\n        return false;\n      }\n    });\n  }\n\n  ParseRoomMemberCallback(content) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"internal\", LOG_ID + \"(ParseRoomMemberCallback)  Content:[\", content, \"]\");\n\n      let roomMember = content[\"room-member\"];\n\n      if (content && roomMember) {\n        let roomId = roomMember.id;\n\n        if (roomId) {\n          let date = content.timestamp;\n          let status = roomMember.status;\n          let bubble = yield that._bulles.getBubbleById(roomId); // that._logger.log(\"info\", LOG_ID + \"(ParseRoomMemberCallback) message - room-member received\");\n          // that._eventEmitter.emit(\"evt_internal_invitationdetailsreceived\", bubble);\n\n          that._eventEmitter.emit(\"evt_internal_ownaffiliationchanged\", {\n            \"bubbleId\": bubble.id,\n            \"bubbleJid\": bubble.jid,\n            \"userJid\": that.jid_im,\n            \"status\": status\n          });\n          /*switch (status) {\r\n              case \"accepted\":\r\n                  that._eventEmitter.emit(\"evt_internal_ownaffiliationchanged\", {\r\n                      \"bubbleId\": bubble.id,\r\n                      \"bubbleJid\": bubble.jid,\r\n                      \"userJid\": that.jid_im,\r\n                      \"status\": status,\r\n                  });\r\n                  //that._eventEmitter.emit(\"evt_internal_ownaffiliationdetailschanged\", bubble);\r\n                  break;\r\n              case \"invited\":\r\n                  that._logger.log(\"info\", LOG_ID + \"(ParseRoomMemberCallback) message - room-member invited\");\r\n                  break;\r\n              default:\r\n                  that._logger.log(\"error\", LOG_ID + \"(ParseRoomMemberCallback) error - unknown status type : \", status);\r\n                  break;\r\n          } // */\n\n\n          return true;\n        }\n\n        return false;\n      }\n    });\n  }\n\n  ParseRoomStateCallback(content) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"internal\", LOG_ID + \"(ParseRoomStateCallback)  Content:[\", content, \"]\");\n      /*\r\n             { timestamp: '2020-02-25T15:29:58.976567Z',\r\n      'room-state': { id: '5e553d747cdc6514d72ee15a', event: 'available' },\r\n      id: '9665d516-57e3-11ea-8fb4-00505628611e' }\r\n             */\n\n\n      let roomstate = content[\"room-state\"];\n\n      if (content && roomstate) {\n        let roomId = roomstate.id;\n\n        if (roomId) {\n          let eventType = roomstate.event;\n          /*\r\n                                { timestamp: '2020-02-26T10:38:41.466598Z',\r\n          'room-state': { id: '5e553d747cdc6514d72ee15a', event: 'deleted' },\r\n          id: '0f3a674a-5884-11ea-889e-00505628611e' }\r\n                                 */\n          //let conversation: Conversation = await that._conversations.getConversationByBubbleId(bubbleId);\n\n          let bubble = yield that._bulles.getBubbleById(roomId);\n\n          that._eventEmitter.emit(\"evt_internal_ownaffiliationchanged\", {\n            \"bubbleId\": bubble.id,\n            \"bubbleJid\": bubble.jid,\n            \"userJid\": that.jid_im,\n            \"status\": eventType\n          });\n          /* switch (eventType) {\r\n              case \"xxx\":\r\n                  //that.eventEmitter.emit(\"evt_internal_ownaffiliationdetailschanged\", bubble);\r\n                  break;\r\n              case \"deleted\":\r\n                  that._logger.log(\"info\", LOG_ID + \"(ParseRoomStateCallback) message - room-state deleted\");\r\n                        that._eventEmitter.emit(\"evt_internal_ownaffiliationchanged\", {\r\n                      \"bubbleId\": bubble.id,\r\n                      \"bubbleJid\": bubble.jid,\r\n                      \"userJid\": that.jid_im,\r\n                      \"status\": eventType,\r\n                  });\r\n                  break;\r\n              default:\r\n                  that._logger.log(\"error\", LOG_ID + \"(ParseRoomMemberCallback) error - unknown eventType type : \", eventType);\r\n                  break;\r\n          }\r\n          // */\n\n\n          return true;\n        }\n\n        return false;\n      }\n    });\n  }\n\n  ParseAlldeletedCallback(content) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"internal\", LOG_ID + \"(ParseAlldeletedCallback)  Content:[\", content, \"]\");\n      /*\r\n      { timestamp: '2020-02-21T13:50:38.919508Z',\r\n      id: 'ee564d90-54b0-11ea-85d9-00505628611e',\r\n      'all-deleted':\r\n      { with: '5c1a3df51490a30213b9d9e2',\r\n      conversation_id: '1553006776830736' } }\r\n       */\n\n\n      let roomstate = content[\"all-deleted\"];\n\n      if (content && roomstate) {\n        let conversationId = roomstate.conversation_id;\n\n        if (conversationId) {\n          let withId = roomstate.with;\n          let conversation = yield that._conversations.getOrCreateOneToOneConversation(withId, conversationId);\n\n          that._logger.log(\"info\", LOG_ID + \"(ParseAlldeletedCallback) message - all-deleted received\");\n\n          that._eventEmitter.emit(\"evt_internal_allmessagedremovedfromconversationreceived\", conversation);\n\n          return true;\n        }\n\n        return false;\n      }\n    });\n  }\n\n  ParseErrorCallback(content) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let that = this;\n\n      that._logger.log(\"internal\", LOG_ID + \"(ParseErrorCallback)  Content:[\", content, \"]\");\n\n      let error = content[\"error\"];\n\n      if (content && error) {\n        return false;\n      }\n    });\n  }\n\n  start(_core) {\n    return new Promise((resolve, reject) => {\n      let that = this;\n      that._contacts = _core.contacts;\n      that._bulles = _core.bubbles;\n      that._conversations = _core.conversations;\n      that._rest = _core._rest;\n      resolve();\n    });\n  }\n\n};\nS2SServiceEventHandler = __decorate([Utils_1.logEntryExit(LOG_ID)], S2SServiceEventHandler);\nexports.S2SServiceEventHandler = S2SServiceEventHandler;\nmodule.exports.S2SServiceEventHandler = S2SServiceEventHandler;","map":{"version":3,"sources":["../../../src/lib/connection/S2S/S2SServiceEventHandler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst XMPPUtils_1 = require(\"../../common/XMPPUtils\");\r\nconst Utils_1 = require(\"../../common/Utils\");\r\nconst Conversation_1 = require(\"../../common/models/Conversation\");\r\nconst util = require('util');\r\nconst xml = require(\"@xmpp/xml\");\r\nconst LOG_ID = \"S2S/HNDL - \";\r\nconst TYPE_CHAT = \"chat\";\r\nconst TYPE_GROUPCHAT = \"groupchat\";\r\nlet S2SServiceEventHandler = class S2SServiceEventHandler {\r\n    constructor(_im, _application, _eventEmitter, _logger, _hostCallback) {\r\n        this._logger = _logger;\r\n        this._eventEmitter = _eventEmitter;\r\n        this.shouldSendReadReceipt = _im.sendReadReceipt;\r\n        this.callbackAbsolutePath = _hostCallback;\r\n        this.xmppUtils = XMPPUtils_1.XMPPUTils.getXMPPUtils();\r\n    }\r\n    setAccount(account) {\r\n        let that = this;\r\n        that.jid_im = account.jid_im;\r\n        that.jid_tel = account.jid_tel;\r\n        that.jid_password = account.jid_password;\r\n        that.userId = account.id;\r\n        that.jid = account.jid_im;\r\n    }\r\n    handleS2SEvent(event) {\r\n        let that = this;\r\n        if (event === undefined) {\r\n            return;\r\n        }\r\n        let body = event.body;\r\n        let methodHttp = event.method;\r\n        let baseUrl = event.baseUrl;\r\n        let originalUrl = event.originalUrl;\r\n        let requestedPath = originalUrl;\r\n        that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) *************************************************\");\r\n        that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) received an S2S EVENT : \");\r\n        that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) METHOD : \", methodHttp);\r\n        that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) BASELURL : \", baseUrl);\r\n        that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) ORIGINALURL : \", originalUrl);\r\n        that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) EVENT BODY : \", that._logger.colors.events(body));\r\n        that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) *************************************************\");\r\n        if (String.prototype.toUpperCase.call(methodHttp + \"\") != \"POST\") {\r\n            that._logger.log(\"error\", LOG_ID + \"(handleS2SEvent) Don't manage this request - Invalid HttpVerb - HttpVerb:[\", methodHttp, \"] - Path:[host : \", event.headers.host, \", path : \", requestedPath, \"]\");\r\n            return false;\r\n        }\r\n        if (that.callbackAbsolutePath && that.callbackAbsolutePath.indexOf(event.headers.host) == -1) {\r\n            that._logger.log(\"error\", LOG_ID + \"(handleS2SEvent) Don't manage this request - Invalid path - HttpVerb:[\", methodHttp, \"] - Path:[host : \", event.headers.host, \", path : \", requestedPath, \"]\");\r\n            return false;\r\n        }\r\n        if (requestedPath === \"/connection\") {\r\n            // that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) return ParseConnectionCallback(content)\");\r\n            return that.ParseConnectionCallback(body);\r\n        }\r\n        else if (requestedPath === \"/presence\") {\r\n            // that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) return ParsePresenceCallback(content)\");\r\n            return that.ParsePresenceCallback(body);\r\n        }\r\n        else if (requestedPath === \"/chat-state\") {\r\n            // that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) return ParseChatStateCallback(content)\");\r\n            return that.ParseChatStateCallback(body);\r\n        }\r\n        else if (requestedPath === \"/receipt\") {\r\n            //that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) return ParseReceiptCallback(content)\");\r\n            return that.ParseReceiptCallback(body);\r\n        }\r\n        else if (requestedPath === \"/all-receipt\") {\r\n            //that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) return ParseAllReceiptCallback(content)\");\r\n            return that.ParseAllReceiptCallback(body);\r\n        }\r\n        else if (requestedPath === \"/conversation\") {\r\n            //that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseConversationCallback(content)\");\r\n            return that.ParseConversationCallback(body);\r\n        }\r\n        else if (requestedPath === \"/room-invite\") {\r\n            //that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseRoomInviteCallback(content)\");\r\n            return that.ParseRoomInviteCallback(body);\r\n        }\r\n        else if (requestedPath === \"/room-member\") {\r\n            //that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseRoomMemberCallback(content)\");\r\n            return that.ParseRoomMemberCallback(body);\r\n        }\r\n        else if (requestedPath === \"/room-state\") {\r\n            // that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseRoomStateCallback(content)\");\r\n            return that.ParseRoomStateCallback(body);\r\n        }\r\n        else if (requestedPath === \"/message\") {\r\n            // that.logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseMessageCallback(content)\");\r\n            return that.ParseMessageCallback(body);\r\n        }\r\n        else if (requestedPath === \"/all-deleted\") {\r\n            // that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) TODO: return ParseAlldeletedCallback(content)\");\r\n            /*\r\n            { timestamp: '2020-02-21T13:50:38.919508Z',\r\n  id: 'ee564d90-54b0-11ea-85d9-00505628611e',\r\n  'all-deleted':\r\n   { with: '5c1a3df51490a30213b9d9e2',\r\n     conversation_id: '1553006776830736' } }\r\n             */\r\n            return that.ParseAlldeletedCallback(body);\r\n        }\r\n        else if (requestedPath === \"/error\") {\r\n            // that._logger.log(\"error\", LOG_ID + \"(handleS2SEvent) TODO: return ParseErrorCallback(content)\");\r\n            return that.ParseErrorCallback(body);\r\n        }\r\n        that._logger.log(\"internal\", LOG_ID + \"(handleS2SEvent) Don't manage this request - Unknown path - HttpVerb:[\", methodHttp, \"] - Path:[host : \", event.headers.host, \", path : \", requestedPath, \"]\");\r\n        return false;\r\n    }\r\n    ParseConnectionCallback(event) {\r\n        let that = this;\r\n        that._logger.log(\"internal\", LOG_ID + \"(ParseConnectionCallback) Content:[\", event, \"]\");\r\n        if (event && event.connection && event.connection.state === \"ready\") {\r\n            that._eventEmitter.emit(\"evt_internal_ons2sready\", event);\r\n            //await that.sendS2SPresence({});\r\n        }\r\n        return false;\r\n    }\r\n    ParsePresenceCallback(event) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"internal\", LOG_ID + \"(ParsePresenceCallback) Content:[\", event, \"]\");\r\n            let presence = event.presence;\r\n            if (event && presence) {\r\n                let from = event.presence.from;\r\n                if (from) {\r\n                    let contact = yield that._contacts.getContactById(from, false);\r\n                    if (contact != null) {\r\n                        let show = presence.show;\r\n                        let status = presence.status;\r\n                        let resource = presence.resource;\r\n                        //DateTime date = jObject.GetValue(\"timestamp\").ToObject<DateTime>();\r\n                        if (!show) {\r\n                            show = \"online\";\r\n                        }\r\n                        // PresenceInfo presenceInfo = Util.GetPresenceInfo((contact.Jid_im == contacts.GetCurrentContactJid()), show, status);\r\n                        // s2sClient.PresenceInfoReceived(new PresenceInfoEventArgs(contact.Jid_im, resource, date, presenceInfo));\r\n                        that._logger.log(\"internal\", LOG_ID + \"(ParsePresenceCallback) logguedin user's jid : \", that.jid_im, \", jid of the from presence : \", contact.jid_im);\r\n                        if (that.jid_im === contact.jid_im) {\r\n                            let eventInfo = {\r\n                                \"fulljid\": contact.jid_im + \"/\" + resource,\r\n                                \"jid\": contact.jid_im,\r\n                                \"resource\": resource,\r\n                                \"status\": show,\r\n                                \"message\": status,\r\n                                \"type\": that.xmppUtils.isFromTelJid(resource) ?\r\n                                    \"phone\" :\r\n                                    that.xmppUtils.isFromMobile(resource) ?\r\n                                        \"mobile\" :\r\n                                        that.xmppUtils.isFromNode(resource) ?\r\n                                            \"node\" :\r\n                                            that.xmppUtils.isFromS2S(resource) ?\r\n                                                \"s2s\" : \"desktopOrWeb\"\r\n                            };\r\n                            that._eventEmitter.emit(\"evt_internal_presencechanged\", eventInfo);\r\n                        }\r\n                        else {\r\n                            let evtParam = {\r\n                                fulljid: from,\r\n                                jid: contact.jid_im,\r\n                                resource: resource,\r\n                                value: {\r\n                                    priority: 5,\r\n                                    show: show || \"\",\r\n                                    delay: 0,\r\n                                    status: status || \"\",\r\n                                    type: that.xmppUtils.isFromTelJid(resource) ?\r\n                                        \"phone\" :\r\n                                        that.xmppUtils.isFromMobile(resource) ?\r\n                                            \"mobile\" :\r\n                                            that.xmppUtils.isFromNode(resource) ?\r\n                                                \"node\" :\r\n                                                that.xmppUtils.isFromS2S(resource) ?\r\n                                                    \"s2s\" : \"desktopOrWeb\"\r\n                                }\r\n                            };\r\n                            that._eventEmitter.emit(\"evt_internal_onrosterpresence\", evtParam);\r\n                        }\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        that._logger.log(\"internal\", LOG_ID + \"(ParsePresenceCallback) Impossible to get Contact using from field:[\", from, \"]\");\r\n                    }\r\n                }\r\n                else {\r\n                    that._logger.log(\"warn\", LOG_ID + \"(ParsePresenceCallback) Impossible to get 'from' property from info provided:[\", event, \"]\");\r\n                }\r\n            }\r\n            else {\r\n                that._logger.log(\"error\", LOG_ID + \"(ParsePresenceCallback) Impossible to get Presence object using from info provided:[\", event, \"]\");\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n    ParseChatStateCallback(content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"internal\", LOG_ID + \"(ParseChatStateCallback)  Content:[\", content, \"]\");\r\n            let chatstate = content.chatstate;\r\n            if (content && chatstate) {\r\n                let peer = chatstate.peer;\r\n                if (peer) {\r\n                    let contact = yield that._contacts.getContactById(peer, false);\r\n                    if (contact != null) {\r\n                        let conversationId = chatstate.conversation_id;\r\n                        let state = chatstate.state;\r\n                        let conversation = that._conversations.getConversationByDbId(conversationId);\r\n                        let chatstateEvent = {\r\n                            type: \"s2s\",\r\n                            fromJid: contact.jid_im,\r\n                            //resource: resource,\r\n                            chatstate: state,\r\n                            conversation\r\n                        };\r\n                        that._logger.log(\"internal\", LOG_ID + \"(ParseChatStateCallback) event to raise : \", chatstateEvent);\r\n                        that._eventEmitter.emit(\"evt_internal_chatstate\", chatstateEvent);\r\n                        // s2sClient.ChatStateReceived(new UserTypingEventArgs(conversationId, contact.Jid_im, (state == \"composing\")));\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n    ParseReceiptCallback(content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"internal\", LOG_ID + \"(ParseReceiptCallback)  Content:[\", content, \"]\");\r\n            let receipt = content.receipt;\r\n            if (content && receipt) {\r\n                let msg_id = receipt.msg_id;\r\n                if (msg_id) {\r\n                    let date = content.timestamp;\r\n                    let evt = receipt.event;\r\n                    let entity = receipt.entity;\r\n                    let conversation_id = receipt.conversation_id;\r\n                    /*\r\n                    let receiptType;\r\n    \r\n                    if (entity == \"server\")\r\n                        receiptType = \"ServerReceived\";\r\n                    else {\r\n                        if (evt == \"received\") {\r\n                            receiptType = \"ClientReceived\";\r\n                            if (this.shouldSendReadReceipt) {\r\n                                await that._rest.markMessageAsRead(conversation_id, msg_id);\r\n                            }\r\n                        } else\r\n                            receiptType = \"ClientRead\";\r\n    \r\n                    }\r\n    \r\n                    //s2sClient.NewMessageDeliveryReceived(new MessageDeliveryReceivedEventArgs(msgId, receiptType, date));\r\n                    // */\r\n                    let receiptEvent = {\r\n                        event: evt,\r\n                        entity: entity,\r\n                        //type: messageType,\r\n                        id: msg_id,\r\n                        //fromJid: fromJid,\r\n                        //resource: resource\r\n                        conversation_id\r\n                    };\r\n                    that._logger.log(\"info\", LOG_ID + \"(ParseReceiptCallback) message - receipt received\");\r\n                    that._eventEmitter.emit(\"evt_internal_onreceipt\", receiptEvent);\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    ParseAllReceiptCallback(content) {\r\n        let that = this;\r\n        that._logger.log(\"internal\", LOG_ID + \"(ParseAllReceiptCallback)  Content:[\", content, \"]\");\r\n        let allreceipt = content[\"all-receipt\"];\r\n        if (content && allreceipt) {\r\n            let typeread = allreceipt.id; // type of all : all-received / all-sent\r\n            if (typeread) {\r\n                let date = content.timestamp;\r\n                let conversationId = allreceipt.conversation_id;\r\n                let conversation = that._conversations.getConversationByDbId(conversationId);\r\n                switch (typeread) {\r\n                    case \"all-received\": // messages for this conversation have been acknowledged\r\n                        conversation.missedCounter = 0;\r\n                        that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation);\r\n                        break;\r\n                    case \"all-sent\": // messages for this conversation have been read\r\n                        // Not take into account : conversation.ackReadAllMessages();\r\n                        break;\r\n                    default:\r\n                        that._logger.log(\"error\", LOG_ID + \"(ParseAllReceiptCallback) error - unknown read type : \", typeread);\r\n                        break;\r\n                }\r\n                that._logger.log(\"info\", LOG_ID + \"(ParseAllReceiptCallback) message - all-receipt received\");\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    ParseConversationCallback(content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"internal\", LOG_ID + \"(ParseConversationCallback)  Content:[\", content, \"]\");\r\n            let conversationObj = content[\"conversation\"];\r\n            if (content && conversationObj) {\r\n                let conversationId = conversationObj.id;\r\n                if (conversationId) {\r\n                    let date = content.timestamp;\r\n                    let action = conversationObj.action;\r\n                    let peer = conversationObj.peer;\r\n                    let conversationId = conversationObj.id;\r\n                    if (conversationObj.type !== 'room') {\r\n                        let contact = yield that._contacts.getContactById(peer, false);\r\n                        let conversation = yield that._conversations.getOrCreateOneToOneConversation(contact.jid_im, conversationId);\r\n                        switch (action) {\r\n                            case \"create\":\r\n                                conversation.dbId = conversationId;\r\n                                conversation.lastModification = conversationObj.lastMessageDate;\r\n                                conversation.missedCounter = parseInt(conversationObj.unreadMessageNumber, 10) || 0;\r\n                                conversation.isFavorite = (conversationObj.isFavorite === \"true\");\r\n                                //this._conversations.orderConversations();\r\n                                //$rootScope.$broadcast(\"ON_CONVERSATIONS_UPDATED_EVENT\");\r\n                                // Send conversations update event\r\n                                that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation);\r\n                                break;\r\n                            case \"delete\":\r\n                                if (!conversation) {\r\n                                    that._logger.log(\"info\", LOG_ID + \"(ParseConversationCallback) message - conversation received for delete but unknown, conversationId : \", conversationId);\r\n                                    conversation = new Conversation_1.Conversation(conversationId);\r\n                                }\r\n                                this._conversations.removeConversation(conversation);\r\n                                break;\r\n                            case \"update\":\r\n                                conversation.isFavorite = (conversationObj.isFavorite === \"true\");\r\n                                //this._conversations.orderConversations();\r\n                                // Send conversations update event\r\n                                that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation);\r\n                                //$rootScope.$broadcast(\"ON_CONVERSATIONS_UPDATED_EVENT\");\r\n                                break;\r\n                            default:\r\n                                that._logger.log(\"error\", LOG_ID + \"(ParseAllReceiptCallback) error - unknown action type : \", action);\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (conversationObj.type == 'room') {\r\n                        /*\r\n                         { timestamp: '2020-02-24T16:59:57.248369Z',\r\n      id: '6d73faec-5726-11ea-83d2-00505628611e',\r\n      conversation:\r\n       { type: 'room',\r\n         peer: '5e53fdc87cdc6514d72ed7e6',\r\n         mute: false,\r\n         id: '1582563596572184',\r\n         action: 'create' } }\r\n         { timestamp: '2020-02-26T10:38:41.264211Z',\r\n      id: '0f3a674a-5884-11ea-889e-00505628611e',\r\n      conversation:\r\n       { type: 'room',\r\n         peer: '5e553d747cdc6514d72ee15a',\r\n         id: '1582644598393532',\r\n         action: 'delete' } }\r\n                         */\r\n                        //let contact: Bubble = await that._conversations.getConversationByBubbleId(peer);\r\n                        let bubbleId = peer;\r\n                        let bubble = yield that._bulles.getBubbleById(bubbleId);\r\n                        let conversation = yield that._conversations.getBubbleConversation(bubble.jid);\r\n                        that._logger.log(\"info\", LOG_ID + \"(ParseConversationCallback) message - conversation conversation : \", conversation);\r\n                        switch (action) {\r\n                            case \"create\":\r\n                                conversation.dbId = conversationId;\r\n                                conversation.lastModification = conversationObj.lastMessageDate;\r\n                                conversation.missedCounter = parseInt(conversationObj.unreadMessageNumber, 10) || 0;\r\n                                conversation.isFavorite = (conversationObj.isFavorite === \"true\");\r\n                                //this._conversations.orderConversations();\r\n                                //$rootScope.$broadcast(\"ON_CONVERSATIONS_UPDATED_EVENT\");\r\n                                // Send conversations update event\r\n                                that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation);\r\n                                break;\r\n                            case \"delete\":\r\n                                if (!conversation) {\r\n                                    that._logger.log(\"info\", LOG_ID + \"(ParseConversationCallback) message - conversation received for delete but unknown, conversationId : \", conversationId);\r\n                                    conversation = new Conversation_1.Conversation(conversationId);\r\n                                }\r\n                                this._conversations.removeConversation(conversation);\r\n                                break;\r\n                            case \"update\":\r\n                                conversation.isFavorite = (conversationObj.isFavorite === \"true\");\r\n                                //this._conversations.orderConversations();\r\n                                // Send conversations update event\r\n                                that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation);\r\n                                //$rootScope.$broadcast(\"ON_CONVERSATIONS_UPDATED_EVENT\");\r\n                                break;\r\n                            default:\r\n                                that._logger.log(\"error\", LOG_ID + \"(ParseAllReceiptCallback) error - unknown action type : \", action);\r\n                                break;\r\n                        }\r\n                    }\r\n                    that._logger.log(\"info\", LOG_ID + \"(ParseConversationCallback) message - conversation received\");\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    ParseMessageCallback(content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"internal\", LOG_ID + \"(ParseMessageCallback)  Content:[\", content, \"]\");\r\n            let messageObj = content[\"message\"];\r\n            if (content && messageObj) {\r\n                let conversationId = messageObj.conversation_id;\r\n                if (conversationId) {\r\n                    let date = content.timestamp;\r\n                    let datetime = messageObj.datetime;\r\n                    let from = messageObj.from;\r\n                    let contact = yield that._contacts.getContactById(from, false);\r\n                    let conversation = yield that._conversations.getOrCreateOneToOneConversation(contact.jid_im, conversationId);\r\n                    let lang = messageObj.lang;\r\n                    let msgId = messageObj.id;\r\n                    let body = messageObj.body;\r\n                    let resource = undefined;\r\n                    let toJid = undefined;\r\n                    let oob = undefined;\r\n                    let messageType = undefined;\r\n                    let isGroup = messageObj[\"is_group\"];\r\n                    let fromBubbleJid = null;\r\n                    let fromBubbleUserJid = null;\r\n                    let alternativeContent = undefined;\r\n                    let subject = messageObj.subject;\r\n                    if (messageObj.content) {\r\n                        alternativeContent = [];\r\n                        alternativeContent.push({\r\n                            \"message\": messageObj.content.data,\r\n                            \"type\": messageObj.content.type\r\n                        });\r\n                    }\r\n                    if (isGroup) {\r\n                        //that._conversations.get\r\n                        //fromBubbleJid = ;\r\n                        //fromBubbleUserJid = ;\r\n                    }\r\n                    let data = {\r\n                        \"fromJid\": contact.jid_im,\r\n                        \"resource\": resource,\r\n                        \"toJid\": toJid,\r\n                        \"type\": messageType,\r\n                        subject,\r\n                        \"content\": body,\r\n                        \"alternativeContent\": alternativeContent,\r\n                        \"id\": msgId,\r\n                        lang,\r\n                        \"cc\": false,\r\n                        \"cctype\": \"\",\r\n                        \"isEvent\": false,\r\n                        oob,\r\n                        \"date\": datetime,\r\n                        fromBubbleJid,\r\n                        fromBubbleUserJid,\r\n                        \"event\": null,\r\n                        \"eventJid\": null,\r\n                        \"originalMessageReplaced\": null,\r\n                        \"attention\": undefined,\r\n                        conversation: undefined\r\n                    };\r\n                    /*if (!body) {\r\n                        that.logger.log(\"debug\", LOG_ID + \"(_onMessageReceived) with no message text, so ignore it!\");\r\n                        return false;\r\n                    } // */\r\n                    data.conversation = conversation;\r\n                    data.conversation.addMessage(data);\r\n                    /*if (data.conversation.messages.length === 0 || !data.conversation.messages.find((elmt) => { if (elmt.id === data.id) { return elmt; } })) {\r\n                        data.conversation.messages.push(data);\r\n                    } // */\r\n                    if (this.shouldSendReadReceipt) {\r\n                        yield that._rest.markMessageAsRead(conversationId, msgId);\r\n                    }\r\n                    that._eventEmitter.emit(\"evt_internal_onmessagereceived\", data);\r\n                    that._eventEmitter.emit(\"evt_internal_conversationupdated\", conversation);\r\n                    that._logger.log(\"info\", LOG_ID + \"(ParseMessageCallback) message - conversation received\");\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    ParseRoomInviteCallback(content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"internal\", LOG_ID + \"(ParseRoomInviteCallback)  Content:[\", content, \"]\");\r\n            let roomInvite = content[\"room-invite\"];\r\n            if (content && roomInvite) {\r\n                let roomId = roomInvite.id;\r\n                if (roomId) {\r\n                    let date = content.timestamp;\r\n                    let byUserId = roomInvite.by;\r\n                    let bubble = yield that._bulles.getBubbleById(roomId);\r\n                    /*let contact: Contact = await that._contacts.getContactById(byUserId, false);\r\n                    let invitationdetails = {\r\n                        bulle:bubble,\r\n                        invitedByContact: contact\r\n                    }; */\r\n                    that._logger.log(\"info\", LOG_ID + \"(ParseRoomInviteCallback) message - room-invite received\");\r\n                    that._eventEmitter.emit(\"evt_internal_invitationdetailsreceived\", bubble);\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    ParseRoomMemberCallback(content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"internal\", LOG_ID + \"(ParseRoomMemberCallback)  Content:[\", content, \"]\");\r\n            let roomMember = content[\"room-member\"];\r\n            if (content && roomMember) {\r\n                let roomId = roomMember.id;\r\n                if (roomId) {\r\n                    let date = content.timestamp;\r\n                    let status = roomMember.status;\r\n                    let bubble = yield that._bulles.getBubbleById(roomId);\r\n                    // that._logger.log(\"info\", LOG_ID + \"(ParseRoomMemberCallback) message - room-member received\");\r\n                    // that._eventEmitter.emit(\"evt_internal_invitationdetailsreceived\", bubble);\r\n                    that._eventEmitter.emit(\"evt_internal_ownaffiliationchanged\", {\r\n                        \"bubbleId\": bubble.id,\r\n                        \"bubbleJid\": bubble.jid,\r\n                        \"userJid\": that.jid_im,\r\n                        \"status\": status,\r\n                    });\r\n                    /*switch (status) {\r\n                        case \"accepted\":\r\n                            that._eventEmitter.emit(\"evt_internal_ownaffiliationchanged\", {\r\n                                \"bubbleId\": bubble.id,\r\n                                \"bubbleJid\": bubble.jid,\r\n                                \"userJid\": that.jid_im,\r\n                                \"status\": status,\r\n                            });\r\n                            //that._eventEmitter.emit(\"evt_internal_ownaffiliationdetailschanged\", bubble);\r\n                            break;\r\n                        case \"invited\":\r\n                            that._logger.log(\"info\", LOG_ID + \"(ParseRoomMemberCallback) message - room-member invited\");\r\n                            break;\r\n                        default:\r\n                            that._logger.log(\"error\", LOG_ID + \"(ParseRoomMemberCallback) error - unknown status type : \", status);\r\n                            break;\r\n                    } // */\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    ParseRoomStateCallback(content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"internal\", LOG_ID + \"(ParseRoomStateCallback)  Content:[\", content, \"]\");\r\n            /*\r\n                   { timestamp: '2020-02-25T15:29:58.976567Z',\r\n            'room-state': { id: '5e553d747cdc6514d72ee15a', event: 'available' },\r\n            id: '9665d516-57e3-11ea-8fb4-00505628611e' }\r\n                   */\r\n            let roomstate = content[\"room-state\"];\r\n            if (content && roomstate) {\r\n                let roomId = roomstate.id;\r\n                if (roomId) {\r\n                    let eventType = roomstate.event;\r\n                    /*\r\n                                          { timestamp: '2020-02-26T10:38:41.466598Z',\r\n                    'room-state': { id: '5e553d747cdc6514d72ee15a', event: 'deleted' },\r\n                    id: '0f3a674a-5884-11ea-889e-00505628611e' }\r\n                                           */\r\n                    //let conversation: Conversation = await that._conversations.getConversationByBubbleId(bubbleId);\r\n                    let bubble = yield that._bulles.getBubbleById(roomId);\r\n                    that._eventEmitter.emit(\"evt_internal_ownaffiliationchanged\", {\r\n                        \"bubbleId\": bubble.id,\r\n                        \"bubbleJid\": bubble.jid,\r\n                        \"userJid\": that.jid_im,\r\n                        \"status\": eventType,\r\n                    });\r\n                    /* switch (eventType) {\r\n                        case \"xxx\":\r\n                            //that.eventEmitter.emit(\"evt_internal_ownaffiliationdetailschanged\", bubble);\r\n                            break;\r\n                        case \"deleted\":\r\n                            that._logger.log(\"info\", LOG_ID + \"(ParseRoomStateCallback) message - room-state deleted\");\r\n    \r\n                            that._eventEmitter.emit(\"evt_internal_ownaffiliationchanged\", {\r\n                                \"bubbleId\": bubble.id,\r\n                                \"bubbleJid\": bubble.jid,\r\n                                \"userJid\": that.jid_im,\r\n                                \"status\": eventType,\r\n                            });\r\n                            break;\r\n                        default:\r\n                            that._logger.log(\"error\", LOG_ID + \"(ParseRoomMemberCallback) error - unknown eventType type : \", eventType);\r\n                            break;\r\n                    }\r\n                    // */\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    ParseAlldeletedCallback(content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"internal\", LOG_ID + \"(ParseAlldeletedCallback)  Content:[\", content, \"]\");\r\n            /*\r\n            { timestamp: '2020-02-21T13:50:38.919508Z',\r\n        id: 'ee564d90-54b0-11ea-85d9-00505628611e',\r\n        'all-deleted':\r\n        { with: '5c1a3df51490a30213b9d9e2',\r\n        conversation_id: '1553006776830736' } }\r\n             */\r\n            let roomstate = content[\"all-deleted\"];\r\n            if (content && roomstate) {\r\n                let conversationId = roomstate.conversation_id;\r\n                if (conversationId) {\r\n                    let withId = roomstate.with;\r\n                    let conversation = yield that._conversations.getOrCreateOneToOneConversation(withId, conversationId);\r\n                    that._logger.log(\"info\", LOG_ID + \"(ParseAlldeletedCallback) message - all-deleted received\");\r\n                    that._eventEmitter.emit(\"evt_internal_allmessagedremovedfromconversationreceived\", conversation);\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    ParseErrorCallback(content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let that = this;\r\n            that._logger.log(\"internal\", LOG_ID + \"(ParseErrorCallback)  Content:[\", content, \"]\");\r\n            let error = content[\"error\"];\r\n            if (content && error) {\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    start(_core) {\r\n        return new Promise((resolve, reject) => {\r\n            let that = this;\r\n            that._contacts = _core.contacts;\r\n            that._bulles = _core.bubbles;\r\n            that._conversations = _core.conversations;\r\n            that._rest = _core._rest;\r\n            resolve();\r\n        });\r\n    }\r\n};\r\nS2SServiceEventHandler = __decorate([\r\n    Utils_1.logEntryExit(LOG_ID)\r\n], S2SServiceEventHandler);\r\nexports.S2SServiceEventHandler = S2SServiceEventHandler;\r\nmodule.exports.S2SServiceEventHandler = S2SServiceEventHandler;\r\n//# sourceMappingURL=S2SServiceEventHandler.js.map"]},"metadata":{},"sourceType":"script"}