{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Utils_1 = require(\"./common/Utils\");\n\nconst XMPPService_1 = require(\"./connection/XMPPService\");\n\nconst RESTService_1 = require(\"./connection/RESTService\");\n\nconst HttpService_1 = require(\"./connection/HttpService\");\n\nconst Logger_1 = require(\"./common/Logger\");\n\nconst ImsService_1 = require(\"./services/ImsService\");\n\nconst PresenceService_1 = require(\"./services/PresenceService\");\n\nconst ChannelsService_1 = require(\"./services/ChannelsService\");\n\nconst ContactsService_1 = require(\"./services/ContactsService\");\n\nconst ConversationsService_1 = require(\"./services/ConversationsService\");\n\nconst ProfilesService_1 = require(\"./services/ProfilesService\");\n\nconst TelephonyService_1 = require(\"./services/TelephonyService\");\n\nconst BubblesService_1 = require(\"./services/BubblesService\");\n\nconst GroupsService_1 = require(\"./services/GroupsService\");\n\nconst AdminService_1 = require(\"./services/AdminService\");\n\nconst SettingsService_1 = require(\"./services/SettingsService\");\n\nconst FileServerService_1 = require(\"./services/FileServerService\");\n\nconst FileStorageService_1 = require(\"./services/FileStorageService\");\n\nconst StateManager_1 = require(\"./common/StateManager\");\n\nconst CallLogService_1 = require(\"./services/CallLogService\");\n\nconst FavoritesService_1 = require(\"./services/FavoritesService\");\n\nconst InvitationsService_1 = require(\"./services/InvitationsService\");\n\nconst Events_1 = require(\"./common/Events\");\n\nconst Options_1 = require(\"./config/Options\");\n\nconst ProxyImpl_1 = require(\"./ProxyImpl\");\n\nconst ErrorManager_1 = require(\"./common/ErrorManager\");\n\nconst semver_1 = require(\"semver\");\n\nconst S2SService_1 = require(\"./connection/S2S/S2SService\");\n\nconst packageVersion = require(\"../package.json\");\n\nlet _signin;\n\nlet _retrieveInformation;\n\nconst LOG_ID = \"CORE - \";\nlet Core = class Core {\n  constructor(options) {\n    let self = this;\n\n    self._signin = (forceStopXMPP, token) => {\n      let that = self;\n      that.logger.log(\"debug\", LOG_ID + \"(signin) _entering_\");\n      let json = null;\n      return new Promise(function (resolve, reject) {\n        if (that.options.useXMPP) {\n          return that._xmpp.stop(forceStopXMPP).then(() => {\n            return that._rest.signin(token);\n          }).then(_json => {\n            json = _json;\n            let headers = {\n              \"headers\": {\n                \"Authorization\": \"Bearer \" + that._rest.token,\n                \"x-rainbow-client\": \"sdk_node\",\n                \"x-rainbow-client-version\": packageVersion.version // \"Accept\": accept || \"application/json\",\n\n              }\n            };\n            return that._xmpp.signin(that._rest.loggedInUser, headers);\n          }).then(function () {\n            that.logger.log(\"debug\", LOG_ID + \"(signin) signed in successfully\");\n            that.logger.log(\"debug\", LOG_ID + \"(signin) _exiting_\");\n            resolve(json);\n          }).catch(function (err) {\n            that.logger.log(\"error\", LOG_ID + \"(signin) can't signed-in.\");\n            that.logger.log(\"internalerror\", LOG_ID + \"(signin) can't signed-in\", err);\n            that.logger.log(\"debug\", LOG_ID + \"(signin) _exiting_\");\n            reject(err);\n          });\n        }\n\n        if (that.options.useS2S) {\n          return that._rest.signin(token).then(_json => __awaiter(this, void 0, void 0, function* () {\n            json = _json;\n            let headers = {\n              \"headers\": {\n                \"Authorization\": \"Bearer \" + that._rest.token,\n                \"x-rainbow-client\": \"sdk_node\",\n                \"x-rainbow-client-version\": packageVersion.version // \"Accept\": accept || \"application/json\",\n\n              }\n            };\n            return that._s2s.signin(that._rest.loggedInUser, headers);\n          })).then(function () {\n            that.logger.log(\"debug\", LOG_ID + \"(signin) signed in successfully\");\n            that.logger.log(\"debug\", LOG_ID + \"(signin) _exiting_\");\n            resolve(json);\n          }).catch(function (err) {\n            that.logger.log(\"error\", LOG_ID + \"(signin) can't signed-in.\");\n            that.logger.log(\"internalerror\", LOG_ID + \"(signin) can't signed-in\", err);\n            that.logger.log(\"debug\", LOG_ID + \"(signin) _exiting_\");\n            reject(err);\n          });\n        } else {\n          that._rest.signin(token).then(_json => {\n            json = _json;\n            let headers = {\n              \"headers\": {\n                \"Authorization\": \"Bearer \" + that._rest.token,\n                \"x-rainbow-client\": \"sdk_node\",\n                \"x-rainbow-client-version\": packageVersion.version // \"Accept\": accept || \"application/json\",\n\n              }\n            };\n            that.logger.log(\"debug\", LOG_ID + \"(signin) signed in successfully\");\n            that.logger.log(\"debug\", LOG_ID + \"(signin) _exiting_\");\n            resolve(json);\n          });\n        }\n      });\n    };\n\n    self._retrieveInformation = () => {\n      let that = self;\n      that.logger.log(\"debug\", LOG_ID + \"(_retrieveInformation).\"); //that.logger.log(\"internal\", LOG_ID + \"(_retrieveInformation) options : \", that.options);\n\n      return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n        if (that.options.testOutdatedVersion) {\n          yield that._rest.getRainbowNodeSdkPackagePublishedInfos().then(infos => {\n            // self.logger.log(\"internal\", LOG_ID +  \"(getRainbowNodeSdkPackagePublishedInfos) infos : \", infos);\n            infos.results.forEach(packagePublished => {\n              if (packagePublished.package.name === packageVersion.name) {\n                //if (packagePublished.package.version !== packageVersion.version) {\n                if (semver_1.lt(packageVersion.version, packagePublished.package.version)) {\n                  self.logger.log(\"error\", LOG_ID + \"(getRainbowNodeSdkPackagePublishedInfos)  \\n \" + \"*******************************************************\\n\\n\", self.logger.colors.red.underline(\"WARNING : \"), self.logger.colors.italic(\"\\n  curent rainbow-node-sdk version : \" + packageVersion.version + \" is OLDER than the latest available one on npmjs.com : \" + packagePublished.package.version + \"\\n  please update it (npm install rainbow-node-sdk@latest) and use the CHANGELOG to consider the changes.\"), \"\\n\\n*******************************************************\");\n                  let error = {\n                    \"label\": \"curent rainbow-node-sdk version : \" + packageVersion.version + \" is OLDER than the latest available one on npmjs.com : \" + packagePublished.package.version + \" please update it (npm install rainbow-node-sdk@latest) and use the CHANGELOG to consider the changes.\",\n                    \"currentPackage\": packageVersion.version,\n                    \"latestPublishedPackage\": packagePublished.package.version\n                  };\n\n                  self._eventEmitter.iee.emit(\"evt_internal_onrainbowversionwarning\", error); //self.events.publish(\"rainbowversionwarning\", error);\n\n                }\n              }\n            });\n          }).catch(error => {\n            self.logger.log(\"error\", LOG_ID + \"(getRainbowNodeSdkPackagePublishedInfos) error : \", error); // self.logger.log(\"internalerror\", LOG_ID +  \"(getRainbowNodeSdkPackagePublishedInfos) error : \", error);\n          });\n        }\n\n        if (that.options.useS2S) {\n          return that._contacts.getRosters().then(() => {\n            return that._profiles.init();\n          }).then(() => {\n            return that._telephony.init();\n          }).then(() => {\n            return that._contacts.init();\n          }).then(() => {\n            return that._fileStorage.init();\n          }).then(() => {\n            return that._fileServer.init();\n          }).then(() => {\n            return that.presence._sendPresenceFromConfiguration();\n          }).then(() => {\n            return that._bubbles.getBubbles();\n          }).then(() => {\n            return that._channels.fetchMyChannels();\n          }).then(() => {\n            return that._groups.getGroups();\n          }).then(() => {\n            //return that.presence.sendInitialPresence();\n            return Promise.resolve();\n          }).then(() => {\n            //return that.im.enableCarbon();\n            return Promise.resolve();\n          }).then(() => {\n            return that._rest.getBots();\n          }).then(bots => {\n            that._botsjid = bots ? bots.map(bot => {\n              return bot.jid;\n            }) : [];\n            return Promise.resolve();\n          }).then(() => {\n            return that._conversations.getServerConversations();\n          }).then(() => {\n            return that._calllog.init();\n          }).then(() => {\n            return that._favorites.init();\n          }).then(() => {\n            return that._invitations.init();\n          }).then(() => {\n            return that._s2s.listConnectionsS2S();\n          }).then(() => {\n            resolve();\n          }).catch(err => {\n            that.logger.log(\"error\", LOG_ID + \"(_retrieveInformation) !!! CATCH  Error while initializing services.\");\n            that.logger.log(\"internalerror\", LOG_ID + \"(_retrieveInformation) !!! CATCH  Error while initializing services : \", err);\n            reject(err);\n          }); //return resolve();\n        }\n\n        if (that.options.useCLIMode) {\n          return resolve();\n        }\n\n        if (that.options.useXMPP) {\n          return that._contacts.getRosters().then(() => {\n            return that._profiles.init();\n          }).then(() => {\n            return that._telephony.init();\n          }).then(() => {\n            return that._contacts.init();\n          }).then(() => {\n            return that._fileStorage.init();\n          }).then(() => {\n            return that._fileServer.init();\n          }).then(() => {\n            return that.presence._sendPresenceFromConfiguration();\n          }).then(() => {\n            return that._bubbles.getBubbles();\n          }).then(() => {\n            return that._channels.fetchMyChannels();\n          }).then(() => {\n            return that._groups.getGroups();\n          }).then(() => {\n            //return that.presence.sendInitialPresence();\n            return Promise.resolve();\n          }).then(() => {\n            return that.im.enableCarbon();\n          }).then(() => {\n            return that._rest.getBots();\n          }).then(bots => {\n            that._botsjid = bots ? bots.map(bot => {\n              return bot.jid;\n            }) : [];\n            return Promise.resolve();\n          }).then(() => {\n            return that._conversations.getServerConversations();\n          }).then(() => {\n            return that._calllog.init();\n          }).then(() => {\n            return that._favorites.init();\n          }).then(() => {\n            return that._invitations.init();\n          }).then(() => {\n            resolve();\n          }).catch(err => {\n            that.logger.log(\"error\", LOG_ID + \"(_retrieveInformation) !!! CATCH  Error while initializing services.\");\n            that.logger.log(\"internalerror\", LOG_ID + \"(_retrieveInformation) !!! CATCH  Error while initializing services : \", err);\n            reject(err);\n          });\n        }\n      }));\n    };\n\n    self.onTokenRenewed = function onTokenRenewed() {\n      self.logger.log(\"info\", LOG_ID + \"(tokenSurvey) token successfully renewed\");\n\n      self._rest.startTokenSurvey();\n    };\n\n    self.onTokenExpired = function onTokenExpired() {\n      self.logger.log(\"info\", LOG_ID + \"(tokenSurvey) token expired. Signin required\");\n      /*\n                  self._eventEmitter.iee.removeListener(\"rainbow_tokenrenewed\", self.onTokenRenewed.bind(self));\n                  self._eventEmitter.iee.removeListener(\"rainbow_tokenexpired\", self.onTokenExpired.bind(self));\n      */\n\n      self._eventEmitter.iee.emit(\"evt_internal_signinrequired\");\n    };\n\n    self._tokenSurvey = () => {\n      let that = self;\n      that.logger.log(\"debug\", LOG_ID + \"(tokenSurvey) _enter_\");\n\n      if (that.options.useCLIMode) {\n        that.logger.log(\"info\", LOG_ID + \"(tokenSurvey) No token survey in CLI mode\");\n        return;\n      }\n      /*\n                  that._eventEmitter.iee.removeListener(\"rainbow_tokenrenewed\", that.onTokenRenewed.bind(that));\n                  that._eventEmitter.iee.removeListener(\"rainbow_tokenexpired\", that.onTokenExpired.bind(that));\n                  that._eventEmitter.iee.on(\"rainbow_tokenrenewed\", that.onTokenRenewed.bind(that));\n                  that._eventEmitter.iee.on(\"rainbow_tokenexpired\", that.onTokenExpired.bind(that));\n      */\n\n\n      that._rest.startTokenSurvey();\n    }; // Initialize the logger\n\n\n    let loggerModule = new Logger_1.Logger(options);\n    self.logger = loggerModule.log;\n    self.logger.log(\"debug\", LOG_ID + \"(constructor) _entering_\");\n    self.logger.log(\"debug\", LOG_ID + \"(constructor) ------- SDK INFORMATION -------\");\n    self.logger.log(\"info\", LOG_ID + \" (constructor) SDK version: \" + packageVersion.version);\n    self.logger.log(\"info\", LOG_ID + \" (constructor) Node version: \" + process.version);\n\n    for (let key in process.versions) {\n      self.logger.log(\"info\", LOG_ID + \" (constructor) \" + key + \" version: \" + process.versions[key]);\n    }\n\n    self.logger.log(\"debug\", LOG_ID + \"(constructor) ------- SDK INFORMATION -------\"); // Initialize the options\n\n    self.options = new Options_1.Options(options, self.logger);\n    self.options.parse(); // Initialize the Events Emitter\n\n    self._eventEmitter = new Events_1.Events(self.logger, jid => {\n      return self._botsjid.includes(jid);\n    });\n\n    self._eventEmitter.setCore(self);\n\n    self._eventEmitter.iee.on(\"evt_internal_signinrequired\", () => __awaiter(this, void 0, void 0, function* () {\n      yield self.signin(true, undefined);\n    }));\n\n    self._eventEmitter.iee.on(\"rainbow_application_token_updated\", function (token) {\n      self._rest.applicationToken = token;\n    });\n\n    self._eventEmitter.iee.on(\"evt_internal_xmppfatalerror\", err => __awaiter(this, void 0, void 0, function* () {\n      console.log(\"Error XMPP, Stop le SDK : \", err);\n      yield self._stateManager.transitTo(self._stateManager.ERROR, err);\n      yield self.stop().then(function (result) {//let success = ErrorManager.getErrorManager().OK;\n      }).catch(function (err) {\n        let error = ErrorManager_1.ErrorManager.getErrorManager().ERROR;\n        error.msg = err;\n        self.events.publish(\"stopped\", error);\n      });\n    }));\n\n    self._eventEmitter.iee.on(\"rainbow_xmppreconnected\", function () {\n      let that = self; //todo, check that REST part is ok too\n\n      self._rest.reconnect().then(data => {\n        self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppreconnected) reconnect succeed : so change state to connected\");\n        self.logger.log(\"internal\", LOG_ID + \" (rainbow_xmppreconnected) reconnect succeed : \", data, \" so change state to connected\");\n        return self._stateManager.transitTo(self._stateManager.CONNECTED).then(data2 => {\n          self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppreconnected) transition to connected succeed.\");\n          self.logger.log(\"internal\", LOG_ID + \" (rainbow_xmppreconnected) transition to connected succeed : \", data2);\n          return self._retrieveInformation();\n        });\n      }).then(data3 => {\n        self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppreconnected) _retrieveInformation succeed, change state to ready\");\n        self.logger.log(\"internal\", LOG_ID + \" (rainbow_xmppreconnected) _retrieveInformation succeed : \", data3, \" change state to ready\");\n\n        self._stateManager.transitTo(self._stateManager.READY).then(data4 => {\n          self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppreconnected) transition to ready succeed.\");\n          self.logger.log(\"internal\", LOG_ID + \" (rainbow_xmppreconnected) transition to ready succeed : \", data4);\n        });\n      }).catch(err => __awaiter(this, void 0, void 0, function* () {\n        // If not already connected, it is an error in xmpp connection, so should failed\n        if (!self._stateManager.isCONNECTED()) {\n          self.logger.log(\"error\", LOG_ID + \" (rainbow_xmppreconnected) REST connection \", self._stateManager.FAILED);\n          self.logger.log(\"internalerror\", LOG_ID + \" (rainbow_xmppreconnected) REST connection \", self._stateManager.FAILED, \", ErrorManager : \", err);\n          yield self._stateManager.transitTo(self._stateManager.FAILED);\n        } else {\n          self.logger.log(\"warn\", LOG_ID + \" (rainbow_xmppreconnected) REST reconnection Error, set state : \", self._stateManager.DISCONNECTED);\n          self.logger.log(\"internalerror\", LOG_ID + \" (rainbow_xmppreconnected) REST reconnection ErrorManager : \", err, \", set state : \", self._stateManager.DISCONNECTED); // ErrorManager in REST micro service, so let say it is disconnected\n\n          yield self._stateManager.transitTo(self._stateManager.DISCONNECTED); // relaunch the REST connection.\n\n          self._eventEmitter.iee.emit(\"rainbow_xmppreconnected\");\n        }\n      }));\n    });\n\n    self._eventEmitter.iee.on(\"rainbow_xmppreconnectingattempt\", function () {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield self._stateManager.transitTo(self._stateManager.RECONNECTING);\n      });\n    });\n\n    self._eventEmitter.iee.on(\"rainbow_xmppdisconnect\", function (xmppDisconnectInfos) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (xmppDisconnectInfos && xmppDisconnectInfos.reconnect) {\n          self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppdisconnect) set to state : \", self._stateManager.DISCONNECTED);\n          yield self._stateManager.transitTo(self._stateManager.DISCONNECTED);\n        } else {\n          self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppdisconnect) set to state : \", self._stateManager.STOPPED);\n          yield self._stateManager.transitTo(self._stateManager.STOPPED);\n        }\n      });\n    });\n\n    self._eventEmitter.iee.on(\"rainbow_tokenrenewed\", self.onTokenRenewed.bind(self));\n\n    self._eventEmitter.iee.on(\"rainbow_tokenexpired\", self.onTokenExpired.bind(self));\n\n    if (self.options.useXMPP) {\n      self.logger.log(\"info\", LOG_ID + \"(constructor) used in XMPP mode\");\n    } else {\n      if (self.options.useCLIMode) {\n        self.logger.log(\"info\", LOG_ID + \"(constructor) used in CLI mode\");\n      } else {\n        self.logger.log(\"info\", LOG_ID + \"(constructor) used in HOOK mode\");\n      }\n    } // Instantiate basic service\n\n\n    self._proxy = new ProxyImpl_1.ProxyImpl(self.options.proxyOptions, self.logger);\n    self._http = new HttpService_1.HTTPService(self.options.httpOptions, self.logger, self._proxy, self._eventEmitter.iee);\n    self._rest = new RESTService_1.RESTService(self.options.credentials, self.options.applicationOptions, self.options._isOfficialRainbow(), self._eventEmitter.iee, self.logger);\n    self._xmpp = new XMPPService_1.XMPPService(self.options.xmppOptions, self.options.imOptions, self.options.applicationOptions, self._eventEmitter.iee, self.logger, self._proxy);\n    self._s2s = new S2SService_1.S2SService(self.options.s2sOptions, self.options.imOptions, self.options.applicationOptions, self._eventEmitter.iee, self.logger, self._proxy); // Instantiate State Manager\n\n    self._stateManager = new StateManager_1.StateManager(self._eventEmitter, self.logger); // Instantiate others Services\n\n    self._im = new ImsService_1.IMService(self._eventEmitter.iee, self.logger, self.options.imOptions, self.options.servicesToStart.im);\n    self._presence = new PresenceService_1.PresenceService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.presence);\n    self._channels = new ChannelsService_1.ChannelsService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.channels);\n    self._contacts = new ContactsService_1.ContactsService(self._eventEmitter.iee, self.options.httpOptions, self.logger, self.options.servicesToStart.contacts);\n    self._conversations = new ConversationsService_1.ConversationsService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.conversations, self.options.imOptions.conversationsRetrievedFormat, self.options.imOptions.nbMaxConversations);\n    self._profiles = new ProfilesService_1.ProfilesService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.profiles);\n    self._telephony = new TelephonyService_1.TelephonyService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.telephony);\n    self._bubbles = new BubblesService_1.BubblesService(self._eventEmitter.iee, self.options.httpOptions, self.logger, self.options.servicesToStart.bubbles);\n    self._groups = new GroupsService_1.GroupsService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.groups);\n    self._admin = new AdminService_1.AdminService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.admin);\n    self._settings = new SettingsService_1.SettingsService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.settings);\n    self._fileServer = new FileServerService_1.FileServerService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.fileServer);\n    self._fileStorage = new FileStorageService_1.FileStorageService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.fileStorage);\n    self._calllog = new CallLogService_1.CallLogService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.calllog);\n    self._favorites = new FavoritesService_1.FavoritesService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.favorites);\n    self._invitations = new InvitationsService_1.InvitationsService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.invitation);\n    self._botsjid = [];\n    self.logger.log(\"debug\", LOG_ID + \"(constructor) _exiting_\");\n  }\n\n  start(token) {\n    let that = this;\n    this.logger.log(\"debug\", LOG_ID + \"(start) _entering_\");\n    this.logger.log(\"info\", LOG_ID + \"(start) STARTING the SDK : \", packageVersion.version);\n    return new Promise(function (resolve, reject) {\n      try {\n        if (!that.options.hasCredentials && !token) {\n          that.logger.log(\"error\", LOG_ID + \"(start) No credentials. Stop loading...\");\n          that.logger.log(\"debug\", LOG_ID + \"(start) _exiting_\");\n          reject(\"Credentials are missing. Check your configuration!\");\n        } else {\n          that.logger.log(\"debug\", LOG_ID + \"(start) start all modules\");\n          that.logger.log(\"internal\", LOG_ID + \"(start) start all modules for user : \", that.options.credentials.login);\n          that.logger.log(\"internal\", LOG_ID + \"(start) servicesToStart : \", that.options.servicesToStart);\n          return that._stateManager.start().then(() => {\n            return that._http.start();\n          }).then(() => {\n            return that._rest.start(that._http);\n          }).then(() => {\n            return that._xmpp.start(that.options.useXMPP);\n          }).then(() => {\n            return that._s2s.start(that.options, that);\n          }).then(() => {\n            return that._settings.start(that.options, that);\n          }).then(() => {\n            return that._presence.start(that.options, that);\n          }).then(() => {\n            return that._contacts.start(that.options, that);\n          }).then(() => {\n            return that._bubbles.start(that.options, that);\n          }).then(() => {\n            return that._conversations.start(that.options, that);\n          }).then(() => {\n            return that._profiles.start(that.options, that, []);\n          }).then(() => {\n            return that._telephony.start(that.options, that);\n          }).then(() => {\n            return that._im.start(that.options, that);\n          }).then(() => {\n            return that._channels.start(that.options, that);\n          }).then(() => {\n            return that._groups.start(that.options, that);\n          }).then(() => {\n            return that._admin.start(that.options, that);\n          }).then(() => {\n            return that._fileServer.start(that.options, that);\n          }).then(() => {\n            return that._fileStorage.start(that.options, that);\n          }).then(() => {\n            return that._calllog.start(that.options, that);\n          }).then(() => {\n            return that._favorites.start(that.options, that);\n          }).then(() => {\n            return that._invitations.start(that.options, that, []);\n          }).then(() => {\n            that.logger.log(\"debug\", LOG_ID + \"(start) all modules started successfully\");\n\n            that._stateManager.transitTo(that._stateManager.STARTED).then(() => {\n              that.logger.log(\"debug\", LOG_ID + \"(start) _exiting_\");\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          }).catch(err => {\n            that.logger.log(\"error\", LOG_ID + \"(start) !!! CATCH Error during bulding services instances.\");\n            that.logger.log(\"internalerror\", LOG_ID + \"(start) !!! CATCH Error during bulding services instances : \", err);\n            that.logger.log(\"debug\", LOG_ID + \"(start) _exiting_\");\n            reject(err);\n          });\n        }\n      } catch (err) {\n        that.logger.log(\"error\", LOG_ID + \"(start)\");\n        that.logger.log(\"internalerror\", LOG_ID + \"(start)\", err.message);\n        that.logger.log(\"debug\", LOG_ID + \"(start) _exiting_\");\n        reject(err);\n      }\n    });\n  }\n\n  signin(forceStopXMPP, token) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      let json = null;\n      return that._signin(forceStopXMPP, token).then(function (_json) {\n        json = _json;\n\n        that._tokenSurvey();\n\n        return that._stateManager.transitTo(that._stateManager.CONNECTED).then(() => {\n          return that._retrieveInformation();\n        });\n      }).then(() => {\n        that._stateManager.transitTo(that._stateManager.READY).then(() => {\n          resolve(json);\n        }).catch(err => {\n          reject(err);\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  stop() {\n    let that = this;\n    this.logger.log(\"debug\", LOG_ID + \"(stop) _entering_\");\n    return new Promise(function (resolve, reject) {\n      if (that._stateManager.isSTOPPED()) {\n        return resolve(\"core already stopped !\");\n      }\n\n      that.logger.log(\"debug\", LOG_ID + \"(stop) stop all modules\");\n\n      that._s2s.stop().then(() => {\n        return that._rest.stop();\n      }).then(() => {\n        return that._http.stop();\n      }).then(() => {\n        return that._xmpp.stop(that.options.useXMPP);\n      }).then(() => {\n        return that._im.stop();\n      }).then(() => {\n        return that._settings.stop();\n      }).then(() => {\n        return that._presence.stop();\n      }).then(() => {\n        return that._conversations.stop();\n      }).then(() => {\n        return that._telephony.stop();\n      }).then(() => {\n        return that._contacts.stop();\n      }).then(() => {\n        return that._bubbles.stop();\n      }).then(() => {\n        return that._channels.stop();\n      }).then(() => {\n        return that._groups.stop();\n      }).then(() => {\n        return that._admin.stop();\n      }).then(() => {\n        return that._fileServer.stop();\n      }).then(() => {\n        return that._fileStorage.stop();\n      }).then(() => {\n        return that._stateManager.stop();\n      }).then(() => {\n        return that._calllog.stop();\n      }).then(() => {\n        return that._favorites.stop();\n      }).then(() => {\n        return that._invitations.stop();\n      }).then(() => {\n        that.logger.log(\"debug\", LOG_ID + \"(stop) _exiting_\");\n        resolve(\"core stopped\");\n      }).catch(err => {\n        that.logger.log(\"error\", LOG_ID + \"(stop) CATCH Error !!! \");\n        that.logger.log(\"internalerror\", LOG_ID + \"(stop) CATCH Error !!! : \", err);\n        that.logger.log(\"debug\", LOG_ID + \"(stop) _exiting_\");\n        reject(err);\n      });\n    });\n  }\n\n  get settings() {\n    return this._settings;\n  }\n\n  get presence() {\n    return this._presence;\n  }\n\n  get profiles() {\n    return this._profiles;\n  }\n\n  get im() {\n    return this._im;\n  }\n\n  get invitations() {\n    return this._invitations;\n  }\n\n  get contacts() {\n    return this._contacts;\n  }\n\n  get conversations() {\n    return this._conversations;\n  }\n\n  get channels() {\n    return this._channels;\n  }\n\n  get bubbles() {\n    return this._bubbles;\n  }\n\n  get groups() {\n    return this._groups;\n  }\n\n  get admin() {\n    return this._admin;\n  }\n\n  get fileServer() {\n    return this._fileServer;\n  }\n\n  get fileStorage() {\n    return this._fileStorage;\n  }\n\n  get events() {\n    return this._eventEmitter;\n  }\n\n  get rest() {\n    return this._rest;\n  }\n\n  get state() {\n    return this._stateManager.state;\n  }\n\n  get version() {\n    return packageVersion.version;\n  }\n\n  get telephony() {\n    return this._telephony;\n  }\n\n  get calllog() {\n    return this._calllog;\n  }\n\n};\nCore = __decorate([Utils_1.logEntryExit(LOG_ID)], Core);\nexports.Core = Core; //module.exports = Core;\n\nmodule.exports.Core = Core;","map":{"version":3,"sources":["../src/lib/Core.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils_1 = require(\"./common/Utils\");\nconst XMPPService_1 = require(\"./connection/XMPPService\");\nconst RESTService_1 = require(\"./connection/RESTService\");\nconst HttpService_1 = require(\"./connection/HttpService\");\nconst Logger_1 = require(\"./common/Logger\");\nconst ImsService_1 = require(\"./services/ImsService\");\nconst PresenceService_1 = require(\"./services/PresenceService\");\nconst ChannelsService_1 = require(\"./services/ChannelsService\");\nconst ContactsService_1 = require(\"./services/ContactsService\");\nconst ConversationsService_1 = require(\"./services/ConversationsService\");\nconst ProfilesService_1 = require(\"./services/ProfilesService\");\nconst TelephonyService_1 = require(\"./services/TelephonyService\");\nconst BubblesService_1 = require(\"./services/BubblesService\");\nconst GroupsService_1 = require(\"./services/GroupsService\");\nconst AdminService_1 = require(\"./services/AdminService\");\nconst SettingsService_1 = require(\"./services/SettingsService\");\nconst FileServerService_1 = require(\"./services/FileServerService\");\nconst FileStorageService_1 = require(\"./services/FileStorageService\");\nconst StateManager_1 = require(\"./common/StateManager\");\nconst CallLogService_1 = require(\"./services/CallLogService\");\nconst FavoritesService_1 = require(\"./services/FavoritesService\");\nconst InvitationsService_1 = require(\"./services/InvitationsService\");\nconst Events_1 = require(\"./common/Events\");\nconst Options_1 = require(\"./config/Options\");\nconst ProxyImpl_1 = require(\"./ProxyImpl\");\nconst ErrorManager_1 = require(\"./common/ErrorManager\");\nconst semver_1 = require(\"semver\");\nconst S2SService_1 = require(\"./connection/S2S/S2SService\");\nconst packageVersion = require(\"../package.json\");\nlet _signin;\nlet _retrieveInformation;\nconst LOG_ID = \"CORE - \";\nlet Core = class Core {\n    constructor(options) {\n        let self = this;\n        self._signin = (forceStopXMPP, token) => {\n            let that = self;\n            that.logger.log(\"debug\", LOG_ID + \"(signin) _entering_\");\n            let json = null;\n            return new Promise(function (resolve, reject) {\n                if (that.options.useXMPP) {\n                    return that._xmpp.stop(forceStopXMPP).then(() => {\n                        return that._rest.signin(token);\n                    }).then((_json) => {\n                        json = _json;\n                        let headers = {\n                            \"headers\": {\n                                \"Authorization\": \"Bearer \" + that._rest.token,\n                                \"x-rainbow-client\": \"sdk_node\",\n                                \"x-rainbow-client-version\": packageVersion.version\n                                // \"Accept\": accept || \"application/json\",\n                            }\n                        };\n                        return that._xmpp.signin(that._rest.loggedInUser, headers);\n                    }).then(function () {\n                        that.logger.log(\"debug\", LOG_ID + \"(signin) signed in successfully\");\n                        that.logger.log(\"debug\", LOG_ID + \"(signin) _exiting_\");\n                        resolve(json);\n                    }).catch(function (err) {\n                        that.logger.log(\"error\", LOG_ID + \"(signin) can't signed-in.\");\n                        that.logger.log(\"internalerror\", LOG_ID + \"(signin) can't signed-in\", err);\n                        that.logger.log(\"debug\", LOG_ID + \"(signin) _exiting_\");\n                        reject(err);\n                    });\n                }\n                if (that.options.useS2S) {\n                    return that._rest.signin(token).then((_json) => __awaiter(this, void 0, void 0, function* () {\n                        json = _json;\n                        let headers = {\n                            \"headers\": {\n                                \"Authorization\": \"Bearer \" + that._rest.token,\n                                \"x-rainbow-client\": \"sdk_node\",\n                                \"x-rainbow-client-version\": packageVersion.version\n                                // \"Accept\": accept || \"application/json\",\n                            }\n                        };\n                        return that._s2s.signin(that._rest.loggedInUser, headers);\n                    })).then(function () {\n                        that.logger.log(\"debug\", LOG_ID + \"(signin) signed in successfully\");\n                        that.logger.log(\"debug\", LOG_ID + \"(signin) _exiting_\");\n                        resolve(json);\n                    }).catch(function (err) {\n                        that.logger.log(\"error\", LOG_ID + \"(signin) can't signed-in.\");\n                        that.logger.log(\"internalerror\", LOG_ID + \"(signin) can't signed-in\", err);\n                        that.logger.log(\"debug\", LOG_ID + \"(signin) _exiting_\");\n                        reject(err);\n                    });\n                }\n                else {\n                    that._rest.signin(token).then((_json) => {\n                        json = _json;\n                        let headers = {\n                            \"headers\": {\n                                \"Authorization\": \"Bearer \" + that._rest.token,\n                                \"x-rainbow-client\": \"sdk_node\",\n                                \"x-rainbow-client-version\": packageVersion.version\n                                // \"Accept\": accept || \"application/json\",\n                            }\n                        };\n                        that.logger.log(\"debug\", LOG_ID + \"(signin) signed in successfully\");\n                        that.logger.log(\"debug\", LOG_ID + \"(signin) _exiting_\");\n                        resolve(json);\n                    });\n                }\n            });\n        };\n        self._retrieveInformation = () => {\n            let that = self;\n            that.logger.log(\"debug\", LOG_ID + \"(_retrieveInformation).\");\n            //that.logger.log(\"internal\", LOG_ID + \"(_retrieveInformation) options : \", that.options);\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                if (that.options.testOutdatedVersion) {\n                    yield that._rest.getRainbowNodeSdkPackagePublishedInfos().then((infos) => {\n                        // self.logger.log(\"internal\", LOG_ID +  \"(getRainbowNodeSdkPackagePublishedInfos) infos : \", infos);\n                        infos.results.forEach((packagePublished) => {\n                            if (packagePublished.package.name === packageVersion.name) {\n                                //if (packagePublished.package.version !== packageVersion.version) {\n                                if (semver_1.lt(packageVersion.version, packagePublished.package.version)) {\n                                    self.logger.log(\"error\", LOG_ID + \"(getRainbowNodeSdkPackagePublishedInfos)  \\n \" +\n                                        \"*******************************************************\\n\\n\", self.logger.colors.red.underline(\"WARNING : \"), self.logger.colors.italic(\"\\n  curent rainbow-node-sdk version : \" + packageVersion.version + \" is OLDER than the latest available one on npmjs.com : \" + packagePublished.package.version + \"\\n  please update it (npm install rainbow-node-sdk@latest) and use the CHANGELOG to consider the changes.\"), \"\\n\\n*******************************************************\");\n                                    let error = {\n                                        \"label\": \"curent rainbow-node-sdk version : \" + packageVersion.version + \" is OLDER than the latest available one on npmjs.com : \" + packagePublished.package.version + \" please update it (npm install rainbow-node-sdk@latest) and use the CHANGELOG to consider the changes.\",\n                                        \"currentPackage\": packageVersion.version,\n                                        \"latestPublishedPackage\": packagePublished.package.version\n                                    };\n                                    self._eventEmitter.iee.emit(\"evt_internal_onrainbowversionwarning\", error);\n                                    //self.events.publish(\"rainbowversionwarning\", error);\n                                }\n                            }\n                        });\n                    }).catch((error) => {\n                        self.logger.log(\"error\", LOG_ID + \"(getRainbowNodeSdkPackagePublishedInfos) error : \", error);\n                        // self.logger.log(\"internalerror\", LOG_ID +  \"(getRainbowNodeSdkPackagePublishedInfos) error : \", error);\n                    });\n                }\n                if (that.options.useS2S) {\n                    return that._contacts.getRosters()\n                        .then(() => {\n                        return that._profiles.init();\n                    }).then(() => {\n                        return that._telephony.init();\n                    }).then(() => {\n                        return that._contacts.init();\n                    }).then(() => {\n                        return that._fileStorage.init();\n                    }).then(() => {\n                        return that._fileServer.init();\n                    }).then(() => {\n                        return that.presence._sendPresenceFromConfiguration();\n                    }).then(() => {\n                        return that._bubbles.getBubbles();\n                    }).then(() => {\n                        return that._channels.fetchMyChannels();\n                    }).then(() => {\n                        return that._groups.getGroups();\n                    }).then(() => {\n                        //return that.presence.sendInitialPresence();\n                        return Promise.resolve();\n                    }).then(() => {\n                        //return that.im.enableCarbon();\n                        return Promise.resolve();\n                    }).then(() => {\n                        return that._rest.getBots();\n                    }).then((bots) => {\n                        that._botsjid = bots ? bots.map((bot) => {\n                            return bot.jid;\n                        }) : [];\n                        return Promise.resolve();\n                    }).then(() => {\n                        return that._conversations.getServerConversations();\n                    }).then(() => {\n                        return that._calllog.init();\n                    }).then(() => {\n                        return that._favorites.init();\n                    }).then(() => {\n                        return that._invitations.init();\n                    }).then(() => {\n                        return that._s2s.listConnectionsS2S();\n                    }).then(() => {\n                        resolve();\n                    }).catch((err) => {\n                        that.logger.log(\"error\", LOG_ID + \"(_retrieveInformation) !!! CATCH  Error while initializing services.\");\n                        that.logger.log(\"internalerror\", LOG_ID + \"(_retrieveInformation) !!! CATCH  Error while initializing services : \", err);\n                        reject(err);\n                    });\n                    //return resolve();\n                }\n                if (that.options.useCLIMode) {\n                    return resolve();\n                }\n                if (that.options.useXMPP) {\n                    return that._contacts.getRosters()\n                        .then(() => {\n                        return that._profiles.init();\n                    }).then(() => {\n                        return that._telephony.init();\n                    }).then(() => {\n                        return that._contacts.init();\n                    }).then(() => {\n                        return that._fileStorage.init();\n                    }).then(() => {\n                        return that._fileServer.init();\n                    }).then(() => {\n                        return that.presence._sendPresenceFromConfiguration();\n                    }).then(() => {\n                        return that._bubbles.getBubbles();\n                    }).then(() => {\n                        return that._channels.fetchMyChannels();\n                    }).then(() => {\n                        return that._groups.getGroups();\n                    }).then(() => {\n                        //return that.presence.sendInitialPresence();\n                        return Promise.resolve();\n                    }).then(() => {\n                        return that.im.enableCarbon();\n                    }).then(() => {\n                        return that._rest.getBots();\n                    }).then((bots) => {\n                        that._botsjid = bots ? bots.map((bot) => {\n                            return bot.jid;\n                        }) : [];\n                        return Promise.resolve();\n                    }).then(() => {\n                        return that._conversations.getServerConversations();\n                    }).then(() => {\n                        return that._calllog.init();\n                    }).then(() => {\n                        return that._favorites.init();\n                    }).then(() => {\n                        return that._invitations.init();\n                    }).then(() => {\n                        resolve();\n                    }).catch((err) => {\n                        that.logger.log(\"error\", LOG_ID + \"(_retrieveInformation) !!! CATCH  Error while initializing services.\");\n                        that.logger.log(\"internalerror\", LOG_ID + \"(_retrieveInformation) !!! CATCH  Error while initializing services : \", err);\n                        reject(err);\n                    });\n                }\n            }));\n        };\n        self.onTokenRenewed = function onTokenRenewed() {\n            self.logger.log(\"info\", LOG_ID + \"(tokenSurvey) token successfully renewed\");\n            self._rest.startTokenSurvey();\n        };\n        self.onTokenExpired = function onTokenExpired() {\n            self.logger.log(\"info\", LOG_ID + \"(tokenSurvey) token expired. Signin required\");\n            /*\n                        self._eventEmitter.iee.removeListener(\"rainbow_tokenrenewed\", self.onTokenRenewed.bind(self));\n                        self._eventEmitter.iee.removeListener(\"rainbow_tokenexpired\", self.onTokenExpired.bind(self));\n            */\n            self._eventEmitter.iee.emit(\"evt_internal_signinrequired\");\n        };\n        self._tokenSurvey = () => {\n            let that = self;\n            that.logger.log(\"debug\", LOG_ID + \"(tokenSurvey) _enter_\");\n            if (that.options.useCLIMode) {\n                that.logger.log(\"info\", LOG_ID + \"(tokenSurvey) No token survey in CLI mode\");\n                return;\n            }\n            /*\n                        that._eventEmitter.iee.removeListener(\"rainbow_tokenrenewed\", that.onTokenRenewed.bind(that));\n                        that._eventEmitter.iee.removeListener(\"rainbow_tokenexpired\", that.onTokenExpired.bind(that));\n                        that._eventEmitter.iee.on(\"rainbow_tokenrenewed\", that.onTokenRenewed.bind(that));\n                        that._eventEmitter.iee.on(\"rainbow_tokenexpired\", that.onTokenExpired.bind(that));\n            */\n            that._rest.startTokenSurvey();\n        };\n        // Initialize the logger\n        let loggerModule = new Logger_1.Logger(options);\n        self.logger = loggerModule.log;\n        self.logger.log(\"debug\", LOG_ID + \"(constructor) _entering_\");\n        self.logger.log(\"debug\", LOG_ID + \"(constructor) ------- SDK INFORMATION -------\");\n        self.logger.log(\"info\", LOG_ID + \" (constructor) SDK version: \" + packageVersion.version);\n        self.logger.log(\"info\", LOG_ID + \" (constructor) Node version: \" + process.version);\n        for (let key in process.versions) {\n            self.logger.log(\"info\", LOG_ID + \" (constructor) \" + key + \" version: \" + process.versions[key]);\n        }\n        self.logger.log(\"debug\", LOG_ID + \"(constructor) ------- SDK INFORMATION -------\");\n        // Initialize the options\n        self.options = new Options_1.Options(options, self.logger);\n        self.options.parse();\n        // Initialize the Events Emitter\n        self._eventEmitter = new Events_1.Events(self.logger, (jid) => {\n            return self._botsjid.includes(jid);\n        });\n        self._eventEmitter.setCore(self);\n        self._eventEmitter.iee.on(\"evt_internal_signinrequired\", () => __awaiter(this, void 0, void 0, function* () {\n            yield self.signin(true, undefined);\n        }));\n        self._eventEmitter.iee.on(\"rainbow_application_token_updated\", function (token) {\n            self._rest.applicationToken = token;\n        });\n        self._eventEmitter.iee.on(\"evt_internal_xmppfatalerror\", (err) => __awaiter(this, void 0, void 0, function* () {\n            console.log(\"Error XMPP, Stop le SDK : \", err);\n            yield self._stateManager.transitTo(self._stateManager.ERROR, err);\n            yield self.stop().then(function (result) {\n                //let success = ErrorManager.getErrorManager().OK;\n            }).catch(function (err) {\n                let error = ErrorManager_1.ErrorManager.getErrorManager().ERROR;\n                error.msg = err;\n                self.events.publish(\"stopped\", error);\n            });\n        }));\n        self._eventEmitter.iee.on(\"rainbow_xmppreconnected\", function () {\n            let that = self;\n            //todo, check that REST part is ok too\n            self._rest.reconnect().then((data) => {\n                self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppreconnected) reconnect succeed : so change state to connected\");\n                self.logger.log(\"internal\", LOG_ID + \" (rainbow_xmppreconnected) reconnect succeed : \", data, \" so change state to connected\");\n                return self._stateManager.transitTo(self._stateManager.CONNECTED).then((data2) => {\n                    self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppreconnected) transition to connected succeed.\");\n                    self.logger.log(\"internal\", LOG_ID + \" (rainbow_xmppreconnected) transition to connected succeed : \", data2);\n                    return self._retrieveInformation();\n                });\n            }).then((data3) => {\n                self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppreconnected) _retrieveInformation succeed, change state to ready\");\n                self.logger.log(\"internal\", LOG_ID + \" (rainbow_xmppreconnected) _retrieveInformation succeed : \", data3, \" change state to ready\");\n                self._stateManager.transitTo(self._stateManager.READY).then((data4) => {\n                    self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppreconnected) transition to ready succeed.\");\n                    self.logger.log(\"internal\", LOG_ID + \" (rainbow_xmppreconnected) transition to ready succeed : \", data4);\n                });\n            }).catch((err) => __awaiter(this, void 0, void 0, function* () {\n                // If not already connected, it is an error in xmpp connection, so should failed\n                if (!self._stateManager.isCONNECTED()) {\n                    self.logger.log(\"error\", LOG_ID + \" (rainbow_xmppreconnected) REST connection \", self._stateManager.FAILED);\n                    self.logger.log(\"internalerror\", LOG_ID + \" (rainbow_xmppreconnected) REST connection \", self._stateManager.FAILED, \", ErrorManager : \", err);\n                    yield self._stateManager.transitTo(self._stateManager.FAILED);\n                }\n                else {\n                    self.logger.log(\"warn\", LOG_ID + \" (rainbow_xmppreconnected) REST reconnection Error, set state : \", self._stateManager.DISCONNECTED);\n                    self.logger.log(\"internalerror\", LOG_ID + \" (rainbow_xmppreconnected) REST reconnection ErrorManager : \", err, \", set state : \", self._stateManager.DISCONNECTED);\n                    // ErrorManager in REST micro service, so let say it is disconnected\n                    yield self._stateManager.transitTo(self._stateManager.DISCONNECTED);\n                    // relaunch the REST connection.\n                    self._eventEmitter.iee.emit(\"rainbow_xmppreconnected\");\n                }\n            }));\n        });\n        self._eventEmitter.iee.on(\"rainbow_xmppreconnectingattempt\", function () {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield self._stateManager.transitTo(self._stateManager.RECONNECTING);\n            });\n        });\n        self._eventEmitter.iee.on(\"rainbow_xmppdisconnect\", function (xmppDisconnectInfos) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (xmppDisconnectInfos && xmppDisconnectInfos.reconnect) {\n                    self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppdisconnect) set to state : \", self._stateManager.DISCONNECTED);\n                    yield self._stateManager.transitTo(self._stateManager.DISCONNECTED);\n                }\n                else {\n                    self.logger.log(\"info\", LOG_ID + \" (rainbow_xmppdisconnect) set to state : \", self._stateManager.STOPPED);\n                    yield self._stateManager.transitTo(self._stateManager.STOPPED);\n                }\n            });\n        });\n        self._eventEmitter.iee.on(\"rainbow_tokenrenewed\", self.onTokenRenewed.bind(self));\n        self._eventEmitter.iee.on(\"rainbow_tokenexpired\", self.onTokenExpired.bind(self));\n        if (self.options.useXMPP) {\n            self.logger.log(\"info\", LOG_ID + \"(constructor) used in XMPP mode\");\n        }\n        else {\n            if (self.options.useCLIMode) {\n                self.logger.log(\"info\", LOG_ID + \"(constructor) used in CLI mode\");\n            }\n            else {\n                self.logger.log(\"info\", LOG_ID + \"(constructor) used in HOOK mode\");\n            }\n        }\n        // Instantiate basic service\n        self._proxy = new ProxyImpl_1.ProxyImpl(self.options.proxyOptions, self.logger);\n        self._http = new HttpService_1.HTTPService(self.options.httpOptions, self.logger, self._proxy, self._eventEmitter.iee);\n        self._rest = new RESTService_1.RESTService(self.options.credentials, self.options.applicationOptions, self.options._isOfficialRainbow(), self._eventEmitter.iee, self.logger);\n        self._xmpp = new XMPPService_1.XMPPService(self.options.xmppOptions, self.options.imOptions, self.options.applicationOptions, self._eventEmitter.iee, self.logger, self._proxy);\n        self._s2s = new S2SService_1.S2SService(self.options.s2sOptions, self.options.imOptions, self.options.applicationOptions, self._eventEmitter.iee, self.logger, self._proxy);\n        // Instantiate State Manager\n        self._stateManager = new StateManager_1.StateManager(self._eventEmitter, self.logger);\n        // Instantiate others Services\n        self._im = new ImsService_1.IMService(self._eventEmitter.iee, self.logger, self.options.imOptions, self.options.servicesToStart.im);\n        self._presence = new PresenceService_1.PresenceService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.presence);\n        self._channels = new ChannelsService_1.ChannelsService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.channels);\n        self._contacts = new ContactsService_1.ContactsService(self._eventEmitter.iee, self.options.httpOptions, self.logger, self.options.servicesToStart.contacts);\n        self._conversations = new ConversationsService_1.ConversationsService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.conversations, self.options.imOptions.conversationsRetrievedFormat, self.options.imOptions.nbMaxConversations);\n        self._profiles = new ProfilesService_1.ProfilesService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.profiles);\n        self._telephony = new TelephonyService_1.TelephonyService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.telephony);\n        self._bubbles = new BubblesService_1.BubblesService(self._eventEmitter.iee, self.options.httpOptions, self.logger, self.options.servicesToStart.bubbles);\n        self._groups = new GroupsService_1.GroupsService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.groups);\n        self._admin = new AdminService_1.AdminService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.admin);\n        self._settings = new SettingsService_1.SettingsService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.settings);\n        self._fileServer = new FileServerService_1.FileServerService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.fileServer);\n        self._fileStorage = new FileStorageService_1.FileStorageService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.fileStorage);\n        self._calllog = new CallLogService_1.CallLogService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.calllog);\n        self._favorites = new FavoritesService_1.FavoritesService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.favorites);\n        self._invitations = new InvitationsService_1.InvitationsService(self._eventEmitter.iee, self.logger, self.options.servicesToStart.invitation);\n        self._botsjid = [];\n        self.logger.log(\"debug\", LOG_ID + \"(constructor) _exiting_\");\n    }\n    start(token) {\n        let that = this;\n        this.logger.log(\"debug\", LOG_ID + \"(start) _entering_\");\n        this.logger.log(\"info\", LOG_ID + \"(start) STARTING the SDK : \", packageVersion.version);\n        return new Promise(function (resolve, reject) {\n            try {\n                if (!that.options.hasCredentials && !token) {\n                    that.logger.log(\"error\", LOG_ID + \"(start) No credentials. Stop loading...\");\n                    that.logger.log(\"debug\", LOG_ID + \"(start) _exiting_\");\n                    reject(\"Credentials are missing. Check your configuration!\");\n                }\n                else {\n                    that.logger.log(\"debug\", LOG_ID + \"(start) start all modules\");\n                    that.logger.log(\"internal\", LOG_ID + \"(start) start all modules for user : \", that.options.credentials.login);\n                    that.logger.log(\"internal\", LOG_ID + \"(start) servicesToStart : \", that.options.servicesToStart);\n                    return that._stateManager.start().then(() => {\n                        return that._http.start();\n                    }).then(() => {\n                        return that._rest.start(that._http);\n                    }).then(() => {\n                        return that._xmpp.start(that.options.useXMPP);\n                    }).then(() => {\n                        return that._s2s.start(that.options, that);\n                    }).then(() => {\n                        return that._settings.start(that.options, that);\n                    }).then(() => {\n                        return that._presence.start(that.options, that);\n                    }).then(() => {\n                        return that._contacts.start(that.options, that);\n                    }).then(() => {\n                        return that._bubbles.start(that.options, that);\n                    }).then(() => {\n                        return that._conversations.start(that.options, that);\n                    }).then(() => {\n                        return that._profiles.start(that.options, that, []);\n                    }).then(() => {\n                        return that._telephony.start(that.options, that);\n                    }).then(() => {\n                        return that._im.start(that.options, that);\n                    }).then(() => {\n                        return that._channels.start(that.options, that);\n                    }).then(() => {\n                        return that._groups.start(that.options, that);\n                    }).then(() => {\n                        return that._admin.start(that.options, that);\n                    }).then(() => {\n                        return that._fileServer.start(that.options, that);\n                    }).then(() => {\n                        return that._fileStorage.start(that.options, that);\n                    }).then(() => {\n                        return that._calllog.start(that.options, that);\n                    }).then(() => {\n                        return that._favorites.start(that.options, that);\n                    }).then(() => {\n                        return that._invitations.start(that.options, that, []);\n                    }).then(() => {\n                        that.logger.log(\"debug\", LOG_ID + \"(start) all modules started successfully\");\n                        that._stateManager.transitTo(that._stateManager.STARTED).then(() => {\n                            that.logger.log(\"debug\", LOG_ID + \"(start) _exiting_\");\n                            resolve();\n                        }).catch((err) => {\n                            reject(err);\n                        });\n                    }).catch((err) => {\n                        that.logger.log(\"error\", LOG_ID + \"(start) !!! CATCH Error during bulding services instances.\");\n                        that.logger.log(\"internalerror\", LOG_ID + \"(start) !!! CATCH Error during bulding services instances : \", err);\n                        that.logger.log(\"debug\", LOG_ID + \"(start) _exiting_\");\n                        reject(err);\n                    });\n                }\n            }\n            catch (err) {\n                that.logger.log(\"error\", LOG_ID + \"(start)\");\n                that.logger.log(\"internalerror\", LOG_ID + \"(start)\", err.message);\n                that.logger.log(\"debug\", LOG_ID + \"(start) _exiting_\");\n                reject(err);\n            }\n        });\n    }\n    signin(forceStopXMPP, token) {\n        let that = this;\n        return new Promise(function (resolve, reject) {\n            let json = null;\n            return that._signin(forceStopXMPP, token).then(function (_json) {\n                json = _json;\n                that._tokenSurvey();\n                return that._stateManager.transitTo(that._stateManager.CONNECTED).then(() => {\n                    return that._retrieveInformation();\n                });\n            }).then(() => {\n                that._stateManager.transitTo(that._stateManager.READY).then(() => {\n                    resolve(json);\n                }).catch((err) => { reject(err); });\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n    stop() {\n        let that = this;\n        this.logger.log(\"debug\", LOG_ID + \"(stop) _entering_\");\n        return new Promise(function (resolve, reject) {\n            if (that._stateManager.isSTOPPED()) {\n                return resolve(\"core already stopped !\");\n            }\n            that.logger.log(\"debug\", LOG_ID + \"(stop) stop all modules\");\n            that._s2s.stop().then(() => {\n                return that._rest.stop();\n            }).then(() => {\n                return that._http.stop();\n            }).then(() => {\n                return that._xmpp.stop(that.options.useXMPP);\n            }).then(() => {\n                return that._im.stop();\n            }).then(() => {\n                return that._settings.stop();\n            }).then(() => {\n                return that._presence.stop();\n            }).then(() => {\n                return that._conversations.stop();\n            }).then(() => {\n                return that._telephony.stop();\n            }).then(() => {\n                return that._contacts.stop();\n            }).then(() => {\n                return that._bubbles.stop();\n            }).then(() => {\n                return that._channels.stop();\n            }).then(() => {\n                return that._groups.stop();\n            }).then(() => {\n                return that._admin.stop();\n            }).then(() => {\n                return that._fileServer.stop();\n            }).then(() => {\n                return that._fileStorage.stop();\n            }).then(() => {\n                return that._stateManager.stop();\n            }).then(() => {\n                return that._calllog.stop();\n            }).then(() => {\n                return that._favorites.stop();\n            }).then(() => {\n                return that._invitations.stop();\n            }).then(() => {\n                that.logger.log(\"debug\", LOG_ID + \"(stop) _exiting_\");\n                resolve(\"core stopped\");\n            }).catch((err) => {\n                that.logger.log(\"error\", LOG_ID + \"(stop) CATCH Error !!! \");\n                that.logger.log(\"internalerror\", LOG_ID + \"(stop) CATCH Error !!! : \", err);\n                that.logger.log(\"debug\", LOG_ID + \"(stop) _exiting_\");\n                reject(err);\n            });\n        });\n    }\n    get settings() {\n        return this._settings;\n    }\n    get presence() {\n        return this._presence;\n    }\n    get profiles() {\n        return this._profiles;\n    }\n    get im() {\n        return this._im;\n    }\n    get invitations() {\n        return this._invitations;\n    }\n    get contacts() {\n        return this._contacts;\n    }\n    get conversations() {\n        return this._conversations;\n    }\n    get channels() {\n        return this._channels;\n    }\n    get bubbles() {\n        return this._bubbles;\n    }\n    get groups() {\n        return this._groups;\n    }\n    get admin() {\n        return this._admin;\n    }\n    get fileServer() {\n        return this._fileServer;\n    }\n    get fileStorage() {\n        return this._fileStorage;\n    }\n    get events() {\n        return this._eventEmitter;\n    }\n    get rest() {\n        return this._rest;\n    }\n    get state() {\n        return this._stateManager.state;\n    }\n    get version() {\n        return packageVersion.version;\n    }\n    get telephony() {\n        return this._telephony;\n    }\n    get calllog() {\n        return this._calllog;\n    }\n};\nCore = __decorate([\n    Utils_1.logEntryExit(LOG_ID)\n], Core);\nexports.Core = Core;\n//module.exports = Core;\nmodule.exports.Core = Core;\n//# sourceMappingURL=Core.js.map"]},"metadata":{},"sourceType":"script"}