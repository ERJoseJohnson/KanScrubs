{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\n\nconst Utils_1 = require(\"../common/Utils\");\n\nconst LOG_ID = \"ADMIN/SVCE - \";\nlet Admin =\n/**\r\n * @module\r\n * @name Admin\r\n * @version 1.67.1 \r\n * @public\r\n * @description\r\n *      This module handles the management of users. Using it, You will be able to create new users, to modify information of users and to delete them.<br>\r\n *      This module can be use too to create Guest users who are specific temporaly users that can be used in Rainbow.\r\n *      <br><br>\r\n *      The main methods proposed in that module allow to: <br>\r\n *      - Create a new user in a specified company <br>\r\n *      - Modify information of an existing user <br>\r\n *      - Delete an existing user <br>\r\n *      - Invite a user in Rainbow <br>\r\n *      - Change the password of a user <br>\r\n *      - Create a guest user\r\n */\nclass Admin {\n  constructor(_eventEmitter, _logger, _startConfig) {\n    this.ready = false;\n    this._startConfig = _startConfig;\n    this._xmpp = null;\n    this._rest = null;\n    this._s2s = null;\n    this._options = {};\n    this._useXMPP = false;\n    this._useS2S = false;\n    this._eventEmitter = _eventEmitter;\n    this._logger = _logger;\n    this.ready = false;\n  }\n\n  get startConfig() {\n    return this._startConfig;\n  }\n\n  start(_options, _core) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._xmpp = _core._xmpp;\n        that._rest = _core._rest;\n        that._options = _options;\n        that._s2s = _core._s2s;\n        that._useXMPP = that._options.useXMPP;\n        that._useS2S = that._options.useS2S;\n        that.ready = true;\n        resolve();\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(start) error : \", err);\n\n        return reject();\n      }\n    });\n  }\n\n  stop() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._xmpp = null;\n        that._rest = null;\n        that.ready = false;\n        resolve();\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(stop) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method createCompany\r\n   * @instance\r\n   * @description\r\n   *      Create a company\r\n   * @param {string} strName The name of the new company\r\n   * @param {string} country Company country (ISO 3166-1 alpha3 format, size 3 car)\r\n   * @param {string} state (optionnal if not USA)  define a state when country is 'USA' ([\"ALASKA\", \"....\", \"NEW_YORK\", \"....\", \"WYOMING\"] ), else it is not managed by server. Default value on server side: ALABAMA\r\n   * @async\r\n   * @return {Promise<Object, ErrorManager>}\r\n   * @fulfil {Object} - Created Company or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  createCompany(strName, country, state) {\n    let that = this;\n\n    that._logger.log(\"internal\", LOG_ID + \"(createCompany) parameters : strName : \", strName, \", country : \", country);\n\n    return new Promise(function (resolve, reject) {\n      try {\n        if (!strName) {\n          that._logger.log(\"error\", LOG_ID + \"(createCompany) bad or empty 'strName' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        that._rest.createCompany(strName, country, state).then(company => {\n          that._logger.log(\"internal\", LOG_ID + \"(createCompany) Successfully created company : \", strName);\n\n          resolve(company);\n        }).catch(err => {\n          that._logger.log(\"error\", LOG_ID + \"(createCompany) ErrorManager when creating\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(createCompany) ErrorManager when creating : \", strName);\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(createCompany) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * Remove a user from a company\r\n   * @private\r\n   */\n\n\n  removeUserFromCompany(user) {\n    let that = this;\n    return that.deleteUser(user.id);\n  }\n  /**\r\n   * Set the visibility for a company\r\n   * @private\r\n   */\n\n\n  setVisibilityForCompany(company, visibleByCompany) {\n    let that = this;\n\n    that._logger.log(\"internal\", LOG_ID + \"(setVisibilityForCompany) parameters : company : \", company);\n\n    return new Promise(function (resolve, reject) {\n      try {\n        if (!company) {\n          that._logger.log(\"error\", LOG_ID + \"(setVisibilityForCompany) bad or empty 'company' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        if (!visibleByCompany) {\n          that._logger.log(\"error\", LOG_ID + \"(setVisibilityForCompany) bad or empty 'visibleByCompany' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        that._rest.setVisibilityForCompany(company.id, visibleByCompany.id).then(user => {\n          that._logger.log(\"internal\", LOG_ID + \"(setVisibilityForCompany) Successfully set visibility for company : \", company);\n\n          resolve(user);\n        }).catch(err => {\n          that._logger.log(\"error\", LOG_ID + \"(setVisibilityForCompany) ErrorManager when set visibility for company\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(setVisibilityForCompany) ErrorManager when set visibility for company : \", company);\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"error\", LOG_ID + \"(setVisibilityForCompany) _exiting_\");\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method createUserInCompany\r\n   * @instance\r\n   * @description\r\n   *      Create a new user in a given company\r\n   * @param {string} email The email of the user to create\r\n   * @param {string} password The associated password\r\n   * @param {string} firstname The user firstname\r\n   * @param {string} lastname  The user lastname\r\n   * @param {string} [companyId=\"user company\"] The Id of the company where to create the user or the connected user company if null\r\n   * @param {string} [language=\"en-US\"] The language of the user. Default is `en-US`. Can be fr-FR, de-DE...\r\n   * @param {boolean} [isCompanyAdmin=false] True to create the user with the right to manage the company (`companyAdmin`). False by default.\r\n   * @param {Array<string>} [roles] The roles the created user.\r\n   * @async\r\n   * @return {Promise<Contact, ErrorManager>}\r\n   * @fulfil {Contact} - Created contact in company or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  createUserInCompany(email, password, firstname, lastname, companyId, language, isCompanyAdmin, roles) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        language = language || \"en-US\";\n        let isAdmin = isCompanyAdmin || false;\n\n        if (!email) {\n          that._logger.log(\"error\", LOG_ID + \"(createUserInCompany) bad or empty 'email' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        if (!password) {\n          that._logger.log(\"error\", LOG_ID + \"(createUserInCompany) bad or empty 'password' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        if (!firstname) {\n          that._logger.log(\"error\", LOG_ID + \"(createUserInCompany) bad or empty 'firstname' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        if (!lastname) {\n          that._logger.log(\"error\", LOG_ID + \"(createUserInCompany) bad or empty 'lastname' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        that._rest.createUser(email, password, firstname, lastname, companyId, language, isAdmin, roles).then(user => {\n          that._logger.log(\"debug\", LOG_ID + \"(createUserInCompany) Successfully created user for account : \", email);\n\n          resolve(user);\n        }).catch(err => {\n          that._logger.log(\"error\", LOG_ID + \"(createUserInCompany) ErrorManager when creating user for account \");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(createUserInCompany) ErrorManager when creating user for account : \", email);\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(createUserInCompany) error : \", err);\n\n        reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method createGuestUser\r\n   * @instance\r\n   * @description\r\n   *      Create a new guest user in the same company as the requester admin\r\n   * @param {string} firstname The user firstname\r\n   * @param {string} lastname  The user lastname\r\n   * @param {string} [language=\"en-US\"] The language of the user. Default is `en-US`. Can be fr-FR, de-DE...\r\n   * @param {Number} [timeToLive] Allow to provide a duration in second to wait before starting a user deletion from the creation date\r\n   * @async\r\n   * @return {Promise<Object, ErrorManager>}\r\n   * @fulfil {Object} - Created guest user in company or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  createGuestUser(firstname, lastname, language, timeToLive) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        language = language || \"en-US\";\n\n        if (!firstname) {\n          that._logger.log(\"error\", LOG_ID + \"(createGuestUser) bad or empty 'firstname' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        if (!lastname) {\n          that._logger.log(\"error\", LOG_ID + \"(createGuestUser) bad or empty 'lastname' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        if (timeToLive && isNaN(timeToLive)) {\n          that._logger.log(\"error\", LOG_ID + \"(createGuestUser) bad or empty 'timeToLive' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        that._rest.createGuestUser(firstname, lastname, language, timeToLive).then(user => {\n          that._logger.log(\"debug\", LOG_ID + \"(createGuestUser) Successfully created guest user for account : \", user.loginEmail);\n\n          resolve(user);\n        }).catch(err => {\n          that._logger.log(\"error\", LOG_ID + `(createGuestUser) Error when creating guest user`);\n\n          that._logger.log(\"internalerror\", LOG_ID + `(createGuestUser) Error when creating guest user with firstname: ${firstname}, lastname: ${lastname}`);\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(createGuestUser) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method createAnonymousGuestUser\r\n   * @since 1.31\r\n   * @instance\r\n   * @description\r\n   *      Create a new anonymous guest user in the same company as the requester admin\r\n   *      Anonymous guest user is user without name and firstname\r\n   * @param {Number} [timeToLive] Allow to provide a duration in second to wait before starting a user deletion from the creation date\r\n   * @async\r\n   * @return {Promise<Object, ErrorManager>}\r\n   * @fulfil {Object} - Created anonymous guest user in company or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  createAnonymousGuestUser(timeToLive) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        if (timeToLive && isNaN(timeToLive)) {\n          that._logger.log(\"error\", LOG_ID + \"(createAnonymousGuestUser) bad or empty 'timeToLive' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        that._rest.createGuestUser(null, null, null, timeToLive).then(user => {\n          that._logger.log(\"internal\", LOG_ID + \"(createAnonymousGuestUser) Successfully created guest user for account : \", user.loginEmail);\n\n          resolve(user);\n        }).catch(err => {\n          that._logger.log(\"error\", LOG_ID + \"(createAnonymousGuestUser) ErrorManager when creating anonymous guest user\");\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(createAnonymousGuestUser) error : \", err);\n\n        reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method inviteUserInCompany\r\n   * @instance\r\n   * @description\r\n   *      Invite a new user to join a company in Rainbow\r\n   * @param {string} email The email address of the contact to invite\r\n   * @param {string} companyId     The id of the company where the user will be invited in\r\n   * @param {string} [language=\"en-US\"]  The language of the message to send. Default is `en-US`\r\n   * @param {string} [message=\"\"] A custom message to send\r\n   * @async\r\n   * @return {Promise<Object, ErrorManager>}\r\n   * @fulfil {Object} - Created invitation or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  inviteUserInCompany(email, companyId, language, message) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        language = language || \"en-US\";\n        message = message || null;\n\n        if (!email) {\n          that._logger.log(\"error\", LOG_ID + \"(inviteUserInCompany) bad or empty 'email' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        if (!companyId) {\n          that._logger.log(\"error\", LOG_ID + \"(inviteUserInCompany) bad or empty 'companyId' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        that._rest.inviteUser(email, companyId, language, message).then(user => {\n          that._logger.log(\"internal\", LOG_ID + \"(inviteUserInCompany) Successfully inviting user for account : \", email);\n\n          resolve(user);\n        }).catch(err => {\n          that._logger.log(\"error\", LOG_ID + \"(inviteUserInCompany) ErrorManager when inviting user for account\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(inviteUserInCompany) ErrorManager when inviting user for account : \", email, \", error : \", err);\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(inviteUserInCompany) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method changePasswordForUser\r\n   * @instance\r\n   * @description\r\n   *      Change a password for a user\r\n   * @param {string} password The new password\r\n   * @param {string} userId The id of the user\r\n   * @async\r\n   * @return {Promise<Object, ErrorManager>}\r\n   * @fulfil {Object} - Updated user or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  changePasswordForUser(password, userId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        if (!password) {\n          that._logger.log(\"error\", LOG_ID + \"(changePasswordToUser) bad or empty 'password' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        if (!userId) {\n          that._logger.log(\"error\", LOG_ID + \"(changePasswordToUser) bad or empty 'userId' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        that._rest.changePassword(password, userId).then(user => {\n          that._logger.log(\"internal\", LOG_ID + \"(changePasswordToUser) Successfully changing password for user account : \", userId);\n\n          resolve(user);\n        }).catch(err => {\n          that._logger.log(\"error\", LOG_ID + \"(changePasswordToUser) ErrorManager when changing password for user account\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(changePasswordToUser) ErrorManager when changing password for user account : \", userId);\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(changePasswordToUser) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method updateInformationForUser\r\n   * @instance\r\n   * @description\r\n   *      Change information of a user. Fields that can be changed: `firstName`, `lastName`, `nickName`, `title`, `jobTitle`, `country`, `language`, `timezone`, `emails`\r\n   * @param {Object} objData An object (key: value) containing the data to change with their new value\r\n   * @param {string} userId The id of the user\r\n   * @async\r\n   * @return {Promise<Object, ErrorManager>}\r\n   * @fulfil {Object} - Updated user or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  updateInformationForUser(objData, userId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        if (!objData) {\n          that._logger.log(\"error\", LOG_ID + \"(updateInformationForUser) bad or empty 'objData' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        if (\"loginEmail\" in objData) {\n          that._logger.log(\"error\", LOG_ID + \"(updateInformationForUser) can't change the loginEmail with that API\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        if (\"password\" in objData) {\n          that._logger.log(\"error\", LOG_ID + \"(updateInformationForUser) can't change the password with that API\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        that._rest.updateInformation(objData, userId).then(user => {\n          that._logger.log(\"internal\", LOG_ID + \"(updateInformationForUser) Successfully changing information for user account : \", userId);\n\n          resolve(user);\n        }).catch(err => {\n          that._logger.log(\"error\", LOG_ID + \"(updateInformationForUser) ErrorManager when changing information for user account\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(updateInformationForUser) ErrorManager when changing information for user account : \", userId);\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(updateInformationForUser) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method deleteUser\r\n   * @instance\r\n   * @description\r\n   *      Delete an existing user\r\n   * @param {string} userId The id of the user\r\n   * @async\r\n   * @return {Promise<Object, ErrorManager>}\r\n   * @fulfil {Object} - Deleted user or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  deleteUser(userId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        if (!userId) {\n          that._logger.log(\"error\", LOG_ID + \"(deleteUser) bad or empty 'userId' parameter\");\n\n          reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\n          return;\n        }\n\n        that._rest.deleteUser(userId).then(user => {\n          that._logger.log(\"debug\", LOG_ID + \"(deleteUser) Successfully deleting user account \");\n\n          that._logger.log(\"internal\", LOG_ID + \"(deleteUser) Successfully deleting user : \", user);\n\n          resolve(user);\n        }).catch(err => {\n          that._logger.log(\"error\", LOG_ID + \"(deleteUser) ErrorManager when deleting user account : \", userId);\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(deleteUser) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method getAllCompanies\r\n   * @instance\r\n   * @description\r\n   *      Get all companies for a given admin\r\n   * @async\r\n   * @return {Promise<Object, ErrorManager>}\r\n   * @fulfil {Object} - Json object containing with all companies (companyId and companyName) or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  getAllCompanies() {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._rest.getAllCompanies().then(companies => {\n          that._logger.log(\"debug\", LOG_ID + \"(getAllCompanies) Successfully get all companies\");\n\n          that._logger.log(\"internal\", LOG_ID + \"(getAllCompanies) : companies values : \", companies.data);\n\n          resolve(companies);\n        }).catch(function (err) {\n          that._logger.log(\"error\", LOG_ID + \"(getAllCompanies) ErrorManager when get All companies\");\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(getAllCompanies) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * get a company\r\n   * @private\r\n   */\n\n\n  getCompanyById(companyId) {\n    let that = this;\n    return new Promise((resolve, reject) => {\n      try {\n        that._rest.getCompany(companyId).then(company => {\n          that._logger.log(\"debug\", LOG_ID + \"(getCompanyById) Successfully get a company\");\n\n          that._logger.log(\"internal\", LOG_ID + \"(getCompanyById) : companies values : \", company.data);\n\n          resolve(company.data);\n        }).catch(err => {\n          that._logger.log(\"error\", LOG_ID + \"(getCompanyById) ErrorManager when get a company\");\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(getCompanyById) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * Remove a company\r\n   * @private\r\n   */\n\n\n  removeCompany(company) {\n    let that = this;\n\n    this._logger.log(\"internal\", LOG_ID + \"(deleteCompany) parameters : company : \", company);\n\n    return new Promise(function (resolve, reject) {\n      try {\n        that._rest.deleteCompany(company.id).then(companies => {\n          that._logger.log(\"debug\", LOG_ID + \"(deleteCompany) Successfully remove company\");\n\n          that._logger.log(\"internal\", LOG_ID + \"(deleteCompany) : companies values : \", companies.data);\n\n          resolve(companies);\n        }).catch(function (err) {\n          that._logger.log(\"error\", LOG_ID + \"(deleteCompany) ErrorManager when removing company\");\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(deleteCompany) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method askTokenOnBehalf\r\n   * @instance\r\n   * @description\r\n   *      Ask Rainbow for a token on behalf a user\r\n   *      This allow to not use the secret key on client side\r\n   * @param {string} loginEmail The user login email\r\n   * @param {string} password The user password\r\n   * @async\r\n   * @return {Promise<Object, Error>}\r\n   * @fulfil {Object} - Json object containing the user data, application data and token\r\n   * @category async\r\n   */\n\n\n  askTokenOnBehalf(loginEmail, password) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._rest.askTokenOnBehalf(loginEmail, password).then(json => {\n          that._logger.log(\"debug\", LOG_ID + \"(getGuestOrUserToken) Successfully logged-in a user\");\n\n          that._logger.log(\"internal\", LOG_ID + \"(getGuestOrUserToken) : user data : \", json);\n\n          resolve(json);\n        }).catch(function (err) {\n          that._logger.log(\"error\", LOG_ID + \"(getGuestOrUserToken) Error when getting a token\");\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(getGuestOrUserToken) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method getAllUsers\r\n   * @instance\r\n   * @description\r\n   *      Get all users for a given admin\r\n   * @async\r\n   * @param {string} format Allows to retrieve more or less user details in response.\r\n   *   small: id, loginEmail, firstName, lastName, displayName, companyId, companyName, isTerminated\r\n   *   medium: id, loginEmail, firstName, lastName, displayName, jid_im, jid_tel, companyId, companyName, lastUpdateDate, lastAvatarUpdateDate, isTerminated, guestMode\r\n   *   full: all user fields\r\n   * @param {number} offset Allow to specify the position of first user to retrieve (first user if not specified). Warning: if offset > total, no results are returned.\r\n   * @param {number} limit Allow to specify the number of users to retrieve (default=100).\r\n   * @param {string} sortField Sort user list based on the given field (default=\"loginEmail\").\r\n   * @return {Promise<Object, ErrorManager>}\r\n   * @fulfil {Array} - Array of Json object containing users or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  getAllUsers(format = \"small\", offset = 0, limit = 100, sortField = \"loginEmail\") {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._rest.getAllUsers(format, offset, limit, sortField).then(users => {\n          that._logger.log(\"debug\", LOG_ID + \"(getAllUsers) Successfully get all companies\");\n\n          that._logger.log(\"internal\", LOG_ID + \"(getAllUsers) : companies values : \", users.data);\n\n          resolve(users.data);\n        }).catch(function (err) {\n          that._logger.log(\"error\", LOG_ID + \"(getAllUsers) ErrorManager when get All companies\");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(getAllUsers) ErrorManager when get All companies : \", err);\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"internalerror\", LOG_ID + \"(getAllUsers) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method getContactInfos\r\n   * @instance\r\n   * @description\r\n   *      Get informations about a user\r\n   * @param {string} userId The id of the user\r\n   * @async\r\n   * @return {Promise<Object, ErrorManager>}\r\n   * @fulfil {Object} - Json object containing informations or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  getContactInfos(userId) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        that._rest.getContactInfos(userId).then(result => {\n          that._logger.log(\"debug\", LOG_ID + \"(getContactInfos) Successfully get Contact Infos\");\n\n          that._logger.log(\"internal\", LOG_ID + \"(getContactInfos) : result : \", result);\n\n          resolve(result);\n        }).catch(function (err) {\n          that._logger.log(\"error\", LOG_ID + \"(getContactInfos) ErrorManager when get contact infos \");\n\n          that._logger.log(\"internalerror\", LOG_ID + \"(getContactInfos) ErrorManager when get contact infos : \", err);\n\n          return reject(err);\n        });\n      } catch (err) {\n        that._logger.log(\"error\", LOG_ID + \"(getContactInfos) error : \", err);\n\n        return reject(err);\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @method updateContactInfos\r\n   * @instance\r\n   * @description\r\n   *      Set informations about a user\r\n   * @param {string} userId The id of the user\r\n   * @param {Object} infos The infos of the user :\r\n   * {String{3..255}}  [infos.loginEmail]      User email address (used for login).\r\n   * <br/> Must be unique (409 error is returned if a user already exists with the same email address).\r\n   *  {String{8..64}}   [infos.password]        User password.\r\n   * <br/> Rules: more than 8 characters, at least 1 capital letter, 1 number, 1 special character.\r\n   * {String{1..255}}  [infos.firstName]     User first name\r\n   * {String{1..255}}  [infos.lastName]      User last name\r\n   * {String{1..255}}  [infos.nickName]      User nickName\r\n   * {String{1..40}}   [infos.title]         User title (honorifics title, like Mr, Mrs, Sir, Lord, Lady, Dr, Prof,...)\r\n   * {String{1..255}}  [infos.jobTitle]      User job title\r\n   * {String[]{1..64}} [infos.tags]          An Array of free tags associated to the user.\r\n   * <br/> A maximum of 5 tags is allowed, each tag can have a maximum length of 64 characters.\r\n   * <br/> `tags` can only be set by users who have administrator rights on the user. The user can't modify the tags.\r\n   * <br/> The tags are visible by the user and all users belonging to his organisation/company, and can be used with\r\n   * the search API to search the user based on his tags.\r\n   * {Object[]}           [infos.emails]        Array of user emails addresses objects\r\n   * {String{3..255}}          [infos.emails.email]    User email address\r\n   * {String=home,work,other}  [infos.emails.type]     User email type\r\n   * {Object[]}           [infos.phoneNumbers]  Array of user phone numbers objects\r\n   * <br/>\r\n   * <br/><u><i>Note:</i></u> For each provided number, the server tries to compute the associated E.164 number (<code>numberE164</code> field) using provided PhoneNumber country if available, user country otherwise.\r\n   * If <code>numberE164</code> can't be computed, an error 400 is returned (ex: wrong phone number, phone number not matching country code, ...)\r\n   * {String{1..32}}   [infos.phoneNumbers.number]    User phone number (as entered by user)\r\n   * {String{3}}       [infos.phoneNumbers.country]   Phone number country (ISO 3166-1 alpha3 format). Used to compute numberE164 field from number field.\r\n   * <br/>\r\n   * <br/>If not provided, user country is used by default.\r\n   * {String=home,work,other}              phoneNumbers.type           Phone number type\r\n   * {String=landline,mobile,fax,other}    phoneNumbers.deviceType     Phone number device type\r\n   * {String{3}}       [infos.country]       User country (ISO 3166-1 alpha3 format)\r\n   * {String=null,\"AA\",\"AE\",\"AP\",\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"PR\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VI\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\",\"AB\",\"BC\",\"MB\",\"NB\",\"NL\",\"NS\",\"NT\",\"NU\",\"ON\",\"PE\",\"QC\",\"SK\",\"YT\"} [infos.state] When country is 'USA' or 'CAN', a state can be defined. Else it is not managed.\r\n   * <br/> USA states code list:\r\n   * <li> <code>AA</code>:\"Armed Forces America\",\r\n   * <li> <code>AE</code>:\"Armed Forces\",\r\n   * <li> <code>AP</code>:\"Armed Forces Pacific\",\r\n   * <li> <code>AK</code>:\"Alaska\",\r\n   * <li> <code>AL</code>:\"Alabama\",\r\n   * <li> <code>AR</code>:\"Arkansas\",\r\n   * <li> <code>AZ</code>:\"Arizona\",\r\n   * <li> <code>CA</code>:\"California\",\r\n   * <li> <code>CO</code>:\"Colorado\",\r\n   * <li> <code>CT</code>:\"Connecticut\",\r\n   * <li> <code>DC</code>:\"Washington DC\",\r\n   * <li> <code>DE</code>:\"Delaware\",\r\n   * <li> <code>FL</code>:\"Florida\",\r\n   * <li> <code>GA</code>:\"Georgia\",\r\n   * <li> <code>GU</code>:\"Guam\",\r\n   * <li> <code>HI</code>:\"Hawaii\",\r\n   * <li> <code>IA</code>:\"Iowa\",\r\n   * <li> <code>ID</code>:\"Idaho\",\r\n   * <li> <code>IL</code>:\"Illinois\",\r\n   * <li> <code>IN</code>:\"Indiana\",\r\n   * <li> <code>KS</code>:\"Kansas\",\r\n   * <li> <code>KY</code>:\"Kentucky\",\r\n   * <li> <code>LA</code>:\"Louisiana\",\r\n   * <li> <code>MA</code>:\"Massachusetts\",\r\n   * <li> <code>MD</code>:\"Maryland\",\r\n   * <li> <code>ME</code>:\"Maine\",\r\n   * <li> <code>MI</code>:\"Michigan\",\r\n   * <li> <code>MN</code>:\"Minnesota\",\r\n   * <li> <code>MO</code>:\"Missouri\",\r\n   * <li> <code>MS</code>:\"Mississippi\",\r\n   * <li> <code>MT</code>:\"Montana\",\r\n   * <li> <code>NC</code>:\"North Carolina\",\r\n   * <li> <code>ND</code>:\"Northmo Dakota\",\r\n   * <li> <code>NE</code>:\"Nebraska\",\r\n   * <li> <code>NH</code>:\"New Hampshire\",\r\n   * <li> <code>NJ</code>:\"New Jersey\",\r\n   * <li> <code>NM</code>:\"New Mexico\",\r\n   * <li> <code>NV</code>:\"Nevada\",\r\n   * <li> <code>NY</code>:\"New York\",\r\n   * <li> <code>OH</code>:\"Ohio\",\r\n   * <li> <code>OK</code>:\"Oklahoma\",\r\n   * <li> <code>OR</code>:\"Oregon\",\r\n   * <li> <code>PA</code>:\"Pennsylvania\",\r\n   * <li> <code>PR</code>:\"Puerto Rico\",\r\n   * <li> <code>RI</code>:\"Rhode Island\",\r\n   * <li> <code>SC</code>:\"South Carolina\",\r\n   * <li> <code>SD</code>:\"South Dakota\",\r\n   * <li> <code>TN</code>:\"Tennessee\",\r\n   * <li> <code>TX</code>:\"Texas\",\r\n   * <li> <code>UT</code>:\"Utah\",\r\n   * <li> <code>VA</code>:\"Virginia\",\r\n   * <li> <code>VI</code>:\"Virgin Islands\",\r\n   * <li> <code>VT</code>:\"Vermont\",\r\n   * <li> <code>WA</code>:\"Washington\",\r\n   * <li> <code>WI</code>:\"Wisconsin\",\r\n   * <li> <code>WV</code>:\"West Virginia\",\r\n   * <li> <code>WY</code>:\"Wyoming\"\r\n   * <br/> Canada states code list:\r\n   * <li> <code>AB</code>: \"Alberta\",\r\n   * <li> <code>BC</code>: \"British Columbia\",\r\n   * <li> <code>MB</code>: \"Manitoba\",\r\n   * <li> <code>NB</code>:\t\"New Brunswick\",\r\n   * <li> <code>NL</code>: \"Newfoundland and Labrador\",\r\n   * <li> <code>NS</code>: \"Nova Scotia\",\r\n   * <li> <code>NT</code>: \"Northwest Territories\",\r\n   * <li> <code>NU</code>: \"Nunavut\",\r\n   * <li> <code>ON</code>: \"Ontario\",\r\n   * <li> <code>PE</code>: \"Prince Edward Island\",\r\n   * <li> <code>QC</code>: \"Quebec\",\r\n   * <li> <code>SK</code>: \"Saskatchewan\",\r\n   * <li> <code>YT</code>: \"Yukon\"\r\n   * {String=\"/^([a-z]{2})(?:(?:(-)[A-Z]{2}))?$/\"}     [infos.language]      User language\r\n   * <br/>\r\n   * <br/> Language format is composed of locale using format <code>ISO 639-1</code>, with optionally the regional variation using <code>ISO 3166‑1 alpha-2</code> (separated by hyphen).\r\n   * <br/> Locale part is in lowercase, regional part is in uppercase. Examples: en, en-US, fr, fr-FR, fr-CA, es-ES, es-MX, ...\r\n   * <br/> More information about the format can be found on this <a href=\"https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes\">link</a>.\r\n   * {String}          [infos.timezone]      User timezone name\r\n   * <br/> Allowed values: one of the timezone names defined in <a href=\"https://www.iana.org/time-zones\">IANA tz database</a>\r\n   * <br/> Timezone name are composed as follow: <code>Area/Location</code> (ex: Europe/Paris, America/New_York,...)\r\n   * {String=free,basic,advanced} [infos.accountType=free]  User subscription type\r\n   * {String[]=guest,user,admin,bp_admin,bp_finance,company_support,all_company_channels_admin,public_channels_admin,closed_channels_admin,app_admin,app_support,app_superadmin,directory_admin,support,superadmin} [infos.roles='[\"user\"]']   List of user roles\r\n   * <br/>\r\n   * <br/>The general rule is that a user must have the roles that the wants to assign to someone else.\r\n   * <br/>Examples:\r\n   * <ul>\r\n   *     <li>an <code>admin</code> can add or remove the role <code>admin</code> to another user of the company(ies) he manages,</li>\r\n   *     <li>an <code>bp_admin</code> can add or remove the role <code>bp_admin</code> to another user of the company(ies) he manages,</li>\r\n   *     <li>an <code>app_superadmin</code> can add or remove the role <code>app_superadmin</code> to another user...</li>\r\n   * </ul>\r\n   * Here are some explanations regarding the roles available in Rainbow:\r\n   * <ul>\r\n   * <li><code>admin</code>, <code>bp_admin</code> and <code>bp_finance</code> roles are related to company management (and resources linked to companies, such as users, systems, subscriptions, ...).</li>\r\n   * <li><code>bp_admin</code> and <code>bp_finance</code> roles can only be set to users of a BP company (company with isBP=true).</li>\r\n   * <li><code>app_admin</code>, <code>app_support</code> and <code>app_superadmin</code> roles are related to application management.</li>\r\n   * <li><code>all_company_channels_admin</code>, <code>public_channels_admin</code> and <code>closed_channels_admin</code> roles are related to channels management.</li>\r\n   * <li>Only <code>superadmin</code> can set <code>superadmin</code> and <code>support</code> roles to a user.</li>\r\n   * <li>A user with admin rights (admin, bp_admin, superadmin) can't change his own roles, except for roles related to channels (<code>all_company_channels_admin</code>, <code>public_channels_admin</code> and <code>closed_channels_admin</code>).</li>\r\n   * </ul>\r\n   * {String=organization_admin,company_admin,site_admin} [infos.adminType]  Mandatory if roles array contains <code>admin</code> role: specifies at which entity level the administrator has admin rights in the hierarchy ORGANIZATIONS/COMPANIES/SITES/SYSTEMS\r\n   * {String}  [infos.companyId]             User company unique identifier (like 569ce8c8f9336c471b98eda1)\r\n   * <br/> companyName field is automatically filled on server side based on companyId.\r\n   * {Boolean} [infos.isActive=true]         Is user active\r\n   * {Boolean} [infos.isInitialized=false]   Is user initialized\r\n   * {String=private,public,closed,isolated,none} [infos.visibility]  User visibility\r\n   * </br> Define if the user can be searched by users being in other company and if the user can search users being in other companies.\r\n   * - `public`: User can be searched by external users / can search external users. User can invite external users / can be invited by external users\r\n   * - `private`: User **can't** be searched by external users / can search external users. User can invite external users / can be invited by external users\r\n   * - `closed`: User **can't** be searched by external users / **can't** search external users. User can invite external users / can be invited by external users\r\n   * - `isolated`: User **can't** be searched by external users / **can't** search external users. User **can't** invite external users / **can't** be invited by external users\r\n   * - `none`:  Default value reserved for guest. User **can't** be searched by **any users** (even within the same company) / can search external users. User can invite external users / can be invited by external users\r\n   * <br/>External users mean 'public user not being in user's company nor user's organisation nor a company visible by user's company.\r\n   * {Number} [infos.timeToLive] Duration in second to wait before automatically starting a user deletion from the creation date.\r\n   * <br/> Once the timeToLive has been reached, the user won't be usable to use APIs anymore (error 401523). His account may then be deleted from the database at any moment.\r\n   * <br/> Value -1 means timeToLive is disable (i.e. user account will not expire).\r\n   * <br/> If created user has role <code>guest</code> and no timeToLive is provided, a default value of 172800 seconds is set (48 hours).\r\n   * <br/> If created user does not have role <code>guest</code> and no timeToLive is provided, a default value of -1 is set (no expiration).\r\n   * {String=DEFAULT,RAINBOW,SAML} [infos.authenticationType] User authentication type (if not set company default authentication will be used)\r\n   * {String{0..64}}  [infos.userInfo1]      Free field that admin can use to link their users to their IS/IT tools / to perform analytics (this field is output in the CDR file)\r\n   * {String{0..64}}  [infos.userInfo2]      2nd Free field that admin can use to link their users to their IS/IT tools / to perform analytics (this field is output in the CDR file)\r\n   *\r\n   * @async\r\n   * @return {Promise<Object, ErrorManager>}\r\n   * @fulfil {Object} - Json object containing informations or an error object depending on the result\r\n   * @category async\r\n   */\n\n\n  updateContactInfos(userId, infos) {\n    let that = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        const propertiesToSave = [\"loginEmail\", \"password\", \"phoneNumbers\", \"country\", \"number\", \"type\", \"deviceType\", \"shortNumber\", \"systemId\", \"internalNumber\", \"firstName\", \"lastName\", \"nickName\", \"title\", \"jobTitle\", \"tags\", \"emails\", \"country\", \"state\", \"language\", \"timezone\", \"accountType\", \"roles\", \"adminType\", \"companyId\", \"isActive\", \"isInitialized\", \"visibility\", \"timeToLive\", \"authenticationType\", \"userInfo1\", \"userInfo2\"];\n        let data = {};\n        let infosProperties = Object.keys(infos);\n        propertiesToSave.forEach(propname => {\n          if (infosProperties.find(iter => {\n            return iter === propname;\n          })) {\n            data[propname] = infos[propname];\n          }\n        });\n        /*\r\n        if (infosProperties[\"loginEmail\"] != undefined) data[\"loginEmail\"] = infos[\"loginEmail\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"password\"] = infos[\"password\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"phoneNumbers\"] = infos[\"phoneNumbers\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"country\"] = infos[\"country\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"number\"] = infos[\"number\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"type\"] = infos[\"type\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"deviceType\"] = infos[\"deviceType\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"shortNumber\"] = infos[\"shortNumber\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"systemId\"] = infos[\"systemId\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"internalNumber\"] = infos[\"internalNumber\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"firstName\"] = infos[\"firstName\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"lastName\"] = infos[\"lastName\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"nickName\"] = infos[\"nickName\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"title\"] = infos[\"title\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"jobTitle\"] = infos[\"jobTitle\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"tags\"] = infos[\"tags\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"emails\"] = infos[\"emails\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"country\"] = infos[\"country\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"state\"] = infos[\"state\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"language\"] = infos[\"language\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"timezone\"] = infos[\"timezone\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"accountType\"] = infos[\"accountType\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"roles\"] = infos[\"roles\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"adminType\"] = infos[\"adminType\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"companyId\"] = infos[\"companyId\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"isActive\"] = infos[\"isActive\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"isInitialized \"] = infos[\"isInitialized\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"visibility\"] = infos[\"visibility\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"timeToLive\"] = infos[\"timeToLive\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"authenticationType\"] = infos[\"authenticationType\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"userInfo1\"] = infos[\"userInfo1\"];\r\n        if (infosProperties[\"password\"] != undefined) data[\"userInfo2\"] = infos[\"userInfo2\"];\r\n         */\n\n        that._rest.putContactInfos(userId, data).then(result => {\n          that._logger.log(\"debug\", LOG_ID + \"(updateContactInfos) Successfully put all infos\");\n\n          that._logger.log(\"internal\", LOG_ID + \"(updateContactInfos) : result : \", result);\n\n          resolve(result);\n        }).catch(function (err) {\n          that._logger.log(\"internalerror\", LOG_ID + \"(updateContactInfos) ErrorManager when put infos\", err);\n\n          that._logger.log(\"error\", LOG_ID + \"(updateContactInfos) ErrorManager when put infos\");\n\n          return reject(err);\n        });\n      } catch (err) {\n        return reject(err);\n      }\n    });\n  }\n\n};\nAdmin = __decorate([Utils_1.logEntryExit(LOG_ID), Utils_1.isStarted([])\n/**\r\n * @module\r\n * @name Admin\r\n * @version 1.67.1 \r\n * @public\r\n * @description\r\n *      This module handles the management of users. Using it, You will be able to create new users, to modify information of users and to delete them.<br>\r\n *      This module can be use too to create Guest users who are specific temporaly users that can be used in Rainbow.\r\n *      <br><br>\r\n *      The main methods proposed in that module allow to: <br>\r\n *      - Create a new user in a specified company <br>\r\n *      - Modify information of an existing user <br>\r\n *      - Delete an existing user <br>\r\n *      - Invite a user in Rainbow <br>\r\n *      - Change the password of a user <br>\r\n *      - Create a guest user\r\n */\n], Admin);\nexports.AdminService = Admin;\nmodule.exports.AdminService = Admin;","map":{"version":3,"sources":["../../src/lib/services/AdminService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ErrorManager_1 = require(\"../common/ErrorManager\");\r\nconst Utils_1 = require(\"../common/Utils\");\r\nconst LOG_ID = \"ADMIN/SVCE - \";\r\nlet Admin = \r\n/**\r\n * @module\r\n * @name Admin\r\n * @version 1.67.1 \r\n * @public\r\n * @description\r\n *      This module handles the management of users. Using it, You will be able to create new users, to modify information of users and to delete them.<br>\r\n *      This module can be use too to create Guest users who are specific temporaly users that can be used in Rainbow.\r\n *      <br><br>\r\n *      The main methods proposed in that module allow to: <br>\r\n *      - Create a new user in a specified company <br>\r\n *      - Modify information of an existing user <br>\r\n *      - Delete an existing user <br>\r\n *      - Invite a user in Rainbow <br>\r\n *      - Change the password of a user <br>\r\n *      - Create a guest user\r\n */\r\nclass Admin {\r\n    constructor(_eventEmitter, _logger, _startConfig) {\r\n        this.ready = false;\r\n        this._startConfig = _startConfig;\r\n        this._xmpp = null;\r\n        this._rest = null;\r\n        this._s2s = null;\r\n        this._options = {};\r\n        this._useXMPP = false;\r\n        this._useS2S = false;\r\n        this._eventEmitter = _eventEmitter;\r\n        this._logger = _logger;\r\n        this.ready = false;\r\n    }\r\n    get startConfig() {\r\n        return this._startConfig;\r\n    }\r\n    start(_options, _core) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                that._xmpp = _core._xmpp;\r\n                that._rest = _core._rest;\r\n                that._options = _options;\r\n                that._s2s = _core._s2s;\r\n                that._useXMPP = that._options.useXMPP;\r\n                that._useS2S = that._options.useS2S;\r\n                that.ready = true;\r\n                resolve();\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(start) error : \", err);\r\n                return reject();\r\n            }\r\n        });\r\n    }\r\n    stop() {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                that._xmpp = null;\r\n                that._rest = null;\r\n                that.ready = false;\r\n                resolve();\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(stop) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method createCompany\r\n     * @instance\r\n     * @description\r\n     *      Create a company\r\n     * @param {string} strName The name of the new company\r\n     * @param {string} country Company country (ISO 3166-1 alpha3 format, size 3 car)\r\n     * @param {string} state (optionnal if not USA)  define a state when country is 'USA' ([\"ALASKA\", \"....\", \"NEW_YORK\", \"....\", \"WYOMING\"] ), else it is not managed by server. Default value on server side: ALABAMA\r\n     * @async\r\n     * @return {Promise<Object, ErrorManager>}\r\n     * @fulfil {Object} - Created Company or an error object depending on the result\r\n     * @category async\r\n     */\r\n    createCompany(strName, country, state) {\r\n        let that = this;\r\n        that._logger.log(\"internal\", LOG_ID + \"(createCompany) parameters : strName : \", strName, \", country : \", country);\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                if (!strName) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createCompany) bad or empty 'strName' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                that._rest.createCompany(strName, country, state).then((company) => {\r\n                    that._logger.log(\"internal\", LOG_ID + \"(createCompany) Successfully created company : \", strName);\r\n                    resolve(company);\r\n                }).catch((err) => {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createCompany) ErrorManager when creating\");\r\n                    that._logger.log(\"internalerror\", LOG_ID + \"(createCompany) ErrorManager when creating : \", strName);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(createCompany) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Remove a user from a company\r\n     * @private\r\n     */\r\n    removeUserFromCompany(user) {\r\n        let that = this;\r\n        return that.deleteUser(user.id);\r\n    }\r\n    /**\r\n     * Set the visibility for a company\r\n     * @private\r\n     */\r\n    setVisibilityForCompany(company, visibleByCompany) {\r\n        let that = this;\r\n        that._logger.log(\"internal\", LOG_ID + \"(setVisibilityForCompany) parameters : company : \", company);\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                if (!company) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(setVisibilityForCompany) bad or empty 'company' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                if (!visibleByCompany) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(setVisibilityForCompany) bad or empty 'visibleByCompany' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                that._rest.setVisibilityForCompany(company.id, visibleByCompany.id).then((user) => {\r\n                    that._logger.log(\"internal\", LOG_ID + \"(setVisibilityForCompany) Successfully set visibility for company : \", company);\r\n                    resolve(user);\r\n                }).catch((err) => {\r\n                    that._logger.log(\"error\", LOG_ID + \"(setVisibilityForCompany) ErrorManager when set visibility for company\");\r\n                    that._logger.log(\"internalerror\", LOG_ID + \"(setVisibilityForCompany) ErrorManager when set visibility for company : \", company);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"error\", LOG_ID + \"(setVisibilityForCompany) _exiting_\");\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method createUserInCompany\r\n     * @instance\r\n     * @description\r\n     *      Create a new user in a given company\r\n     * @param {string} email The email of the user to create\r\n     * @param {string} password The associated password\r\n     * @param {string} firstname The user firstname\r\n     * @param {string} lastname  The user lastname\r\n     * @param {string} [companyId=\"user company\"] The Id of the company where to create the user or the connected user company if null\r\n     * @param {string} [language=\"en-US\"] The language of the user. Default is `en-US`. Can be fr-FR, de-DE...\r\n     * @param {boolean} [isCompanyAdmin=false] True to create the user with the right to manage the company (`companyAdmin`). False by default.\r\n     * @param {Array<string>} [roles] The roles the created user.\r\n     * @async\r\n     * @return {Promise<Contact, ErrorManager>}\r\n     * @fulfil {Contact} - Created contact in company or an error object depending on the result\r\n     * @category async\r\n     */\r\n    createUserInCompany(email, password, firstname, lastname, companyId, language, isCompanyAdmin, roles) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                language = language || \"en-US\";\r\n                let isAdmin = isCompanyAdmin || false;\r\n                if (!email) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createUserInCompany) bad or empty 'email' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                if (!password) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createUserInCompany) bad or empty 'password' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                if (!firstname) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createUserInCompany) bad or empty 'firstname' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                if (!lastname) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createUserInCompany) bad or empty 'lastname' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                that._rest.createUser(email, password, firstname, lastname, companyId, language, isAdmin, roles).then((user) => {\r\n                    that._logger.log(\"debug\", LOG_ID + \"(createUserInCompany) Successfully created user for account : \", email);\r\n                    resolve(user);\r\n                }).catch((err) => {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createUserInCompany) ErrorManager when creating user for account \");\r\n                    that._logger.log(\"internalerror\", LOG_ID + \"(createUserInCompany) ErrorManager when creating user for account : \", email);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(createUserInCompany) error : \", err);\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method createGuestUser\r\n     * @instance\r\n     * @description\r\n     *      Create a new guest user in the same company as the requester admin\r\n     * @param {string} firstname The user firstname\r\n     * @param {string} lastname  The user lastname\r\n     * @param {string} [language=\"en-US\"] The language of the user. Default is `en-US`. Can be fr-FR, de-DE...\r\n     * @param {Number} [timeToLive] Allow to provide a duration in second to wait before starting a user deletion from the creation date\r\n     * @async\r\n     * @return {Promise<Object, ErrorManager>}\r\n     * @fulfil {Object} - Created guest user in company or an error object depending on the result\r\n     * @category async\r\n     */\r\n    createGuestUser(firstname, lastname, language, timeToLive) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                language = language || \"en-US\";\r\n                if (!firstname) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createGuestUser) bad or empty 'firstname' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                if (!lastname) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createGuestUser) bad or empty 'lastname' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                if (timeToLive && isNaN(timeToLive)) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createGuestUser) bad or empty 'timeToLive' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                that._rest.createGuestUser(firstname, lastname, language, timeToLive).then((user) => {\r\n                    that._logger.log(\"debug\", LOG_ID + \"(createGuestUser) Successfully created guest user for account : \", user.loginEmail);\r\n                    resolve(user);\r\n                }).catch((err) => {\r\n                    that._logger.log(\"error\", LOG_ID + `(createGuestUser) Error when creating guest user`);\r\n                    that._logger.log(\"internalerror\", LOG_ID + `(createGuestUser) Error when creating guest user with firstname: ${firstname}, lastname: ${lastname}`);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(createGuestUser) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method createAnonymousGuestUser\r\n     * @since 1.31\r\n     * @instance\r\n     * @description\r\n     *      Create a new anonymous guest user in the same company as the requester admin\r\n     *      Anonymous guest user is user without name and firstname\r\n     * @param {Number} [timeToLive] Allow to provide a duration in second to wait before starting a user deletion from the creation date\r\n     * @async\r\n     * @return {Promise<Object, ErrorManager>}\r\n     * @fulfil {Object} - Created anonymous guest user in company or an error object depending on the result\r\n     * @category async\r\n     */\r\n    createAnonymousGuestUser(timeToLive) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                if (timeToLive && isNaN(timeToLive)) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createAnonymousGuestUser) bad or empty 'timeToLive' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                that._rest.createGuestUser(null, null, null, timeToLive).then((user) => {\r\n                    that._logger.log(\"internal\", LOG_ID + \"(createAnonymousGuestUser) Successfully created guest user for account : \", user.loginEmail);\r\n                    resolve(user);\r\n                }).catch((err) => {\r\n                    that._logger.log(\"error\", LOG_ID + \"(createAnonymousGuestUser) ErrorManager when creating anonymous guest user\");\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(createAnonymousGuestUser) error : \", err);\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method inviteUserInCompany\r\n     * @instance\r\n     * @description\r\n     *      Invite a new user to join a company in Rainbow\r\n     * @param {string} email The email address of the contact to invite\r\n     * @param {string} companyId     The id of the company where the user will be invited in\r\n     * @param {string} [language=\"en-US\"]  The language of the message to send. Default is `en-US`\r\n     * @param {string} [message=\"\"] A custom message to send\r\n     * @async\r\n     * @return {Promise<Object, ErrorManager>}\r\n     * @fulfil {Object} - Created invitation or an error object depending on the result\r\n     * @category async\r\n     */\r\n    inviteUserInCompany(email, companyId, language, message) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                language = language || \"en-US\";\r\n                message = message || null;\r\n                if (!email) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(inviteUserInCompany) bad or empty 'email' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                if (!companyId) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(inviteUserInCompany) bad or empty 'companyId' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                that._rest.inviteUser(email, companyId, language, message).then((user) => {\r\n                    that._logger.log(\"internal\", LOG_ID + \"(inviteUserInCompany) Successfully inviting user for account : \", email);\r\n                    resolve(user);\r\n                }).catch((err) => {\r\n                    that._logger.log(\"error\", LOG_ID + \"(inviteUserInCompany) ErrorManager when inviting user for account\");\r\n                    that._logger.log(\"internalerror\", LOG_ID + \"(inviteUserInCompany) ErrorManager when inviting user for account : \", email, \", error : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(inviteUserInCompany) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method changePasswordForUser\r\n     * @instance\r\n     * @description\r\n     *      Change a password for a user\r\n     * @param {string} password The new password\r\n     * @param {string} userId The id of the user\r\n     * @async\r\n     * @return {Promise<Object, ErrorManager>}\r\n     * @fulfil {Object} - Updated user or an error object depending on the result\r\n     * @category async\r\n     */\r\n    changePasswordForUser(password, userId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                if (!password) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(changePasswordToUser) bad or empty 'password' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                if (!userId) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(changePasswordToUser) bad or empty 'userId' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                that._rest.changePassword(password, userId).then((user) => {\r\n                    that._logger.log(\"internal\", LOG_ID + \"(changePasswordToUser) Successfully changing password for user account : \", userId);\r\n                    resolve(user);\r\n                }).catch((err) => {\r\n                    that._logger.log(\"error\", LOG_ID + \"(changePasswordToUser) ErrorManager when changing password for user account\");\r\n                    that._logger.log(\"internalerror\", LOG_ID + \"(changePasswordToUser) ErrorManager when changing password for user account : \", userId);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(changePasswordToUser) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method updateInformationForUser\r\n     * @instance\r\n     * @description\r\n     *      Change information of a user. Fields that can be changed: `firstName`, `lastName`, `nickName`, `title`, `jobTitle`, `country`, `language`, `timezone`, `emails`\r\n     * @param {Object} objData An object (key: value) containing the data to change with their new value\r\n     * @param {string} userId The id of the user\r\n     * @async\r\n     * @return {Promise<Object, ErrorManager>}\r\n     * @fulfil {Object} - Updated user or an error object depending on the result\r\n     * @category async\r\n     */\r\n    updateInformationForUser(objData, userId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                if (!objData) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(updateInformationForUser) bad or empty 'objData' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                if (\"loginEmail\" in objData) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(updateInformationForUser) can't change the loginEmail with that API\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                if (\"password\" in objData) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(updateInformationForUser) can't change the password with that API\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                that._rest.updateInformation(objData, userId).then((user) => {\r\n                    that._logger.log(\"internal\", LOG_ID + \"(updateInformationForUser) Successfully changing information for user account : \", userId);\r\n                    resolve(user);\r\n                }).catch((err) => {\r\n                    that._logger.log(\"error\", LOG_ID + \"(updateInformationForUser) ErrorManager when changing information for user account\");\r\n                    that._logger.log(\"internalerror\", LOG_ID + \"(updateInformationForUser) ErrorManager when changing information for user account : \", userId);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(updateInformationForUser) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method deleteUser\r\n     * @instance\r\n     * @description\r\n     *      Delete an existing user\r\n     * @param {string} userId The id of the user\r\n     * @async\r\n     * @return {Promise<Object, ErrorManager>}\r\n     * @fulfil {Object} - Deleted user or an error object depending on the result\r\n     * @category async\r\n     */\r\n    deleteUser(userId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                if (!userId) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(deleteUser) bad or empty 'userId' parameter\");\r\n                    reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);\r\n                    return;\r\n                }\r\n                that._rest.deleteUser(userId).then((user) => {\r\n                    that._logger.log(\"debug\", LOG_ID + \"(deleteUser) Successfully deleting user account \");\r\n                    that._logger.log(\"internal\", LOG_ID + \"(deleteUser) Successfully deleting user : \", user);\r\n                    resolve(user);\r\n                }).catch((err) => {\r\n                    that._logger.log(\"error\", LOG_ID + \"(deleteUser) ErrorManager when deleting user account : \", userId);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(deleteUser) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method getAllCompanies\r\n     * @instance\r\n     * @description\r\n     *      Get all companies for a given admin\r\n     * @async\r\n     * @return {Promise<Object, ErrorManager>}\r\n     * @fulfil {Object} - Json object containing with all companies (companyId and companyName) or an error object depending on the result\r\n     * @category async\r\n     */\r\n    getAllCompanies() {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                that._rest.getAllCompanies().then((companies) => {\r\n                    that._logger.log(\"debug\", LOG_ID + \"(getAllCompanies) Successfully get all companies\");\r\n                    that._logger.log(\"internal\", LOG_ID + \"(getAllCompanies) : companies values : \", companies.data);\r\n                    resolve(companies);\r\n                }).catch(function (err) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(getAllCompanies) ErrorManager when get All companies\");\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(getAllCompanies) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * get a company\r\n     * @private\r\n     */\r\n    getCompanyById(companyId) {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                that._rest.getCompany(companyId).then((company) => {\r\n                    that._logger.log(\"debug\", LOG_ID + \"(getCompanyById) Successfully get a company\");\r\n                    that._logger.log(\"internal\", LOG_ID + \"(getCompanyById) : companies values : \", company.data);\r\n                    resolve(company.data);\r\n                }).catch((err) => {\r\n                    that._logger.log(\"error\", LOG_ID + \"(getCompanyById) ErrorManager when get a company\");\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(getCompanyById) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Remove a company\r\n     * @private\r\n     */\r\n    removeCompany(company) {\r\n        let that = this;\r\n        this._logger.log(\"internal\", LOG_ID + \"(deleteCompany) parameters : company : \", company);\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                that._rest.deleteCompany(company.id).then((companies) => {\r\n                    that._logger.log(\"debug\", LOG_ID + \"(deleteCompany) Successfully remove company\");\r\n                    that._logger.log(\"internal\", LOG_ID + \"(deleteCompany) : companies values : \", companies.data);\r\n                    resolve(companies);\r\n                }).catch(function (err) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(deleteCompany) ErrorManager when removing company\");\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(deleteCompany) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method askTokenOnBehalf\r\n     * @instance\r\n     * @description\r\n     *      Ask Rainbow for a token on behalf a user\r\n     *      This allow to not use the secret key on client side\r\n     * @param {string} loginEmail The user login email\r\n     * @param {string} password The user password\r\n     * @async\r\n     * @return {Promise<Object, Error>}\r\n     * @fulfil {Object} - Json object containing the user data, application data and token\r\n     * @category async\r\n     */\r\n    askTokenOnBehalf(loginEmail, password) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                that._rest.askTokenOnBehalf(loginEmail, password).then(json => {\r\n                    that._logger.log(\"debug\", LOG_ID + \"(getGuestOrUserToken) Successfully logged-in a user\");\r\n                    that._logger.log(\"internal\", LOG_ID + \"(getGuestOrUserToken) : user data : \", json);\r\n                    resolve(json);\r\n                }).catch(function (err) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(getGuestOrUserToken) Error when getting a token\");\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(getGuestOrUserToken) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method getAllUsers\r\n     * @instance\r\n     * @description\r\n     *      Get all users for a given admin\r\n     * @async\r\n     * @param {string} format Allows to retrieve more or less user details in response.\r\n     *   small: id, loginEmail, firstName, lastName, displayName, companyId, companyName, isTerminated\r\n     *   medium: id, loginEmail, firstName, lastName, displayName, jid_im, jid_tel, companyId, companyName, lastUpdateDate, lastAvatarUpdateDate, isTerminated, guestMode\r\n     *   full: all user fields\r\n     * @param {number} offset Allow to specify the position of first user to retrieve (first user if not specified). Warning: if offset > total, no results are returned.\r\n     * @param {number} limit Allow to specify the number of users to retrieve (default=100).\r\n     * @param {string} sortField Sort user list based on the given field (default=\"loginEmail\").\r\n     * @return {Promise<Object, ErrorManager>}\r\n     * @fulfil {Array} - Array of Json object containing users or an error object depending on the result\r\n     * @category async\r\n     */\r\n    getAllUsers(format = \"small\", offset = 0, limit = 100, sortField = \"loginEmail\") {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                that._rest.getAllUsers(format, offset, limit, sortField).then((users) => {\r\n                    that._logger.log(\"debug\", LOG_ID + \"(getAllUsers) Successfully get all companies\");\r\n                    that._logger.log(\"internal\", LOG_ID + \"(getAllUsers) : companies values : \", users.data);\r\n                    resolve(users.data);\r\n                }).catch(function (err) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(getAllUsers) ErrorManager when get All companies\");\r\n                    that._logger.log(\"internalerror\", LOG_ID + \"(getAllUsers) ErrorManager when get All companies : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"internalerror\", LOG_ID + \"(getAllUsers) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method getContactInfos\r\n     * @instance\r\n     * @description\r\n     *      Get informations about a user\r\n     * @param {string} userId The id of the user\r\n     * @async\r\n     * @return {Promise<Object, ErrorManager>}\r\n     * @fulfil {Object} - Json object containing informations or an error object depending on the result\r\n     * @category async\r\n     */\r\n    getContactInfos(userId) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                that._rest.getContactInfos(userId).then((result) => {\r\n                    that._logger.log(\"debug\", LOG_ID + \"(getContactInfos) Successfully get Contact Infos\");\r\n                    that._logger.log(\"internal\", LOG_ID + \"(getContactInfos) : result : \", result);\r\n                    resolve(result);\r\n                }).catch(function (err) {\r\n                    that._logger.log(\"error\", LOG_ID + \"(getContactInfos) ErrorManager when get contact infos \");\r\n                    that._logger.log(\"internalerror\", LOG_ID + \"(getContactInfos) ErrorManager when get contact infos : \", err);\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                that._logger.log(\"error\", LOG_ID + \"(getContactInfos) error : \", err);\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @method updateContactInfos\r\n     * @instance\r\n     * @description\r\n     *      Set informations about a user\r\n     * @param {string} userId The id of the user\r\n     * @param {Object} infos The infos of the user :\r\n     * {String{3..255}}  [infos.loginEmail]      User email address (used for login).\r\n     * <br/> Must be unique (409 error is returned if a user already exists with the same email address).\r\n     *  {String{8..64}}   [infos.password]        User password.\r\n     * <br/> Rules: more than 8 characters, at least 1 capital letter, 1 number, 1 special character.\r\n     * {String{1..255}}  [infos.firstName]     User first name\r\n     * {String{1..255}}  [infos.lastName]      User last name\r\n     * {String{1..255}}  [infos.nickName]      User nickName\r\n     * {String{1..40}}   [infos.title]         User title (honorifics title, like Mr, Mrs, Sir, Lord, Lady, Dr, Prof,...)\r\n     * {String{1..255}}  [infos.jobTitle]      User job title\r\n     * {String[]{1..64}} [infos.tags]          An Array of free tags associated to the user.\r\n     * <br/> A maximum of 5 tags is allowed, each tag can have a maximum length of 64 characters.\r\n     * <br/> `tags` can only be set by users who have administrator rights on the user. The user can't modify the tags.\r\n     * <br/> The tags are visible by the user and all users belonging to his organisation/company, and can be used with\r\n     * the search API to search the user based on his tags.\r\n     * {Object[]}           [infos.emails]        Array of user emails addresses objects\r\n     * {String{3..255}}          [infos.emails.email]    User email address\r\n     * {String=home,work,other}  [infos.emails.type]     User email type\r\n     * {Object[]}           [infos.phoneNumbers]  Array of user phone numbers objects\r\n     * <br/>\r\n     * <br/><u><i>Note:</i></u> For each provided number, the server tries to compute the associated E.164 number (<code>numberE164</code> field) using provided PhoneNumber country if available, user country otherwise.\r\n     * If <code>numberE164</code> can't be computed, an error 400 is returned (ex: wrong phone number, phone number not matching country code, ...)\r\n     * {String{1..32}}   [infos.phoneNumbers.number]    User phone number (as entered by user)\r\n     * {String{3}}       [infos.phoneNumbers.country]   Phone number country (ISO 3166-1 alpha3 format). Used to compute numberE164 field from number field.\r\n     * <br/>\r\n     * <br/>If not provided, user country is used by default.\r\n     * {String=home,work,other}              phoneNumbers.type           Phone number type\r\n     * {String=landline,mobile,fax,other}    phoneNumbers.deviceType     Phone number device type\r\n     * {String{3}}       [infos.country]       User country (ISO 3166-1 alpha3 format)\r\n     * {String=null,\"AA\",\"AE\",\"AP\",\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"PR\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VI\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\",\"AB\",\"BC\",\"MB\",\"NB\",\"NL\",\"NS\",\"NT\",\"NU\",\"ON\",\"PE\",\"QC\",\"SK\",\"YT\"} [infos.state] When country is 'USA' or 'CAN', a state can be defined. Else it is not managed.\r\n     * <br/> USA states code list:\r\n     * <li> <code>AA</code>:\"Armed Forces America\",\r\n     * <li> <code>AE</code>:\"Armed Forces\",\r\n     * <li> <code>AP</code>:\"Armed Forces Pacific\",\r\n     * <li> <code>AK</code>:\"Alaska\",\r\n     * <li> <code>AL</code>:\"Alabama\",\r\n     * <li> <code>AR</code>:\"Arkansas\",\r\n     * <li> <code>AZ</code>:\"Arizona\",\r\n     * <li> <code>CA</code>:\"California\",\r\n     * <li> <code>CO</code>:\"Colorado\",\r\n     * <li> <code>CT</code>:\"Connecticut\",\r\n     * <li> <code>DC</code>:\"Washington DC\",\r\n     * <li> <code>DE</code>:\"Delaware\",\r\n     * <li> <code>FL</code>:\"Florida\",\r\n     * <li> <code>GA</code>:\"Georgia\",\r\n     * <li> <code>GU</code>:\"Guam\",\r\n     * <li> <code>HI</code>:\"Hawaii\",\r\n     * <li> <code>IA</code>:\"Iowa\",\r\n     * <li> <code>ID</code>:\"Idaho\",\r\n     * <li> <code>IL</code>:\"Illinois\",\r\n     * <li> <code>IN</code>:\"Indiana\",\r\n     * <li> <code>KS</code>:\"Kansas\",\r\n     * <li> <code>KY</code>:\"Kentucky\",\r\n     * <li> <code>LA</code>:\"Louisiana\",\r\n     * <li> <code>MA</code>:\"Massachusetts\",\r\n     * <li> <code>MD</code>:\"Maryland\",\r\n     * <li> <code>ME</code>:\"Maine\",\r\n     * <li> <code>MI</code>:\"Michigan\",\r\n     * <li> <code>MN</code>:\"Minnesota\",\r\n     * <li> <code>MO</code>:\"Missouri\",\r\n     * <li> <code>MS</code>:\"Mississippi\",\r\n     * <li> <code>MT</code>:\"Montana\",\r\n     * <li> <code>NC</code>:\"North Carolina\",\r\n     * <li> <code>ND</code>:\"Northmo Dakota\",\r\n     * <li> <code>NE</code>:\"Nebraska\",\r\n     * <li> <code>NH</code>:\"New Hampshire\",\r\n     * <li> <code>NJ</code>:\"New Jersey\",\r\n     * <li> <code>NM</code>:\"New Mexico\",\r\n     * <li> <code>NV</code>:\"Nevada\",\r\n     * <li> <code>NY</code>:\"New York\",\r\n     * <li> <code>OH</code>:\"Ohio\",\r\n     * <li> <code>OK</code>:\"Oklahoma\",\r\n     * <li> <code>OR</code>:\"Oregon\",\r\n     * <li> <code>PA</code>:\"Pennsylvania\",\r\n     * <li> <code>PR</code>:\"Puerto Rico\",\r\n     * <li> <code>RI</code>:\"Rhode Island\",\r\n     * <li> <code>SC</code>:\"South Carolina\",\r\n     * <li> <code>SD</code>:\"South Dakota\",\r\n     * <li> <code>TN</code>:\"Tennessee\",\r\n     * <li> <code>TX</code>:\"Texas\",\r\n     * <li> <code>UT</code>:\"Utah\",\r\n     * <li> <code>VA</code>:\"Virginia\",\r\n     * <li> <code>VI</code>:\"Virgin Islands\",\r\n     * <li> <code>VT</code>:\"Vermont\",\r\n     * <li> <code>WA</code>:\"Washington\",\r\n     * <li> <code>WI</code>:\"Wisconsin\",\r\n     * <li> <code>WV</code>:\"West Virginia\",\r\n     * <li> <code>WY</code>:\"Wyoming\"\r\n     * <br/> Canada states code list:\r\n     * <li> <code>AB</code>: \"Alberta\",\r\n     * <li> <code>BC</code>: \"British Columbia\",\r\n     * <li> <code>MB</code>: \"Manitoba\",\r\n     * <li> <code>NB</code>:\t\"New Brunswick\",\r\n     * <li> <code>NL</code>: \"Newfoundland and Labrador\",\r\n     * <li> <code>NS</code>: \"Nova Scotia\",\r\n     * <li> <code>NT</code>: \"Northwest Territories\",\r\n     * <li> <code>NU</code>: \"Nunavut\",\r\n     * <li> <code>ON</code>: \"Ontario\",\r\n     * <li> <code>PE</code>: \"Prince Edward Island\",\r\n     * <li> <code>QC</code>: \"Quebec\",\r\n     * <li> <code>SK</code>: \"Saskatchewan\",\r\n     * <li> <code>YT</code>: \"Yukon\"\r\n     * {String=\"/^([a-z]{2})(?:(?:(-)[A-Z]{2}))?$/\"}     [infos.language]      User language\r\n     * <br/>\r\n     * <br/> Language format is composed of locale using format <code>ISO 639-1</code>, with optionally the regional variation using <code>ISO 3166‑1 alpha-2</code> (separated by hyphen).\r\n     * <br/> Locale part is in lowercase, regional part is in uppercase. Examples: en, en-US, fr, fr-FR, fr-CA, es-ES, es-MX, ...\r\n     * <br/> More information about the format can be found on this <a href=\"https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes\">link</a>.\r\n     * {String}          [infos.timezone]      User timezone name\r\n     * <br/> Allowed values: one of the timezone names defined in <a href=\"https://www.iana.org/time-zones\">IANA tz database</a>\r\n     * <br/> Timezone name are composed as follow: <code>Area/Location</code> (ex: Europe/Paris, America/New_York,...)\r\n     * {String=free,basic,advanced} [infos.accountType=free]  User subscription type\r\n     * {String[]=guest,user,admin,bp_admin,bp_finance,company_support,all_company_channels_admin,public_channels_admin,closed_channels_admin,app_admin,app_support,app_superadmin,directory_admin,support,superadmin} [infos.roles='[\"user\"]']   List of user roles\r\n     * <br/>\r\n     * <br/>The general rule is that a user must have the roles that the wants to assign to someone else.\r\n     * <br/>Examples:\r\n     * <ul>\r\n     *     <li>an <code>admin</code> can add or remove the role <code>admin</code> to another user of the company(ies) he manages,</li>\r\n     *     <li>an <code>bp_admin</code> can add or remove the role <code>bp_admin</code> to another user of the company(ies) he manages,</li>\r\n     *     <li>an <code>app_superadmin</code> can add or remove the role <code>app_superadmin</code> to another user...</li>\r\n     * </ul>\r\n     * Here are some explanations regarding the roles available in Rainbow:\r\n     * <ul>\r\n     * <li><code>admin</code>, <code>bp_admin</code> and <code>bp_finance</code> roles are related to company management (and resources linked to companies, such as users, systems, subscriptions, ...).</li>\r\n     * <li><code>bp_admin</code> and <code>bp_finance</code> roles can only be set to users of a BP company (company with isBP=true).</li>\r\n     * <li><code>app_admin</code>, <code>app_support</code> and <code>app_superadmin</code> roles are related to application management.</li>\r\n     * <li><code>all_company_channels_admin</code>, <code>public_channels_admin</code> and <code>closed_channels_admin</code> roles are related to channels management.</li>\r\n     * <li>Only <code>superadmin</code> can set <code>superadmin</code> and <code>support</code> roles to a user.</li>\r\n     * <li>A user with admin rights (admin, bp_admin, superadmin) can't change his own roles, except for roles related to channels (<code>all_company_channels_admin</code>, <code>public_channels_admin</code> and <code>closed_channels_admin</code>).</li>\r\n     * </ul>\r\n     * {String=organization_admin,company_admin,site_admin} [infos.adminType]  Mandatory if roles array contains <code>admin</code> role: specifies at which entity level the administrator has admin rights in the hierarchy ORGANIZATIONS/COMPANIES/SITES/SYSTEMS\r\n     * {String}  [infos.companyId]             User company unique identifier (like 569ce8c8f9336c471b98eda1)\r\n     * <br/> companyName field is automatically filled on server side based on companyId.\r\n     * {Boolean} [infos.isActive=true]         Is user active\r\n     * {Boolean} [infos.isInitialized=false]   Is user initialized\r\n     * {String=private,public,closed,isolated,none} [infos.visibility]  User visibility\r\n     * </br> Define if the user can be searched by users being in other company and if the user can search users being in other companies.\r\n     * - `public`: User can be searched by external users / can search external users. User can invite external users / can be invited by external users\r\n     * - `private`: User **can't** be searched by external users / can search external users. User can invite external users / can be invited by external users\r\n     * - `closed`: User **can't** be searched by external users / **can't** search external users. User can invite external users / can be invited by external users\r\n     * - `isolated`: User **can't** be searched by external users / **can't** search external users. User **can't** invite external users / **can't** be invited by external users\r\n     * - `none`:  Default value reserved for guest. User **can't** be searched by **any users** (even within the same company) / can search external users. User can invite external users / can be invited by external users\r\n     * <br/>External users mean 'public user not being in user's company nor user's organisation nor a company visible by user's company.\r\n     * {Number} [infos.timeToLive] Duration in second to wait before automatically starting a user deletion from the creation date.\r\n     * <br/> Once the timeToLive has been reached, the user won't be usable to use APIs anymore (error 401523). His account may then be deleted from the database at any moment.\r\n     * <br/> Value -1 means timeToLive is disable (i.e. user account will not expire).\r\n     * <br/> If created user has role <code>guest</code> and no timeToLive is provided, a default value of 172800 seconds is set (48 hours).\r\n     * <br/> If created user does not have role <code>guest</code> and no timeToLive is provided, a default value of -1 is set (no expiration).\r\n     * {String=DEFAULT,RAINBOW,SAML} [infos.authenticationType] User authentication type (if not set company default authentication will be used)\r\n     * {String{0..64}}  [infos.userInfo1]      Free field that admin can use to link their users to their IS/IT tools / to perform analytics (this field is output in the CDR file)\r\n     * {String{0..64}}  [infos.userInfo2]      2nd Free field that admin can use to link their users to their IS/IT tools / to perform analytics (this field is output in the CDR file)\r\n     *\r\n     * @async\r\n     * @return {Promise<Object, ErrorManager>}\r\n     * @fulfil {Object} - Json object containing informations or an error object depending on the result\r\n     * @category async\r\n     */\r\n    updateContactInfos(userId, infos) {\r\n        let that = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                const propertiesToSave = [\"loginEmail\", \"password\", \"phoneNumbers\", \"country\", \"number\", \"type\", \"deviceType\", \"shortNumber\", \"systemId\", \"internalNumber\",\r\n                    \"firstName\", \"lastName\", \"nickName\", \"title\", \"jobTitle\", \"tags\", \"emails\", \"country\", \"state\", \"language\", \"timezone\",\r\n                    \"accountType\", \"roles\", \"adminType\", \"companyId\", \"isActive\", \"isInitialized\", \"visibility\", \"timeToLive\", \"authenticationType\", \"userInfo1\", \"userInfo2\"\r\n                ];\r\n                let data = {};\r\n                let infosProperties = Object.keys(infos);\r\n                propertiesToSave.forEach((propname) => {\r\n                    if (infosProperties.find((iter) => {\r\n                        return iter === propname;\r\n                    })) {\r\n                        data[propname] = infos[propname];\r\n                    }\r\n                });\r\n                /*\r\n                if (infosProperties[\"loginEmail\"] != undefined) data[\"loginEmail\"] = infos[\"loginEmail\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"password\"] = infos[\"password\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"phoneNumbers\"] = infos[\"phoneNumbers\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"country\"] = infos[\"country\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"number\"] = infos[\"number\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"type\"] = infos[\"type\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"deviceType\"] = infos[\"deviceType\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"shortNumber\"] = infos[\"shortNumber\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"systemId\"] = infos[\"systemId\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"internalNumber\"] = infos[\"internalNumber\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"firstName\"] = infos[\"firstName\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"lastName\"] = infos[\"lastName\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"nickName\"] = infos[\"nickName\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"title\"] = infos[\"title\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"jobTitle\"] = infos[\"jobTitle\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"tags\"] = infos[\"tags\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"emails\"] = infos[\"emails\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"country\"] = infos[\"country\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"state\"] = infos[\"state\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"language\"] = infos[\"language\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"timezone\"] = infos[\"timezone\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"accountType\"] = infos[\"accountType\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"roles\"] = infos[\"roles\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"adminType\"] = infos[\"adminType\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"companyId\"] = infos[\"companyId\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"isActive\"] = infos[\"isActive\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"isInitialized \"] = infos[\"isInitialized\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"visibility\"] = infos[\"visibility\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"timeToLive\"] = infos[\"timeToLive\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"authenticationType\"] = infos[\"authenticationType\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"userInfo1\"] = infos[\"userInfo1\"];\r\n                if (infosProperties[\"password\"] != undefined) data[\"userInfo2\"] = infos[\"userInfo2\"];\r\n                 */\r\n                that._rest.putContactInfos(userId, data).then((result) => {\r\n                    that._logger.log(\"debug\", LOG_ID + \"(updateContactInfos) Successfully put all infos\");\r\n                    that._logger.log(\"internal\", LOG_ID + \"(updateContactInfos) : result : \", result);\r\n                    resolve(result);\r\n                }).catch(function (err) {\r\n                    that._logger.log(\"internalerror\", LOG_ID + \"(updateContactInfos) ErrorManager when put infos\", err);\r\n                    that._logger.log(\"error\", LOG_ID + \"(updateContactInfos) ErrorManager when put infos\");\r\n                    return reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                return reject(err);\r\n            }\r\n        });\r\n    }\r\n};\r\nAdmin = __decorate([\r\n    Utils_1.logEntryExit(LOG_ID),\r\n    Utils_1.isStarted([])\r\n    /**\r\n     * @module\r\n     * @name Admin\r\n     * @version 1.67.1 \r\n     * @public\r\n     * @description\r\n     *      This module handles the management of users. Using it, You will be able to create new users, to modify information of users and to delete them.<br>\r\n     *      This module can be use too to create Guest users who are specific temporaly users that can be used in Rainbow.\r\n     *      <br><br>\r\n     *      The main methods proposed in that module allow to: <br>\r\n     *      - Create a new user in a specified company <br>\r\n     *      - Modify information of an existing user <br>\r\n     *      - Delete an existing user <br>\r\n     *      - Invite a user in Rainbow <br>\r\n     *      - Change the password of a user <br>\r\n     *      - Create a guest user\r\n     */\r\n], Admin);\r\nexports.AdminService = Admin;\r\nmodule.exports.AdminService = Admin;\r\n//# sourceMappingURL=AdminService.js.map"]},"metadata":{},"sourceType":"script"}