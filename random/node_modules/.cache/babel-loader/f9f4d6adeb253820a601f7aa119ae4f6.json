{"ast":null,"code":"'use strict';\n\nvar http = require('http');\n\nvar urlParse = require('url').parse;\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar humanize = require('humanize-number');\n\nvar chalk = require('chalk');\n\nvar monkeypatch = require('monkeypatch');\n\nvar colorCodes = {\n  5: 'red',\n  4: 'yellow',\n  3: 'cyan',\n  2: 'green',\n  1: 'green'\n};\n\nfunction time(start) {\n  var delta = new Date() - start;\n  delta = delta < 10000 ? delta + 'ms' : Math.round(delta / 1000) + 's';\n  return humanize(delta);\n}\n\nfunction defaultHandler(request, options, cb) {\n  options = typeof options === 'string' ? urlParse(options) : options;\n  var url = options.href || (options.protocol || 'http:') + '//' + (options.host || options.hostname) + options.path;\n  var method = (options.method || 'GET').toUpperCase();\n  var signature = method + ' ' + url;\n  var start = new Date();\n  var wasHandled = typeof cb === 'function';\n  setImmediate(console.log, chalk.gray('      → ' + signature));\n  return request(options, cb).on('response', function (response) {\n    // Workaround for res._dump in Node.JS http client\n    // https://github.com/nodejs/node/blob/20285ad17755187ece16b8a5effeaa87f5407da2/lib/_http_client.js#L421-L427\n    if (!wasHandled && EventEmitter.listenerCount(response.req, 'response') === 0) {\n      response.resume();\n    }\n\n    var status = response.statusCode;\n    var s = status / 100 | 0;\n    console.log('  ' + chalk[colorCodes[s]](status) + ' ← ' + signature + ' ' + chalk.gray(time(start)));\n  }).on('error', function (err) {\n    console.log('  ' + chalk.red('xxx') + ' ← ' + signature + ' ' + chalk.red(err.message));\n  });\n}\n\nmodule.exports = function debugHttp(fn) {\n  fn = fn || defaultHandler;\n\n  if (typeof fn !== 'function') {\n    throw new TypeError('Expected a function as request handler');\n  }\n\n  monkeypatch(http, 'request', fn);\n};","map":{"version":3,"sources":["C:/Users/HP/Desktop/KanScrubs/random/node_modules/debug-http/index.js"],"names":["http","require","urlParse","parse","EventEmitter","humanize","chalk","monkeypatch","colorCodes","time","start","delta","Date","Math","round","defaultHandler","request","options","cb","url","href","protocol","host","hostname","path","method","toUpperCase","signature","wasHandled","setImmediate","console","log","gray","on","response","listenerCount","req","resume","status","statusCode","s","err","red","message","module","exports","debugHttp","fn","TypeError"],"mappings":"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","sourcesContent":["'use strict';\n\nvar http = require('http');\nvar urlParse = require('url').parse;\nvar EventEmitter = require('events').EventEmitter;\nvar humanize = require('humanize-number');\nvar chalk = require('chalk');\nvar monkeypatch = require('monkeypatch');\n\nvar colorCodes = {\n\t5: 'red',\n\t4: 'yellow',\n\t3: 'cyan',\n\t2: 'green',\n\t1: 'green'\n};\n\nfunction time(start) {\n\tvar delta = new Date() - start;\n\tdelta = delta < 10000 ? delta + 'ms' : Math.round(delta / 1000) + 's';\n\treturn humanize(delta);\n}\n\nfunction defaultHandler(request, options, cb) {\n\toptions = typeof options === 'string' ? urlParse(options) : options;\n\n\tvar url = options.href || (options.protocol || 'http:') + '//' + (options.host || options.hostname) + options.path;\n\tvar method = (options.method || 'GET').toUpperCase();\n\tvar signature = method + ' ' + url;\n\tvar start = new Date();\n\tvar wasHandled = typeof cb === 'function';\n\n\tsetImmediate(console.log, chalk.gray('      → ' + signature));\n\n\treturn request(options, cb)\n\t\t.on('response', function (response) {\n\t\t\t// Workaround for res._dump in Node.JS http client\n\t\t\t// https://github.com/nodejs/node/blob/20285ad17755187ece16b8a5effeaa87f5407da2/lib/_http_client.js#L421-L427\n\t\t\tif (!wasHandled && EventEmitter.listenerCount(response.req, 'response') === 0) {\n\t\t\t\tresponse.resume();\n\t\t\t}\n\n\t\t\tvar status = response.statusCode;\n\t\t\tvar s = status / 100 | 0;\n\t\t\tconsole.log('  ' + chalk[colorCodes[s]](status) + ' ← ' + signature + ' ' + chalk.gray(time(start)));\n\t\t})\n\t\t.on('error', function (err) {\n\t\t\tconsole.log('  ' + chalk.red('xxx') + ' ← ' + signature + ' ' + chalk.red(err.message));\n\t\t});\n}\n\nmodule.exports = function debugHttp(fn) {\n\tfn = fn || defaultHandler;\n\n\tif (typeof fn !== 'function') {\n\t\tthrow new TypeError('Expected a function as request handler');\n\t}\n\n\tmonkeypatch(http, 'request', fn);\n};\n"]},"metadata":{},"sourceType":"script"}